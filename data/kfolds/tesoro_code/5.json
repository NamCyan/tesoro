{"id":119,"original_code":"private void reduceList(Site site, Map<String, String> zapRelations, \n    \t\tMap<String, Vulnerability> groupVulnerabilities) throws MalformedURLException {\n        \/**\n         * De las vulnerabilidades encontradas las mapeamos a objetos\n         * y las agrupamos por tipo de vulnerabilidad y url\n         *\/\n    \tfor (Alert alert: site.getAlerts()) {\n    \t\tString nameVuln = zapRelations.get(alert.getPluginid());\n    \t\tif(StringUtils.isBlank(nameVuln)){\n        \t\tVulnerability vulnerability = new Vulnerability();\n        \t\tvulnerability.setName(Constantes.COMMON_MESSAGE_NOT_FOUND + alert.getName());\n                vulnerability.setShortName(alert.getName());                \n                vulnerability.setLongName(alert.getName());\n                \/\/TODO: Convertir la serveridad\n                vulnerability.setSeverity(alert.getRiskdesc().replaceAll(\"\\\\(.*\\\\)\", \"\").trim());\n                vulnerability.setCwe(Integer.parseInt(alert.getCweid()));\n                for(Endpoint endPointZap : alert.getInstances()){\n                \tif(!vulnerability.getEndpoint().stream().anyMatch(obj -> obj.getUrl().equals(getUrlWithoutParameters(endPointZap.getUrl())) \n            \t\t\t\t&& obj.getMethod().equals(endPointZap.getMethod()))){                \t\t\n            \t\t\tvulnerability.getEndpoint().add(new Endpoint(endPointZap.getMethod(), getUrlWithoutParameters(endPointZap.getUrl())));\n            \t\t}\n                }\n                groupVulnerabilities.put(vulnerability.getName(), vulnerability);\n        \t} else if(groupVulnerabilities.containsKey(nameVuln)){\n        \t\tVulnerability vulnerability = groupVulnerabilities.get(nameVuln);\n        \t\tfor(Endpoint endPointZap : alert.getInstances()){\n        \t\t\tif(!vulnerability.getEndpoint().stream().anyMatch(obj -> obj.getUrl().equals(getUrlWithoutParameters(endPointZap.getUrl())) \n            \t\t\t\t&& obj.getMethod().equals(endPointZap.getMethod()))){                \t\t\n            \t\t\tvulnerability.getEndpoint().add(new Endpoint(endPointZap.getMethod(), getUrlWithoutParameters(endPointZap.getUrl())));\n            \t\t}\n                }\n        \t} else {\n        \t\tVulnerability vulnerability = new Vulnerability();\n        \t\tvulnerability.setShortName(alert.getName());                \n                vulnerability.setLongName(alert.getName());\n                \/\/TODO: Convertir la serveridad\n                vulnerability.setSeverity(alert.getRiskdesc().replaceAll(\"\\\\(.*\\\\)\", \"\"));\n                vulnerability.setCwe(Integer.parseInt(alert.getCweid()));\n                for(Endpoint endPointZap : alert.getInstances()){\n                \tif(!vulnerability.getEndpoint().stream().anyMatch(obj -> obj.getUrl().equals(getUrlWithoutParameters(endPointZap.getUrl())) \n            \t\t\t\t&& obj.getMethod().equals(endPointZap.getMethod()))){                \t\t\n            \t\t\tvulnerability.getEndpoint().add(new Endpoint(endPointZap.getMethod(), getUrlWithoutParameters(endPointZap.getUrl())));\n            \t\t}\n                }\n                groupVulnerabilities.put(vulnerability.getName(), vulnerability);\n        \t} \n    \t}\n    }","code_wo_comment":"private void reduceList(Site site, Map<String, String> zapRelations, \n    \t\tMap<String, Vulnerability> groupVulnerabilities) throws MalformedURLException {\n       \n    \tfor (Alert alert: site.getAlerts()) {\n    \t\tString nameVuln = zapRelations.get(alert.getPluginid());\n    \t\tif(StringUtils.isBlank(nameVuln)){\n        \t\tVulnerability vulnerability = new Vulnerability();\n        \t\tvulnerability.setName(Constantes.COMMON_MESSAGE_NOT_FOUND + alert.getName());\n                vulnerability.setShortName(alert.getName());                \n                vulnerability.setLongName(alert.getName());\n               \n                vulnerability.setSeverity(alert.getRiskdesc().replaceAll(\"\\\\(.*\\\\)\", \"\").trim());\n                vulnerability.setCwe(Integer.parseInt(alert.getCweid()));\n                for(Endpoint endPointZap : alert.getInstances()){\n                \tif(!vulnerability.getEndpoint().stream().anyMatch(obj -> obj.getUrl().equals(getUrlWithoutParameters(endPointZap.getUrl())) \n            \t\t\t\t&& obj.getMethod().equals(endPointZap.getMethod()))){                \t\t\n            \t\t\tvulnerability.getEndpoint().add(new Endpoint(endPointZap.getMethod(), getUrlWithoutParameters(endPointZap.getUrl())));\n            \t\t}\n                }\n                groupVulnerabilities.put(vulnerability.getName(), vulnerability);\n        \t} else if(groupVulnerabilities.containsKey(nameVuln)){\n        \t\tVulnerability vulnerability = groupVulnerabilities.get(nameVuln);\n        \t\tfor(Endpoint endPointZap : alert.getInstances()){\n        \t\t\tif(!vulnerability.getEndpoint().stream().anyMatch(obj -> obj.getUrl().equals(getUrlWithoutParameters(endPointZap.getUrl())) \n            \t\t\t\t&& obj.getMethod().equals(endPointZap.getMethod()))){                \t\t\n            \t\t\tvulnerability.getEndpoint().add(new Endpoint(endPointZap.getMethod(), getUrlWithoutParameters(endPointZap.getUrl())));\n            \t\t}\n                }\n        \t} else {\n        \t\tVulnerability vulnerability = new Vulnerability();\n        \t\tvulnerability.setShortName(alert.getName());                \n                vulnerability.setLongName(alert.getName());\n               \n                vulnerability.setSeverity(alert.getRiskdesc().replaceAll(\"\\\\(.*\\\\)\", \"\"));\n                vulnerability.setCwe(Integer.parseInt(alert.getCweid()));\n                for(Endpoint endPointZap : alert.getInstances()){\n                \tif(!vulnerability.getEndpoint().stream().anyMatch(obj -> obj.getUrl().equals(getUrlWithoutParameters(endPointZap.getUrl())) \n            \t\t\t\t&& obj.getMethod().equals(endPointZap.getMethod()))){                \t\t\n            \t\t\tvulnerability.getEndpoint().add(new Endpoint(endPointZap.getMethod(), getUrlWithoutParameters(endPointZap.getUrl())));\n            \t\t}\n                }\n                groupVulnerabilities.put(vulnerability.getName(), vulnerability);\n        \t} \n    \t}\n    }","cleancode":"private void reducelist(site site, map<string, string> zaprelations, map<string, vulnerability> groupvulnerabilities) throws malformedurlexception { for (alert alert: site.getalerts()) { string namevuln = zaprelations.get(alert.getpluginid()); if(stringutils.isblank(namevuln)){ vulnerability vulnerability = new vulnerability(); vulnerability.setname(constantes.common_message_not_found + alert.getname()); vulnerability.setshortname(alert.getname()); vulnerability.setlongname(alert.getname()); vulnerability.setseverity(alert.getriskdesc().replaceall(\"\\\\(.*\\\\)\", \"\").trim()); vulnerability.setcwe(integer.parseint(alert.getcweid())); for(endpoint endpointzap : alert.getinstances()){ if(!vulnerability.getendpoint().stream().anymatch(obj -> obj.geturl().equals(geturlwithoutparameters(endpointzap.geturl())) && obj.getmethod().equals(endpointzap.getmethod()))){ vulnerability.getendpoint().add(new endpoint(endpointzap.getmethod(), geturlwithoutparameters(endpointzap.geturl()))); } } groupvulnerabilities.put(vulnerability.getname(), vulnerability); } else if(groupvulnerabilities.containskey(namevuln)){ vulnerability vulnerability = groupvulnerabilities.get(namevuln); for(endpoint endpointzap : alert.getinstances()){ if(!vulnerability.getendpoint().stream().anymatch(obj -> obj.geturl().equals(geturlwithoutparameters(endpointzap.geturl())) && obj.getmethod().equals(endpointzap.getmethod()))){ vulnerability.getendpoint().add(new endpoint(endpointzap.getmethod(), geturlwithoutparameters(endpointzap.geturl()))); } } } else { vulnerability vulnerability = new vulnerability(); vulnerability.setshortname(alert.getname()); vulnerability.setlongname(alert.getname()); vulnerability.setseverity(alert.getriskdesc().replaceall(\"\\\\(.*\\\\)\", \"\")); vulnerability.setcwe(integer.parseint(alert.getcweid())); for(endpoint endpointzap : alert.getinstances()){ if(!vulnerability.getendpoint().stream().anymatch(obj -> obj.geturl().equals(geturlwithoutparameters(endpointzap.geturl())) && obj.getmethod().equals(endpointzap.getmethod()))){ vulnerability.getendpoint().add(new endpoint(endpointzap.getmethod(), geturlwithoutparameters(endpointzap.geturl()))); } } groupvulnerabilities.put(vulnerability.getname(), vulnerability); } } }","repo":"hackshieldteam\/sisifo","label":[0,1,0,0]}
{"id":24712,"original_code":"public void deleteAll(User user, Conversation conversation) {\n\/\/\t\tTODO: optimize\n\t\tmessageRepository.getAllBySenderAndConversation(user, conversation)\n\t\t\t\t.stream()\n\t\t\t\t.parallel()\n\t\t\t\t.forEach(this::delete);\n\t}","code_wo_comment":"public void deleteAll(User user, Conversation conversation) {\n\t\tmessageRepository.getAllBySenderAndConversation(user, conversation)\n\t\t\t\t.stream()\n\t\t\t\t.parallel()\n\t\t\t\t.forEach(this::delete);\n\t}","cleancode":"public void deleteall(user user, conversation conversation) { messagerepository.getallbysenderandconversation(user, conversation) .stream() .parallel() .foreach(this::delete); }","repo":"ivanjermakov\/letter-core","label":[1,0,0,0]}
{"id":24736,"original_code":"@Test\n    public void testLANG1292() {\n        \/\/ Prior to fix, this was throwing StringIndexOutOfBoundsException\n        Wrap.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \"\n                + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \"\n                + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", 70);\n    }","code_wo_comment":"@Test\n    public void testLANG1292() {\n       \n        Wrap.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \"\n                + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \"\n                + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", 70);\n    }","cleancode":"@test public void testlang1292() { wrap.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", 70); }","repo":"jgallimore\/crest","label":[0,0,1,0]}
{"id":24737,"original_code":"@Test\n    public void testLANG1397() {\n        \/\/ Prior to fix, this was throwing StringIndexOutOfBoundsException\n        Wrap.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \"\n                + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \"\n                + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", Integer.MAX_VALUE);\n    }","code_wo_comment":"@Test\n    public void testLANG1397() {\n       \n        Wrap.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \"\n                + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \"\n                + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", Integer.MAX_VALUE);\n    }","cleancode":"@test public void testlang1397() { wrap.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", integer.max_value); }","repo":"jgallimore\/crest","label":[0,0,1,0]}
{"id":16576,"original_code":"public void dumpDecrements(Block block, RCTracker increments) {\n    \/\/ TODO: can we guarantee that the refcount var is available in the\n    \/\/       current scope?\n    for (RefCountType rcType: RefcountPass.RC_TYPES) {\n      for (Entry<AliasKey, Long> e: increments.rcIter(rcType, RCDir.DECR)) {\n        assert (e.getValue() <= 0);\n        Var var = increments.getRefCountVar(e.getKey());\n        if (RefCounting.trackRefCount(var, rcType)) {\n          Arg amount = Arg.newInt(e.getValue() * -1);\n          block.addCleanup(var, RefCountOp.decrRef(rcType, var, amount));\n        }\n      }\n    }\n    \/\/ Clear out all decrements\n    increments.resetAll(RCDir.DECR);\n  }","code_wo_comment":"public void dumpDecrements(Block block, RCTracker increments) {\n   \n   \n    for (RefCountType rcType: RefcountPass.RC_TYPES) {\n      for (Entry<AliasKey, Long> e: increments.rcIter(rcType, RCDir.DECR)) {\n        assert (e.getValue() <= 0);\n        Var var = increments.getRefCountVar(e.getKey());\n        if (RefCounting.trackRefCount(var, rcType)) {\n          Arg amount = Arg.newInt(e.getValue() * -1);\n          block.addCleanup(var, RefCountOp.decrRef(rcType, var, amount));\n        }\n      }\n    }\n   \n    increments.resetAll(RCDir.DECR);\n  }","cleancode":"public void dumpdecrements(block block, rctracker increments) { for (refcounttype rctype: refcountpass.rc_types) { for (entry<aliaskey, long> e: increments.rciter(rctype, rcdir.decr)) { assert (e.getvalue() <= 0); var var = increments.getrefcountvar(e.getkey()); if (refcounting.trackrefcount(var, rctype)) { arg amount = arg.newint(e.getvalue() * -1); block.addcleanup(var, refcountop.decrref(rctype, var, amount)); } } } increments.resetall(rcdir.decr); }","repo":"hsphcdm\/swift-t","label":[1,0,0,0]}
{"id":16577,"original_code":"public void dumpIncrements(Statement stmt, Block block,\n      ListIterator<Statement> stmtIt, RCTracker increments) {\n    for (RefCountType rcType: RefcountPass.RC_TYPES) {\n      for (Entry<AliasKey, Long> e: increments.rcIter(rcType, RCDir.INCR)) {\n        \/\/ TODO: can we guarantee that the refcount var is available in the\n        \/\/       current scope?\n        Var var = increments.getRefCountVar(e.getKey());\n        assert(var != null);\n        Long incr = e.getValue();\n        assert(incr >= 0);\n        if (incr > 0 && RefCounting.trackRefCount(var, rcType)) {\n          boolean varInit = stmt != null &&\n                   stmt.type() == StatementType.INSTRUCTION &&\n                   stmt.instruction().isInitialized(var);\n          \/\/ TODO: what if not initialized in a conditional? Should insert before\n          if (stmt != null &&\n                  (stmt.type() == StatementType.INSTRUCTION &&\n                  !(var.storage() == Alloc.ALIAS && varInit))) {\n            insertIncrBefore(block, stmtIt, var, incr, rcType);\n          } else {\n            insertIncrAfter(block, stmtIt, var, incr, rcType);\n          }\n        }\n      }\n    }\n    \/\/ Clear out all increments\n    increments.resetAll(RCDir.INCR);\n  }","code_wo_comment":"public void dumpIncrements(Statement stmt, Block block,\n      ListIterator<Statement> stmtIt, RCTracker increments) {\n    for (RefCountType rcType: RefcountPass.RC_TYPES) {\n      for (Entry<AliasKey, Long> e: increments.rcIter(rcType, RCDir.INCR)) {\n       \n       \n        Var var = increments.getRefCountVar(e.getKey());\n        assert(var != null);\n        Long incr = e.getValue();\n        assert(incr >= 0);\n        if (incr > 0 && RefCounting.trackRefCount(var, rcType)) {\n          boolean varInit = stmt != null &&\n                   stmt.type() == StatementType.INSTRUCTION &&\n                   stmt.instruction().isInitialized(var);\n         \n          if (stmt != null &&\n                  (stmt.type() == StatementType.INSTRUCTION &&\n                  !(var.storage() == Alloc.ALIAS && varInit))) {\n            insertIncrBefore(block, stmtIt, var, incr, rcType);\n          } else {\n            insertIncrAfter(block, stmtIt, var, incr, rcType);\n          }\n        }\n      }\n    }\n   \n    increments.resetAll(RCDir.INCR);\n  }","cleancode":"public void dumpincrements(statement stmt, block block, listiterator<statement> stmtit, rctracker increments) { for (refcounttype rctype: refcountpass.rc_types) { for (entry<aliaskey, long> e: increments.rciter(rctype, rcdir.incr)) { var var = increments.getrefcountvar(e.getkey()); assert(var != null); long incr = e.getvalue(); assert(incr >= 0); if (incr > 0 && refcounting.trackrefcount(var, rctype)) { boolean varinit = stmt != null && stmt.type() == statementtype.instruction && stmt.instruction().isinitialized(var); if (stmt != null && (stmt.type() == statementtype.instruction && !(var.storage() == alloc.alias && varinit))) { insertincrbefore(block, stmtit, var, incr, rctype); } else { insertincrafter(block, stmtit, var, incr, rctype); } } } } increments.resetall(rcdir.incr); }","repo":"hsphcdm\/swift-t","label":[1,0,0,0]}
{"id":24810,"original_code":"public static void main(String args[]) throws FileNotFoundException {\n        \/\/ TODO: use sane arg parsing\n        if (args.length != 2) {\n            throw new RuntimeException(\"usage: AnalyzeMethodEntry trace-in trace-out\");\n        }\n        String inFileName = args[0];\n        String outFileName = args[1];\n        Deserializer<TraceEvent> d\n            = Deserializer.getDeserializer(new FileInputStream(inFileName),\n                                           TraceEvent.class);\n        Serializer<TraceEvent> s\n            = Serializer.getSerializer(new FileOutputStream(outFileName));\n        new AnalyzeMethodEntry(d, s).analyze();\n    }","code_wo_comment":"public static void main(String args[]) throws FileNotFoundException {\n       \n        if (args.length != 2) {\n            throw new RuntimeException(\"usage: AnalyzeMethodEntry trace-in trace-out\");\n        }\n        String inFileName = args[0];\n        String outFileName = args[1];\n        Deserializer<TraceEvent> d\n            = Deserializer.getDeserializer(new FileInputStream(inFileName),\n                                           TraceEvent.class);\n        Serializer<TraceEvent> s\n            = Serializer.getSerializer(new FileOutputStream(outFileName));\n        new AnalyzeMethodEntry(d, s).analyze();\n    }","cleancode":"public static void main(string args[]) throws filenotfoundexception { if (args.length != 2) { throw new runtimeexception(\"usage: analyzemethodentry trace-in trace-out\"); } string infilename = args[0]; string outfilename = args[1]; deserializer<traceevent> d = deserializer.getdeserializer(new fileinputstream(infilename), traceevent.class); serializer<traceevent> s = serializer.getserializer(new fileoutputstream(outfilename)); new analyzemethodentry(d, s).analyze(); }","repo":"glasser\/amock","label":[0,1,0,0]}
{"id":24886,"original_code":"@Test\n  public void testAuthRequest() throws IOException, MessageException, DiscoveryException, ConsumerException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, false, false, true);\n    HttpServletRequest req = createMockRequest(session);\n    HttpServletResponse resp = createMockResponse();\n    AuthRequest authRequest = createMockAuthRequest();\n    \/\/TODO this should return a list of what?\n    expect(mockManager.discover(eq(\"discover\"))).andReturn(Lists.newArrayList());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertFalse(consumer.authRequest(\"discover\", req, resp));\n  }","code_wo_comment":"@Test\n  public void testAuthRequest() throws IOException, MessageException, DiscoveryException, ConsumerException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, false, false, true);\n    HttpServletRequest req = createMockRequest(session);\n    HttpServletResponse resp = createMockResponse();\n    AuthRequest authRequest = createMockAuthRequest();\n   \n    expect(mockManager.discover(eq(\"discover\"))).andReturn(Lists.newArrayList());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertFalse(consumer.authRequest(\"discover\", req, resp));\n  }","cleancode":"@test public void testauthrequest() throws ioexception, messageexception, discoveryexception, consumerexception { discoveryinformation info = createmockinfo(); httpsession session = createmocksession(info, false, false, true); httpservletrequest req = createmockrequest(session); httpservletresponse resp = createmockresponse(); authrequest authrequest = createmockauthrequest(); expect(mockmanager.discover(eq(\"discover\"))).andreturn(lists.newarraylist()); expect(mockmanager.associate(anyobject(list.class))).andreturn(info); expect(mockmanager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andreturn(authrequest); replay(mockmanager); consumer = new openidconsumer(\"%origin%\/openid\/openidcallback\", mockmanager, \"mockcontextroot\", mockauthority); assertfalse(consumer.authrequest(\"discover\", req, resp)); }","repo":"isabella232\/explorer-2","label":[1,0,0,0]}
{"id":24887,"original_code":"@Test(expected = RuntimeException.class)\n  public void testAuthRequestIOException() throws IOException, MessageException, DiscoveryException, ConsumerException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, false, false, true);\n    HttpServletRequest req = createMockRequest(session);\n    HttpServletResponse resp = createMockResponse();\n    AuthRequest authRequest = createMockAuthRequest();\n    \/\/TODO this should return a list of what?\n    expect(mockManager.discover(eq(\"discover\"))).andThrow(new IOException());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertFalse(consumer.authRequest(\"discover\", req, resp));\n  }","code_wo_comment":"@Test(expected = RuntimeException.class)\n  public void testAuthRequestIOException() throws IOException, MessageException, DiscoveryException, ConsumerException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, false, false, true);\n    HttpServletRequest req = createMockRequest(session);\n    HttpServletResponse resp = createMockResponse();\n    AuthRequest authRequest = createMockAuthRequest();\n   \n    expect(mockManager.discover(eq(\"discover\"))).andThrow(new IOException());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertFalse(consumer.authRequest(\"discover\", req, resp));\n  }","cleancode":"@test(expected = runtimeexception.class) public void testauthrequestioexception() throws ioexception, messageexception, discoveryexception, consumerexception { discoveryinformation info = createmockinfo(); httpsession session = createmocksession(info, false, false, true); httpservletrequest req = createmockrequest(session); httpservletresponse resp = createmockresponse(); authrequest authrequest = createmockauthrequest(); expect(mockmanager.discover(eq(\"discover\"))).andthrow(new ioexception()); expect(mockmanager.associate(anyobject(list.class))).andreturn(info); expect(mockmanager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andreturn(authrequest); replay(mockmanager); consumer = new openidconsumer(\"%origin%\/openid\/openidcallback\", mockmanager, \"mockcontextroot\", mockauthority); assertfalse(consumer.authrequest(\"discover\", req, resp)); }","repo":"isabella232\/explorer-2","label":[1,0,0,0]}
{"id":24888,"original_code":"@Test\n  public void testVerifyResponse() throws IOException, MessageException, DiscoveryException, ConsumerException, AssociationException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, true, true, true);\n    HttpServletRequest req = createMockRequest(session);\n    AuthRequest authRequest = createMockAuthRequest();\n    AuthSuccess authSuccess = createMockAuthSuccess(createMockFetchResponse(), createRegResponse(),\n            true, true);\n    Identifier id = createMockIdentifier();\n    VerificationResult result = createMockVerificationResult(id, authSuccess);\n    \/\/TODO this should return a list of what?\n    expect(mockManager.discover(eq(\"discover\"))).andReturn(Lists.newArrayList());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    expect(mockManager.verify(eq(\"http:\/\/example.com\/request?query\"), anyObject(ParameterList.class), anyObject(DiscoveryInformation.class))).andReturn(result);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertEquals(id, consumer.verifyResponse(req));\n  }","code_wo_comment":"@Test\n  public void testVerifyResponse() throws IOException, MessageException, DiscoveryException, ConsumerException, AssociationException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, true, true, true);\n    HttpServletRequest req = createMockRequest(session);\n    AuthRequest authRequest = createMockAuthRequest();\n    AuthSuccess authSuccess = createMockAuthSuccess(createMockFetchResponse(), createRegResponse(),\n            true, true);\n    Identifier id = createMockIdentifier();\n    VerificationResult result = createMockVerificationResult(id, authSuccess);\n   \n    expect(mockManager.discover(eq(\"discover\"))).andReturn(Lists.newArrayList());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    expect(mockManager.verify(eq(\"http:\/\/example.com\/request?query\"), anyObject(ParameterList.class), anyObject(DiscoveryInformation.class))).andReturn(result);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertEquals(id, consumer.verifyResponse(req));\n  }","cleancode":"@test public void testverifyresponse() throws ioexception, messageexception, discoveryexception, consumerexception, associationexception { discoveryinformation info = createmockinfo(); httpsession session = createmocksession(info, true, true, true); httpservletrequest req = createmockrequest(session); authrequest authrequest = createmockauthrequest(); authsuccess authsuccess = createmockauthsuccess(createmockfetchresponse(), createregresponse(), true, true); identifier id = createmockidentifier(); verificationresult result = createmockverificationresult(id, authsuccess); expect(mockmanager.discover(eq(\"discover\"))).andreturn(lists.newarraylist()); expect(mockmanager.associate(anyobject(list.class))).andreturn(info); expect(mockmanager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andreturn(authrequest); expect(mockmanager.verify(eq(\"http:\/\/example.com\/request?query\"), anyobject(parameterlist.class), anyobject(discoveryinformation.class))).andreturn(result); replay(mockmanager); consumer = new openidconsumer(\"%origin%\/openid\/openidcallback\", mockmanager, \"mockcontextroot\", mockauthority); assertequals(id, consumer.verifyresponse(req)); }","repo":"isabella232\/explorer-2","label":[1,0,0,0]}
{"id":24889,"original_code":"@Test\n  public void testVerifyResponseNullIdentifier() throws IOException, MessageException, DiscoveryException, ConsumerException, AssociationException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, false, false, true);\n    HttpServletRequest req = createMockRequest(session);\n    AuthRequest authRequest = createMockAuthRequest();\n    AuthSuccess authSuccess = createMockAuthSuccess(createMockFetchResponse(), createRegResponse(),\n            true, true);\n    VerificationResult result = createMockVerificationResult(null, authSuccess);\n    \/\/TODO this should return a list of what?\n    expect(mockManager.discover(eq(\"discover\"))).andReturn(Lists.newArrayList());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    expect(mockManager.verify(eq(\"http:\/\/example.com\/request?query\"), anyObject(ParameterList.class), anyObject(DiscoveryInformation.class))).andReturn(result);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertNull(consumer.verifyResponse(req));\n  }","code_wo_comment":"@Test\n  public void testVerifyResponseNullIdentifier() throws IOException, MessageException, DiscoveryException, ConsumerException, AssociationException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, false, false, true);\n    HttpServletRequest req = createMockRequest(session);\n    AuthRequest authRequest = createMockAuthRequest();\n    AuthSuccess authSuccess = createMockAuthSuccess(createMockFetchResponse(), createRegResponse(),\n            true, true);\n    VerificationResult result = createMockVerificationResult(null, authSuccess);\n   \n    expect(mockManager.discover(eq(\"discover\"))).andReturn(Lists.newArrayList());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    expect(mockManager.verify(eq(\"http:\/\/example.com\/request?query\"), anyObject(ParameterList.class), anyObject(DiscoveryInformation.class))).andReturn(result);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertNull(consumer.verifyResponse(req));\n  }","cleancode":"@test public void testverifyresponsenullidentifier() throws ioexception, messageexception, discoveryexception, consumerexception, associationexception { discoveryinformation info = createmockinfo(); httpsession session = createmocksession(info, false, false, true); httpservletrequest req = createmockrequest(session); authrequest authrequest = createmockauthrequest(); authsuccess authsuccess = createmockauthsuccess(createmockfetchresponse(), createregresponse(), true, true); verificationresult result = createmockverificationresult(null, authsuccess); expect(mockmanager.discover(eq(\"discover\"))).andreturn(lists.newarraylist()); expect(mockmanager.associate(anyobject(list.class))).andreturn(info); expect(mockmanager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andreturn(authrequest); expect(mockmanager.verify(eq(\"http:\/\/example.com\/request?query\"), anyobject(parameterlist.class), anyobject(discoveryinformation.class))).andreturn(result); replay(mockmanager); consumer = new openidconsumer(\"%origin%\/openid\/openidcallback\", mockmanager, \"mockcontextroot\", mockauthority); assertnull(consumer.verifyresponse(req)); }","repo":"isabella232\/explorer-2","label":[1,0,0,0]}
{"id":24890,"original_code":"@Test\n  public void testVerifyResponseNoEmail() throws IOException, MessageException, DiscoveryException, ConsumerException, AssociationException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, false, false, false);\n    HttpServletRequest req = createMockRequest(session);\n    AuthRequest authRequest = createMockAuthRequest();\n    AuthSuccess authSuccess = createMockAuthSuccess(createMockFetchResponse(), createRegResponse(),\n            false, false);\n    Identifier id = createMockIdentifier();\n    VerificationResult result = createMockVerificationResult(id, authSuccess);\n    \/\/TODO this should return a list of what?\n    expect(mockManager.discover(eq(\"discover\"))).andReturn(Lists.newArrayList());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    expect(mockManager.verify(eq(\"http:\/\/example.com\/request?query\"), anyObject(ParameterList.class), anyObject(DiscoveryInformation.class))).andReturn(result);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertEquals(id, consumer.verifyResponse(req));\n    verify(authSuccess);\n    verify(session);\n  }","code_wo_comment":"@Test\n  public void testVerifyResponseNoEmail() throws IOException, MessageException, DiscoveryException, ConsumerException, AssociationException {\n    DiscoveryInformation info = createMockInfo();\n    HttpSession session = createMockSession(info, false, false, false);\n    HttpServletRequest req = createMockRequest(session);\n    AuthRequest authRequest = createMockAuthRequest();\n    AuthSuccess authSuccess = createMockAuthSuccess(createMockFetchResponse(), createRegResponse(),\n            false, false);\n    Identifier id = createMockIdentifier();\n    VerificationResult result = createMockVerificationResult(id, authSuccess);\n   \n    expect(mockManager.discover(eq(\"discover\"))).andReturn(Lists.newArrayList());\n    expect(mockManager.associate(anyObject(List.class))).andReturn(info);\n    expect(mockManager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andReturn(authRequest);\n    expect(mockManager.verify(eq(\"http:\/\/example.com\/request?query\"), anyObject(ParameterList.class), anyObject(DiscoveryInformation.class))).andReturn(result);\n    replay(mockManager);\n    consumer = new OpenIDConsumer(\"%origin%\/openid\/openidcallback\", mockManager, \"mockContextRoot\", mockAuthority);\n    assertEquals(id, consumer.verifyResponse(req));\n    verify(authSuccess);\n    verify(session);\n  }","cleancode":"@test public void testverifyresponsenoemail() throws ioexception, messageexception, discoveryexception, consumerexception, associationexception { discoveryinformation info = createmockinfo(); httpsession session = createmocksession(info, false, false, false); httpservletrequest req = createmockrequest(session); authrequest authrequest = createmockauthrequest(); authsuccess authsuccess = createmockauthsuccess(createmockfetchresponse(), createregresponse(), false, false); identifier id = createmockidentifier(); verificationresult result = createmockverificationresult(id, authsuccess); expect(mockmanager.discover(eq(\"discover\"))).andreturn(lists.newarraylist()); expect(mockmanager.associate(anyobject(list.class))).andreturn(info); expect(mockmanager.authenticate(eq(info), eq(\"http:\/\/example.com:80\/openid\/openidcallback\"))).andreturn(authrequest); expect(mockmanager.verify(eq(\"http:\/\/example.com\/request?query\"), anyobject(parameterlist.class), anyobject(discoveryinformation.class))).andreturn(result); replay(mockmanager); consumer = new openidconsumer(\"%origin%\/openid\/openidcallback\", mockmanager, \"mockcontextroot\", mockauthority); assertequals(id, consumer.verifyresponse(req)); verify(authsuccess); verify(session); }","repo":"isabella232\/explorer-2","label":[1,0,0,0]}
{"id":8549,"original_code":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <U, R> Observable<R> zipWith(ObservableSource<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends R> zipper) {\n        ObjectHelper.requireNonNull(other, \"other is null\");\n        return zip(this, other, zipper);\n    }","code_wo_comment":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <U, R> Observable<R> zipWith(ObservableSource<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends R> zipper) {\n        ObjectHelper.requireNonNull(other, \"other is null\");\n        return zip(this, other, zipper);\n    }","cleancode":"@checkreturnvalue @schedulersupport(schedulersupport.none) public final <u, r> observable<r> zipwith(observablesource<? extends u> other, bifunction<? super t, ? super u, ? extends r> zipper) { objecthelper.requirenonnull(other, \"other is null\"); return zip(this, other, zipper); }","repo":"jaysooong\/RxJava","label":[0,0,0,0]}
{"id":8550,"original_code":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <U, R> Observable<R> zipWith(ObservableSource<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends R> zipper, boolean delayError) {\n        return zip(this, other, zipper, delayError);\n    }","code_wo_comment":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <U, R> Observable<R> zipWith(ObservableSource<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends R> zipper, boolean delayError) {\n        return zip(this, other, zipper, delayError);\n    }","cleancode":"@checkreturnvalue @schedulersupport(schedulersupport.none) public final <u, r> observable<r> zipwith(observablesource<? extends u> other, bifunction<? super t, ? super u, ? extends r> zipper, boolean delayerror) { return zip(this, other, zipper, delayerror); }","repo":"jaysooong\/RxJava","label":[0,0,0,0]}
{"id":8551,"original_code":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <U, R> Observable<R> zipWith(ObservableSource<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends R> zipper, boolean delayError, int bufferSize) {\n        return zip(this, other, zipper, delayError, bufferSize);\n    }","code_wo_comment":"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final <U, R> Observable<R> zipWith(ObservableSource<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends R> zipper, boolean delayError, int bufferSize) {\n        return zip(this, other, zipper, delayError, bufferSize);\n    }","cleancode":"@checkreturnvalue @schedulersupport(schedulersupport.none) public final <u, r> observable<r> zipwith(observablesource<? extends u> other, bifunction<? super t, ? super u, ? extends r> zipper, boolean delayerror, int buffersize) { return zip(this, other, zipper, delayerror, buffersize); }","repo":"jaysooong\/RxJava","label":[0,0,0,0]}
{"id":25117,"original_code":"private void cleanProxy(SdlDisconnectedReason disconnectedReason) throws SdlException {\n\t\ttry {\n\t\t\t\/\/ ALM Specific Cleanup\n\t\t\tif (_advancedLifecycleManagementEnabled) {\n\t\t\t\t_sdlConnectionState = SdlConnectionState.SDL_DISCONNECTED;\n\t\t\t\tfirstTimeFull = true;\n\t\t\t\t\/\/ Should we wait for the interface to be unregistered?\n\t\t\t\tBoolean waitForInterfaceUnregistered = false;\n\t\t\t\t\/\/ Unregister app interface\n\t\t\t\tsynchronized(CONNECTION_REFERENCE_LOCK) {\n\t\t\t\t\tif (sdlSession != null && sdlSession.getIsConnected() && getAppInterfaceRegistered()) {\n\t\t\t\t\t\twaitForInterfaceUnregistered = true;\n\t\t\t\t\t\tunregisterAppInterfacePrivate(UNREGISTER_APP_INTERFACE_CORRELATION_ID);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\/\/ Wait for the app interface to be unregistered\n\t\t\t\tif (waitForInterfaceUnregistered) {\n\t\t\t\t\tsynchronized(APP_INTERFACE_REGISTERED_LOCK) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tAPP_INTERFACE_REGISTERED_LOCK.wait(3000);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t\/\/ Do nothing\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(rpcResponseListeners != null){\n\t\t\t\trpcResponseListeners.clear();\n\t\t\t}\n\t\t\tif(rpcNotificationListeners != null){\n\t\t\t\trpcNotificationListeners.clear(); \/\/TODO make sure we want to clear this\n\t\t\t}\n\t\t\t\/\/ Clean up SDL Connection\n\t\t\tsynchronized(CONNECTION_REFERENCE_LOCK) {\n\t\t\t\tif (sdlSession != null) sdlSession.close();\n\t\t\t}\t\t\n\t\t} catch (SdlException e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tSdlTrace.logProxyEvent(\"SdlProxy cleaned.\", SDL_LIB_TRACE_KEY);\n\t\t}\n\t}","code_wo_comment":"private void cleanProxy(SdlDisconnectedReason disconnectedReason) throws SdlException {\n\t\ttry {\n\t\t\n\t\t\tif (_advancedLifecycleManagementEnabled) {\n\t\t\t\t_sdlConnectionState = SdlConnectionState.SDL_DISCONNECTED;\n\t\t\t\tfirstTimeFull = true;\n\t\t\t\n\t\t\t\tBoolean waitForInterfaceUnregistered = false;\n\t\t\t\n\t\t\t\tsynchronized(CONNECTION_REFERENCE_LOCK) {\n\t\t\t\t\tif (sdlSession != null && sdlSession.getIsConnected() && getAppInterfaceRegistered()) {\n\t\t\t\t\t\twaitForInterfaceUnregistered = true;\n\t\t\t\t\t\tunregisterAppInterfacePrivate(UNREGISTER_APP_INTERFACE_CORRELATION_ID);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (waitForInterfaceUnregistered) {\n\t\t\t\t\tsynchronized(APP_INTERFACE_REGISTERED_LOCK) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tAPP_INTERFACE_REGISTERED_LOCK.wait(3000);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(rpcResponseListeners != null){\n\t\t\t\trpcResponseListeners.clear();\n\t\t\t}\n\t\t\tif(rpcNotificationListeners != null){\n\t\t\t\trpcNotificationListeners.clear();\n\t\t\t}\n\t\t\n\t\t\tsynchronized(CONNECTION_REFERENCE_LOCK) {\n\t\t\t\tif (sdlSession != null) sdlSession.close();\n\t\t\t}\t\t\n\t\t} catch (SdlException e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tSdlTrace.logProxyEvent(\"SdlProxy cleaned.\", SDL_LIB_TRACE_KEY);\n\t\t}\n\t}","cleancode":"private void cleanproxy(sdldisconnectedreason disconnectedreason) throws sdlexception { try { if (_advancedlifecyclemanagementenabled) { _sdlconnectionstate = sdlconnectionstate.sdl_disconnected; firsttimefull = true; boolean waitforinterfaceunregistered = false; synchronized(connection_reference_lock) { if (sdlsession != null && sdlsession.getisconnected() && getappinterfaceregistered()) { waitforinterfaceunregistered = true; unregisterappinterfaceprivate(unregister_app_interface_correlation_id); } } if (waitforinterfaceunregistered) { synchronized(app_interface_registered_lock) { try { app_interface_registered_lock.wait(3000); } catch (interruptedexception e) { } } } } if(rpcresponselisteners != null){ rpcresponselisteners.clear(); } if(rpcnotificationlisteners != null){ rpcnotificationlisteners.clear(); } synchronized(connection_reference_lock) { if (sdlsession != null) sdlsession.close(); } } catch (sdlexception e) { throw e; } finally { sdltrace.logproxyevent(\"sdlproxy cleaned.\", sdl_lib_trace_key); } }","repo":"iconcells\/healthydrive","label":[1,0,0,0]}
{"id":16985,"original_code":"@Test\n    public void testQuayGithubPublishAlternateStructure() {\n        systemExit.expectSystemExitWithStatus(Client.API_ERROR);\n        Client.main(new String[] { \"--config\", ResourceHelpers.resourceFilePath(\"config_file.txt\"), \"tool\", \"publish\", \"--entry\",\n            \"quay.io\/dockstoretestuser\/quayandgithubalternate\", \"--script\" });\n        \/\/ TODO: change the tag tag locations of Dockerfile and Dockstore.cwl, now should be able to publish\n    }","code_wo_comment":"@Test\n    public void testQuayGithubPublishAlternateStructure() {\n        systemExit.expectSystemExitWithStatus(Client.API_ERROR);\n        Client.main(new String[] { \"--config\", ResourceHelpers.resourceFilePath(\"config_file.txt\"), \"tool\", \"publish\", \"--entry\",\n            \"quay.io\/dockstoretestuser\/quayandgithubalternate\", \"--script\" });\n       \n    }","cleancode":"@test public void testquaygithubpublishalternatestructure() { systemexit.expectsystemexitwithstatus(client.api_error); client.main(new string[] { \"--config\", resourcehelpers.resourcefilepath(\"config_file.txt\"), \"tool\", \"publish\", \"--entry\", \"quay.io\/dockstoretestuser\/quayandgithubalternate\", \"--script\" }); }","repo":"garyluu\/dockstore-cli","label":[0,1,0,0]}
{"id":16986,"original_code":"@Test\n    public void testQuayBitbucketPublishAlternateStructure() {\n        systemExit.expectSystemExitWithStatus(Client.API_ERROR);\n        Client.main(new String[] { \"--config\", ResourceHelpers.resourceFilePath(\"config_file.txt\"), \"tool\", \"publish\", \"--entry\",\n            \"quay.io\/dockstoretestuser\/quayandbitbucketalternate\", \"--script\" });\n        \/\/ TODO: change the tag tag locations of Dockerfile and Dockstore.cwl, now should be able to publish\n    }","code_wo_comment":"@Test\n    public void testQuayBitbucketPublishAlternateStructure() {\n        systemExit.expectSystemExitWithStatus(Client.API_ERROR);\n        Client.main(new String[] { \"--config\", ResourceHelpers.resourceFilePath(\"config_file.txt\"), \"tool\", \"publish\", \"--entry\",\n            \"quay.io\/dockstoretestuser\/quayandbitbucketalternate\", \"--script\" });\n       \n    }","cleancode":"@test public void testquaybitbucketpublishalternatestructure() { systemexit.expectsystemexitwithstatus(client.api_error); client.main(new string[] { \"--config\", resourcehelpers.resourcefilepath(\"config_file.txt\"), \"tool\", \"publish\", \"--entry\", \"quay.io\/dockstoretestuser\/quayandbitbucketalternate\", \"--script\" }); }","repo":"garyluu\/dockstore-cli","label":[0,1,0,0]}
{"id":16991,"original_code":"@Test\n    public void testRefreshingUserMetadata() {\n        \/\/ Setup database\n        \/\/ Refresh a tool\n        Client.main(new String[] { \"--config\", ResourceHelpers.resourceFilePath(\"config_file.txt\"), \"tool\", \"refresh\", \"--entry\",\n            \"quay.io\/dockstoretestuser\/quayandbitbucket\", \"--script\" });\n        \/\/ Check that user has been updated\n        \/\/ TODO: bizarrely, the new GitHub Java API library doesn't seem to handle bio\n        \/\/final long count = testingPostgres.runSelectStatement(\"select count(*) from enduser where location='Toronto' and bio='I am a test user'\", long.class);\n        final long count = testingPostgres.runSelectStatement(\"select count(*) from user_profile where location='Toronto'\", long.class);\n        Assert.assertEquals(\"One user should have this info now, there are \" + count, 1, count);\n    }","code_wo_comment":"@Test\n    public void testRefreshingUserMetadata() {\n       \n       \n        Client.main(new String[] { \"--config\", ResourceHelpers.resourceFilePath(\"config_file.txt\"), \"tool\", \"refresh\", \"--entry\",\n            \"quay.io\/dockstoretestuser\/quayandbitbucket\", \"--script\" });\n       \n       \n       \n        final long count = testingPostgres.runSelectStatement(\"select count(*) from user_profile where location='Toronto'\", long.class);\n        Assert.assertEquals(\"One user should have this info now, there are \" + count, 1, count);\n    }","cleancode":"@test public void testrefreshingusermetadata() { client.main(new string[] { \"--config\", resourcehelpers.resourcefilepath(\"config_file.txt\"), \"tool\", \"refresh\", \"--entry\", \"quay.io\/dockstoretestuser\/quayandbitbucket\", \"--script\" }); final long count = testingpostgres.runselectstatement(\"select count(*) from user_profile where location='toronto'\", long.class); assert.assertequals(\"one user should have this info now, there are \" + count, 1, count); }","repo":"garyluu\/dockstore-cli","label":[0,0,1,0]}
{"id":654,"original_code":"public void promptForOperatorCard(String message) throws IOException {\n    framebuffer.draw((Graphics2D graphics) ->\n      baseScreenLayout(graphics,\"Insert Operator Card\", message, Color.white)\n    );\n    \/\/ TODO: Wait on the Operator Card instead\n    framebuffer.pressEnter();\n  }","code_wo_comment":"public void promptForOperatorCard(String message) throws IOException {\n    framebuffer.draw((Graphics2D graphics) ->\n      baseScreenLayout(graphics,\"Insert Operator Card\", message, Color.white)\n    );\n   \n    framebuffer.pressEnter();\n  }","cleancode":"public void promptforoperatorcard(string message) throws ioexception { framebuffer.draw((graphics2d graphics) -> basescreenlayout(graphics,\"insert operator card\", message, color.white) ); framebuffer.pressenter(); }","repo":"isabella232\/subzero","label":[0,1,0,0]}
{"id":656,"original_code":"public void removeOperatorCard(String message) throws IOException {\n    framebuffer.draw((Graphics2D graphics) ->\n      baseScreenLayout(graphics,\"Remove Operator Card\", message, Color.white)\n    );\n    \/\/ TODO: Wait on the Operator Card to be removed\n    framebuffer.pressEnter();\n    renderLoading();\n  }","code_wo_comment":"public void removeOperatorCard(String message) throws IOException {\n    framebuffer.draw((Graphics2D graphics) ->\n      baseScreenLayout(graphics,\"Remove Operator Card\", message, Color.white)\n    );\n   \n    framebuffer.pressEnter();\n    renderLoading();\n  }","cleancode":"public void removeoperatorcard(string message) throws ioexception { framebuffer.draw((graphics2d graphics) -> basescreenlayout(graphics,\"remove operator card\", message, color.white) ); framebuffer.pressenter(); renderloading(); }","repo":"isabella232\/subzero","label":[0,1,0,0]}
{"id":33435,"original_code":"@SuppressWarnings(\"unchecked\")\n\tpublic static Map<String, Object> getElasticMapping(SearchableClassMapping scm) {\n        Map<String, Object> elasticTypeMappingProperties = new LinkedHashMap<String, Object>();\n        String parentType = null;\n        if (!scm.isAll()) {\n            \/\/ \"_all\" : {\"enabled\" : true}\n            elasticTypeMappingProperties.put(\"_all\",\n                Collections.singletonMap(\"enabled\", false));\n        }\n        \/\/ Map each domain properties in supported format, or object for complex type\n        for(SearchableClassPropertyMapping scpm : scm.getPropertiesMapping()) {\n            \/\/ Does it have custom mapping?\n            GrailsDomainClassProperty property = scpm.getGrailsProperty();\n            String propType = property.getTypePropertyName();\n            Map<String, Object> propOptions = new LinkedHashMap<String, Object>();\n            \/\/ Add the custom mapping (searchable static property in domain model)\n            propOptions.putAll(scpm.getAttributes());\n            if (!(SUPPORTED_FORMAT.contains(propType))) {\n            \tLOG.debug(\"propType not supported: \" + propType + \" name: \" + property.getName());\n            \tif (scpm.isGeoPoint()) {\n            \t  propType = \"geo_point\";\n            \t}\n            \telse if (property.isBasicCollectionType()) {\n                    \/\/ Handle embedded persistent collections, ie List<String> listOfThings\n                    String basicType = ClassUtils.getShortName(property.getReferencedPropertyType()).toLowerCase(Locale.ENGLISH);\n                    if (SUPPORTED_FORMAT.contains(basicType)) {\n                        propType = basicType;\n                    }\n                \/\/ Handle arrays\n                } else if (property.getReferencedPropertyType().isArray()) {\n                    String basicType = ClassUtils.getShortName(property.getReferencedPropertyType().getComponentType()).toLowerCase(Locale.ENGLISH);\n                    if (SUPPORTED_FORMAT.contains(basicType)) {\n                        propType = basicType;\n                    }\n                } else if (isDateType(property.getReferencedPropertyType())) {\n                    propType = \"date\";\n                } else if (GrailsClassUtils.isJdk5Enum(property.getReferencedPropertyType())) {\n                    propType = \"string\";\n                } else if (scpm.getConverter() != null) {\n                    \/\/ Use 'string' type for properties with custom converter.\n                    \/\/ Arrays are automatically resolved by ElasticSearch, so no worries.\n                    propType = \"string\";\n                } else if (java.math.BigDecimal.class.isAssignableFrom(property.getReferencedPropertyType())) {\n                    propType = \"double\";\n                } else {\n                    \/\/ todo should this be string??\n                    propType = \"object\";\n                }\n                if (scpm.getReference() != null) {\n                    propType = \"object\";      \/\/ fixme: think about composite ids.\n                } else if (scpm.isComponent()) {\n                    \/\/ Proceed with nested mapping.\n                    \/\/ todo limit depth to avoid endless recursion?\n                    propType = \"object\";\n                    \/\/noinspection unchecked\n                    propOptions.putAll((Map<String, Object>)\n                            (getElasticMapping(scpm.getComponentPropertyMapping()).values().iterator().next()));\n                }\n                \/\/ Once it is an object, we need to add id & class mappings, otherwise\n                \/\/ ES will fail with NullPointer.\n                if (scpm.isComponent() || scpm.getReference() != null) {\n                    Map<String, Object> props = (Map<String, Object>) propOptions.get(\"properties\");\n                    if (props == null) {\n                        props = new LinkedHashMap<String, Object>();\n                        propOptions.put(\"properties\", props);\n                    }\n                    props.put(\"id\", defaultDescriptor(\"long\", \"not_analyzed\", true));\n                    props.put(\"class\", defaultDescriptor(\"string\", \"no\", true));\n                    props.put(\"ref\", defaultDescriptor(\"string\", \"no\", true));\n                }\n                if (scpm.isParentKey()) {\n                  parentType = property.getTypePropertyName();\n                  scm.setParent(scpm);\n                }\n            }\n            else if (scpm.isGeoPoint()) {\n              propType = \"geo_point\";\n            }\n            propOptions.put(\"type\", propType);\n            \/\/ See http:\/\/www.elasticsearch.com\/docs\/elasticsearch\/mapping\/all_field\/\n            if (!propType.equals(\"object\") && scm.isAll()) {\n                \/\/ does it make sense to include objects into _all?\n                if (scpm.shouldExcludeFromAll()) {\n                    propOptions.put(\"include_in_all\", false);\n                } else {\n                    propOptions.put(\"include_in_all\", true);\n                }\n            }\n            \/\/ todo only enable this through configuration...\n            if (propType.equals(\"string\") && scpm.isAnalyzed()) {\n                propOptions.put(\"term_vector\", \"with_positions_offsets\");\n            }\n            elasticTypeMappingProperties.put(scpm.getPropertyName(), propOptions);\n        }\n        Map<String, Object> mapping = new LinkedHashMap<String, Object>();\n        Map<String, Object> objectMapping = new LinkedHashMap<String, Object>();\n        if (parentType != null) {\n          objectMapping.put(\"_parent\", Collections.singletonMap(\"type\", parentType));\n        }\n        objectMapping.put(\"properties\", elasticTypeMappingProperties);\n        mapping.put(scm.getElasticTypeName(), objectMapping);\n        return mapping;\n    }","code_wo_comment":"@SuppressWarnings(\"unchecked\")\n\tpublic static Map<String, Object> getElasticMapping(SearchableClassMapping scm) {\n        Map<String, Object> elasticTypeMappingProperties = new LinkedHashMap<String, Object>();\n        String parentType = null;\n        if (!scm.isAll()) {\n           \n            elasticTypeMappingProperties.put(\"_all\",\n                Collections.singletonMap(\"enabled\", false));\n        }\n       \n        for(SearchableClassPropertyMapping scpm : scm.getPropertiesMapping()) {\n           \n            GrailsDomainClassProperty property = scpm.getGrailsProperty();\n            String propType = property.getTypePropertyName();\n            Map<String, Object> propOptions = new LinkedHashMap<String, Object>();\n           \n            propOptions.putAll(scpm.getAttributes());\n            if (!(SUPPORTED_FORMAT.contains(propType))) {\n            \tLOG.debug(\"propType not supported: \" + propType + \" name: \" + property.getName());\n            \tif (scpm.isGeoPoint()) {\n            \t  propType = \"geo_point\";\n            \t}\n            \telse if (property.isBasicCollectionType()) {\n                   \n                    String basicType = ClassUtils.getShortName(property.getReferencedPropertyType()).toLowerCase(Locale.ENGLISH);\n                    if (SUPPORTED_FORMAT.contains(basicType)) {\n                        propType = basicType;\n                    }\n               \n                } else if (property.getReferencedPropertyType().isArray()) {\n                    String basicType = ClassUtils.getShortName(property.getReferencedPropertyType().getComponentType()).toLowerCase(Locale.ENGLISH);\n                    if (SUPPORTED_FORMAT.contains(basicType)) {\n                        propType = basicType;\n                    }\n                } else if (isDateType(property.getReferencedPropertyType())) {\n                    propType = \"date\";\n                } else if (GrailsClassUtils.isJdk5Enum(property.getReferencedPropertyType())) {\n                    propType = \"string\";\n                } else if (scpm.getConverter() != null) {\n                   \n                   \n                    propType = \"string\";\n                } else if (java.math.BigDecimal.class.isAssignableFrom(property.getReferencedPropertyType())) {\n                    propType = \"double\";\n                } else {\n                   \n                    propType = \"object\";\n                }\n                if (scpm.getReference() != null) {\n                    propType = \"object\";     \n                } else if (scpm.isComponent()) {\n                   \n                   \n                    propType = \"object\";\n                   \n                    propOptions.putAll((Map<String, Object>)\n                            (getElasticMapping(scpm.getComponentPropertyMapping()).values().iterator().next()));\n                }\n               \n               \n                if (scpm.isComponent() || scpm.getReference() != null) {\n                    Map<String, Object> props = (Map<String, Object>) propOptions.get(\"properties\");\n                    if (props == null) {\n                        props = new LinkedHashMap<String, Object>();\n                        propOptions.put(\"properties\", props);\n                    }\n                    props.put(\"id\", defaultDescriptor(\"long\", \"not_analyzed\", true));\n                    props.put(\"class\", defaultDescriptor(\"string\", \"no\", true));\n                    props.put(\"ref\", defaultDescriptor(\"string\", \"no\", true));\n                }\n                if (scpm.isParentKey()) {\n                  parentType = property.getTypePropertyName();\n                  scm.setParent(scpm);\n                }\n            }\n            else if (scpm.isGeoPoint()) {\n              propType = \"geo_point\";\n            }\n            propOptions.put(\"type\", propType);\n           \n            if (!propType.equals(\"object\") && scm.isAll()) {\n               \n                if (scpm.shouldExcludeFromAll()) {\n                    propOptions.put(\"include_in_all\", false);\n                } else {\n                    propOptions.put(\"include_in_all\", true);\n                }\n            }\n           \n            if (propType.equals(\"string\") && scpm.isAnalyzed()) {\n                propOptions.put(\"term_vector\", \"with_positions_offsets\");\n            }\n            elasticTypeMappingProperties.put(scpm.getPropertyName(), propOptions);\n        }\n        Map<String, Object> mapping = new LinkedHashMap<String, Object>();\n        Map<String, Object> objectMapping = new LinkedHashMap<String, Object>();\n        if (parentType != null) {\n          objectMapping.put(\"_parent\", Collections.singletonMap(\"type\", parentType));\n        }\n        objectMapping.put(\"properties\", elasticTypeMappingProperties);\n        mapping.put(scm.getElasticTypeName(), objectMapping);\n        return mapping;\n    }","cleancode":"@suppresswarnings(\"unchecked\") public static map<string, object> getelasticmapping(searchableclassmapping scm) { map<string, object> elastictypemappingproperties = new linkedhashmap<string, object>(); string parenttype = null; if (!scm.isall()) { elastictypemappingproperties.put(\"_all\", collections.singletonmap(\"enabled\", false)); } for(searchableclasspropertymapping scpm : scm.getpropertiesmapping()) { grailsdomainclassproperty property = scpm.getgrailsproperty(); string proptype = property.gettypepropertyname(); map<string, object> propoptions = new linkedhashmap<string, object>(); propoptions.putall(scpm.getattributes()); if (!(supported_format.contains(proptype))) { log.debug(\"proptype not supported: \" + proptype + \" name: \" + property.getname()); if (scpm.isgeopoint()) { proptype = \"geo_point\"; } else if (property.isbasiccollectiontype()) { string basictype = classutils.getshortname(property.getreferencedpropertytype()).tolowercase(locale.english); if (supported_format.contains(basictype)) { proptype = basictype; } } else if (property.getreferencedpropertytype().isarray()) { string basictype = classutils.getshortname(property.getreferencedpropertytype().getcomponenttype()).tolowercase(locale.english); if (supported_format.contains(basictype)) { proptype = basictype; } } else if (isdatetype(property.getreferencedpropertytype())) { proptype = \"date\"; } else if (grailsclassutils.isjdk5enum(property.getreferencedpropertytype())) { proptype = \"string\"; } else if (scpm.getconverter() != null) { proptype = \"string\"; } else if (java.math.bigdecimal.class.isassignablefrom(property.getreferencedpropertytype())) { proptype = \"double\"; } else { proptype = \"object\"; } if (scpm.getreference() != null) { proptype = \"object\"; } else if (scpm.iscomponent()) { proptype = \"object\"; propoptions.putall((map<string, object>) (getelasticmapping(scpm.getcomponentpropertymapping()).values().iterator().next())); } if (scpm.iscomponent() || scpm.getreference() != null) { map<string, object> props = (map<string, object>) propoptions.get(\"properties\"); if (props == null) { props = new linkedhashmap<string, object>(); propoptions.put(\"properties\", props); } props.put(\"id\", defaultdescriptor(\"long\", \"not_analyzed\", true)); props.put(\"class\", defaultdescriptor(\"string\", \"no\", true)); props.put(\"ref\", defaultdescriptor(\"string\", \"no\", true)); } if (scpm.isparentkey()) { parenttype = property.gettypepropertyname(); scm.setparent(scpm); } } else if (scpm.isgeopoint()) { proptype = \"geo_point\"; } propoptions.put(\"type\", proptype); if (!proptype.equals(\"object\") && scm.isall()) { if (scpm.shouldexcludefromall()) { propoptions.put(\"include_in_all\", false); } else { propoptions.put(\"include_in_all\", true); } } if (proptype.equals(\"string\") && scpm.isanalyzed()) { propoptions.put(\"term_vector\", \"with_positions_offsets\"); } elastictypemappingproperties.put(scpm.getpropertyname(), propoptions); } map<string, object> mapping = new linkedhashmap<string, object>(); map<string, object> objectmapping = new linkedhashmap<string, object>(); if (parenttype != null) { objectmapping.put(\"_parent\", collections.singletonmap(\"type\", parenttype)); } objectmapping.put(\"properties\", elastictypemappingproperties); mapping.put(scm.getelastictypename(), objectmapping); return mapping; }","repo":"iGivefirst\/elasticsearch-grails-plugin","label":[1,1,0,1]}
{"id":25248,"original_code":"public static HistogramChart fromData(Iterable<? extends Vector> data,\n\t\t\tint numBuckets) {\n\t\t\/\/ Do a pass to compute range\n\t\tdouble min = Double.MAX_VALUE, max = Double.MIN_VALUE;\n\t\tArrayList<Double> copy = new ArrayList();\n\t\tfor (Vector datum : data) {\n\t\t\tdouble x = datum.get(0);\n\t\t\tcopy.add(x);\n\t\t\tmin = Math.min(min, x);\n\t\t\tmax = Math.max(max, x);\n\t\t}\n\t\t\/\/ TODO: Check min and max are sensible?\n\t\tdouble[] array = MathUtils.toArray(copy);\n\t\t\/\/ TODO: Allow the num of buckets to be specified\n\t\tHistogramData dist = new HistogramData(new GridInfo(min, max,\n\t\t\t\tnumBuckets));\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tdist.count(array[i]);\n\t\t}\n\t\treturn new HistogramChart(dist);\n\t}","code_wo_comment":"public static HistogramChart fromData(Iterable<? extends Vector> data,\n\t\t\tint numBuckets) {\n\t\n\t\tdouble min = Double.MAX_VALUE, max = Double.MIN_VALUE;\n\t\tArrayList<Double> copy = new ArrayList();\n\t\tfor (Vector datum : data) {\n\t\t\tdouble x = datum.get(0);\n\t\t\tcopy.add(x);\n\t\t\tmin = Math.min(min, x);\n\t\t\tmax = Math.max(max, x);\n\t\t}\n\t\n\t\tdouble[] array = MathUtils.toArray(copy);\n\t\n\t\tHistogramData dist = new HistogramData(new GridInfo(min, max,\n\t\t\t\tnumBuckets));\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tdist.count(array[i]);\n\t\t}\n\t\treturn new HistogramChart(dist);\n\t}","cleancode":"public static histogramchart fromdata(iterable<? extends vector> data, int numbuckets) { double min = double.max_value, max = double.min_value; arraylist<double> copy = new arraylist(); for (vector datum : data) { double x = datum.get(0); copy.add(x); min = math.min(min, x); max = math.max(max, x); } double[] array = mathutils.toarray(copy); histogramdata dist = new histogramdata(new gridinfo(min, max, numbuckets)); for (int i = 0; i < array.length; i++) { dist.count(array[i]); } return new histogramchart(dist); }","repo":"good-loop\/open-code","label":[0,1,0,0]}
{"id":17078,"original_code":"public int getActualMaximum(int field) {\n        final int fieldsForFixedMax = ERA_MASK|DAY_OF_WEEK_MASK|HOUR_MASK|AM_PM_MASK|\n            HOUR_OF_DAY_MASK|MINUTE_MASK|SECOND_MASK|MILLISECOND_MASK|\n            ZONE_OFFSET_MASK|DST_OFFSET_MASK;\n        if ((fieldsForFixedMax & (1<<field)) != 0) {\n            return getMaximum(field);\n        }\n        JapaneseImperialCalendar jc = getNormalizedCalendar();\n        LocalGregorianCalendar.Date date = jc.jdate;\n        int normalizedYear = date.getNormalizedYear();\n        int value = -1;\n        switch (field) {\n        case MONTH:\n            {\n                value = DECEMBER;\n                if (isTransitionYear(date.getNormalizedYear())) {\n                    \/\/ TODO: there may be multiple transitions in a year.\n                    int eraIndex = getEraIndex(date);\n                    if (date.getYear() != 1) {\n                        eraIndex++;\n                        assert eraIndex < eras.length;\n                    }\n                    long transition = sinceFixedDates[eraIndex];\n                    long fd = jc.cachedFixedDate;\n                    if (fd < transition) {\n                        LocalGregorianCalendar.Date ldate\n                            = (LocalGregorianCalendar.Date) date.clone();\n                        jcal.getCalendarDateFromFixedDate(ldate, transition - 1);\n                        value = ldate.getMonth() - 1;\n                    }\n                } else {\n                    LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE,\n                                                                         getZone());\n                    if (date.getEra() == d.getEra() && date.getYear() == d.getYear()) {\n                        value = d.getMonth() - 1;\n                    }\n                }\n            }\n            break;\n        case DAY_OF_MONTH:\n            value = jcal.getMonthLength(date);\n            break;\n        case DAY_OF_YEAR:\n            {\n                if (isTransitionYear(date.getNormalizedYear())) {\n                    \/\/ Handle transition year.\n                    \/\/ TODO: there may be multiple transitions in a year.\n                    int eraIndex = getEraIndex(date);\n                    if (date.getYear() != 1) {\n                        eraIndex++;\n                        assert eraIndex < eras.length;\n                    }\n                    long transition = sinceFixedDates[eraIndex];\n                    long fd = jc.cachedFixedDate;\n                    CalendarDate d = gcal.newCalendarDate(TimeZone.NO_TIMEZONE);\n                    d.setDate(date.getNormalizedYear(), BaseCalendar.JANUARY, 1);\n                    if (fd < transition) {\n                        value = (int)(transition - gcal.getFixedDate(d));\n                    } else {\n                        d.addYear(+1);\n                        value = (int)(gcal.getFixedDate(d) - transition);\n                    }\n                } else {\n                    LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE,\n                                                                         getZone());\n                    if (date.getEra() == d.getEra() && date.getYear() == d.getYear()) {\n                        long fd = jcal.getFixedDate(d);\n                        long jan1 = getFixedDateJan1(d, fd);\n                        value = (int)(fd - jan1) + 1;\n                    } else if (date.getYear() == getMinimum(YEAR)) {\n                        CalendarDate d1 = jcal.getCalendarDate(Long.MIN_VALUE, getZone());\n                        long fd1 = jcal.getFixedDate(d1);\n                        d1.addYear(1);\n                        d1.setMonth(BaseCalendar.JANUARY).setDayOfMonth(1);\n                        jcal.normalize(d1);\n                        long fd2 = jcal.getFixedDate(d1);\n                        value = (int)(fd2 - fd1);\n                    } else {\n                        value = jcal.getYearLength(date);\n                    }\n                }\n            }\n            break;\n        case WEEK_OF_YEAR:\n            {\n                if (!isTransitionYear(date.getNormalizedYear())) {\n                    LocalGregorianCalendar.Date jd = jcal.getCalendarDate(Long.MAX_VALUE,\n                                                                          getZone());\n                    if (date.getEra() == jd.getEra() && date.getYear() == jd.getYear()) {\n                        long fd = jcal.getFixedDate(jd);\n                        long jan1 = getFixedDateJan1(jd, fd);\n                        value = getWeekNumber(jan1, fd);\n                    } else if (date.getEra() == null && date.getYear() == getMinimum(YEAR)) {\n                        CalendarDate d = jcal.getCalendarDate(Long.MIN_VALUE, getZone());\n                        \/\/ shift 400 years to avoid underflow\n                        d.addYear(+400);\n                        jcal.normalize(d);\n                        jd.setEra(d.getEra());\n                        jd.setDate(d.getYear() + 1, BaseCalendar.JANUARY, 1);\n                        jcal.normalize(jd);\n                        long jan1 = jcal.getFixedDate(d);\n                        long nextJan1 = jcal.getFixedDate(jd);\n                        long nextJan1st = LocalGregorianCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,\n                                                                                            getFirstDayOfWeek());\n                        int ndays = (int)(nextJan1st - nextJan1);\n                        if (ndays >= getMinimalDaysInFirstWeek()) {\n                            nextJan1st -= 7;\n                        }\n                        value = getWeekNumber(jan1, nextJan1st);\n                    } else {\n                        \/\/ Get the day of week of January 1 of the year\n                        CalendarDate d = gcal.newCalendarDate(TimeZone.NO_TIMEZONE);\n                        d.setDate(date.getNormalizedYear(), BaseCalendar.JANUARY, 1);\n                        int dayOfWeek = gcal.getDayOfWeek(d);\n                        \/\/ Normalize the day of week with the firstDayOfWeek value\n                        dayOfWeek -= getFirstDayOfWeek();\n                        if (dayOfWeek < 0) {\n                            dayOfWeek += 7;\n                        }\n                        value = 52;\n                        int magic = dayOfWeek + getMinimalDaysInFirstWeek() - 1;\n                        if ((magic == 6) ||\n                            (date.isLeapYear() && (magic == 5 || magic == 12))) {\n                            value++;\n                        }\n                    }\n                    break;\n                }\n                if (jc == this) {\n                    jc = (JapaneseImperialCalendar) jc.clone();\n                }\n                int max = getActualMaximum(DAY_OF_YEAR);\n                jc.set(DAY_OF_YEAR, max);\n                value = jc.get(WEEK_OF_YEAR);\n                if (value == 1 && max > 7) {\n                    jc.add(WEEK_OF_YEAR, -1);\n                    value = jc.get(WEEK_OF_YEAR);\n                }\n            }\n            break;\n        case WEEK_OF_MONTH:\n            {\n                LocalGregorianCalendar.Date jd = jcal.getCalendarDate(Long.MAX_VALUE,\n                                                                      getZone());\n                if (!(date.getEra() == jd.getEra() && date.getYear() == jd.getYear())) {\n                    CalendarDate d = gcal.newCalendarDate(TimeZone.NO_TIMEZONE);\n                    d.setDate(date.getNormalizedYear(), date.getMonth(), 1);\n                    int dayOfWeek = gcal.getDayOfWeek(d);\n                    int monthLength = gcal.getMonthLength(d);\n                    dayOfWeek -= getFirstDayOfWeek();\n                    if (dayOfWeek < 0) {\n                        dayOfWeek += 7;\n                    }\n                    int nDaysFirstWeek = 7 - dayOfWeek; \/\/ # of days in the first week\n                    value = 3;\n                    if (nDaysFirstWeek >= getMinimalDaysInFirstWeek()) {\n                        value++;\n                    }\n                    monthLength -= nDaysFirstWeek + 7 * 3;\n                    if (monthLength > 0) {\n                        value++;\n                        if (monthLength > 7) {\n                            value++;\n                        }\n                    }\n                } else {\n                    long fd = jcal.getFixedDate(jd);\n                    long month1 = fd - jd.getDayOfMonth() + 1;\n                    value = getWeekNumber(month1, fd);\n                }\n            }\n            break;\n        case DAY_OF_WEEK_IN_MONTH:\n            {\n                int ndays, dow1;\n                int dow = date.getDayOfWeek();\n                BaseCalendar.Date d = (BaseCalendar.Date) date.clone();\n                ndays = jcal.getMonthLength(d);\n                d.setDayOfMonth(1);\n                jcal.normalize(d);\n                dow1 = d.getDayOfWeek();\n                int x = dow - dow1;\n                if (x < 0) {\n                    x += 7;\n                }\n                ndays -= x;\n                value = (ndays + 6) \/ 7;\n            }\n            break;\n        case YEAR:\n            {\n                CalendarDate jd = jcal.getCalendarDate(jc.getTimeInMillis(), getZone());\n                CalendarDate d;\n                int eraIndex = getEraIndex(date);\n                if (eraIndex == eras.length - 1) {\n                    d = jcal.getCalendarDate(Long.MAX_VALUE, getZone());\n                    value = d.getYear();\n                    \/\/ Use an equivalent year for the\n                    \/\/ getYearOffsetInMillis call to avoid overflow.\n                    if (value > 400) {\n                        jd.setYear(value - 400);\n                    }\n                } else {\n                    d = jcal.getCalendarDate(eras[eraIndex + 1].getSince(getZone()) - 1,\n                                             getZone());\n                    value = d.getYear();\n                    \/\/ Use the same year as d.getYear() to be\n                    \/\/ consistent with leap and common years.\n                    jd.setYear(value);\n                }\n                jcal.normalize(jd);\n                if (getYearOffsetInMillis(jd) > getYearOffsetInMillis(d)) {\n                    value--;\n                }\n            }\n            break;\n        default:\n            throw new ArrayIndexOutOfBoundsException(field);\n        }\n        return value;\n    }","code_wo_comment":"public int getActualMaximum(int field) {\n        final int fieldsForFixedMax = ERA_MASK|DAY_OF_WEEK_MASK|HOUR_MASK|AM_PM_MASK|\n            HOUR_OF_DAY_MASK|MINUTE_MASK|SECOND_MASK|MILLISECOND_MASK|\n            ZONE_OFFSET_MASK|DST_OFFSET_MASK;\n        if ((fieldsForFixedMax & (1<<field)) != 0) {\n            return getMaximum(field);\n        }\n        JapaneseImperialCalendar jc = getNormalizedCalendar();\n        LocalGregorianCalendar.Date date = jc.jdate;\n        int normalizedYear = date.getNormalizedYear();\n        int value = -1;\n        switch (field) {\n        case MONTH:\n            {\n                value = DECEMBER;\n                if (isTransitionYear(date.getNormalizedYear())) {\n                   \n                    int eraIndex = getEraIndex(date);\n                    if (date.getYear() != 1) {\n                        eraIndex++;\n                        assert eraIndex < eras.length;\n                    }\n                    long transition = sinceFixedDates[eraIndex];\n                    long fd = jc.cachedFixedDate;\n                    if (fd < transition) {\n                        LocalGregorianCalendar.Date ldate\n                            = (LocalGregorianCalendar.Date) date.clone();\n                        jcal.getCalendarDateFromFixedDate(ldate, transition - 1);\n                        value = ldate.getMonth() - 1;\n                    }\n                } else {\n                    LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE,\n                                                                         getZone());\n                    if (date.getEra() == d.getEra() && date.getYear() == d.getYear()) {\n                        value = d.getMonth() - 1;\n                    }\n                }\n            }\n            break;\n        case DAY_OF_MONTH:\n            value = jcal.getMonthLength(date);\n            break;\n        case DAY_OF_YEAR:\n            {\n                if (isTransitionYear(date.getNormalizedYear())) {\n                   \n                   \n                    int eraIndex = getEraIndex(date);\n                    if (date.getYear() != 1) {\n                        eraIndex++;\n                        assert eraIndex < eras.length;\n                    }\n                    long transition = sinceFixedDates[eraIndex];\n                    long fd = jc.cachedFixedDate;\n                    CalendarDate d = gcal.newCalendarDate(TimeZone.NO_TIMEZONE);\n                    d.setDate(date.getNormalizedYear(), BaseCalendar.JANUARY, 1);\n                    if (fd < transition) {\n                        value = (int)(transition - gcal.getFixedDate(d));\n                    } else {\n                        d.addYear(+1);\n                        value = (int)(gcal.getFixedDate(d) - transition);\n                    }\n                } else {\n                    LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE,\n                                                                         getZone());\n                    if (date.getEra() == d.getEra() && date.getYear() == d.getYear()) {\n                        long fd = jcal.getFixedDate(d);\n                        long jan1 = getFixedDateJan1(d, fd);\n                        value = (int)(fd - jan1) + 1;\n                    } else if (date.getYear() == getMinimum(YEAR)) {\n                        CalendarDate d1 = jcal.getCalendarDate(Long.MIN_VALUE, getZone());\n                        long fd1 = jcal.getFixedDate(d1);\n                        d1.addYear(1);\n                        d1.setMonth(BaseCalendar.JANUARY).setDayOfMonth(1);\n                        jcal.normalize(d1);\n                        long fd2 = jcal.getFixedDate(d1);\n                        value = (int)(fd2 - fd1);\n                    } else {\n                        value = jcal.getYearLength(date);\n                    }\n                }\n            }\n            break;\n        case WEEK_OF_YEAR:\n            {\n                if (!isTransitionYear(date.getNormalizedYear())) {\n                    LocalGregorianCalendar.Date jd = jcal.getCalendarDate(Long.MAX_VALUE,\n                                                                          getZone());\n                    if (date.getEra() == jd.getEra() && date.getYear() == jd.getYear()) {\n                        long fd = jcal.getFixedDate(jd);\n                        long jan1 = getFixedDateJan1(jd, fd);\n                        value = getWeekNumber(jan1, fd);\n                    } else if (date.getEra() == null && date.getYear() == getMinimum(YEAR)) {\n                        CalendarDate d = jcal.getCalendarDate(Long.MIN_VALUE, getZone());\n                       \n                        d.addYear(+400);\n                        jcal.normalize(d);\n                        jd.setEra(d.getEra());\n                        jd.setDate(d.getYear() + 1, BaseCalendar.JANUARY, 1);\n                        jcal.normalize(jd);\n                        long jan1 = jcal.getFixedDate(d);\n                        long nextJan1 = jcal.getFixedDate(jd);\n                        long nextJan1st = LocalGregorianCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,\n                                                                                            getFirstDayOfWeek());\n                        int ndays = (int)(nextJan1st - nextJan1);\n                        if (ndays >= getMinimalDaysInFirstWeek()) {\n                            nextJan1st -= 7;\n                        }\n                        value = getWeekNumber(jan1, nextJan1st);\n                    } else {\n                       \n                        CalendarDate d = gcal.newCalendarDate(TimeZone.NO_TIMEZONE);\n                        d.setDate(date.getNormalizedYear(), BaseCalendar.JANUARY, 1);\n                        int dayOfWeek = gcal.getDayOfWeek(d);\n                       \n                        dayOfWeek -= getFirstDayOfWeek();\n                        if (dayOfWeek < 0) {\n                            dayOfWeek += 7;\n                        }\n                        value = 52;\n                        int magic = dayOfWeek + getMinimalDaysInFirstWeek() - 1;\n                        if ((magic == 6) ||\n                            (date.isLeapYear() && (magic == 5 || magic == 12))) {\n                            value++;\n                        }\n                    }\n                    break;\n                }\n                if (jc == this) {\n                    jc = (JapaneseImperialCalendar) jc.clone();\n                }\n                int max = getActualMaximum(DAY_OF_YEAR);\n                jc.set(DAY_OF_YEAR, max);\n                value = jc.get(WEEK_OF_YEAR);\n                if (value == 1 && max > 7) {\n                    jc.add(WEEK_OF_YEAR, -1);\n                    value = jc.get(WEEK_OF_YEAR);\n                }\n            }\n            break;\n        case WEEK_OF_MONTH:\n            {\n                LocalGregorianCalendar.Date jd = jcal.getCalendarDate(Long.MAX_VALUE,\n                                                                      getZone());\n                if (!(date.getEra() == jd.getEra() && date.getYear() == jd.getYear())) {\n                    CalendarDate d = gcal.newCalendarDate(TimeZone.NO_TIMEZONE);\n                    d.setDate(date.getNormalizedYear(), date.getMonth(), 1);\n                    int dayOfWeek = gcal.getDayOfWeek(d);\n                    int monthLength = gcal.getMonthLength(d);\n                    dayOfWeek -= getFirstDayOfWeek();\n                    if (dayOfWeek < 0) {\n                        dayOfWeek += 7;\n                    }\n                    int nDaysFirstWeek = 7 - dayOfWeek;\n                    value = 3;\n                    if (nDaysFirstWeek >= getMinimalDaysInFirstWeek()) {\n                        value++;\n                    }\n                    monthLength -= nDaysFirstWeek + 7 * 3;\n                    if (monthLength > 0) {\n                        value++;\n                        if (monthLength > 7) {\n                            value++;\n                        }\n                    }\n                } else {\n                    long fd = jcal.getFixedDate(jd);\n                    long month1 = fd - jd.getDayOfMonth() + 1;\n                    value = getWeekNumber(month1, fd);\n                }\n            }\n            break;\n        case DAY_OF_WEEK_IN_MONTH:\n            {\n                int ndays, dow1;\n                int dow = date.getDayOfWeek();\n                BaseCalendar.Date d = (BaseCalendar.Date) date.clone();\n                ndays = jcal.getMonthLength(d);\n                d.setDayOfMonth(1);\n                jcal.normalize(d);\n                dow1 = d.getDayOfWeek();\n                int x = dow - dow1;\n                if (x < 0) {\n                    x += 7;\n                }\n                ndays -= x;\n                value = (ndays + 6) \/ 7;\n            }\n            break;\n        case YEAR:\n            {\n                CalendarDate jd = jcal.getCalendarDate(jc.getTimeInMillis(), getZone());\n                CalendarDate d;\n                int eraIndex = getEraIndex(date);\n                if (eraIndex == eras.length - 1) {\n                    d = jcal.getCalendarDate(Long.MAX_VALUE, getZone());\n                    value = d.getYear();\n                   \n                   \n                    if (value > 400) {\n                        jd.setYear(value - 400);\n                    }\n                } else {\n                    d = jcal.getCalendarDate(eras[eraIndex + 1].getSince(getZone()) - 1,\n                                             getZone());\n                    value = d.getYear();\n                   \n                   \n                    jd.setYear(value);\n                }\n                jcal.normalize(jd);\n                if (getYearOffsetInMillis(jd) > getYearOffsetInMillis(d)) {\n                    value--;\n                }\n            }\n            break;\n        default:\n            throw new ArrayIndexOutOfBoundsException(field);\n        }\n        return value;\n    }","cleancode":"public int getactualmaximum(int field) { final int fieldsforfixedmax = era_mask|day_of_week_mask|hour_mask|am_pm_mask| hour_of_day_mask|minute_mask|second_mask|millisecond_mask| zone_offset_mask|dst_offset_mask; if ((fieldsforfixedmax & (1<<field)) != 0) { return getmaximum(field); } japaneseimperialcalendar jc = getnormalizedcalendar(); localgregoriancalendar.date date = jc.jdate; int normalizedyear = date.getnormalizedyear(); int value = -1; switch (field) { case month: { value = december; if (istransitionyear(date.getnormalizedyear())) { int eraindex = geteraindex(date); if (date.getyear() != 1) { eraindex++; assert eraindex < eras.length; } long transition = sincefixeddates[eraindex]; long fd = jc.cachedfixeddate; if (fd < transition) { localgregoriancalendar.date ldate = (localgregoriancalendar.date) date.clone(); jcal.getcalendardatefromfixeddate(ldate, transition - 1); value = ldate.getmonth() - 1; } } else { localgregoriancalendar.date d = jcal.getcalendardate(long.max_value, getzone()); if (date.getera() == d.getera() && date.getyear() == d.getyear()) { value = d.getmonth() - 1; } } } break; case day_of_month: value = jcal.getmonthlength(date); break; case day_of_year: { if (istransitionyear(date.getnormalizedyear())) { int eraindex = geteraindex(date); if (date.getyear() != 1) { eraindex++; assert eraindex < eras.length; } long transition = sincefixeddates[eraindex]; long fd = jc.cachedfixeddate; calendardate d = gcal.newcalendardate(timezone.no_timezone); d.setdate(date.getnormalizedyear(), basecalendar.january, 1); if (fd < transition) { value = (int)(transition - gcal.getfixeddate(d)); } else { d.addyear(+1); value = (int)(gcal.getfixeddate(d) - transition); } } else { localgregoriancalendar.date d = jcal.getcalendardate(long.max_value, getzone()); if (date.getera() == d.getera() && date.getyear() == d.getyear()) { long fd = jcal.getfixeddate(d); long jan1 = getfixeddatejan1(d, fd); value = (int)(fd - jan1) + 1; } else if (date.getyear() == getminimum(year)) { calendardate d1 = jcal.getcalendardate(long.min_value, getzone()); long fd1 = jcal.getfixeddate(d1); d1.addyear(1); d1.setmonth(basecalendar.january).setdayofmonth(1); jcal.normalize(d1); long fd2 = jcal.getfixeddate(d1); value = (int)(fd2 - fd1); } else { value = jcal.getyearlength(date); } } } break; case week_of_year: { if (!istransitionyear(date.getnormalizedyear())) { localgregoriancalendar.date jd = jcal.getcalendardate(long.max_value, getzone()); if (date.getera() == jd.getera() && date.getyear() == jd.getyear()) { long fd = jcal.getfixeddate(jd); long jan1 = getfixeddatejan1(jd, fd); value = getweeknumber(jan1, fd); } else if (date.getera() == null && date.getyear() == getminimum(year)) { calendardate d = jcal.getcalendardate(long.min_value, getzone()); d.addyear(+400); jcal.normalize(d); jd.setera(d.getera()); jd.setdate(d.getyear() + 1, basecalendar.january, 1); jcal.normalize(jd); long jan1 = jcal.getfixeddate(d); long nextjan1 = jcal.getfixeddate(jd); long nextjan1st = localgregoriancalendar.getdayofweekdateonorbefore(nextjan1 + 6, getfirstdayofweek()); int ndays = (int)(nextjan1st - nextjan1); if (ndays >= getminimaldaysinfirstweek()) { nextjan1st -= 7; } value = getweeknumber(jan1, nextjan1st); } else { calendardate d = gcal.newcalendardate(timezone.no_timezone); d.setdate(date.getnormalizedyear(), basecalendar.january, 1); int dayofweek = gcal.getdayofweek(d); dayofweek -= getfirstdayofweek(); if (dayofweek < 0) { dayofweek += 7; } value = 52; int magic = dayofweek + getminimaldaysinfirstweek() - 1; if ((magic == 6) || (date.isleapyear() && (magic == 5 || magic == 12))) { value++; } } break; } if (jc == this) { jc = (japaneseimperialcalendar) jc.clone(); } int max = getactualmaximum(day_of_year); jc.set(day_of_year, max); value = jc.get(week_of_year); if (value == 1 && max > 7) { jc.add(week_of_year, -1); value = jc.get(week_of_year); } } break; case week_of_month: { localgregoriancalendar.date jd = jcal.getcalendardate(long.max_value, getzone()); if (!(date.getera() == jd.getera() && date.getyear() == jd.getyear())) { calendardate d = gcal.newcalendardate(timezone.no_timezone); d.setdate(date.getnormalizedyear(), date.getmonth(), 1); int dayofweek = gcal.getdayofweek(d); int monthlength = gcal.getmonthlength(d); dayofweek -= getfirstdayofweek(); if (dayofweek < 0) { dayofweek += 7; } int ndaysfirstweek = 7 - dayofweek; value = 3; if (ndaysfirstweek >= getminimaldaysinfirstweek()) { value++; } monthlength -= ndaysfirstweek + 7 * 3; if (monthlength > 0) { value++; if (monthlength > 7) { value++; } } } else { long fd = jcal.getfixeddate(jd); long month1 = fd - jd.getdayofmonth() + 1; value = getweeknumber(month1, fd); } } break; case day_of_week_in_month: { int ndays, dow1; int dow = date.getdayofweek(); basecalendar.date d = (basecalendar.date) date.clone(); ndays = jcal.getmonthlength(d); d.setdayofmonth(1); jcal.normalize(d); dow1 = d.getdayofweek(); int x = dow - dow1; if (x < 0) { x += 7; } ndays -= x; value = (ndays + 6) \/ 7; } break; case year: { calendardate jd = jcal.getcalendardate(jc.gettimeinmillis(), getzone()); calendardate d; int eraindex = geteraindex(date); if (eraindex == eras.length - 1) { d = jcal.getcalendardate(long.max_value, getzone()); value = d.getyear(); if (value > 400) { jd.setyear(value - 400); } } else { d = jcal.getcalendardate(eras[eraindex + 1].getsince(getzone()) - 1, getzone()); value = d.getyear(); jd.setyear(value); } jcal.normalize(jd); if (getyearoffsetinmillis(jd) > getyearoffsetinmillis(d)) { value--; } } break; default: throw new arrayindexoutofboundsexception(field); } return value; }","repo":"joeriddles\/doclitify","label":[0,1,0,0]}
{"id":752,"original_code":"public JobState getJobStatus(MonitorID monitorID) throws SSHApiException {\n        String jobID = monitorID.getJobID();\n        \/\/todo so currently we execute the qstat for each job but we can use user based monitoring\n        \/\/todo or we should concatenate all the commands and execute them in one go and parse the response\n        return getStatusFromString(cluster.getJobStatus(jobID).toString());\n    }","code_wo_comment":"public JobState getJobStatus(MonitorID monitorID) throws SSHApiException {\n        String jobID = monitorID.getJobID();\n       \n       \n        return getStatusFromString(cluster.getJobStatus(jobID).toString());\n    }","cleancode":"public jobstate getjobstatus(monitorid monitorid) throws sshapiexception { string jobid = monitorid.getjobid(); return getstatusfromstring(cluster.getjobstatus(jobid).tostring()); }","repo":"glahiru\/airavata-1","label":[1,0,0,0]}
{"id":17350,"original_code":"@Override\n    protected void removeFSWindowListener(Window w) {\n        realFSWindow.removeWindowListener(fsWindowListener);\n        fsWindowListener = null;\n        \/**\n         * Bug 4933099: There is some funny-business to deal with when this\n         * method is called with a Window instead of a Frame.  See 4836744\n         * for more information on this.  One side-effect of our workaround\n         * for the problem is that the owning Frame of a Window may end\n         * up getting resized during the fullscreen process.  When we\n         * return from fullscreen mode, we should resize the Frame to\n         * its original size (just like the Window is being resized\n         * to its original size in GraphicsDevice).\n         *\/\n        final WWindowPeer wpeer = AWTAccessor.getComponentAccessor()\n                                             .getPeer(realFSWindow);\n        if (wpeer != null) {\n            if (ownerOrigBounds != null) {\n                \/\/ if the window went into fs mode before it was realized it\n                \/\/ could have (0,0) dimensions\n                if (ownerOrigBounds.width  == 0) ownerOrigBounds.width  = 1;\n                if (ownerOrigBounds.height == 0) ownerOrigBounds.height = 1;\n                wpeer.reshape(ownerOrigBounds.x,     ownerOrigBounds.y,\n                              ownerOrigBounds.width, ownerOrigBounds.height);\n                if (!ownerWasVisible) {\n                    wpeer.setVisible(false);\n                }\n                ownerOrigBounds = null;\n            }\n            if (!fsWindowWasAlwaysOnTop) {\n                wpeer.setAlwaysOnTop(false);\n            }\n        }\n        realFSWindow = null;\n    }","code_wo_comment":"@Override\n    protected void removeFSWindowListener(Window w) {\n        realFSWindow.removeWindowListener(fsWindowListener);\n        fsWindowListener = null;\n       \n        final WWindowPeer wpeer = AWTAccessor.getComponentAccessor()\n                                             .getPeer(realFSWindow);\n        if (wpeer != null) {\n            if (ownerOrigBounds != null) {\n               \n               \n                if (ownerOrigBounds.width  == 0) ownerOrigBounds.width  = 1;\n                if (ownerOrigBounds.height == 0) ownerOrigBounds.height = 1;\n                wpeer.reshape(ownerOrigBounds.x,     ownerOrigBounds.y,\n                              ownerOrigBounds.width, ownerOrigBounds.height);\n                if (!ownerWasVisible) {\n                    wpeer.setVisible(false);\n                }\n                ownerOrigBounds = null;\n            }\n            if (!fsWindowWasAlwaysOnTop) {\n                wpeer.setAlwaysOnTop(false);\n            }\n        }\n        realFSWindow = null;\n    }","cleancode":"@override protected void removefswindowlistener(window w) { realfswindow.removewindowlistener(fswindowlistener); fswindowlistener = null; final wwindowpeer wpeer = awtaccessor.getcomponentaccessor() .getpeer(realfswindow); if (wpeer != null) { if (ownerorigbounds != null) { if (ownerorigbounds.width == 0) ownerorigbounds.width = 1; if (ownerorigbounds.height == 0) ownerorigbounds.height = 1; wpeer.reshape(ownerorigbounds.x, ownerorigbounds.y, ownerorigbounds.width, ownerorigbounds.height); if (!ownerwasvisible) { wpeer.setvisible(false); } ownerorigbounds = null; } if (!fswindowwasalwaysontop) { wpeer.setalwaysontop(false); } } realfswindow = null; }","repo":"jaylinhong\/jdk14-learn","label":[0,0,1,0]}
{"id":991,"original_code":"private Node initRaftNode() throws IOException {\n        NodeOptions nodeOptions = this.context.nodeOptions();\n        nodeOptions.setFsm(this.stateMachine);\n        \/\/ TODO: When support sharding, groupId needs to be bound to shard Id\n        String groupId = this.context.group();\n        PeerId endpoint = this.context.endpoint();\n        \/*\n         * Start raft node with shared rpc server:\n         * return new RaftGroupService(groupId, endpoint, nodeOptions,\n         *                             this.context.rpcServer(), true)\n         *        .start(false)\n         *\/\n        return RaftServiceFactory.createAndInitRaftNode(groupId, endpoint,\n                                                        nodeOptions);\n    }","code_wo_comment":"private Node initRaftNode() throws IOException {\n        NodeOptions nodeOptions = this.context.nodeOptions();\n        nodeOptions.setFsm(this.stateMachine);\n       \n        String groupId = this.context.group();\n        PeerId endpoint = this.context.endpoint();\n       \n        return RaftServiceFactory.createAndInitRaftNode(groupId, endpoint,\n                                                        nodeOptions);\n    }","cleancode":"private node initraftnode() throws ioexception { nodeoptions nodeoptions = this.context.nodeoptions(); nodeoptions.setfsm(this.statemachine); string groupid = this.context.group(); peerid endpoint = this.context.endpoint(); return raftservicefactory.createandinitraftnode(groupid, endpoint, nodeoptions); }","repo":"hhxx2015\/hugegraph","label":[1,0,0,0]}
{"id":1032,"original_code":"public static void pvpDamageBalance(AbstractDealDamageHandler.AttackInfo attack, MapleCharacter player) {\n        matk = player.getTotalMagic();\n        luk = player.getTotalLuk();\n        watk = player.getTotalWatk();\n        switch (attack.skill) {\n            case 0: \/\/ normal attack\n                multi = 1;\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1001004:    \/\/ Power Strike\n                skil = SkillFactory.getSkill(1001004);\n                multi = skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0;\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1001005:    \/\/ Slash Blast\n                skil = SkillFactory.getSkill(1001005);\n                multi = skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0;\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 2001004:    \/\/ Energy Bolt\n                skil = SkillFactory.getSkill(2001004);\n                multi = skil.getEffect(player.getSkillLevel(skil)).getMatk();\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 200;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2001005:    \/\/ Magic Claw\n                skil = SkillFactory.getSkill(2001005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 3001004:    \/\/ Arrow Blow\n                skil = SkillFactory.getSkill(3001004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3001005:    \/\/ Double Shot\n                skil = SkillFactory.getSkill(3001005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4001334:    \/\/ Double Stab\n                skil = SkillFactory.getSkill(4001334);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4001344:    \/\/ Lucky Seven\n                skil = SkillFactory.getSkill(4001344);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                pvpDamage = (int) (5 * luk \/ 100 * watk * multi);\n                min = (int) (2.5 * luk \/ 100 * watk * multi);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 2101004:    \/\/ Fire Arrow\n                skil = SkillFactory.getSkill(4101004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2101005:    \/\/ Poison Brace\n                skil = SkillFactory.getSkill(2101005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2201004:    \/\/ Cold Beam\n                skil = SkillFactory.getSkill(2201004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 300;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2301005:    \/\/ Holy Arrow\n                skil = SkillFactory.getSkill(2301005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 300;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 4101005:    \/\/ Drain\n                skil = SkillFactory.getSkill(4101005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4201005:    \/\/ Savage Blow\n                skil = SkillFactory.getSkill(4201005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1111004:    \/\/ Panic: Axe\n                skil = SkillFactory.getSkill(1111004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1111003:    \/\/ Panic: Sword\n                skil = SkillFactory.getSkill(1111003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311004:    \/\/ Dragon Fury: Pole Arm\n                skil = SkillFactory.getSkill(1311004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311003:    \/\/ Dragon Fury: Spear\n                skil = SkillFactory.getSkill(1311003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311002:    \/\/ Pole Arm Crusher\n                skil = SkillFactory.getSkill(1311002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311005:    \/\/ Sacrifice\n                skil = SkillFactory.getSkill(1311005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311001:    \/\/ Spear Crusher\n                skil = SkillFactory.getSkill(1311001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 2211002:    \/\/ Ice Strike\n                skil = SkillFactory.getSkill(2211002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 250;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2211003:    \/\/ Thunder Spear\n                skil = SkillFactory.getSkill(2211003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 300;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 3111006:    \/\/ Strafe\n                skil = SkillFactory.getSkill(3111006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 1000.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3211006:    \/\/ Strafe\n                skil = SkillFactory.getSkill(3211006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 1000.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4111005:    \/\/ Avenger\n                skil = SkillFactory.getSkill(4111005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4211002:    \/\/ Assaulter\n                skil = SkillFactory.getSkill(4211002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 200;\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1121008:    \/\/ Brandish\n                skil = SkillFactory.getSkill(1121008);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1121006:    \/\/ Rush\n                skil = SkillFactory.getSkill(1121006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1221009:    \/\/ Blast\n                skil = SkillFactory.getSkill(1221009);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1221007:    \/\/ Rush\n                skil = SkillFactory.getSkill(1221007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1321003:    \/\/ Rush\n                skil = SkillFactory.getSkill(1321003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 2121003:    \/\/ Fire Demon\n                skil = SkillFactory.getSkill(2121003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2221006:    \/\/ Chain Lightning\n                skil = SkillFactory.getSkill(2221006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2221003:    \/\/ Ice Demon\n                skil = SkillFactory.getSkill(2221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2321007:    \/\/ Angel's Ray\n                skil = SkillFactory.getSkill(2321007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 3121003:    \/\/ Dragon Pulse\n                skil = SkillFactory.getSkill(3121003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3121004:    \/\/ Hurricane\n                skil = SkillFactory.getSkill(3121004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3221003:    \/\/ Dragon Pulse\n                skil = SkillFactory.getSkill(3221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3221001:    \/\/ Piercing\n                skil = SkillFactory.getSkill(3221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3221007:    \/\/ Sniping\n                pvpDamage = (int) (player.calculateMaxBaseDamage(watk) * 3);\n                min = (int) (player.calculateMinBaseDamage(player) * 3);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 4121003:    \/\/ Showdown taunt\n                skil = SkillFactory.getSkill(4121003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4121007:    \/\/ Triple Throw\n                skil = SkillFactory.getSkill(4121007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4221007:    \/\/ Boomerang Step\n                skil = SkillFactory.getSkill(4221007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4221003:    \/\/ Showdown taunt\n                skil = SkillFactory.getSkill(4221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            \/\/aoe\n            case 2201005:    \/\/ Thunderbolt\n                skil = SkillFactory.getSkill(2201005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 250;\n                maxHeight = 250;\n                isAoe = true;\n                magic = true;\n                break;\n            case 3101005:    \/\/ Arrow Bomb : Bow\n                skil = SkillFactory.getSkill(3101005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 250;\n                isAoe = true;\n                break;\n            case 3201005:    \/\/ Iron Arrow : Crossbow\n                skil = SkillFactory.getSkill(3201005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = true;\n                break;\n            case 1111006:    \/\/ Coma: Axe\n                skil = SkillFactory.getSkill(1111006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 250;\n                isAoe = true;\n                break;\n            case 1111005:    \/\/ Coma: Sword\n                skil = SkillFactory.getSkill(1111005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 250;\n                isAoe = true;\n                break;\n            case 1211002:    \/\/ Charged Blow - skill doesn't work\n                skil = SkillFactory.getSkill(1211002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 250;\n                isAoe = true;\n                break;\n            case 1311006:    \/\/ Dragon Roar\n                skil = SkillFactory.getSkill(1311006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 600;\n                maxHeight = 450;\n                isAoe = true;\n                break;\n            case 2111002:    \/\/ Explosion\n                skil = SkillFactory.getSkill(2111002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2111003:    \/\/ Poison Mist\n                skil = SkillFactory.getSkill(2111003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2311004:    \/\/ Shining Ray\n                skil = SkillFactory.getSkill(2311004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                magic = true;\n                break;\n            case 3111004:    \/\/ Arrow Rain\n                skil = SkillFactory.getSkill(3111004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 3111003:    \/\/ Inferno\n                skil = SkillFactory.getSkill(3111003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 3211004:    \/\/ Arrow Eruption\n                skil = SkillFactory.getSkill(3211004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 3211003:    \/\/ Blizzard (Sniper)\n                skil = SkillFactory.getSkill(3211003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 4211004:    \/\/ Band of Thieves Skill doesn't work so i don't know\n                skil = SkillFactory.getSkill(4211004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 1221011:    \/\/ Sanctuary Skill doesn't work so i don't know\n                skil = SkillFactory.getSkill(1221011);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 2121001:    \/\/ Big Bang\n                skil = SkillFactory.getSkill(2121001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 175;\n                maxHeight = 175;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2121007:    \/\/ Meteo\n                skil = SkillFactory.getSkill(2121007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 600;\n                maxHeight = 600;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2121006:    \/\/ Paralyze\n                skil = SkillFactory.getSkill(2121006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 250;\n                maxHeight = 250;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2221001:    \/\/ Big Bang\n                skil = SkillFactory.getSkill(2221001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 175;\n                maxHeight = 175;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2221007:    \/\/ Blizzard\n                skil = SkillFactory.getSkill(2221007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 600;\n                maxHeight = 600;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2321008:    \/\/ Genesis\n                skil = SkillFactory.getSkill(2321008);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 600;\n                maxHeight = 600;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2321001:   \/\/ bishop Big Bang\n                skil = SkillFactory.getSkill(2321001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 175;\n                maxHeight = 175;\n                isAoe = true;\n                magic = true;\n                break;\n            case 4121004:    \/\/ Ninja Ambush\n                pvpDamage = (int) Math.floor(Math.random() * (180 - 150) + 150);\n                maxDis = 150;\n                maxHeight = 300;\n                isAoe = true;\n                ignore = true;\n                break;\n            case 4121008:    \/\/ Ninja Storm knockback\n                skil = SkillFactory.getSkill(4121008);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                pvpDamage = (int) Math.floor(Math.random() * (player.calculateMaxBaseDamage(watk) * multi));\n                maxDis = 150;\n                maxHeight = 35;\n                isAoe = true;\n                ignore = true;\n                break;\n            case 4221001:    \/\/ Assassinate\n                skil = SkillFactory.getSkill(4221001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = true;\n                break;\n            case 4221004:    \/\/ Ninja Ambush\n                pvpDamage = (int) Math.floor(Math.random() * (180 - 150) + 150);\n                maxDis = 150;\n                maxHeight = 150;\n                isAoe = true;\n                ignore = true;\n                break;\n            case 9001001: \/\/ SUPER dragon ROAR\n                pvpDamage = MAX_PVP_DAMAGE;\n                maxDis = 150;\n                maxHeight = 150;\n                isAoe = true;\n                ignore = true;\n                break;\n            \/**\n             *@author Supiangel\n             *\n             *\/\n            case 5001001:    \/\/ First Strike\n                skil = SkillFactory.getSkill(5001001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5001002:    \/\/ Back-flip kick\n                skil = SkillFactory.getSkill(5001002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5101002:    \/\/ Backward Blow\n                skil = SkillFactory.getSkill(5101002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5101003:    \/\/ Uppercut\n                skil = SkillFactory.getSkill(5101003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5101004:    \/\/ Spinning Punch\n                skil = SkillFactory.getSkill(5101004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5111002:    \/\/ Final Punch\n                skil = SkillFactory.getSkill(5111002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5111004:    \/\/ Absorb\n                skil = SkillFactory.getSkill(5111004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5111006:    \/\/ Smash\n                skil = SkillFactory.getSkill(5111006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5001003:    \/\/ Double Shot\n                skil = SkillFactory.getSkill(5001003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                pvpDamage = (int) (5 * player.getStr() \/ 100 * watk * multi);\n                min = (int) (2.5 * player.getStr() \/ 100 * watk * multi);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5201001:    \/\/ Fatal Bullet\n                skil = SkillFactory.getSkill(5201001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5201004:    \/\/ Decoy\n                skil = SkillFactory.getSkill(5201004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5201006:    \/\/ Withdraw\n                skil = SkillFactory.getSkill(5201006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5210000:    \/\/ Triple Shot\n                skil = SkillFactory.getSkill(5210000);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5211004:    \/\/ Fire Shot\n                skil = SkillFactory.getSkill(5211004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5211005:    \/\/ Ice Shot\n                skil = SkillFactory.getSkill(5211005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5121001:    \/\/ Dragon Strike\n                skil = SkillFactory.getSkill(5121001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = true;\n                break;\n            case 5121007:    \/\/ Fist\n                skil = SkillFactory.getSkill(5121007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5121002:    \/\/ Energy Orb\n                skil = SkillFactory.getSkill(5121002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5121004:    \/\/ Demolition\n                skil = SkillFactory.getSkill(5121004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5121005:    \/\/ Snatch\n                skil = SkillFactory.getSkill(5121005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5221004:    \/\/ Rapid Fire\n                skil = SkillFactory.getSkill(5221004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5221003:    \/\/ Air Strike\n                skil = SkillFactory.getSkill(5221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5221007:    \/\/ Battleship Cannon\n                skil = SkillFactory.getSkill(5221007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5221008:    \/\/ Battleship Torpedo\n                skil = SkillFactory.getSkill(5221008);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            default:\n                break;\n        }\n        if (!magic || !ignore) {\n            maxDis = player.getMaxDis(player);\n        }\n    }","code_wo_comment":"public static void pvpDamageBalance(AbstractDealDamageHandler.AttackInfo attack, MapleCharacter player) {\n        matk = player.getTotalMagic();\n        luk = player.getTotalLuk();\n        watk = player.getTotalWatk();\n        switch (attack.skill) {\n            case 0:\n                multi = 1;\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1001004:   \n                skil = SkillFactory.getSkill(1001004);\n                multi = skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0;\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1001005:   \n                skil = SkillFactory.getSkill(1001005);\n                multi = skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0;\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 2001004:   \n                skil = SkillFactory.getSkill(2001004);\n                multi = skil.getEffect(player.getSkillLevel(skil)).getMatk();\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 200;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2001005:   \n                skil = SkillFactory.getSkill(2001005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 3001004:   \n                skil = SkillFactory.getSkill(3001004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3001005:   \n                skil = SkillFactory.getSkill(3001005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4001334:   \n                skil = SkillFactory.getSkill(4001334);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4001344:   \n                skil = SkillFactory.getSkill(4001344);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                pvpDamage = (int) (5 * luk \/ 100 * watk * multi);\n                min = (int) (2.5 * luk \/ 100 * watk * multi);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 2101004:   \n                skil = SkillFactory.getSkill(4101004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2101005:   \n                skil = SkillFactory.getSkill(2101005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2201004:   \n                skil = SkillFactory.getSkill(2201004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 300;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2301005:   \n                skil = SkillFactory.getSkill(2301005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 300;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 4101005:   \n                skil = SkillFactory.getSkill(4101005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4201005:   \n                skil = SkillFactory.getSkill(4201005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1111004:   \n                skil = SkillFactory.getSkill(1111004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1111003:   \n                skil = SkillFactory.getSkill(1111003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311004:   \n                skil = SkillFactory.getSkill(1311004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311003:   \n                skil = SkillFactory.getSkill(1311003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311002:   \n                skil = SkillFactory.getSkill(1311002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311005:   \n                skil = SkillFactory.getSkill(1311005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1311001:   \n                skil = SkillFactory.getSkill(1311001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 2211002:   \n                skil = SkillFactory.getSkill(2211002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 250;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2211003:   \n                skil = SkillFactory.getSkill(2211003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 300;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 3111006:   \n                skil = SkillFactory.getSkill(3111006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 1000.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3211006:   \n                skil = SkillFactory.getSkill(3211006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 1000.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4111005:   \n                skil = SkillFactory.getSkill(4111005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4211002:   \n                skil = SkillFactory.getSkill(4211002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 200;\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1121008:   \n                skil = SkillFactory.getSkill(1121008);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1121006:   \n                skil = SkillFactory.getSkill(1121006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1221009:   \n                skil = SkillFactory.getSkill(1221009);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1221007:   \n                skil = SkillFactory.getSkill(1221007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 1321003:   \n                skil = SkillFactory.getSkill(1321003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 2121003:   \n                skil = SkillFactory.getSkill(2121003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2221006:   \n                skil = SkillFactory.getSkill(2221006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2221003:   \n                skil = SkillFactory.getSkill(2221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 2321007:   \n                skil = SkillFactory.getSkill(2321007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 400;\n                maxHeight = 35;\n                isAoe = false;\n                magic = true;\n                break;\n            case 3121003:   \n                skil = SkillFactory.getSkill(3121003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3121004:   \n                skil = SkillFactory.getSkill(3121004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3221003:   \n                skil = SkillFactory.getSkill(3221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3221001:   \n                skil = SkillFactory.getSkill(3221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 3221007:   \n                pvpDamage = (int) (player.calculateMaxBaseDamage(watk) * 3);\n                min = (int) (player.calculateMinBaseDamage(player) * 3);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 4121003:   \n                skil = SkillFactory.getSkill(4121003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4121007:   \n                skil = SkillFactory.getSkill(4121007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4221007:   \n                skil = SkillFactory.getSkill(4221007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 4221003:   \n                skil = SkillFactory.getSkill(4221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n           \n            case 2201005:   \n                skil = SkillFactory.getSkill(2201005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 250;\n                maxHeight = 250;\n                isAoe = true;\n                magic = true;\n                break;\n            case 3101005:   \n                skil = SkillFactory.getSkill(3101005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 250;\n                isAoe = true;\n                break;\n            case 3201005:   \n                skil = SkillFactory.getSkill(3201005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = true;\n                break;\n            case 1111006:   \n                skil = SkillFactory.getSkill(1111006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 250;\n                isAoe = true;\n                break;\n            case 1111005:   \n                skil = SkillFactory.getSkill(1111005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 250;\n                isAoe = true;\n                break;\n            case 1211002:   \n                skil = SkillFactory.getSkill(1211002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 250;\n                isAoe = true;\n                break;\n            case 1311006:   \n                skil = SkillFactory.getSkill(1311006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 600;\n                maxHeight = 450;\n                isAoe = true;\n                break;\n            case 2111002:   \n                skil = SkillFactory.getSkill(2111002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2111003:   \n                skil = SkillFactory.getSkill(2111003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2311004:   \n                skil = SkillFactory.getSkill(2311004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                magic = true;\n                break;\n            case 3111004:   \n                skil = SkillFactory.getSkill(3111004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 3111003:   \n                skil = SkillFactory.getSkill(3111003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 3211004:   \n                skil = SkillFactory.getSkill(3211004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 3211003:   \n                skil = SkillFactory.getSkill(3211003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 4211004:   \n                skil = SkillFactory.getSkill(4211004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 1221011:   \n                skil = SkillFactory.getSkill(1221011);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxDis = 350;\n                maxHeight = 350;\n                isAoe = true;\n                break;\n            case 2121001:   \n                skil = SkillFactory.getSkill(2121001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 175;\n                maxHeight = 175;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2121007:   \n                skil = SkillFactory.getSkill(2121007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 600;\n                maxHeight = 600;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2121006:   \n                skil = SkillFactory.getSkill(2121006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 250;\n                maxHeight = 250;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2221001:   \n                skil = SkillFactory.getSkill(2221001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 175;\n                maxHeight = 175;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2221007:   \n                skil = SkillFactory.getSkill(2221007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 600;\n                maxHeight = 600;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2321008:   \n                skil = SkillFactory.getSkill(2321008);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 600;\n                maxHeight = 600;\n                isAoe = true;\n                magic = true;\n                break;\n            case 2321001:  \n                skil = SkillFactory.getSkill(2321001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getMatk());\n                mastery = skil.getEffect(player.getSkillLevel(skil)).getMastery() * 5 + 10 \/ 100;\n                pvpDamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8);\n                min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxDis = 175;\n                maxHeight = 175;\n                isAoe = true;\n                magic = true;\n                break;\n            case 4121004:   \n                pvpDamage = (int) Math.floor(Math.random() * (180 - 150) + 150);\n                maxDis = 150;\n                maxHeight = 300;\n                isAoe = true;\n                ignore = true;\n                break;\n            case 4121008:   \n                skil = SkillFactory.getSkill(4121008);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                pvpDamage = (int) Math.floor(Math.random() * (player.calculateMaxBaseDamage(watk) * multi));\n                maxDis = 150;\n                maxHeight = 35;\n                isAoe = true;\n                ignore = true;\n                break;\n            case 4221001:   \n                skil = SkillFactory.getSkill(4221001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = true;\n                break;\n            case 4221004:   \n                pvpDamage = (int) Math.floor(Math.random() * (180 - 150) + 150);\n                maxDis = 150;\n                maxHeight = 150;\n                isAoe = true;\n                ignore = true;\n                break;\n            case 9001001:\n                pvpDamage = MAX_PVP_DAMAGE;\n                maxDis = 150;\n                maxHeight = 150;\n                isAoe = true;\n                ignore = true;\n                break;\n           \n            case 5001001:   \n                skil = SkillFactory.getSkill(5001001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5001002:   \n                skil = SkillFactory.getSkill(5001002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5101002:   \n                skil = SkillFactory.getSkill(5101002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5101003:   \n                skil = SkillFactory.getSkill(5101003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5101004:   \n                skil = SkillFactory.getSkill(5101004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5111002:   \n                skil = SkillFactory.getSkill(5111002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5111004:   \n                skil = SkillFactory.getSkill(5111004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5111006:   \n                skil = SkillFactory.getSkill(5111006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5001003:   \n                skil = SkillFactory.getSkill(5001003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                pvpDamage = (int) (5 * player.getStr() \/ 100 * watk * multi);\n                min = (int) (2.5 * player.getStr() \/ 100 * watk * multi);\n                pvpDamage = MapleCharacter.rand(min, pvpDamage);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5201001:   \n                skil = SkillFactory.getSkill(5201001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5201004:   \n                skil = SkillFactory.getSkill(5201004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5201006:   \n                skil = SkillFactory.getSkill(5201006);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5210000:   \n                skil = SkillFactory.getSkill(5210000);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5211004:   \n                skil = SkillFactory.getSkill(5211004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5211005:   \n                skil = SkillFactory.getSkill(5211005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5121001:   \n                skil = SkillFactory.getSkill(5121001);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = true;\n                break;\n            case 5121007:   \n                skil = SkillFactory.getSkill(5121007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5121002:   \n                skil = SkillFactory.getSkill(5121002);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5121004:   \n                skil = SkillFactory.getSkill(5121004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5121005:   \n                skil = SkillFactory.getSkill(5121005);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5221004:   \n                skil = SkillFactory.getSkill(5221004);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5221003:   \n                skil = SkillFactory.getSkill(5221003);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                break;\n            case 5221007:   \n                skil = SkillFactory.getSkill(5221007);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            case 5221008:   \n                skil = SkillFactory.getSkill(5221008);\n                multi = (skil.getEffect(player.getSkillLevel(skil)).getDamage() \/ 100.0);\n                maxHeight = 35;\n                isAoe = false;\n                ignore = true;\n                break;\n            default:\n                break;\n        }\n        if (!magic || !ignore) {\n            maxDis = player.getMaxDis(player);\n        }\n    }","cleancode":"public static void pvpdamagebalance(abstractdealdamagehandler.attackinfo attack, maplecharacter player) { matk = player.gettotalmagic(); luk = player.gettotalluk(); watk = player.gettotalwatk(); switch (attack.skill) { case 0: multi = 1; maxheight = 35; isaoe = false; break; case 1001004: skil = skillfactory.getskill(1001004); multi = skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0; maxheight = 35; isaoe = false; break; case 1001005: skil = skillfactory.getskill(1001005); multi = skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0; maxheight = 35; isaoe = false; break; case 2001004: skil = skillfactory.getskill(2001004); multi = skil.geteffect(player.getskilllevel(skil)).getmatk(); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 200; maxheight = 35; isaoe = false; magic = true; break; case 2001005: skil = skillfactory.getskill(2001005); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxheight = 35; isaoe = false; magic = true; break; case 3001004: skil = skillfactory.getskill(3001004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 3001005: skil = skillfactory.getskill(3001005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 4001334: skil = skillfactory.getskill(4001334); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 4001344: skil = skillfactory.getskill(4001344); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); pvpdamage = (int) (5 * luk \/ 100 * watk * multi); min = (int) (2.5 * luk \/ 100 * watk * multi); pvpdamage = maplecharacter.rand(min, pvpdamage); maxheight = 35; isaoe = false; ignore = true; break; case 2101004: skil = skillfactory.getskill(4101004); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 400; maxheight = 35; isaoe = false; magic = true; break; case 2101005: skil = skillfactory.getskill(2101005); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 400; maxheight = 35; isaoe = false; magic = true; break; case 2201004: skil = skillfactory.getskill(2201004); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 300; maxheight = 35; isaoe = false; magic = true; break; case 2301005: skil = skillfactory.getskill(2301005); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 300; maxheight = 35; isaoe = false; magic = true; break; case 4101005: skil = skillfactory.getskill(4101005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 4201005: skil = skillfactory.getskill(4201005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1111004: skil = skillfactory.getskill(1111004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1111003: skil = skillfactory.getskill(1111003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1311004: skil = skillfactory.getskill(1311004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1311003: skil = skillfactory.getskill(1311003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1311002: skil = skillfactory.getskill(1311002); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1311005: skil = skillfactory.getskill(1311005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1311001: skil = skillfactory.getskill(1311001); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 2211002: skil = skillfactory.getskill(2211002); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 250; maxheight = 35; isaoe = false; magic = true; break; case 2211003: skil = skillfactory.getskill(2211003); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 300; maxheight = 35; isaoe = false; magic = true; break; case 3111006: skil = skillfactory.getskill(3111006); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 1000.0); maxheight = 35; isaoe = false; break; case 3211006: skil = skillfactory.getskill(3211006); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 1000.0); maxheight = 35; isaoe = false; break; case 4111005: skil = skillfactory.getskill(4111005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 4211002: skil = skillfactory.getskill(4211002); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxdis = 200; maxheight = 35; isaoe = false; break; case 1121008: skil = skillfactory.getskill(1121008); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1121006: skil = skillfactory.getskill(1121006); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1221009: skil = skillfactory.getskill(1221009); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1221007: skil = skillfactory.getskill(1221007); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 1321003: skil = skillfactory.getskill(1321003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 2121003: skil = skillfactory.getskill(2121003); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 400; maxheight = 35; isaoe = false; magic = true; break; case 2221006: skil = skillfactory.getskill(2221006); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 400; maxheight = 35; isaoe = false; magic = true; break; case 2221003: skil = skillfactory.getskill(2221003); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 400; maxheight = 35; isaoe = false; magic = true; break; case 2321007: skil = skillfactory.getskill(2321007); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 400; maxheight = 35; isaoe = false; magic = true; break; case 3121003: skil = skillfactory.getskill(3121003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 3121004: skil = skillfactory.getskill(3121004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 3221003: skil = skillfactory.getskill(3221003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 3221001: skil = skillfactory.getskill(3221003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 3221007: pvpdamage = (int) (player.calculatemaxbasedamage(watk) * 3); min = (int) (player.calculateminbasedamage(player) * 3); pvpdamage = maplecharacter.rand(min, pvpdamage); maxheight = 35; isaoe = false; ignore = true; break; case 4121003: skil = skillfactory.getskill(4121003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 4121007: skil = skillfactory.getskill(4121007); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 4221007: skil = skillfactory.getskill(4221007); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 4221003: skil = skillfactory.getskill(4221003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 2201005: skil = skillfactory.getskill(2201005); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 250; maxheight = 250; isaoe = true; magic = true; break; case 3101005: skil = skillfactory.getskill(3101005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 250; isaoe = true; break; case 3201005: skil = skillfactory.getskill(3201005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = true; break; case 1111006: skil = skillfactory.getskill(1111006); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 250; isaoe = true; break; case 1111005: skil = skillfactory.getskill(1111005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 250; isaoe = true; break; case 1211002: skil = skillfactory.getskill(1211002); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 250; isaoe = true; break; case 1311006: skil = skillfactory.getskill(1311006); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxdis = 600; maxheight = 450; isaoe = true; break; case 2111002: skil = skillfactory.getskill(2111002); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 350; maxheight = 350; isaoe = true; magic = true; break; case 2111003: skil = skillfactory.getskill(2111003); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 350; maxheight = 350; isaoe = true; magic = true; break; case 2311004: skil = skillfactory.getskill(2311004); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 350; maxheight = 350; isaoe = true; magic = true; break; case 3111004: skil = skillfactory.getskill(3111004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxdis = 350; maxheight = 350; isaoe = true; break; case 3111003: skil = skillfactory.getskill(3111003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxdis = 350; maxheight = 350; isaoe = true; break; case 3211004: skil = skillfactory.getskill(3211004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxdis = 350; maxheight = 350; isaoe = true; break; case 3211003: skil = skillfactory.getskill(3211003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxdis = 350; maxheight = 350; isaoe = true; break; case 4211004: skil = skillfactory.getskill(4211004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 350; isaoe = true; break; case 1221011: skil = skillfactory.getskill(1221011); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxdis = 350; maxheight = 350; isaoe = true; break; case 2121001: skil = skillfactory.getskill(2121001); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 175; maxheight = 175; isaoe = true; magic = true; break; case 2121007: skil = skillfactory.getskill(2121007); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 600; maxheight = 600; isaoe = true; magic = true; break; case 2121006: skil = skillfactory.getskill(2121006); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 250; maxheight = 250; isaoe = true; magic = true; break; case 2221001: skil = skillfactory.getskill(2221001); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 175; maxheight = 175; isaoe = true; magic = true; break; case 2221007: skil = skillfactory.getskill(2221007); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 600; maxheight = 600; isaoe = true; magic = true; break; case 2321008: skil = skillfactory.getskill(2321008); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 600; maxheight = 600; isaoe = true; magic = true; break; case 2321001: skil = skillfactory.getskill(2321001); multi = (skil.geteffect(player.getskilllevel(skil)).getmatk()); mastery = skil.geteffect(player.getskilllevel(skil)).getmastery() * 5 + 10 \/ 100; pvpdamage = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8); min = (int) ((matk * 0.8) + (luk \/ 4) \/ 18 * multi * 0.8 * mastery); pvpdamage = maplecharacter.rand(min, pvpdamage); maxdis = 175; maxheight = 175; isaoe = true; magic = true; break; case 4121004: pvpdamage = (int) math.floor(math.random() * (180 - 150) + 150); maxdis = 150; maxheight = 300; isaoe = true; ignore = true; break; case 4121008: skil = skillfactory.getskill(4121008); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); pvpdamage = (int) math.floor(math.random() * (player.calculatemaxbasedamage(watk) * multi)); maxdis = 150; maxheight = 35; isaoe = true; ignore = true; break; case 4221001: skil = skillfactory.getskill(4221001); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = true; break; case 4221004: pvpdamage = (int) math.floor(math.random() * (180 - 150) + 150); maxdis = 150; maxheight = 150; isaoe = true; ignore = true; break; case 9001001: pvpdamage = max_pvp_damage; maxdis = 150; maxheight = 150; isaoe = true; ignore = true; break; case 5001001: skil = skillfactory.getskill(5001001); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5001002: skil = skillfactory.getskill(5001002); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5101002: skil = skillfactory.getskill(5101002); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5101003: skil = skillfactory.getskill(5101003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5101004: skil = skillfactory.getskill(5101004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5111002: skil = skillfactory.getskill(5111002); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5111004: skil = skillfactory.getskill(5111004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5111006: skil = skillfactory.getskill(5111006); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5001003: skil = skillfactory.getskill(5001003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); pvpdamage = (int) (5 * player.getstr() \/ 100 * watk * multi); min = (int) (2.5 * player.getstr() \/ 100 * watk * multi); pvpdamage = maplecharacter.rand(min, pvpdamage); maxheight = 35; isaoe = false; ignore = true; break; case 5201001: skil = skillfactory.getskill(5201001); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5201004: skil = skillfactory.getskill(5201004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5201006: skil = skillfactory.getskill(5201006); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5210000: skil = skillfactory.getskill(5210000); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; ignore = true; break; case 5211004: skil = skillfactory.getskill(5211004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5211005: skil = skillfactory.getskill(5211005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5121001: skil = skillfactory.getskill(5121001); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = true; break; case 5121007: skil = skillfactory.getskill(5121007); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5121002: skil = skillfactory.getskill(5121002); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; ignore = true; break; case 5121004: skil = skillfactory.getskill(5121004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5121005: skil = skillfactory.getskill(5121005); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; ignore = true; break; case 5221004: skil = skillfactory.getskill(5221004); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5221003: skil = skillfactory.getskill(5221003); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; break; case 5221007: skil = skillfactory.getskill(5221007); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; ignore = true; break; case 5221008: skil = skillfactory.getskill(5221008); multi = (skil.geteffect(player.getskilllevel(skil)).getdamage() \/ 100.0); maxheight = 35; isaoe = false; ignore = true; break; default: break; } if (!magic || !ignore) { maxdis = player.getmaxdis(player); } }","repo":"hugogrochau\/VoidMS","label":[0,0,1,0]}
{"id":17449,"original_code":"public ImmutableMap<Name, Long> snapshotModifiedTimes(JimfsPath path) throws IOException {\n    ImmutableMap.Builder<Name, Long> modifiedTimes = ImmutableMap.builder();\n    store.readLock().lock();\n    try {\n      Directory dir = (Directory) lookUp(path, Options.FOLLOW_LINKS).requireDirectory(path).file();\n      \/\/ TODO(cgdecker): Investigate whether WatchServices should keep a reference to the actual\n      \/\/ directory when SecureDirectoryStream is supported rather than looking up the directory\n      \/\/ each time the WatchService polls\n      for (DirectoryEntry entry : dir) {\n        if (!entry.name().equals(Name.SELF) && !entry.name().equals(Name.PARENT)) {\n          modifiedTimes.put(entry.name(), entry.file().getLastModifiedTime());\n        }\n      }\n      return modifiedTimes.build();\n    } finally {\n      store.readLock().unlock();\n    }\n  }","code_wo_comment":"public ImmutableMap<Name, Long> snapshotModifiedTimes(JimfsPath path) throws IOException {\n    ImmutableMap.Builder<Name, Long> modifiedTimes = ImmutableMap.builder();\n    store.readLock().lock();\n    try {\n      Directory dir = (Directory) lookUp(path, Options.FOLLOW_LINKS).requireDirectory(path).file();\n     \n     \n     \n      for (DirectoryEntry entry : dir) {\n        if (!entry.name().equals(Name.SELF) && !entry.name().equals(Name.PARENT)) {\n          modifiedTimes.put(entry.name(), entry.file().getLastModifiedTime());\n        }\n      }\n      return modifiedTimes.build();\n    } finally {\n      store.readLock().unlock();\n    }\n  }","cleancode":"public immutablemap<name, long> snapshotmodifiedtimes(jimfspath path) throws ioexception { immutablemap.builder<name, long> modifiedtimes = immutablemap.builder(); store.readlock().lock(); try { directory dir = (directory) lookup(path, options.follow_links).requiredirectory(path).file(); for (directoryentry entry : dir) { if (!entry.name().equals(name.self) && !entry.name().equals(name.parent)) { modifiedtimes.put(entry.name(), entry.file().getlastmodifiedtime()); } } return modifiedtimes.build(); } finally { store.readlock().unlock(); } }","repo":"hlemorvan\/jimfs","label":[1,0,0,0]}
{"id":33843,"original_code":"private static String createDocument(Docs service) throws IOException {\n    \/\/ TODO: Create a new Google Document in the authorized account.\n  }","code_wo_comment":"private static String createDocument(Docs service) throws IOException {\n   \n  }","cleancode":"private static string createdocument(docs service) throws ioexception { }","repo":"googleworkspace\/docs-transcripts","label":[0,1,0,0]}
{"id":33850,"original_code":"private void detectTitle() {\n    Document doc = this.contentView.getDocument();\n    if (doc instanceof HTMLDocument) {\n      HTMLDocument hdoc = (HTMLDocument)doc;\n      System.out.println(\"Document Property:\" + hdoc.getProperty(Document.TitleProperty));\n      \/\/ the following stuff did not work and I don't know why!\n      Element element = hdoc.getElement(hdoc.getDefaultRootElement(), StyleConstants.NameAttribute, HTML.Tag.TITLE);\n      if (element != null && element.getStartOffset() >= 0) {\n        try {\n          System.out.println(\"Element-based NameAttribute search: \" + doc.getText(element.getStartOffset(), element.getEndOffset() - element.getStartOffset()));\n        } catch (BadLocationException ex) {\n          \/\/ TODO Auto-generated catch block\n          ex.printStackTrace();\n        }\n      } else {\n        System.out.println(\"Element with NameAttribute TITLE not found: \"+element);\n      }\n      dumpTags(hdoc, HTML.Tag.HEAD);\n      dumpTags(hdoc, HTML.Tag.BODY);\n      dumpTags(hdoc, HTML.Tag.TITLE);\n      dumpTags(hdoc, HTML.Tag.H1);\n      HTMLDocument.Iterator iterator = hdoc.getIterator(HTML.Tag.TITLE);\n      if (iterator != null && iterator.isValid()) {\n        int startOffset = iterator.getStartOffset();\n        if (startOffset >= 0) {\n          try {\n            System.out.println(\"HTMLDocument.Iterator for tags TITLE: \" + doc.getText(startOffset, iterator.getEndOffset() - startOffset));\n          } catch (BadLocationException ex) {\n            \/\/ TODO Auto-generated catch block\n            ex.printStackTrace();\n          }\n        }\n      } else {\n        System.out.println(\"No valid iterator for tag TITLE found: \"+iterator);\n      }\n    }\n  }","code_wo_comment":"private void detectTitle() {\n    Document doc = this.contentView.getDocument();\n    if (doc instanceof HTMLDocument) {\n      HTMLDocument hdoc = (HTMLDocument)doc;\n      System.out.println(\"Document Property:\" + hdoc.getProperty(Document.TitleProperty));\n     \n      Element element = hdoc.getElement(hdoc.getDefaultRootElement(), StyleConstants.NameAttribute, HTML.Tag.TITLE);\n      if (element != null && element.getStartOffset() >= 0) {\n        try {\n          System.out.println(\"Element-based NameAttribute search: \" + doc.getText(element.getStartOffset(), element.getEndOffset() - element.getStartOffset()));\n        } catch (BadLocationException ex) {\n         \n          ex.printStackTrace();\n        }\n      } else {\n        System.out.println(\"Element with NameAttribute TITLE not found: \"+element);\n      }\n      dumpTags(hdoc, HTML.Tag.HEAD);\n      dumpTags(hdoc, HTML.Tag.BODY);\n      dumpTags(hdoc, HTML.Tag.TITLE);\n      dumpTags(hdoc, HTML.Tag.H1);\n      HTMLDocument.Iterator iterator = hdoc.getIterator(HTML.Tag.TITLE);\n      if (iterator != null && iterator.isValid()) {\n        int startOffset = iterator.getStartOffset();\n        if (startOffset >= 0) {\n          try {\n            System.out.println(\"HTMLDocument.Iterator for tags TITLE: \" + doc.getText(startOffset, iterator.getEndOffset() - startOffset));\n          } catch (BadLocationException ex) {\n           \n            ex.printStackTrace();\n          }\n        }\n      } else {\n        System.out.println(\"No valid iterator for tag TITLE found: \"+iterator);\n      }\n    }\n  }","cleancode":"private void detecttitle() { document doc = this.contentview.getdocument(); if (doc instanceof htmldocument) { htmldocument hdoc = (htmldocument)doc; system.out.println(\"document property:\" + hdoc.getproperty(document.titleproperty)); element element = hdoc.getelement(hdoc.getdefaultrootelement(), styleconstants.nameattribute, html.tag.title); if (element != null && element.getstartoffset() >= 0) { try { system.out.println(\"element-based nameattribute search: \" + doc.gettext(element.getstartoffset(), element.getendoffset() - element.getstartoffset())); } catch (badlocationexception ex) { ex.printstacktrace(); } } else { system.out.println(\"element with nameattribute title not found: \"+element); } dumptags(hdoc, html.tag.head); dumptags(hdoc, html.tag.body); dumptags(hdoc, html.tag.title); dumptags(hdoc, html.tag.h1); htmldocument.iterator iterator = hdoc.getiterator(html.tag.title); if (iterator != null && iterator.isvalid()) { int startoffset = iterator.getstartoffset(); if (startoffset >= 0) { try { system.out.println(\"htmldocument.iterator for tags title: \" + doc.gettext(startoffset, iterator.getendoffset() - startoffset)); } catch (badlocationexception ex) { ex.printstacktrace(); } } } else { system.out.println(\"no valid iterator for tag title found: \"+iterator); } } }","repo":"hubersn\/SwingHelpViewer","label":[0,1,1,0]}
{"id":17467,"original_code":"public void testMissing()\n    {\n        MissingNode n = MissingNode.getInstance();\n        assertTrue(n.isMissingNode());\n        assertEquals(JsonToken.NOT_AVAILABLE, n.asToken());\n        assertEquals(\"\", n.asText());\n        assertStandardEquals(n);\n        \/\/ 10-Dec-2018, tatu: With 2.10, should serialize same as via ObjectMapper\/ObjectWriter\n        \/\/ 10-Dec-2019, tatu: Surprise! No, this is not how it worked in 2.9, nor does it make\n        \/\/    sense... see [databind#2566] for details\n        assertEquals(\"\", n.toString());\n        assertNodeNumbersForNonNumeric(n);\n        assertTrue(n.asBoolean(true));\n        assertEquals(4, n.asInt(4));\n        assertEquals(5L, n.asLong(5));\n        assertEquals(0.25, n.asDouble(0.25));\n        assertEquals(\"foo\", n.asText(\"foo\"));\n    }","code_wo_comment":"public void testMissing()\n    {\n        MissingNode n = MissingNode.getInstance();\n        assertTrue(n.isMissingNode());\n        assertEquals(JsonToken.NOT_AVAILABLE, n.asToken());\n        assertEquals(\"\", n.asText());\n        assertStandardEquals(n);\n       \n       \n       \n        assertEquals(\"\", n.toString());\n        assertNodeNumbersForNonNumeric(n);\n        assertTrue(n.asBoolean(true));\n        assertEquals(4, n.asInt(4));\n        assertEquals(5L, n.asLong(5));\n        assertEquals(0.25, n.asDouble(0.25));\n        assertEquals(\"foo\", n.asText(\"foo\"));\n    }","cleancode":"public void testmissing() { missingnode n = missingnode.getinstance(); asserttrue(n.ismissingnode()); assertequals(jsontoken.not_available, n.astoken()); assertequals(\"\", n.astext()); assertstandardequals(n); assertequals(\"\", n.tostring()); assertnodenumbersfornonnumeric(n); asserttrue(n.asboolean(true)); assertequals(4, n.asint(4)); assertequals(5l, n.aslong(5)); assertequals(0.25, n.asdouble(0.25)); assertequals(\"foo\", n.astext(\"foo\")); }","repo":"jebbench\/jackson-dataformat-velocypack","label":[0,0,1,0]}
{"id":25662,"original_code":"public static String removerAcento(String palavra){\n        return Normalizer.normalize(palavra, Normalizer.Form.NFD).replaceAll(\"[^\\\\p{ASCII}]\", \"\");\n    }","code_wo_comment":"public static String removerAcento(String palavra){\n        return Normalizer.normalize(palavra, Normalizer.Form.NFD).replaceAll(\"[^\\\\p{ASCII}]\", \"\");\n    }","cleancode":"public static string removeracento(string palavra){ return normalizer.normalize(palavra, normalizer.form.nfd).replaceall(\"[^\\\\p{ascii}]\", \"\"); }","repo":"guilhermejulio\/PAA-IndiceInvertido","label":[0,0,0,0]}
{"id":1238,"original_code":"public void handler() { \n\tPORT_START();       \/* DSW0 *\/\n\t\/* According to the manual, 0x04, 0x08 and 0x10 should always be off,\n\tbut... *\/\n\t\tPORT_DIPNAME( 0x07, 0x00, \"Rank\" );\tPORT_DIPSETTING(    0x00, \"A\" );\tPORT_DIPSETTING(    0x01, \"B\" );\tPORT_DIPSETTING(    0x02, \"C\" );\tPORT_DIPSETTING(    0x03, \"D\" );\tPORT_DIPSETTING(    0x04, \"E\" );\tPORT_DIPSETTING(    0x05, \"F\" );\tPORT_DIPSETTING(    0x06, \"G\" );\tPORT_DIPSETTING(    0x07, \"H\" );\tPORT_DIPNAME( 0x18, 0x00, DEF_STR( \"Coin_B\") );\n\t\tPORT_DIPSETTING(    0x18, DEF_STR( \"2C_1C\") );\n\t\tPORT_DIPSETTING(    0x00, DEF_STR( \"1C_1C\") );\n\t\tPORT_DIPSETTING(    0x08, DEF_STR( \"1C_5C\"));\n\t\tPORT_DIPSETTING(    0x10, DEF_STR( \"1C_7C\") );\n\t\tPORT_DIPNAME( 0x20, 0x00, DEF_STR( \"Demo_Sounds\") );\n\t\tPORT_DIPSETTING(    0x20, DEF_STR( \"Off\") );\n\t\tPORT_DIPSETTING(    0x00, DEF_STR( \"On\") );\n\t\tPORT_BITX(    0x40, 0x00, IPT_DIPSWITCH_NAME | IPF_CHEAT, \"Rack Test\", KEYCODE_F1, IP_JOY_NONE );\tPORT_DIPSETTING(    0x00, DEF_STR( \"Off\") );\n\t\tPORT_DIPSETTING(    0x40, DEF_STR( \"On\") );\n\t\tPORT_DIPNAME( 0x80, 0x00, \"Freeze\" );\tPORT_DIPSETTING(    0x00, DEF_STR( \"Off\") );\n\t\tPORT_DIPSETTING(    0x80, DEF_STR( \"On\") );\n\t\tPORT_START();       \/* DSW1 *\/\n\t\tPORT_DIPNAME( 0x07, 0x00, DEF_STR( \"Coin_A\") );\n\t\tPORT_DIPSETTING(    0x06, DEF_STR( \"3C_1C\") );\n\t\tPORT_DIPSETTING(    0x04, DEF_STR( \"2C_1C\") );\n\t\tPORT_DIPSETTING(    0x07, DEF_STR( \"3C_2C\") );\n\t\tPORT_DIPSETTING(    0x00, DEF_STR( \"1C_1C\") );\n\t\tPORT_DIPSETTING(    0x05, DEF_STR( \"2C_3C\") );\n\t\tPORT_DIPSETTING(    0x01, DEF_STR( \"1C_2C\") );\n\t\tPORT_DIPSETTING(    0x02, DEF_STR( \"1C_3C\") );\n\t\tPORT_DIPSETTING(    0x03, DEF_STR( \"1C_6C\") );\n\t\t\/* TODO: bonus scores are different for 5 lives *\/\n\t\tPORT_DIPNAME( 0x38, 0x00, DEF_STR( \"Bonus_Life\") );\n\t\tPORT_DIPSETTING(    0x28, \"20k 70k and every 70k\" );\tPORT_DIPSETTING(    0x30, \"20k 80k and every 80k\" );\tPORT_DIPSETTING(    0x08, \"20k 60k\" );\tPORT_DIPSETTING(    0x00, \"20k 70k\" );\tPORT_DIPSETTING(    0x10, \"20k 80k\" );\tPORT_DIPSETTING(    0x18, \"30k 100k\" );\tPORT_DIPSETTING(    0x20, \"20k\" );\tPORT_DIPSETTING(    0x38, \"None\" );\/* those are the bonus with 5 lives\n\t\tPORT_DIPNAME( 0x38, 0x00, DEF_STR( \"Bonus_Life\") );\n\t\tPORT_DIPSETTING(    0x28, \"30k 100k and every 100k\" );\tPORT_DIPSETTING(    0x30, \"40k 120k and every 120k\" );\tPORT_DIPSETTING(    0x00, \"30k 80k\" );\tPORT_DIPSETTING(    0x08, \"30k 100k\" );\tPORT_DIPSETTING(    0x10, \"30k 120k\" );\tPORT_DIPSETTING(    0x18, \"30k\" );\tPORT_DIPSETTING(    0x20, \"40k\" );\tPORT_DIPSETTING(    0x38, \"None\" );*\/\n\t\tPORT_DIPNAME( 0xc0, 0x00, DEF_STR( \"Lives\") );\n\t\tPORT_DIPSETTING(    0x80, \"1\" );\tPORT_DIPSETTING(    0xc0, \"2\" );\tPORT_DIPSETTING(    0x00, \"3\" );\tPORT_DIPSETTING(    0x40, \"5\" );\n\t\tPORT_START();       \/* DSW2 *\/\n\t\tPORT_BIT( 0x03, IP_ACTIVE_HIGH, IPT_UNUSED );\tPORT_DIPNAME( 0x04, 0x00, DEF_STR( \"Cabinet\") );\n\t\tPORT_DIPSETTING(    0x00, DEF_STR( \"Upright\") );\n\t\tPORT_DIPSETTING(    0x04, DEF_STR( \"Cocktail\") );\n\t\tPORT_SERVICE( 0x08, IP_ACTIVE_HIGH );\tPORT_BIT( 0xf0, IP_ACTIVE_HIGH, IPT_UNUSED );\n\t\tPORT_START();       \/* FAKE *\/\n\t\t\/* The player inputs are not memory mapped, they are handled by an I\/O chip. *\/\n\t\t\/* These fake input ports are read by mappy_customio_data_r() *\/\n\t\tPORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_UNUSED );\tPORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_2WAY );\tPORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_UNUSED );\tPORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_2WAY );\tPORT_BIT_IMPULSE( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1, 1 );\tPORT_BITX(0x20, IP_ACTIVE_HIGH, IPT_BUTTON1, null, IP_KEY_PREVIOUS, IP_JOY_PREVIOUS );\tPORT_BIT( 0xc0, IP_ACTIVE_HIGH, IPT_UNUSED );\n\t\tPORT_START();       \/* FAKE *\/\n\t\tPORT_BIT_IMPULSE( 0x01, IP_ACTIVE_HIGH, IPT_COIN1, 1 );\/* Coin 2 is not working *\/\n\t\tPORT_BIT_IMPULSE( 0x02, IP_ACTIVE_HIGH, IPT_COIN2, 1 );\tPORT_BIT( 0x0c, IP_ACTIVE_HIGH, IPT_UNUSED );\tPORT_BIT_IMPULSE( 0x10, IP_ACTIVE_HIGH, IPT_START1, 1 );\tPORT_BIT_IMPULSE( 0x20, IP_ACTIVE_HIGH, IPT_START2, 1 );\tPORT_BIT( 0xc0, IP_ACTIVE_HIGH, IPT_UNUSED );\n\t\tPORT_START(); \t    \/* FAKE *\/\n\t\tPORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_2WAY | IPF_COCKTAIL );\tPORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_2WAY | IPF_COCKTAIL );\tPORT_BIT_IMPULSE( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 | IPF_COCKTAIL, 1 );\tPORT_BITX(0x20, IP_ACTIVE_HIGH, IPT_BUTTON1 | IPF_COCKTAIL, null, IP_KEY_PREVIOUS, IP_JOY_PREVIOUS );\n\tINPUT_PORTS_END(); }","code_wo_comment":"public void handler() { \n\tPORT_START();      \n\n\t\tPORT_DIPNAME( 0x07, 0x00, \"Rank\" );\tPORT_DIPSETTING(    0x00, \"A\" );\tPORT_DIPSETTING(    0x01, \"B\" );\tPORT_DIPSETTING(    0x02, \"C\" );\tPORT_DIPSETTING(    0x03, \"D\" );\tPORT_DIPSETTING(    0x04, \"E\" );\tPORT_DIPSETTING(    0x05, \"F\" );\tPORT_DIPSETTING(    0x06, \"G\" );\tPORT_DIPSETTING(    0x07, \"H\" );\tPORT_DIPNAME( 0x18, 0x00, DEF_STR( \"Coin_B\") );\n\t\tPORT_DIPSETTING(    0x18, DEF_STR( \"2C_1C\") );\n\t\tPORT_DIPSETTING(    0x00, DEF_STR( \"1C_1C\") );\n\t\tPORT_DIPSETTING(    0x08, DEF_STR( \"1C_5C\"));\n\t\tPORT_DIPSETTING(    0x10, DEF_STR( \"1C_7C\") );\n\t\tPORT_DIPNAME( 0x20, 0x00, DEF_STR( \"Demo_Sounds\") );\n\t\tPORT_DIPSETTING(    0x20, DEF_STR( \"Off\") );\n\t\tPORT_DIPSETTING(    0x00, DEF_STR( \"On\") );\n\t\tPORT_BITX(    0x40, 0x00, IPT_DIPSWITCH_NAME | IPF_CHEAT, \"Rack Test\", KEYCODE_F1, IP_JOY_NONE );\tPORT_DIPSETTING(    0x00, DEF_STR( \"Off\") );\n\t\tPORT_DIPSETTING(    0x40, DEF_STR( \"On\") );\n\t\tPORT_DIPNAME( 0x80, 0x00, \"Freeze\" );\tPORT_DIPSETTING(    0x00, DEF_STR( \"Off\") );\n\t\tPORT_DIPSETTING(    0x80, DEF_STR( \"On\") );\n\t\tPORT_START();      \n\t\tPORT_DIPNAME( 0x07, 0x00, DEF_STR( \"Coin_A\") );\n\t\tPORT_DIPSETTING(    0x06, DEF_STR( \"3C_1C\") );\n\t\tPORT_DIPSETTING(    0x04, DEF_STR( \"2C_1C\") );\n\t\tPORT_DIPSETTING(    0x07, DEF_STR( \"3C_2C\") );\n\t\tPORT_DIPSETTING(    0x00, DEF_STR( \"1C_1C\") );\n\t\tPORT_DIPSETTING(    0x05, DEF_STR( \"2C_3C\") );\n\t\tPORT_DIPSETTING(    0x01, DEF_STR( \"1C_2C\") );\n\t\tPORT_DIPSETTING(    0x02, DEF_STR( \"1C_3C\") );\n\t\tPORT_DIPSETTING(    0x03, DEF_STR( \"1C_6C\") );\n\t\n\t\tPORT_DIPNAME( 0x38, 0x00, DEF_STR( \"Bonus_Life\") );\n\t\tPORT_DIPSETTING(    0x28, \"20k 70k and every 70k\" );\tPORT_DIPSETTING(    0x30, \"20k 80k and every 80k\" );\tPORT_DIPSETTING(    0x08, \"20k 60k\" );\tPORT_DIPSETTING(    0x00, \"20k 70k\" );\tPORT_DIPSETTING(    0x10, \"20k 80k\" );\tPORT_DIPSETTING(    0x18, \"30k 100k\" );\tPORT_DIPSETTING(    0x20, \"20k\" );\tPORT_DIPSETTING(    0x38, \"None\" )\n\t\tPORT_DIPNAME( 0xc0, 0x00, DEF_STR( \"Lives\") );\n\t\tPORT_DIPSETTING(    0x80, \"1\" );\tPORT_DIPSETTING(    0xc0, \"2\" );\tPORT_DIPSETTING(    0x00, \"3\" );\tPORT_DIPSETTING(    0x40, \"5\" );\n\t\tPORT_START();      \n\t\tPORT_BIT( 0x03, IP_ACTIVE_HIGH, IPT_UNUSED );\tPORT_DIPNAME( 0x04, 0x00, DEF_STR( \"Cabinet\") );\n\t\tPORT_DIPSETTING(    0x00, DEF_STR( \"Upright\") );\n\t\tPORT_DIPSETTING(    0x04, DEF_STR( \"Cocktail\") );\n\t\tPORT_SERVICE( 0x08, IP_ACTIVE_HIGH );\tPORT_BIT( 0xf0, IP_ACTIVE_HIGH, IPT_UNUSED );\n\t\tPORT_START();      \n\t\n\t\n\t\tPORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_UNUSED );\tPORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_2WAY );\tPORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_UNUSED );\tPORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_2WAY );\tPORT_BIT_IMPULSE( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1, 1 );\tPORT_BITX(0x20, IP_ACTIVE_HIGH, IPT_BUTTON1, null, IP_KEY_PREVIOUS, IP_JOY_PREVIOUS );\tPORT_BIT( 0xc0, IP_ACTIVE_HIGH, IPT_UNUSED );\n\t\tPORT_START();      \n\t\tPORT_BIT_IMPULSE( 0x01, IP_ACTIVE_HIGH, IPT_COIN1, 1 )\n\t\tPORT_BIT_IMPULSE( 0x02, IP_ACTIVE_HIGH, IPT_COIN2, 1 );\tPORT_BIT( 0x0c, IP_ACTIVE_HIGH, IPT_UNUSED );\tPORT_BIT_IMPULSE( 0x10, IP_ACTIVE_HIGH, IPT_START1, 1 );\tPORT_BIT_IMPULSE( 0x20, IP_ACTIVE_HIGH, IPT_START2, 1 );\tPORT_BIT( 0xc0, IP_ACTIVE_HIGH, IPT_UNUSED );\n\t\tPORT_START(); \t   \n\t\tPORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_2WAY | IPF_COCKTAIL );\tPORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_2WAY | IPF_COCKTAIL );\tPORT_BIT_IMPULSE( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 | IPF_COCKTAIL, 1 );\tPORT_BITX(0x20, IP_ACTIVE_HIGH, IPT_BUTTON1 | IPF_COCKTAIL, null, IP_KEY_PREVIOUS, IP_JOY_PREVIOUS );\n\tINPUT_PORTS_END(); }","cleancode":"public void handler() { port_start(); port_dipname( 0x07, 0x00, \"rank\" ); port_dipsetting( 0x00, \"a\" ); port_dipsetting( 0x01, \"b\" ); port_dipsetting( 0x02, \"c\" ); port_dipsetting( 0x03, \"d\" ); port_dipsetting( 0x04, \"e\" ); port_dipsetting( 0x05, \"f\" ); port_dipsetting( 0x06, \"g\" ); port_dipsetting( 0x07, \"h\" ); port_dipname( 0x18, 0x00, def_str( \"coin_b\") ); port_dipsetting( 0x18, def_str( \"2c_1c\") ); port_dipsetting( 0x00, def_str( \"1c_1c\") ); port_dipsetting( 0x08, def_str( \"1c_5c\")); port_dipsetting( 0x10, def_str( \"1c_7c\") ); port_dipname( 0x20, 0x00, def_str( \"demo_sounds\") ); port_dipsetting( 0x20, def_str( \"off\") ); port_dipsetting( 0x00, def_str( \"on\") ); port_bitx( 0x40, 0x00, ipt_dipswitch_name | ipf_cheat, \"rack test\", keycode_f1, ip_joy_none ); port_dipsetting( 0x00, def_str( \"off\") ); port_dipsetting( 0x40, def_str( \"on\") ); port_dipname( 0x80, 0x00, \"freeze\" ); port_dipsetting( 0x00, def_str( \"off\") ); port_dipsetting( 0x80, def_str( \"on\") ); port_start(); port_dipname( 0x07, 0x00, def_str( \"coin_a\") ); port_dipsetting( 0x06, def_str( \"3c_1c\") ); port_dipsetting( 0x04, def_str( \"2c_1c\") ); port_dipsetting( 0x07, def_str( \"3c_2c\") ); port_dipsetting( 0x00, def_str( \"1c_1c\") ); port_dipsetting( 0x05, def_str( \"2c_3c\") ); port_dipsetting( 0x01, def_str( \"1c_2c\") ); port_dipsetting( 0x02, def_str( \"1c_3c\") ); port_dipsetting( 0x03, def_str( \"1c_6c\") ); port_dipname( 0x38, 0x00, def_str( \"bonus_life\") ); port_dipsetting( 0x28, \"20k 70k and every 70k\" ); port_dipsetting( 0x30, \"20k 80k and every 80k\" ); port_dipsetting( 0x08, \"20k 60k\" ); port_dipsetting( 0x00, \"20k 70k\" ); port_dipsetting( 0x10, \"20k 80k\" ); port_dipsetting( 0x18, \"30k 100k\" ); port_dipsetting( 0x20, \"20k\" ); port_dipsetting( 0x38, \"none\" ) port_dipname( 0xc0, 0x00, def_str( \"lives\") ); port_dipsetting( 0x80, \"1\" ); port_dipsetting( 0xc0, \"2\" ); port_dipsetting( 0x00, \"3\" ); port_dipsetting( 0x40, \"5\" ); port_start(); port_bit( 0x03, ip_active_high, ipt_unused ); port_dipname( 0x04, 0x00, def_str( \"cabinet\") ); port_dipsetting( 0x00, def_str( \"upright\") ); port_dipsetting( 0x04, def_str( \"cocktail\") ); port_service( 0x08, ip_active_high ); port_bit( 0xf0, ip_active_high, ipt_unused ); port_start(); port_bit( 0x01, ip_active_high, ipt_unused ); port_bit( 0x02, ip_active_high, ipt_joystick_right | ipf_2way ); port_bit( 0x04, ip_active_high, ipt_unused ); port_bit( 0x08, ip_active_high, ipt_joystick_left | ipf_2way ); port_bit_impulse( 0x10, ip_active_high, ipt_button1, 1 ); port_bitx(0x20, ip_active_high, ipt_button1, null, ip_key_previous, ip_joy_previous ); port_bit( 0xc0, ip_active_high, ipt_unused ); port_start(); port_bit_impulse( 0x01, ip_active_high, ipt_coin1, 1 ) port_bit_impulse( 0x02, ip_active_high, ipt_coin2, 1 ); port_bit( 0x0c, ip_active_high, ipt_unused ); port_bit_impulse( 0x10, ip_active_high, ipt_start1, 1 ); port_bit_impulse( 0x20, ip_active_high, ipt_start2, 1 ); port_bit( 0xc0, ip_active_high, ipt_unused ); port_start(); port_bit( 0x02, ip_active_high, ipt_joystick_right | ipf_2way | ipf_cocktail ); port_bit( 0x08, ip_active_high, ipt_joystick_left | ipf_2way | ipf_cocktail ); port_bit_impulse( 0x10, ip_active_high, ipt_button1 | ipf_cocktail, 1 ); port_bitx(0x20, ip_active_high, ipt_button1 | ipf_cocktail, null, ip_key_previous, ip_joy_previous ); input_ports_end(); }","repo":"javaemus\/ArcoFlexDroid","label":[0,1,0,0]}
{"id":25814,"original_code":"private void updateProcessorsContexts(Map<Long, Map<String, Object>> allContexts) {\n        \/\/ this code used to be smart about which validator was used at which java-path, and provide only the contexts for that particular\n        \/\/ java-path to the processor; but that doesn't work in SEER*DMS where some edits are persisted but not registered to the engine!\n        for (ValidatingProcessor p : _processors.values())\n            p.setContexts(allContexts);\n    }","code_wo_comment":"private void updateProcessorsContexts(Map<Long, Map<String, Object>> allContexts) {\n       \n       \n        for (ValidatingProcessor p : _processors.values())\n            p.setContexts(allContexts);\n    }","cleancode":"private void updateprocessorscontexts(map<long, map<string, object>> allcontexts) { for (validatingprocessor p : _processors.values()) p.setcontexts(allcontexts); }","repo":"imsweb\/validation","label":[1,0,0,0]}
{"id":9444,"original_code":"public void dealWithEvent(WatchEvent<?> event) {\n        \/\/ could expand more processes here\n        LOG.info(\"{}:\\t {} event.\", event.context(), event.kind());\n    }","code_wo_comment":"public void dealWithEvent(WatchEvent<?> event) {\n       \n        LOG.info(\"{}:\\t {} event.\", event.context(), event.kind());\n    }","cleancode":"public void dealwithevent(watchevent<?> event) { log.info(\"{}:\\t {} event.\", event.context(), event.kind()); }","repo":"huangzhanqiao\/yuzhouwan","label":[0,1,0,0]}
{"id":25930,"original_code":"@Override\n    \/\/ TODO: copy header file inclusion\n    public AFunction cloneOnFileImpl(String newName, AFile file) {\n        \/\/ if (!function.hasBody()) {\n        \/\/ \/*add the clone to the original place in order to be included where needed *\/\n        \/\/ return makeCloneAndInsert(newName, function, true);\n        \/\/ }\n        \/* if this is a definition, add the clone to the correct file *\/\n        \/\/ App app = getRootImpl().getNode();\n        \/\/\n        \/\/ Optional<TranslationUnit> file = app.getFile(fileName);\n        \/\/\n        \/\/ if (!file.isPresent()) {\n        \/\/\n        \/\/ TranslationUnit tu = getFactory().translationUnit(new File(fileName), Collections.emptyList());\n        \/\/\n        \/\/ app.addFile(tu);\n        \/\/\n        \/\/ file = Optional.of(tu);\n        \/\/ }\n        var tu = (TranslationUnit) file.getNode();\n        var cloneFunction = makeCloneAndInsert(newName, tu, true);\n        \/* copy headers from the current file to the file with the clone *\/\n        TranslationUnit originalFile = function.getAncestorTry(TranslationUnit.class).orElse(null);\n        if (originalFile != null) {\n            var includesCopy = TreeNodeUtils.copy(originalFile.getIncludes().getIncludes());\n            \/\/ List<IncludeDecl> allIncludes = getIncludesCopyFromFile(originalFile);\n            File baseIncludePath = null;\n            \/\/ Add as many ..\/ as folders in the relative folder\n            var relativeFolderDepth = tu.getRelativeFolderpath().map(folder -> SpecsIo.getDepth(new File(folder)))\n                    .orElse(0);\n            for (int i = 0; i < relativeFolderDepth; i++) {\n                baseIncludePath = new File(baseIncludePath, \"..\/\");\n            }\n            \/\/ Add relative folder of original file\n            var relativeDepth = baseIncludePath;\n            baseIncludePath = originalFile.getRelativeFolderpath()\n                    .map(relativeFolder -> new File(relativeDepth, relativeFolder))\n                    .orElse(baseIncludePath);\n            \/\/ System.out.println(\"BASE: \" + baseIncludePath);\n            \/\/ System.out.println(\"DEPTH: \" + relativeFolderDepth);\n            \/\/ Adapt includes\n            for (var includeDecl : includesCopy) {\n                var include = includeDecl.getInclude();\n                \/\/ If angled, ignore\n                if (include.isAngled()) {\n                    continue;\n                }\n                \/\/ System.out.println(\"INCLUDE BEFORE: \" + includeDecl.getCode());\n                var newInclude = include.setInclude(new File(baseIncludePath, include.getInclude()).toString());\n                includeDecl.set(IncludeDecl.INCLUDE, newInclude);\n                \/\/ System.out.println(\"INCLUDE AFTER: \" + includeDecl.getCode());\n            }\n            \/\/ Add includes\n            includesCopy.stream().forEach(tu::addInclude);\n        }\n        return cloneFunction;\n    }","code_wo_comment":"@Override\n   \n    public AFunction cloneOnFileImpl(String newName, AFile file) {\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n        var tu = (TranslationUnit) file.getNode();\n        var cloneFunction = makeCloneAndInsert(newName, tu, true);\n       \n        TranslationUnit originalFile = function.getAncestorTry(TranslationUnit.class).orElse(null);\n        if (originalFile != null) {\n            var includesCopy = TreeNodeUtils.copy(originalFile.getIncludes().getIncludes());\n           \n            File baseIncludePath = null;\n           \n            var relativeFolderDepth = tu.getRelativeFolderpath().map(folder -> SpecsIo.getDepth(new File(folder)))\n                    .orElse(0);\n            for (int i = 0; i < relativeFolderDepth; i++) {\n                baseIncludePath = new File(baseIncludePath, \"..\/\");\n            }\n           \n            var relativeDepth = baseIncludePath;\n            baseIncludePath = originalFile.getRelativeFolderpath()\n                    .map(relativeFolder -> new File(relativeDepth, relativeFolder))\n                    .orElse(baseIncludePath);\n           \n           \n           \n            for (var includeDecl : includesCopy) {\n                var include = includeDecl.getInclude();\n               \n                if (include.isAngled()) {\n                    continue;\n                }\n               \n                var newInclude = include.setInclude(new File(baseIncludePath, include.getInclude()).toString());\n                includeDecl.set(IncludeDecl.INCLUDE, newInclude);\n               \n            }\n           \n            includesCopy.stream().forEach(tu::addInclude);\n        }\n        return cloneFunction;\n    }","cleancode":"@override public afunction cloneonfileimpl(string newname, afile file) { var tu = (translationunit) file.getnode(); var clonefunction = makecloneandinsert(newname, tu, true); translationunit originalfile = function.getancestortry(translationunit.class).orelse(null); if (originalfile != null) { var includescopy = treenodeutils.copy(originalfile.getincludes().getincludes()); file baseincludepath = null; var relativefolderdepth = tu.getrelativefolderpath().map(folder -> specsio.getdepth(new file(folder))) .orelse(0); for (int i = 0; i < relativefolderdepth; i++) { baseincludepath = new file(baseincludepath, \"..\/\"); } var relativedepth = baseincludepath; baseincludepath = originalfile.getrelativefolderpath() .map(relativefolder -> new file(relativedepth, relativefolder)) .orelse(baseincludepath); for (var includedecl : includescopy) { var include = includedecl.getinclude(); if (include.isangled()) { continue; } var newinclude = include.setinclude(new file(baseincludepath, include.getinclude()).tostring()); includedecl.set(includedecl.include, newinclude); } includescopy.stream().foreach(tu::addinclude); } return clonefunction; }","repo":"joaonmatos\/clava","label":[0,1,0,0]}
{"id":1452,"original_code":"public ServerWebExchangeLimiterBuilder partitionByPathInfo(\n\t\t\tFunction<String, String> pathToGroup) {\n\t\treturn partitionResolver(exchange -> {\n\t\t\t\/\/ TODO: pathWithinApplication?\n\t\t\tString path = exchange.getRequest().getPath().contextPath().value();\n\t\t\treturn Optional.ofNullable(path).map(pathToGroup).orElse(null);\n\t\t});\n\t}","code_wo_comment":"public ServerWebExchangeLimiterBuilder partitionByPathInfo(\n\t\t\tFunction<String, String> pathToGroup) {\n\t\treturn partitionResolver(exchange -> {\n\t\t\n\t\t\tString path = exchange.getRequest().getPath().contextPath().value();\n\t\t\treturn Optional.ofNullable(path).map(pathToGroup).orElse(null);\n\t\t});\n\t}","cleancode":"public serverwebexchangelimiterbuilder partitionbypathinfo( function<string, string> pathtogroup) { return partitionresolver(exchange -> { string path = exchange.getrequest().getpath().contextpath().value(); return optional.ofnullable(path).map(pathtogroup).orelse(null); }); }","repo":"gujiedmc\/spring-cloud-netflix","label":[1,0,0,0]}
{"id":18082,"original_code":"@Override\n\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\tURI requestUrl = exchange.getRequiredAttribute(GATEWAY_REQUEST_URL_ATTR);\n\t\tString scheme = requestUrl.getScheme();\n\t\tif (isAlreadyRouted(exchange) || !\"forward\".equals(scheme)) {\n\t\t\treturn chain.filter(exchange);\n\t\t}\n\t\t\/\/ TODO: translate url?\n\t\tif (log.isTraceEnabled()) {\n\t\t\tlog.trace(\"Forwarding to URI: \" + requestUrl);\n\t\t}\n\t\t\/**\n\t\t * \u5339\u914d\u5e76\u8f6c\u53d1\u5230\u5f53\u524d\u7f51\u5173\u5b9e\u4f8b\u672c\u5730\u63a5\u53e3\u3002\n\t\t * \u6ce8\u610f\uff1a\u9700\u8981\u901a\u8fc7 PrefixPathGatewayFilterFactory \u5c06\u8bf7\u6c42\u91cd\u5199\u8def\u5f84\uff0c\u4ee5\u5339\u914d\u672c\u5730 API \uff0c\u5426\u5219 DispatcherHandler \u8f6c\u53d1\u4f1a\u5931\u8d25\u3002\n\t\t *\/\n\t\treturn this.getDispatcherHandler().handle(exchange);\n\t}","code_wo_comment":"@Override\n\tpublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\t\tURI requestUrl = exchange.getRequiredAttribute(GATEWAY_REQUEST_URL_ATTR);\n\t\tString scheme = requestUrl.getScheme();\n\t\tif (isAlreadyRouted(exchange) || !\"forward\".equals(scheme)) {\n\t\t\treturn chain.filter(exchange);\n\t\t}\n\t\n\t\tif (log.isTraceEnabled()) {\n\t\t\tlog.trace(\"Forwarding to URI: \" + requestUrl);\n\t\t}\n\t\n\t\treturn this.getDispatcherHandler().handle(exchange);\n\t}","cleancode":"@override public mono<void> filter(serverwebexchange exchange, gatewayfilterchain chain) { uri requesturl = exchange.getrequiredattribute(gateway_request_url_attr); string scheme = requesturl.getscheme(); if (isalreadyrouted(exchange) || !\"forward\".equals(scheme)) { return chain.filter(exchange); } if (log.istraceenabled()) { log.trace(\"forwarding to uri: \" + requesturl); } return this.getdispatcherhandler().handle(exchange); }","repo":"godblessthequeen\/spring-cloud-gateway","label":[0,1,0,0]}
{"id":1759,"original_code":"protected void doInjection(InjectElement injectElement, Screen<?> controller) {\n        String name = getInjectionName(injectElement);\n        Class<?> type = getInjectionType(injectElement);\n        Object instance = getInjectedInstance(type, name, injectElement, controller);\n        if (instance != null) {\n            assignValue(injectElement.getElement(), instance, controller);\n        } else {\n            \/\/ TODO: gg, implement?\n        }\n    }","code_wo_comment":"protected void doInjection(InjectElement injectElement, Screen<?> controller) {\n        String name = getInjectionName(injectElement);\n        Class<?> type = getInjectionType(injectElement);\n        Object instance = getInjectedInstance(type, name, injectElement, controller);\n        if (instance != null) {\n            assignValue(injectElement.getElement(), instance, controller);\n        } else {\n           \n        }\n    }","cleancode":"protected void doinjection(injectelement injectelement, screen<?> controller) { string name = getinjectionname(injectelement); class<?> type = getinjectiontype(injectelement); object instance = getinjectedinstance(type, name, injectelement, controller); if (instance != null) { assignvalue(injectelement.getelement(), instance, controller); } else { } }","repo":"jmix-framework\/jmix","label":[0,1,0,0]}
{"id":9974,"original_code":"@Override\n    public void testCreateTableWithColumnComment()\n    {\n        \/\/ TODO https:\/\/github.com\/trinodb\/trino\/issues\/12469 Support column comment when creating tables\n        String tableName = \"test_create_\" + randomTableSuffix();\n        assertQueryFails(\n                \"CREATE TABLE \" + tableName + \"(\" +\n                        \"id INT WITH (primary_key=true),\" +\n                        \"a VARCHAR COMMENT 'test comment')\" +\n                        \"WITH (partition_by_hash_columns = ARRAY['id'], partition_by_hash_buckets = 2)\",\n                \"This connector does not support creating tables with column comment\");\n        assertUpdate(\"DROP TABLE IF EXISTS \" + tableName);\n    }","code_wo_comment":"@Override\n    public void testCreateTableWithColumnComment()\n    {\n       \n        String tableName = \"test_create_\" + randomTableSuffix();\n        assertQueryFails(\n                \"CREATE TABLE \" + tableName + \"(\" +\n                        \"id INT WITH (primary_key=true),\" +\n                        \"a VARCHAR COMMENT 'test comment')\" +\n                        \"WITH (partition_by_hash_columns = ARRAY['id'], partition_by_hash_buckets = 2)\",\n                \"This connector does not support creating tables with column comment\");\n        assertUpdate(\"DROP TABLE IF EXISTS \" + tableName);\n    }","cleancode":"@override public void testcreatetablewithcolumncomment() { string tablename = \"test_create_\" + randomtablesuffix(); assertqueryfails( \"create table \" + tablename + \"(\" + \"id int with (primary_key=true),\" + \"a varchar comment 'test comment')\" + \"with (partition_by_hash_columns = array['id'], partition_by_hash_buckets = 2)\", \"this connector does not support creating tables with column comment\"); assertupdate(\"drop table if exists \" + tablename); }","repo":"hitjl\/trino","label":[1,0,0,0]}
{"id":26362,"original_code":"public void checkOrUpdateToken() {\n            \/\/ TODO check token is valid or refresh token from server?\n        }","code_wo_comment":"public void checkOrUpdateToken() {\n           \n        }","cleancode":"public void checkorupdatetoken() { }","repo":"hujianhong\/DesignPattern","label":[0,1,0,0]}
{"id":2038,"original_code":"@Override\n    public Context start(String spanName, Context context) {\n        Objects.requireNonNull(spanName, \"'spanName' cannot be null.\");\n        Objects.requireNonNull(context, \"'context' cannot be null.\");\n        Builder spanBuilder = getSpanBuilder(spanName, context);\n        Span span = spanBuilder.startSpan();\n        if (span.isRecording()) {\n            \/\/ TODO (savaity): replace with the AZ_TRACING_NAMESPACE_KEY\n            String tracingNamespace = getOrDefault(context, \"az.tracing.namespace\", null, String.class);\n            if (tracingNamespace != null) {\n                span.setAttribute(AZ_NAMESPACE_KEY, AttributeValue.stringAttributeValue(tracingNamespace));\n            }\n        }\n        return context.addData(PARENT_SPAN_KEY, span);\n    }","code_wo_comment":"@Override\n    public Context start(String spanName, Context context) {\n        Objects.requireNonNull(spanName, \"'spanName' cannot be null.\");\n        Objects.requireNonNull(context, \"'context' cannot be null.\");\n        Builder spanBuilder = getSpanBuilder(spanName, context);\n        Span span = spanBuilder.startSpan();\n        if (span.isRecording()) {\n           \n            String tracingNamespace = getOrDefault(context, \"az.tracing.namespace\", null, String.class);\n            if (tracingNamespace != null) {\n                span.setAttribute(AZ_NAMESPACE_KEY, AttributeValue.stringAttributeValue(tracingNamespace));\n            }\n        }\n        return context.addData(PARENT_SPAN_KEY, span);\n    }","cleancode":"@override public context start(string spanname, context context) { objects.requirenonnull(spanname, \"'spanname' cannot be null.\"); objects.requirenonnull(context, \"'context' cannot be null.\"); builder spanbuilder = getspanbuilder(spanname, context); span span = spanbuilder.startspan(); if (span.isrecording()) { string tracingnamespace = getordefault(context, \"az.tracing.namespace\", null, string.class); if (tracingnamespace != null) { span.setattribute(az_namespace_key, attributevalue.stringattributevalue(tracingnamespace)); } } return context.adddata(parent_span_key, span); }","repo":"janjaali\/azure-sdk-for-java","label":[1,0,0,0]}
{"id":2046,"original_code":"@Test\n    void testExampleWithSettingsReader() {\n        \/\/ This way is not so good, once you cannot test for different values\n        \/\/ to see how your application will behave.\n        SettingsReader originalReader = new SettingsReader();\n        String v = originalReader.get(Settings.Home.address);\n        Assertions.assertEquals(\"This is my house\", v);\n    }","code_wo_comment":"@Test\n    void testExampleWithSettingsReader() {\n       \n       \n        SettingsReader originalReader = new SettingsReader();\n        String v = originalReader.get(Settings.Home.address);\n        Assertions.assertEquals(\"This is my house\", v);\n    }","cleancode":"@test void testexamplewithsettingsreader() { settingsreader originalreader = new settingsreader(); string v = originalreader.get(settings.home.address); assertions.assertequals(\"this is my house\", v); }","repo":"gabrsar\/DynamicSettingsExample","label":[1,0,0,0]}
{"id":18450,"original_code":"@Override\n  protected void doSomeWork(long positionUs, long elapsedRealtimeUs) throws ExoPlaybackException {\n    if (outputStreamEnded) {\n      return;\n    }\n    sourceIsReady = source.continueBuffering(trackIndex, positionUs);\n    checkForDiscontinuity(positionUs);\n    \/\/ Try and read a format if we don't have one already.\n    if (format == null && !readFormat(positionUs)) {\n      \/\/ We can't make progress without one.\n      return;\n    }\n    \/\/ If we don't have a decoder yet, we need to instantiate one.\n    \/\/ TODO: Add support for dynamic switching between one type of surface to another.\n    if (decoder == null) {\n      decoder = new VpxDecoderWrapper(outputRgb);\n      decoder.start();\n    }\n    \/\/ Rendering loop.\n    try {\n      processOutputBuffer(positionUs, elapsedRealtimeUs);\n      while (feedInputBuffer(positionUs)) {}\n    } catch (VpxDecoderException e) {\n      notifyDecoderError(e);\n      throw new ExoPlaybackException(e);\n    }\n  }","code_wo_comment":"@Override\n  protected void doSomeWork(long positionUs, long elapsedRealtimeUs) throws ExoPlaybackException {\n    if (outputStreamEnded) {\n      return;\n    }\n    sourceIsReady = source.continueBuffering(trackIndex, positionUs);\n    checkForDiscontinuity(positionUs);\n   \n    if (format == null && !readFormat(positionUs)) {\n     \n      return;\n    }\n   \n   \n    if (decoder == null) {\n      decoder = new VpxDecoderWrapper(outputRgb);\n      decoder.start();\n    }\n   \n    try {\n      processOutputBuffer(positionUs, elapsedRealtimeUs);\n      while (feedInputBuffer(positionUs)) {}\n    } catch (VpxDecoderException e) {\n      notifyDecoderError(e);\n      throw new ExoPlaybackException(e);\n    }\n  }","cleancode":"@override protected void dosomework(long positionus, long elapsedrealtimeus) throws exoplaybackexception { if (outputstreamended) { return; } sourceisready = source.continuebuffering(trackindex, positionus); checkfordiscontinuity(positionus); if (format == null && !readformat(positionus)) { return; } if (decoder == null) { decoder = new vpxdecoderwrapper(outputrgb); decoder.start(); } try { processoutputbuffer(positionus, elapsedrealtimeus); while (feedinputbuffer(positionus)) {} } catch (vpxdecoderexception e) { notifydecodererror(e); throw new exoplaybackexception(e); } }","repo":"hori-ryota\/ExoPlayer","label":[0,1,0,0]}
{"id":18486,"original_code":"public void initialize(short[] normalizedCounts, int maxSymbol, int tableLog)\n    {\n        int tableSize = 1 << tableLog;\n        \/\/ tableSize = 1 << 3 = 8 in my case\n        byte[] table = new byte[tableSize]; \/\/ TODO: allocate in workspace\n        \/\/ store the symbol which is spread\n        int highThreshold = tableSize - 1;\n        \/\/ highThreshold = 8 - 1 = 7 in my case\n        \/\/ TODO: make sure FseCompressionTable has enough size\n        log2Size = tableLog;\n        \/\/ For explanations on how to distribute symbol values over the table:\n        \/\/ http:\/\/fastcompression.blogspot.fr\/2014\/02\/fse-distributing-symbol-values.html\n        \/\/ symbol start positions\n        int[] cumulative = new int[MAX_SYMBOL + 2]; \/\/ TODO: allocate in workspace\n        \/\/ cumulative = [0,3,6,8,9] in my case\n        \/\/ store the start position of every symbol\n        cumulative[0] = 0;\n        for (int i = 1; i <= maxSymbol + 1; i++) {\n            if (normalizedCounts[i - 1] == -1) {  \n                \/\/ Low probability symbol\n                cumulative[i] = cumulative[i - 1] + 1;\n                table[highThreshold--] = (byte) (i - 1);\n            }\n            else {\n                cumulative[i] = cumulative[i - 1] + normalizedCounts[i - 1];\n            }\n        }\n        cumulative[maxSymbol + 1] = tableSize + 1;\n        \/\/ cumulative[3+1] = 8+1 = 9\n        \/\/ Spread symbols\n        int position = spreadSymbols(normalizedCounts, maxSymbol, tableSize, highThreshold, table);\n        \/\/ make sure the symbols are successfully spread\n        if (position != 0) {\n            throw new AssertionError(\"Spread symbols failed\");\n        }\n        \/\/ Build table\n        \/\/ fill in CTable1\n        for (int i = 0; i < tableSize; i++) {\n            byte symbol = table[i];\n            nextState[cumulative[symbol]++] = (short) (tableSize + i);  \/* TableU16 : sorted by symbol order; gives next state value *\/\n        }\n        \/\/ Build symbol transformation table\n        \/\/ fill in SymbolTT\n        int total = 0;\n        for (int symbol = 0; symbol <= maxSymbol; symbol++) {\n            switch (normalizedCounts[symbol]) {\n                case 0:\n                    deltaNumberOfBits[symbol] = ((tableLog + 1) << 16) - tableSize;\n                    break;\n                case -1:\n                case 1:\n                    deltaNumberOfBits[symbol] = (tableLog << 16) - tableSize;\n                    deltaFindState[symbol] = total - 1;\n                    total++;\n                    break;\n                default:\n                    int maxBitsOut = tableLog - Util.highestBit(normalizedCounts[symbol] - 1);\n                    int minStatePlus = normalizedCounts[symbol] << maxBitsOut;\n                    deltaNumberOfBits[symbol] = (maxBitsOut << 16) - minStatePlus;\n                    deltaFindState[symbol] = total - normalizedCounts[symbol];\n                    total += normalizedCounts[symbol];\n                    break;\n            }\n        }\n    }","code_wo_comment":"public void initialize(short[] normalizedCounts, int maxSymbol, int tableLog)\n    {\n        int tableSize = 1 << tableLog;\n       \n        byte[] table = new byte[tableSize];\n       \n        int highThreshold = tableSize - 1;\n       \n       \n        log2Size = tableLog;\n       \n       \n       \n        int[] cumulative = new int[MAX_SYMBOL + 2];\n       \n       \n        cumulative[0] = 0;\n        for (int i = 1; i <= maxSymbol + 1; i++) {\n            if (normalizedCounts[i - 1] == -1) {  \n               \n                cumulative[i] = cumulative[i - 1] + 1;\n                table[highThreshold--] = (byte) (i - 1);\n            }\n            else {\n                cumulative[i] = cumulative[i - 1] + normalizedCounts[i - 1];\n            }\n        }\n        cumulative[maxSymbol + 1] = tableSize + 1;\n       \n       \n        int position = spreadSymbols(normalizedCounts, maxSymbol, tableSize, highThreshold, table);\n       \n        if (position != 0) {\n            throw new AssertionError(\"Spread symbols failed\");\n        }\n       \n       \n        for (int i = 0; i < tableSize; i++) {\n            byte symbol = table[i];\n            nextState[cumulative[symbol]++] = (short) (tableSize + i); \n        }\n       \n       \n        int total = 0;\n        for (int symbol = 0; symbol <= maxSymbol; symbol++) {\n            switch (normalizedCounts[symbol]) {\n                case 0:\n                    deltaNumberOfBits[symbol] = ((tableLog + 1) << 16) - tableSize;\n                    break;\n                case -1:\n                case 1:\n                    deltaNumberOfBits[symbol] = (tableLog << 16) - tableSize;\n                    deltaFindState[symbol] = total - 1;\n                    total++;\n                    break;\n                default:\n                    int maxBitsOut = tableLog - Util.highestBit(normalizedCounts[symbol] - 1);\n                    int minStatePlus = normalizedCounts[symbol] << maxBitsOut;\n                    deltaNumberOfBits[symbol] = (maxBitsOut << 16) - minStatePlus;\n                    deltaFindState[symbol] = total - normalizedCounts[symbol];\n                    total += normalizedCounts[symbol];\n                    break;\n            }\n        }\n    }","cleancode":"public void initialize(short[] normalizedcounts, int maxsymbol, int tablelog) { int tablesize = 1 << tablelog; byte[] table = new byte[tablesize]; int highthreshold = tablesize - 1; log2size = tablelog; int[] cumulative = new int[max_symbol + 2]; cumulative[0] = 0; for (int i = 1; i <= maxsymbol + 1; i++) { if (normalizedcounts[i - 1] == -1) { cumulative[i] = cumulative[i - 1] + 1; table[highthreshold--] = (byte) (i - 1); } else { cumulative[i] = cumulative[i - 1] + normalizedcounts[i - 1]; } } cumulative[maxsymbol + 1] = tablesize + 1; int position = spreadsymbols(normalizedcounts, maxsymbol, tablesize, highthreshold, table); if (position != 0) { throw new assertionerror(\"spread symbols failed\"); } for (int i = 0; i < tablesize; i++) { byte symbol = table[i]; nextstate[cumulative[symbol]++] = (short) (tablesize + i); } int total = 0; for (int symbol = 0; symbol <= maxsymbol; symbol++) { switch (normalizedcounts[symbol]) { case 0: deltanumberofbits[symbol] = ((tablelog + 1) << 16) - tablesize; break; case -1: case 1: deltanumberofbits[symbol] = (tablelog << 16) - tablesize; deltafindstate[symbol] = total - 1; total++; break; default: int maxbitsout = tablelog - util.highestbit(normalizedcounts[symbol] - 1); int minstateplus = normalizedcounts[symbol] << maxbitsout; deltanumberofbits[symbol] = (maxbitsout << 16) - minstateplus; deltafindstate[symbol] = total - normalizedcounts[symbol]; total += normalizedcounts[symbol]; break; } } }","repo":"ibelee\/aircompressor","label":[0,1,0,0]}
{"id":10317,"original_code":"public DmnModelInstance convert(InputStream inputStream) {\n    SpreadsheetMLPackage spreadSheetPackage = null;\n    try {\n      spreadSheetPackage = SpreadsheetMLPackage.load(inputStream);\n    } catch (Docx4JException e) {\n      \/\/ TODO: checked exception\n      throw new RuntimeException(\"cannot load document\", e);\n    }\n    WorkbookPart workbookPart = spreadSheetPackage.getWorkbookPart();\n    \/\/ TODO: exception when no worksheet present\n    \/\/ TODO: make worksheet number configurable\/import all worksheets?\n    XlsxWorksheetContext worksheetContext = null;\n    WorksheetPart worksheetPart;\n    try {\n      String worksheetName;\n      DocPropsExtendedPart docPropsExtendedPart = spreadSheetPackage.getDocPropsExtendedPart();\n      if(docPropsExtendedPart!= null && docPropsExtendedPart.getContents().getTitlesOfParts() != null) {\n        worksheetName = (String) docPropsExtendedPart.getContents().getTitlesOfParts().getVector().getVariantOrI1OrI2().get(0).getValue();\n      } else {\n        worksheetName = \"default\";\n      }\n      worksheetPart = workbookPart.getWorksheet(0);\n      SharedStrings sharedStrings = workbookPart.getSharedStrings();\n      worksheetContext = new XlsxWorksheetContext(sharedStrings.getContents(), worksheetPart.getContents(), worksheetName);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Could not determine worksheet\", e);\n    }\n    return new XlsxWorksheetConverter(worksheetContext, ioDetectionStrategy).convert();\n  }","code_wo_comment":"public DmnModelInstance convert(InputStream inputStream) {\n    SpreadsheetMLPackage spreadSheetPackage = null;\n    try {\n      spreadSheetPackage = SpreadsheetMLPackage.load(inputStream);\n    } catch (Docx4JException e) {\n     \n      throw new RuntimeException(\"cannot load document\", e);\n    }\n    WorkbookPart workbookPart = spreadSheetPackage.getWorkbookPart();\n   \n   \n    XlsxWorksheetContext worksheetContext = null;\n    WorksheetPart worksheetPart;\n    try {\n      String worksheetName;\n      DocPropsExtendedPart docPropsExtendedPart = spreadSheetPackage.getDocPropsExtendedPart();\n      if(docPropsExtendedPart!= null && docPropsExtendedPart.getContents().getTitlesOfParts() != null) {\n        worksheetName = (String) docPropsExtendedPart.getContents().getTitlesOfParts().getVector().getVariantOrI1OrI2().get(0).getValue();\n      } else {\n        worksheetName = \"default\";\n      }\n      worksheetPart = workbookPart.getWorksheet(0);\n      SharedStrings sharedStrings = workbookPart.getSharedStrings();\n      worksheetContext = new XlsxWorksheetContext(sharedStrings.getContents(), worksheetPart.getContents(), worksheetName);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Could not determine worksheet\", e);\n    }\n    return new XlsxWorksheetConverter(worksheetContext, ioDetectionStrategy).convert();\n  }","cleancode":"public dmnmodelinstance convert(inputstream inputstream) { spreadsheetmlpackage spreadsheetpackage = null; try { spreadsheetpackage = spreadsheetmlpackage.load(inputstream); } catch (docx4jexception e) { throw new runtimeexception(\"cannot load document\", e); } workbookpart workbookpart = spreadsheetpackage.getworkbookpart(); xlsxworksheetcontext worksheetcontext = null; worksheetpart worksheetpart; try { string worksheetname; docpropsextendedpart docpropsextendedpart = spreadsheetpackage.getdocpropsextendedpart(); if(docpropsextendedpart!= null && docpropsextendedpart.getcontents().gettitlesofparts() != null) { worksheetname = (string) docpropsextendedpart.getcontents().gettitlesofparts().getvector().getvariantori1ori2().get(0).getvalue(); } else { worksheetname = \"default\"; } worksheetpart = workbookpart.getworksheet(0); sharedstrings sharedstrings = workbookpart.getsharedstrings(); worksheetcontext = new xlsxworksheetcontext(sharedstrings.getcontents(), worksheetpart.getcontents(), worksheetname); } catch (exception e) { throw new runtimeexception(\"could not determine worksheet\", e); } return new xlsxworksheetconverter(worksheetcontext, iodetectionstrategy).convert(); }","repo":"gerdreiss\/camunda-dmn-xlsx","label":[1,1,0,0]}
{"id":18768,"original_code":"@Test\n  public void testLast() {\n    \/\/ TODO: Test with file that has BOM\n    \/\/ TODO: Test with file that has multiple bytes for the last codepoint\n    \/\/ TODO: Test with file that requires a surrogate pair for the last codepoint\n    assertThat(utf8It.last()).isEqualTo('g');\n  }","code_wo_comment":"@Test\n  public void testLast() {\n   \n   \n   \n    assertThat(utf8It.last()).isEqualTo('g');\n  }","cleancode":"@test public void testlast() { assertthat(utf8it.last()).isequalto('g'); }","repo":"hatfieldlibrary\/solr-ocrhighlighting","label":[0,0,0,1]}
{"id":18959,"original_code":"@Test\n  public void testCascadeMergeWithNewEntity() {\n    setUp();\n    EntityMasterCascade master = new EntityMasterCascade();\n    master.setDescription(\"Master version 1\");\n    entityManager.persist(master);\n    Integer masterId = master.getPersistenceId();\n    EntityDetailCascade detail = new EntityDetailCascade();\n    detail.setMaster(master);\n    detail.setDescription(\"Detail version 1\");\n    entityManager.persist(detail);\n    Integer detailId = detail.getPersistenceId();\n    tearDown();\n    \/\/ retrieve persistence versions\n    Integer masterVersion = master.getPersistenceVersion();\n    Integer detailVersion = detail.getPersistenceVersion();\n    \/\/ modify detached entity: add a new master\n    assertEquals(master, detail.getMaster());\n    detail.setDescription(\"Detail version 2\");\n    EntityMasterCascade newMaster = new EntityMasterCascade();\n    newMaster.setDescription(\"New Master version 1\");\n    detail.setMaster(newMaster);\n    setUp();\n    \/\/ MUDO: this persist is only needed because cascading is not working\n    \/\/ for a new entity when merge is used\n    entityManager.persist(newMaster);\n    \/\/ get a managed copy from the merge operation\n    detail = entityManager.merge(detail);\n    Integer newMasterId = detail.getMaster().getPersistenceId();\n    tearDown();\n    \/\/ verification\n    setUp();\n    master = entityManager.find(EntityMasterCascade.class, masterId);\n    detail = entityManager.find(EntityDetailCascade.class, detailId);\n    newMaster = entityManager.find(EntityMasterCascade.class, newMasterId);\n    assertTrue(masterVersion.compareTo(master.getPersistenceVersion())==0);\n    assertTrue(detailVersion.compareTo(detail.getPersistenceVersion())<0);\n    assertEquals(newMaster, detail.getMaster());\n    assertEquals(1, newMaster.getDetails().size());\n    assertEquals(0, master.getDetails().size());\n    for (EntityDetailCascade d : newMaster.getDetails()) {\n      assertEquals(detail, d);\n    }\n    tearDown();\n  }","code_wo_comment":"@Test\n  public void testCascadeMergeWithNewEntity() {\n    setUp();\n    EntityMasterCascade master = new EntityMasterCascade();\n    master.setDescription(\"Master version 1\");\n    entityManager.persist(master);\n    Integer masterId = master.getPersistenceId();\n    EntityDetailCascade detail = new EntityDetailCascade();\n    detail.setMaster(master);\n    detail.setDescription(\"Detail version 1\");\n    entityManager.persist(detail);\n    Integer detailId = detail.getPersistenceId();\n    tearDown();\n   \n    Integer masterVersion = master.getPersistenceVersion();\n    Integer detailVersion = detail.getPersistenceVersion();\n   \n    assertEquals(master, detail.getMaster());\n    detail.setDescription(\"Detail version 2\");\n    EntityMasterCascade newMaster = new EntityMasterCascade();\n    newMaster.setDescription(\"New Master version 1\");\n    detail.setMaster(newMaster);\n    setUp();\n   \n   \n    entityManager.persist(newMaster);\n   \n    detail = entityManager.merge(detail);\n    Integer newMasterId = detail.getMaster().getPersistenceId();\n    tearDown();\n   \n    setUp();\n    master = entityManager.find(EntityMasterCascade.class, masterId);\n    detail = entityManager.find(EntityDetailCascade.class, detailId);\n    newMaster = entityManager.find(EntityMasterCascade.class, newMasterId);\n    assertTrue(masterVersion.compareTo(master.getPersistenceVersion())==0);\n    assertTrue(detailVersion.compareTo(detail.getPersistenceVersion())<0);\n    assertEquals(newMaster, detail.getMaster());\n    assertEquals(1, newMaster.getDetails().size());\n    assertEquals(0, master.getDetails().size());\n    for (EntityDetailCascade d : newMaster.getDetails()) {\n      assertEquals(detail, d);\n    }\n    tearDown();\n  }","cleancode":"@test public void testcascademergewithnewentity() { setup(); entitymastercascade master = new entitymastercascade(); master.setdescription(\"master version 1\"); entitymanager.persist(master); integer masterid = master.getpersistenceid(); entitydetailcascade detail = new entitydetailcascade(); detail.setmaster(master); detail.setdescription(\"detail version 1\"); entitymanager.persist(detail); integer detailid = detail.getpersistenceid(); teardown(); integer masterversion = master.getpersistenceversion(); integer detailversion = detail.getpersistenceversion(); assertequals(master, detail.getmaster()); detail.setdescription(\"detail version 2\"); entitymastercascade newmaster = new entitymastercascade(); newmaster.setdescription(\"new master version 1\"); detail.setmaster(newmaster); setup(); entitymanager.persist(newmaster); detail = entitymanager.merge(detail); integer newmasterid = detail.getmaster().getpersistenceid(); teardown(); setup(); master = entitymanager.find(entitymastercascade.class, masterid); detail = entitymanager.find(entitydetailcascade.class, detailid); newmaster = entitymanager.find(entitymastercascade.class, newmasterid); asserttrue(masterversion.compareto(master.getpersistenceversion())==0); asserttrue(detailversion.compareto(detail.getpersistenceversion())<0); assertequals(newmaster, detail.getmaster()); assertequals(1, newmaster.getdetails().size()); assertequals(0, master.getdetails().size()); for (entitydetailcascade d : newmaster.getdetails()) { assertequals(detail, d); } teardown(); }","repo":"jandppw\/ppwcode","label":[1,0,0,0]}
{"id":10979,"original_code":"@Override\n    public int choosePartition(Message msg, TopicMetadata metadata) {\n        \/\/ if key is specified, we should use key as routing;\n        \/\/ if key is not specified and no sequence id is provided, not an effectively-once publish, use the default\n        \/\/ round-robin routing.\n        if (msg.hasKey() || msg.getSequenceId() < 0) {\n            \/\/ TODO: the message key routing is problematic at this moment.\n            \/\/       https:\/\/github.com\/apache\/incubator-pulsar\/pull\/1029 is fixing that.\n            return super.choosePartition(msg, metadata);\n        }\n        \/\/ if there is no key and sequence id is provided, it is an effectively-once publish, we need to ensure\n        \/\/ for a given message it always go to one partition, so we use sequence id to do a deterministic routing.\n        return (int) (msg.getSequenceId() % metadata.numPartitions());\n    }","code_wo_comment":"@Override\n    public int choosePartition(Message msg, TopicMetadata metadata) {\n       \n       \n       \n        if (msg.hasKey() || msg.getSequenceId() < 0) {\n           \n           \n            return super.choosePartition(msg, metadata);\n        }\n       \n       \n        return (int) (msg.getSequenceId() % metadata.numPartitions());\n    }","cleancode":"@override public int choosepartition(message msg, topicmetadata metadata) { if (msg.haskey() || msg.getsequenceid() < 0) { return super.choosepartition(msg, metadata); } return (int) (msg.getsequenceid() % metadata.numpartitions()); }","repo":"ialvarez79\/pulsar","label":[0,0,1,0]}
{"id":11039,"original_code":"@RequestMapping(value = \"\/logs\", method = RequestMethod.POST)\n  @ResponseBody\n  public String logs(@RequestBody String body) throws IOException {\n    \/\/ \"application\/logplex-1\" does not conform to RFC5424.\n    \/\/ It leaves out STRUCTURED-DATA but does not replace it with\n    \/\/ a NILVALUE. To workaround this, we inject empty STRUCTURED-DATA.\n    String[] parts = body.split(\"router - \");\n    String log = parts[0] + \"router - [] \" + (parts.length > 1 ? parts[1] : \"\");\n    RFC6587SyslogDeserializer parser = new RFC6587SyslogDeserializer();\n    InputStream is = new ByteArrayInputStream(log.getBytes());\n    Map<String, ?> messages = parser.deserialize(is);\n    ObjectMapper mapper = new ObjectMapper();\n    MessageChannel toKafka = context.getBean(\"toKafka\", MessageChannel.class);\n    String json = mapper.writeValueAsString(messages);\n    toKafka.send(new GenericMessage<>(json));\n    return \"ok\";\n  }","code_wo_comment":"@RequestMapping(value = \"\/logs\", method = RequestMethod.POST)\n  @ResponseBody\n  public String logs(@RequestBody String body) throws IOException {\n   \n   \n   \n    String[] parts = body.split(\"router - \");\n    String log = parts[0] + \"router - [] \" + (parts.length > 1 ? parts[1] : \"\");\n    RFC6587SyslogDeserializer parser = new RFC6587SyslogDeserializer();\n    InputStream is = new ByteArrayInputStream(log.getBytes());\n    Map<String, ?> messages = parser.deserialize(is);\n    ObjectMapper mapper = new ObjectMapper();\n    MessageChannel toKafka = context.getBean(\"toKafka\", MessageChannel.class);\n    String json = mapper.writeValueAsString(messages);\n    toKafka.send(new GenericMessage<>(json));\n    return \"ok\";\n  }","cleancode":"@requestmapping(value = \"\/logs\", method = requestmethod.post) @responsebody public string logs(@requestbody string body) throws ioexception { string[] parts = body.split(\"router - \"); string log = parts[0] + \"router - [] \" + (parts.length > 1 ? parts[1] : \"\"); rfc6587syslogdeserializer parser = new rfc6587syslogdeserializer(); inputstream is = new bytearrayinputstream(log.getbytes()); map<string, ?> messages = parser.deserialize(is); objectmapper mapper = new objectmapper(); messagechannel tokafka = context.getbean(\"tokafka\", messagechannel.class); string json = mapper.writevalueasstring(messages); tokafka.send(new genericmessage<>(json)); return \"ok\"; }","repo":"jkutner\/heroku-replay-spring","label":[1,0,0,0]}
{"id":19239,"original_code":"public void drawFrameInThread()\n   {\n      if (frameBuffer == null)\n      {\n         return; \/\/ Framebuffer is not up yet\n      }\n      \/\/ Select gpuToVram PBO an read pixels from GPU to VRAM\n      glBindBuffer(GL_PIXEL_PACK_BUFFER, gpuToVram);\n      glReadPixels(0, 0, frameBuffer.getWidth(), frameBuffer.getHeight(), GL_BGRA, GL_UNSIGNED_BYTE, 0);\n      \/\/ Select vramToSys PBO, bind it to systemRam and copy the data over\n      glBindBuffer(GL_PIXEL_PACK_BUFFER, vramToSys);\n      ByteBuffer byteBuf = glMapBuffer(GL_PIXEL_PACK_BUFFER, GL_READ_ONLY, null);\n      \/\/ Swap indices\n      int previousGpuToVram = gpuToVram;\n      gpuToVram = vramToSys;\n      vramToSys = previousGpuToVram;\n      if (byteBuf == null)\n      {\n         return;\n      }\n      convertScreenShot2(byteBuf.asIntBuffer(), bufferedImage);\n      \/\/ Unmap buffer\n      glUnmapBuffer(GL_PIXEL_PACK_BUFFER);\n      \/\/ Unbind PBO\n      glBindBuffer(GL_PIXEL_PACK_BUFFER, 0);\n      synchronized (lock)\n      {\n         \/\/ All operations on strategy should be synchronized (?)\n         if (strategy == null)\n         {\n            try\n            {\n               createBufferStrategy(1,\n                                    new BufferCapabilities(new ImageCapabilities(true),\n                                                           new ImageCapabilities(true),\n                                                           BufferCapabilities.FlipContents.UNDEFINED));\n            }\n            catch (AWTException ex)\n            {\n               ex.printStackTrace();\n            }\n            strategy = getBufferStrategy();\n            printIfDebug(getClass().getSimpleName() + \": Visible. Create strategy.\");\n         }\n         \/\/ Draw screenshot.\n         do\n         {\n            do\n            {\n               Graphics2D g2d = (Graphics2D) strategy.getDrawGraphics();\n               if (g2d == null)\n               {\n                  printIfDebug(getClass().getSimpleName() + \": DrawGraphics was null.\");\n                  return;\n               }\n               g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);\n               \/\/             g2d.drawImage(img, transformOp, 0, 0);\n               g2d.drawImage(bufferedImage, 0, 0, null);\n               g2d.dispose();\n               strategy.show();\n            }\n            while (strategy.contentsRestored());\n         }\n         while (strategy.contentsLost());\n      }\n   }","code_wo_comment":"public void drawFrameInThread()\n   {\n      if (frameBuffer == null)\n      {\n         return;\n      }\n     \n      glBindBuffer(GL_PIXEL_PACK_BUFFER, gpuToVram);\n      glReadPixels(0, 0, frameBuffer.getWidth(), frameBuffer.getHeight(), GL_BGRA, GL_UNSIGNED_BYTE, 0);\n     \n      glBindBuffer(GL_PIXEL_PACK_BUFFER, vramToSys);\n      ByteBuffer byteBuf = glMapBuffer(GL_PIXEL_PACK_BUFFER, GL_READ_ONLY, null);\n     \n      int previousGpuToVram = gpuToVram;\n      gpuToVram = vramToSys;\n      vramToSys = previousGpuToVram;\n      if (byteBuf == null)\n      {\n         return;\n      }\n      convertScreenShot2(byteBuf.asIntBuffer(), bufferedImage);\n     \n      glUnmapBuffer(GL_PIXEL_PACK_BUFFER);\n     \n      glBindBuffer(GL_PIXEL_PACK_BUFFER, 0);\n      synchronized (lock)\n      {\n        \n         if (strategy == null)\n         {\n            try\n            {\n               createBufferStrategy(1,\n                                    new BufferCapabilities(new ImageCapabilities(true),\n                                                           new ImageCapabilities(true),\n                                                           BufferCapabilities.FlipContents.UNDEFINED));\n            }\n            catch (AWTException ex)\n            {\n               ex.printStackTrace();\n            }\n            strategy = getBufferStrategy();\n            printIfDebug(getClass().getSimpleName() + \": Visible. Create strategy.\");\n         }\n        \n         do\n         {\n            do\n            {\n               Graphics2D g2d = (Graphics2D) strategy.getDrawGraphics();\n               if (g2d == null)\n               {\n                  printIfDebug(getClass().getSimpleName() + \": DrawGraphics was null.\");\n                  return;\n               }\n               g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);\n              \n               g2d.drawImage(bufferedImage, 0, 0, null);\n               g2d.dispose();\n               strategy.show();\n            }\n            while (strategy.contentsRestored());\n         }\n         while (strategy.contentsLost());\n      }\n   }","cleancode":"public void drawframeinthread() { if (framebuffer == null) { return; } glbindbuffer(gl_pixel_pack_buffer, gputovram); glreadpixels(0, 0, framebuffer.getwidth(), framebuffer.getheight(), gl_bgra, gl_unsigned_byte, 0); glbindbuffer(gl_pixel_pack_buffer, vramtosys); bytebuffer bytebuf = glmapbuffer(gl_pixel_pack_buffer, gl_read_only, null); int previousgputovram = gputovram; gputovram = vramtosys; vramtosys = previousgputovram; if (bytebuf == null) { return; } convertscreenshot2(bytebuf.asintbuffer(), bufferedimage); glunmapbuffer(gl_pixel_pack_buffer); glbindbuffer(gl_pixel_pack_buffer, 0); synchronized (lock) { if (strategy == null) { try { createbufferstrategy(1, new buffercapabilities(new imagecapabilities(true), new imagecapabilities(true), buffercapabilities.flipcontents.undefined)); } catch (awtexception ex) { ex.printstacktrace(); } strategy = getbufferstrategy(); printifdebug(getclass().getsimplename() + \": visible. create strategy.\"); } do { do { graphics2d g2d = (graphics2d) strategy.getdrawgraphics(); if (g2d == null) { printifdebug(getclass().getsimplename() + \": drawgraphics was null.\"); return; } g2d.setrenderinghint(renderinghints.key_rendering, renderinghints.value_render_speed); g2d.drawimage(bufferedimage, 0, 0, null); g2d.dispose(); strategy.show(); } while (strategy.contentsrestored()); } while (strategy.contentslost()); } }","repo":"ihmcrobotics\/ihmc-jmonkey-engine-toolkit","label":[1,0,0,0]}
{"id":11207,"original_code":"@NonNull\n    @Override\n    public final ListenableFuture<InitialResult<T>> loadInitial(\n            @NonNull final ListenablePositionalDataSource.LoadInitialParams params) {\n        final ResolvableFuture<InitialResult<T>> future = ResolvableFuture.create();\n        getExecutor().execute(new Runnable() {\n            @Override\n            public void run() {\n                final LoadInitialParams newParams = new LoadInitialParams(\n                        params.requestedStartPosition,\n                        params.requestedLoadSize,\n                        params.pageSize,\n                        params.placeholdersEnabled);\n                LoadInitialCallback<T> callback = new LoadInitialCallback<T>() {\n                    @Override\n                    public void onResult(@NonNull List<T> data, int position, int totalCount) {\n                        if (isInvalid()) {\n                            \/\/ NOTE: this isInvalid() check works around\n                            \/\/ https:\/\/issuetracker.google.com\/issues\/124511903\n                            future.set(new InitialResult<>(Collections.<T>emptyList(), 0, 0));\n                        } else {\n                            setFuture(newParams, new InitialResult<>(data, position, totalCount));\n                        }\n                    }\n                    @Override\n                    public void onResult(@NonNull List<T> data, int position) {\n                        if (isInvalid()) {\n                            \/\/ NOTE: this isInvalid() check works around\n                            \/\/ https:\/\/issuetracker.google.com\/issues\/124511903\n                            future.set(new InitialResult<>(Collections.<T>emptyList(), 0));\n                        } else {\n                            setFuture(newParams, new InitialResult<>(data, position));\n                        }\n                    }\n                    private void setFuture(\n                            @NonNull ListenablePositionalDataSource.LoadInitialParams params,\n                            @NonNull InitialResult<T> result) {\n                        if (params.placeholdersEnabled) {\n                            result.validateForInitialTiling(params.pageSize);\n                        }\n                        future.set(result);\n                    }\n                    @Override\n                    public void onError(@NonNull Throwable error) {\n                        future.setException(error);\n                    }\n                };\n                loadInitial(newParams,\n                        callback);\n            }\n        });\n        return future;\n    }","code_wo_comment":"@NonNull\n    @Override\n    public final ListenableFuture<InitialResult<T>> loadInitial(\n            @NonNull final ListenablePositionalDataSource.LoadInitialParams params) {\n        final ResolvableFuture<InitialResult<T>> future = ResolvableFuture.create();\n        getExecutor().execute(new Runnable() {\n            @Override\n            public void run() {\n                final LoadInitialParams newParams = new LoadInitialParams(\n                        params.requestedStartPosition,\n                        params.requestedLoadSize,\n                        params.pageSize,\n                        params.placeholdersEnabled);\n                LoadInitialCallback<T> callback = new LoadInitialCallback<T>() {\n                    @Override\n                    public void onResult(@NonNull List<T> data, int position, int totalCount) {\n                        if (isInvalid()) {\n                           \n                           \n                            future.set(new InitialResult<>(Collections.<T>emptyList(), 0, 0));\n                        } else {\n                            setFuture(newParams, new InitialResult<>(data, position, totalCount));\n                        }\n                    }\n                    @Override\n                    public void onResult(@NonNull List<T> data, int position) {\n                        if (isInvalid()) {\n                           \n                           \n                            future.set(new InitialResult<>(Collections.<T>emptyList(), 0));\n                        } else {\n                            setFuture(newParams, new InitialResult<>(data, position));\n                        }\n                    }\n                    private void setFuture(\n                            @NonNull ListenablePositionalDataSource.LoadInitialParams params,\n                            @NonNull InitialResult<T> result) {\n                        if (params.placeholdersEnabled) {\n                            result.validateForInitialTiling(params.pageSize);\n                        }\n                        future.set(result);\n                    }\n                    @Override\n                    public void onError(@NonNull Throwable error) {\n                        future.setException(error);\n                    }\n                };\n                loadInitial(newParams,\n                        callback);\n            }\n        });\n        return future;\n    }","cleancode":"@nonnull @override public final listenablefuture<initialresult<t>> loadinitial( @nonnull final listenablepositionaldatasource.loadinitialparams params) { final resolvablefuture<initialresult<t>> future = resolvablefuture.create(); getexecutor().execute(new runnable() { @override public void run() { final loadinitialparams newparams = new loadinitialparams( params.requestedstartposition, params.requestedloadsize, params.pagesize, params.placeholdersenabled); loadinitialcallback<t> callback = new loadinitialcallback<t>() { @override public void onresult(@nonnull list<t> data, int position, int totalcount) { if (isinvalid()) { future.set(new initialresult<>(collections.<t>emptylist(), 0, 0)); } else { setfuture(newparams, new initialresult<>(data, position, totalcount)); } } @override public void onresult(@nonnull list<t> data, int position) { if (isinvalid()) { future.set(new initialresult<>(collections.<t>emptylist(), 0)); } else { setfuture(newparams, new initialresult<>(data, position)); } } private void setfuture( @nonnull listenablepositionaldatasource.loadinitialparams params, @nonnull initialresult<t> result) { if (params.placeholdersenabled) { result.validateforinitialtiling(params.pagesize); } future.set(result); } @override public void onerror(@nonnull throwable error) { future.setexception(error); } }; loadinitial(newparams, callback); } }); return future; }","repo":"j420247\/platform_frameworks_support","label":[1,0,0,0]}
{"id":19457,"original_code":"private void leave(String reason, EntityBareJid alternateAddress)\n    {\n        OperationSetBasicTelephonyJabberImpl basicTelephony\n            = (OperationSetBasicTelephonyJabberImpl) provider\n                .getOperationSet(OperationSetBasicTelephony.class);\n        if(basicTelephony != null && this.publishedConference != null)\n        {\n            ActiveCallsRepositoryJabberImpl activeRepository\n                    = basicTelephony.getActiveCallsRepository();\n            String callid = publishedConference.getCallId();\n            if (callid != null)\n            {\n                CallJabberImpl call = activeRepository.findCallId(callid);\n                for(CallPeerJabberImpl peer : call.getCallPeerList())\n                {\n                    try\n                    {\n                        peer.hangup(false, null, null);\n                    }\n                    catch (NotConnectedException | InterruptedException e)\n                    {\n                        logger.error(\"Could not hangup peer \" + peer.getAddress(), e);\n                    }\n                }\n            }\n        }\n        List<CallJabberImpl> tmpConferenceCalls;\n        synchronized (chatRoomConferenceCalls)\n        {\n            tmpConferenceCalls\n                = new ArrayList<CallJabberImpl>(chatRoomConferenceCalls);\n            chatRoomConferenceCalls.clear();\n        }\n        for(CallJabberImpl call : tmpConferenceCalls)\n        {\n            for(CallPeerJabberImpl peer : call.getCallPeerList())\n            {\n                try\n                {\n                    peer.hangup(false, null, null);\n                }\n                catch (NotConnectedException | InterruptedException e)\n                {\n                    logger.error(\"Could not hangup peer \" + peer.getAddress(), e);\n                }\n            }\n        }\n        clearCachedConferenceDescriptionList();\n        XMPPConnection connection = this.provider.getConnection();\n        try\n        {\n            \/\/ if we are already disconnected\n            \/\/ leave maybe called from gui when closing chat window\n            if(connection != null)\n                multiUserChat.leave();\n        }\n        catch(Throwable e)\n        {\n            logger.warn(\"Error occured while leaving, maybe just \" +\n                \"disconnected before leaving\", e);\n        }\n        \/\/ FIXME Do we have to do the following when we leave the room?\n        Hashtable<Resourcepart, ChatRoomMemberJabberImpl> membersCopy;\n        synchronized (members)\n        {\n            membersCopy = new Hashtable<>(members);\n            \/\/ Delete the list of members\n            members.clear();\n        }\n        for (ChatRoomMember member : membersCopy.values())\n            fireMemberPresenceEvent(\n                member,\n                ChatRoomMemberPresenceChangeEvent.MEMBER_LEFT,\n                \"Local user has left the chat room.\");\n        \/\/ connection can be null if we are leaving cause connection failed\n        if(connection != null)\n        {\n            connection.removeAsyncStanzaListener(invitationRejectionListeners);\n            if(presenceListener != null)\n            {\n                connection.removeAsyncStanzaListener(presenceListener);\n                presenceListener = null;\n            }\n        }\n        opSetMuc.fireLocalUserPresenceEvent(\n            this,\n            LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_LEFT,\n            reason,\n            alternateAddress != null ? alternateAddress.toString() : null);\n    }","code_wo_comment":"private void leave(String reason, EntityBareJid alternateAddress)\n    {\n        OperationSetBasicTelephonyJabberImpl basicTelephony\n            = (OperationSetBasicTelephonyJabberImpl) provider\n                .getOperationSet(OperationSetBasicTelephony.class);\n        if(basicTelephony != null && this.publishedConference != null)\n        {\n            ActiveCallsRepositoryJabberImpl activeRepository\n                    = basicTelephony.getActiveCallsRepository();\n            String callid = publishedConference.getCallId();\n            if (callid != null)\n            {\n                CallJabberImpl call = activeRepository.findCallId(callid);\n                for(CallPeerJabberImpl peer : call.getCallPeerList())\n                {\n                    try\n                    {\n                        peer.hangup(false, null, null);\n                    }\n                    catch (NotConnectedException | InterruptedException e)\n                    {\n                        logger.error(\"Could not hangup peer \" + peer.getAddress(), e);\n                    }\n                }\n            }\n        }\n        List<CallJabberImpl> tmpConferenceCalls;\n        synchronized (chatRoomConferenceCalls)\n        {\n            tmpConferenceCalls\n                = new ArrayList<CallJabberImpl>(chatRoomConferenceCalls);\n            chatRoomConferenceCalls.clear();\n        }\n        for(CallJabberImpl call : tmpConferenceCalls)\n        {\n            for(CallPeerJabberImpl peer : call.getCallPeerList())\n            {\n                try\n                {\n                    peer.hangup(false, null, null);\n                }\n                catch (NotConnectedException | InterruptedException e)\n                {\n                    logger.error(\"Could not hangup peer \" + peer.getAddress(), e);\n                }\n            }\n        }\n        clearCachedConferenceDescriptionList();\n        XMPPConnection connection = this.provider.getConnection();\n        try\n        {\n           \n           \n            if(connection != null)\n                multiUserChat.leave();\n        }\n        catch(Throwable e)\n        {\n            logger.warn(\"Error occured while leaving, maybe just \" +\n                \"disconnected before leaving\", e);\n        }\n       \n        Hashtable<Resourcepart, ChatRoomMemberJabberImpl> membersCopy;\n        synchronized (members)\n        {\n            membersCopy = new Hashtable<>(members);\n           \n            members.clear();\n        }\n        for (ChatRoomMember member : membersCopy.values())\n            fireMemberPresenceEvent(\n                member,\n                ChatRoomMemberPresenceChangeEvent.MEMBER_LEFT,\n                \"Local user has left the chat room.\");\n       \n        if(connection != null)\n        {\n            connection.removeAsyncStanzaListener(invitationRejectionListeners);\n            if(presenceListener != null)\n            {\n                connection.removeAsyncStanzaListener(presenceListener);\n                presenceListener = null;\n            }\n        }\n        opSetMuc.fireLocalUserPresenceEvent(\n            this,\n            LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_LEFT,\n            reason,\n            alternateAddress != null ? alternateAddress.toString() : null);\n    }","cleancode":"private void leave(string reason, entitybarejid alternateaddress) { operationsetbasictelephonyjabberimpl basictelephony = (operationsetbasictelephonyjabberimpl) provider .getoperationset(operationsetbasictelephony.class); if(basictelephony != null && this.publishedconference != null) { activecallsrepositoryjabberimpl activerepository = basictelephony.getactivecallsrepository(); string callid = publishedconference.getcallid(); if (callid != null) { calljabberimpl call = activerepository.findcallid(callid); for(callpeerjabberimpl peer : call.getcallpeerlist()) { try { peer.hangup(false, null, null); } catch (notconnectedexception | interruptedexception e) { logger.error(\"could not hangup peer \" + peer.getaddress(), e); } } } } list<calljabberimpl> tmpconferencecalls; synchronized (chatroomconferencecalls) { tmpconferencecalls = new arraylist<calljabberimpl>(chatroomconferencecalls); chatroomconferencecalls.clear(); } for(calljabberimpl call : tmpconferencecalls) { for(callpeerjabberimpl peer : call.getcallpeerlist()) { try { peer.hangup(false, null, null); } catch (notconnectedexception | interruptedexception e) { logger.error(\"could not hangup peer \" + peer.getaddress(), e); } } } clearcachedconferencedescriptionlist(); xmppconnection connection = this.provider.getconnection(); try { if(connection != null) multiuserchat.leave(); } catch(throwable e) { logger.warn(\"error occured while leaving, maybe just \" + \"disconnected before leaving\", e); } hashtable<resourcepart, chatroommemberjabberimpl> memberscopy; synchronized (members) { memberscopy = new hashtable<>(members); members.clear(); } for (chatroommember member : memberscopy.values()) firememberpresenceevent( member, chatroommemberpresencechangeevent.member_left, \"local user has left the chat room.\"); if(connection != null) { connection.removeasyncstanzalistener(invitationrejectionlisteners); if(presencelistener != null) { connection.removeasyncstanzalistener(presencelistener); presencelistener = null; } } opsetmuc.firelocaluserpresenceevent( this, localuserchatroompresencechangeevent.local_user_left, reason, alternateaddress != null ? alternateaddress.tostring() : null); }","repo":"hamilton467\/jitsi","label":[1,0,0,0]}
{"id":3213,"original_code":"protected abstract Object[] significantAttributes();","code_wo_comment":"protected abstract Object[] significantAttributes();","cleancode":"protected abstract object[] significantattributes();","repo":"grimwm\/flatcode","label":[1,0,0,0]}
{"id":11466,"original_code":"@JsonGetter(\"x-apiheader_cc\")\n    public String getXApiheaderCc ( ) { \n        return this.xApiheaderCc;\n    }","code_wo_comment":"@JsonGetter(\"x-apiheader_cc\")\n    public String getXApiheaderCc ( ) { \n        return this.xApiheaderCc;\n    }","cleancode":"@jsongetter(\"x-apiheader_cc\") public string getxapiheadercc ( ) { return this.xapiheadercc; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":11467,"original_code":"@JsonSetter(\"x-apiheader_cc\")\n    public void setXApiheaderCc (String value) { \n        this.xApiheaderCc = value;\n    }","code_wo_comment":"@JsonSetter(\"x-apiheader_cc\")\n    public void setXApiheaderCc (String value) { \n        this.xApiheaderCc = value;\n    }","cleancode":"@jsonsetter(\"x-apiheader_cc\") public void setxapiheadercc (string value) { this.xapiheadercc = value; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":11468,"original_code":"@JsonGetter(\"x-apiheader\")\n    public String getXApiheader ( ) { \n        return this.xApiheader;\n    }","code_wo_comment":"@JsonGetter(\"x-apiheader\")\n    public String getXApiheader ( ) { \n        return this.xApiheader;\n    }","cleancode":"@jsongetter(\"x-apiheader\") public string getxapiheader ( ) { return this.xapiheader; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":11469,"original_code":"@JsonSetter(\"x-apiheader\")\n    public void setXApiheader (String value) { \n        this.xApiheader = value;\n    }","code_wo_comment":"@JsonSetter(\"x-apiheader\")\n    public void setXApiheader (String value) { \n        this.xApiheader = value;\n    }","cleancode":"@jsonsetter(\"x-apiheader\") public void setxapiheader (string value) { this.xapiheader = value; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":11470,"original_code":"@JsonGetter(\"attributes\")\n    public Object getAttributes ( ) { \n        return this.attributes;\n    }","code_wo_comment":"@JsonGetter(\"attributes\")\n    public Object getAttributes ( ) { \n        return this.attributes;\n    }","cleancode":"@jsongetter(\"attributes\") public object getattributes ( ) { return this.attributes; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":11471,"original_code":"@JsonSetter(\"attributes\")\n    public void setAttributes (Object value) { \n        this.attributes = value;\n    }","code_wo_comment":"@JsonSetter(\"attributes\")\n    public void setAttributes (Object value) { \n        this.attributes = value;\n    }","cleancode":"@jsonsetter(\"attributes\") public void setattributes (object value) { this.attributes = value; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":11472,"original_code":"@JsonGetter(\"attachments\")\n    public List<Attachments> getAttachments ( ) { \n        return this.attachments;\n    }","code_wo_comment":"@JsonGetter(\"attachments\")\n    public List<Attachments> getAttachments ( ) { \n        return this.attachments;\n    }","cleancode":"@jsongetter(\"attachments\") public list<attachments> getattachments ( ) { return this.attachments; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":11473,"original_code":"@JsonSetter(\"attachments\")\n    public void setAttachments (List<Attachments> value) { \n        this.attachments = value;\n    }","code_wo_comment":"@JsonSetter(\"attachments\")\n    public void setAttachments (List<Attachments> value) { \n        this.attachments = value;\n    }","cleancode":"@jsonsetter(\"attachments\") public void setattachments (list<attachments> value) { this.attachments = value; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":11474,"original_code":"@JsonGetter(\"recipient_cc\")\n    public List<String> getRecipientCc ( ) { \n        return this.recipientCc;\n    }","code_wo_comment":"@JsonGetter(\"recipient_cc\")\n    public List<String> getRecipientCc ( ) { \n        return this.recipientCc;\n    }","cleancode":"@jsongetter(\"recipient_cc\") public list<string> getrecipientcc ( ) { return this.recipientcc; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":11475,"original_code":"@JsonSetter(\"recipient_cc\")\n    public void setRecipientCc (List<String> value) { \n        this.recipientCc = value;\n    }","code_wo_comment":"@JsonSetter(\"recipient_cc\")\n    public void setRecipientCc (List<String> value) { \n        this.recipientCc = value;\n    }","cleancode":"@jsonsetter(\"recipient_cc\") public void setrecipientcc (list<string> value) { this.recipientcc = value; }","repo":"geniusdibya\/pepipost-sdk-java","label":[0,0,0,0]}
{"id":3347,"original_code":"private Charge createDisputedCharge(int chargeValueCents, RequestOptions options) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException, InterruptedException {\n\t\tMap<String, Object> chargeParams = new HashMap<String, Object>();\n\t\tchargeParams.putAll(defaultChargeParams);\n\t\tchargeParams.put(\"amount\", chargeValueCents);\n\t\tchargeParams.put(\"source\", \"tok_createDispute\");\n\t\tCharge charge = Charge.create(chargeParams, options);\n\t\t\/\/ This test relies on the server asynchronously marking the charge as disputed.\n\t\t\/\/ TODO: find a more reliable way to do this instead of sleeping\n\t\tThread.sleep(10000);\n\t\tMap<String, Object> retrieveParams = new HashMap<String, Object>();\n\t\tretrieveParams.put(\"expand[]\", \"dispute\");\n\t\treturn Charge.retrieve(charge.getId(), retrieveParams, options);\n\t}","code_wo_comment":"private Charge createDisputedCharge(int chargeValueCents, RequestOptions options) throws AuthenticationException, InvalidRequestException, APIConnectionException, CardException, APIException, InterruptedException {\n\t\tMap<String, Object> chargeParams = new HashMap<String, Object>();\n\t\tchargeParams.putAll(defaultChargeParams);\n\t\tchargeParams.put(\"amount\", chargeValueCents);\n\t\tchargeParams.put(\"source\", \"tok_createDispute\");\n\t\tCharge charge = Charge.create(chargeParams, options);\n\t\n\t\n\t\tThread.sleep(10000);\n\t\tMap<String, Object> retrieveParams = new HashMap<String, Object>();\n\t\tretrieveParams.put(\"expand[]\", \"dispute\");\n\t\treturn Charge.retrieve(charge.getId(), retrieveParams, options);\n\t}","cleancode":"private charge createdisputedcharge(int chargevaluecents, requestoptions options) throws authenticationexception, invalidrequestexception, apiconnectionexception, cardexception, apiexception, interruptedexception { map<string, object> chargeparams = new hashmap<string, object>(); chargeparams.putall(defaultchargeparams); chargeparams.put(\"amount\", chargevaluecents); chargeparams.put(\"source\", \"tok_createdispute\"); charge charge = charge.create(chargeparams, options); thread.sleep(10000); map<string, object> retrieveparams = new hashmap<string, object>(); retrieveparams.put(\"expand[]\", \"dispute\"); return charge.retrieve(charge.getid(), retrieveparams, options); }","repo":"hardeepnagi\/stripe-java","label":[1,0,0,0]}
{"id":3349,"original_code":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\/\/ unpack model\n\t\tfinal Map<String, Object> modelData = this.model.getObject();\n\t\tfinal String eid = (String) modelData.get(\"eid\");\n\t\tfinal String firstName = (String) modelData.get(\"firstName\");\n\t\tfinal String lastName = (String) modelData.get(\"lastName\");\n\t\tfinal String displayName = (String) modelData.get(\"displayName\");\n\t\tfinal GbStudentNameSortOrder nameSortOrder = (GbStudentNameSortOrder) modelData.get(\"nameSortOrder\");\n\t\t\/\/ link\n\t\tfinal GbAjaxLink<String> link = new GbAjaxLink<String>(\"link\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getStudentGradeSummaryWindow();\n\t\t\t\tfinal GradebookUiSettings settings = gradebookPage.getUiSettings();\n\t\t\t\tfinal Map<String, Object> windowModel = new HashMap<>(StudentNameCellPanel.this.model.getObject());\n\t\t\t\twindowModel.put(\"groupedByCategoryByDefault\", settings.isCategoriesEnabled());\n\t\t\t\tfinal Component content = new StudentGradeSummaryPanel(window.getContentId(), Model.ofMap(windowModel), window);\n\t\t\t\tif (window.isShown() && window.isVisible()) {\n\t\t\t\t\twindow.replace(content);\n\t\t\t\t\tcontent.setVisible(true);\n\t\t\t\t\ttarget.add(content);\n\t\t\t\t} else {\n\t\t\t\t\twindow.setContent(content);\n\t\t\t\t\twindow.setComponentToReturnFocusTo(this);\n\t\t\t\t\twindow.show(target);\n\t\t\t\t}\n\t\t\t\tcontent.setOutputMarkupId(true);\n\t\t\t\tfinal String modalTitle = (new StringResourceModel(\"heading.studentsummary\",\n\t\t\t\t\t\tnull, new Object[] { displayName, eid })).getString();\n\t\t\t\ttarget.appendJavaScript(String.format(\n\t\t\t\t\t\t\"new GradebookGradeSummary($(\\\"#%s\\\"), false, \\\"%s\\\");\",\n\t\t\t\t\t\tcontent.getMarkupId(), modalTitle));\n\t\t\t}\n\t\t};\n\t\tlink.setOutputMarkupId(true);\n\t\t\/\/ name label\n\t\tlink.add(new Label(\"name\", getFormattedStudentName(firstName, lastName, nameSortOrder)));\n\t\t\/\/ eid label, configurable\n\t\tlink.add(new Label(\"eid\", eid) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\treturn true; \/\/ TODO use config, will need to be passed in the model map\n\t\t\t}\n\t\t});\n\t\tadd(link);\n\t}","code_wo_comment":"@Override\n\tpublic void onInitialize() {\n\t\tsuper.onInitialize();\n\t\n\t\tfinal Map<String, Object> modelData = this.model.getObject();\n\t\tfinal String eid = (String) modelData.get(\"eid\");\n\t\tfinal String firstName = (String) modelData.get(\"firstName\");\n\t\tfinal String lastName = (String) modelData.get(\"lastName\");\n\t\tfinal String displayName = (String) modelData.get(\"displayName\");\n\t\tfinal GbStudentNameSortOrder nameSortOrder = (GbStudentNameSortOrder) modelData.get(\"nameSortOrder\");\n\t\n\t\tfinal GbAjaxLink<String> link = new GbAjaxLink<String>(\"link\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t@Override\n\t\t\tpublic void onClick(final AjaxRequestTarget target) {\n\t\t\t\tfinal GradebookPage gradebookPage = (GradebookPage) getPage();\n\t\t\t\tfinal GbModalWindow window = gradebookPage.getStudentGradeSummaryWindow();\n\t\t\t\tfinal GradebookUiSettings settings = gradebookPage.getUiSettings();\n\t\t\t\tfinal Map<String, Object> windowModel = new HashMap<>(StudentNameCellPanel.this.model.getObject());\n\t\t\t\twindowModel.put(\"groupedByCategoryByDefault\", settings.isCategoriesEnabled());\n\t\t\t\tfinal Component content = new StudentGradeSummaryPanel(window.getContentId(), Model.ofMap(windowModel), window);\n\t\t\t\tif (window.isShown() && window.isVisible()) {\n\t\t\t\t\twindow.replace(content);\n\t\t\t\t\tcontent.setVisible(true);\n\t\t\t\t\ttarget.add(content);\n\t\t\t\t} else {\n\t\t\t\t\twindow.setContent(content);\n\t\t\t\t\twindow.setComponentToReturnFocusTo(this);\n\t\t\t\t\twindow.show(target);\n\t\t\t\t}\n\t\t\t\tcontent.setOutputMarkupId(true);\n\t\t\t\tfinal String modalTitle = (new StringResourceModel(\"heading.studentsummary\",\n\t\t\t\t\t\tnull, new Object[] { displayName, eid })).getString();\n\t\t\t\ttarget.appendJavaScript(String.format(\n\t\t\t\t\t\t\"new GradebookGradeSummary($(\\\"#%s\\\"), false, \\\"%s\\\");\",\n\t\t\t\t\t\tcontent.getMarkupId(), modalTitle));\n\t\t\t}\n\t\t};\n\t\tlink.setOutputMarkupId(true);\n\t\n\t\tlink.add(new Label(\"name\", getFormattedStudentName(firstName, lastName, nameSortOrder)));\n\t\n\t\tlink.add(new Label(\"eid\", eid) {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t@Override\n\t\t\tpublic boolean isVisible() {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tadd(link);\n\t}","cleancode":"@override public void oninitialize() { super.oninitialize(); final map<string, object> modeldata = this.model.getobject(); final string eid = (string) modeldata.get(\"eid\"); final string firstname = (string) modeldata.get(\"firstname\"); final string lastname = (string) modeldata.get(\"lastname\"); final string displayname = (string) modeldata.get(\"displayname\"); final gbstudentnamesortorder namesortorder = (gbstudentnamesortorder) modeldata.get(\"namesortorder\"); final gbajaxlink<string> link = new gbajaxlink<string>(\"link\") { private static final long serialversionuid = 1l; @override public void onclick(final ajaxrequesttarget target) { final gradebookpage gradebookpage = (gradebookpage) getpage(); final gbmodalwindow window = gradebookpage.getstudentgradesummarywindow(); final gradebookuisettings settings = gradebookpage.getuisettings(); final map<string, object> windowmodel = new hashmap<>(studentnamecellpanel.this.model.getobject()); windowmodel.put(\"groupedbycategorybydefault\", settings.iscategoriesenabled()); final component content = new studentgradesummarypanel(window.getcontentid(), model.ofmap(windowmodel), window); if (window.isshown() && window.isvisible()) { window.replace(content); content.setvisible(true); target.add(content); } else { window.setcontent(content); window.setcomponenttoreturnfocusto(this); window.show(target); } content.setoutputmarkupid(true); final string modaltitle = (new stringresourcemodel(\"heading.studentsummary\", null, new object[] { displayname, eid })).getstring(); target.appendjavascript(string.format( \"new gradebookgradesummary($(\\\"#%s\\\"), false, \\\"%s\\\");\", content.getmarkupid(), modaltitle)); } }; link.setoutputmarkupid(true); link.add(new label(\"name\", getformattedstudentname(firstname, lastname, namesortorder))); link.add(new label(\"eid\", eid) { private static final long serialversionuid = 1l; @override public boolean isvisible() { return true; } }); add(link); }","repo":"jd3538\/Marist-Sakai-11.x","label":[0,1,0,0]}
{"id":11653,"original_code":"private void configureComponents() {\n        \/\/Associate the data with the formLayout columns and load the data. \n        try \n        {\n            \/\/1 - Set properties of the form\n            this.formLayout.addClassName(\"fichier-form\");\n            this.formLayout.setSizeFull(); \/\/sets the form size to fill the screen.\n            \/\/2 - Define the Fields instances to use - We don't use .setLabel since we will use addFormItem instead of add to add items to the form - addFormItem allows us to set SuperTextField with on a FormaLayout when add doesn't\n            this.txtCodeDomaineActivite.setWidth(100, Unit.PIXELS);\n            this.txtCodeDomaineActivite.setRequired(true);\n            this.txtCodeDomaineActivite.setRequiredIndicatorVisible(true);\n            this.txtCodeDomaineActivite.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtLibelleDomaineActivite.setWidth(400, Unit.PIXELS);\n            this.txtLibelleDomaineActivite.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtLibelleCourtDomaineActivite.setWidth(400, Unit.PIXELS);\n            this.txtLibelleCourtDomaineActivite.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.cboCodeSecteurActivite.setWidth(400, Unit.PIXELS);\n            this.cboCodeSecteurActivite.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SecteurActivite is the presentation value\n            this.cboCodeSecteurActivite.setItemLabelGenerator(SecteurActivite::getLibelleSecteurActivite);\n            this.cboCodeSecteurActivite.setRequired(true);\n            this.cboCodeSecteurActivite.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeSecteurActivite.setLabel(\"SecteurActivite\");\n            \/\/???this.cboCodeSecteurActivite.setId(\"person\");\n            this.cboCodeSecteurActivite.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeSecteurActivite.setAllowCustomValue(true);\n            this.cboCodeSecteurActivite.setPreventInvalidInput(true);\n            this.cboCodeSecteurActivite.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeSecteurActivite (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"Le Secteur d'Activit\u00e9 choisi est actuellement d\u00e9sactiv\u00e9. Veuillez en saisir un autre.\");\n                        \/\/Cancel\n                        this.cboCodeSecteurActivite.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeSecteurActivite.addCustomValueSetListener(event -> {\n                this.cboCodeSecteurActivite_NotInList(event.getDetail(), 50);\n            });\n            this.chkInactif.setAutofocus(false); \/\/Sepecific for isInactif\n            \/\/3 - Bind Fields instances to use (Manual Data Binding)\n            \/\/ Easily bind forms to beans and manage validation and buffering\n            \/\/To bind a component to read-only data, use a null value for the setter.\n            Label lblCodeDomaineActiviteValidationStatus = new Label();\n            this.binder.forField(this.txtCodeDomaineActivite)\n                .asRequired(\"La Saisie du Code Domaine d'Activit\u00e9 est Obligatoire. Veuillez saisir le Code Domaine d'Activit\u00e9.\")\n                .withValidator(text -> text != null && text.length() <= 10, \"Code Domaine d'Activit\u00e9 ne peut contenir au plus 10 caract\u00e8res\")\n                .withValidationStatusHandler(status -> {lblCodeDomaineActiviteValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblCodeDomaineActiviteValidationStatus.setVisible(status.isError());})\n                .bind(DomaineActivite::getCodeDomaineActivite, DomaineActivite::setCodeDomaineActivite); \n            Label lblLibelleDomaineActiviteValidationStatus = new Label();\n            this.binder.forField(this.txtLibelleDomaineActivite)\n                .withValidator(text -> text.length() <= 50, \"Libell\u00e9 Domaine d'Activit\u00e9 ne peut contenir au plus 50 caract\u00e8res.\")\n                .withValidationStatusHandler(status -> {lblLibelleDomaineActiviteValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblLibelleDomaineActiviteValidationStatus.setVisible(status.isError());})\n                .bind(DomaineActivite::getLibelleDomaineActivite, DomaineActivite::setLibelleDomaineActivite); \n            Label lblLibelleCourtDomaineActiviteValidationStatus = new Label();\n            this.binder.forField(this.txtLibelleCourtDomaineActivite)\n                .withValidator(text -> text.length() <= 20, \"Libell\u00e9 Abr\u00e9g\u00e9 Domaine d'Activit\u00e9 ne peut contenir au plus 20 caract\u00e8res.\")\n                .withValidationStatusHandler(status -> {lblLibelleCourtDomaineActiviteValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblLibelleCourtDomaineActiviteValidationStatus.setVisible(status.isError());})\n                .bind(DomaineActivite::getLibelleCourtDomaineActivite, DomaineActivite::setLibelleCourtDomaineActivite); \n            Label lblSecteurActiviteValidationStatus = new Label();\n            this.binder.forField(this.cboCodeSecteurActivite)\n                .asRequired(\"La Saisie du Secteur d'Activit\u00e9 est requise. Veuillez s\u00e9lectionner un Secteur d'Activit\u00e9\")\n                .bind(DomaineActivite::getSecteurActivite, DomaineActivite::setSecteurActivite); \n            this.binder.forField(this.chkInactif)\n                .bind(DomaineActivite::isInactif, DomaineActivite::setInactif); \n            \/* 3 - Alternative : Bind Fields instances that need validators manually and then bind all remaining fields using the bindInstanceFields method\n            this.binder.bindInstanceFields(this.formLayout); \/\/Automatic Data Binding\n            \/\/bindInstanceFields matches fields in DomaineActivite and DomaineActiviteView based on their names.\n            *\/\n            \/\/4 - Add input fields to formLayout - We don't use .setLabel since we will use addFormItem instead of add to add items to the form - addFormItem allows us to set SuperTextField with on a FormaLayout when add doesn't\n            \/\/this.formLayout.add(this.txtCodeDomaineActivite, this.txtLibelleDomaineActivite, this.txtLibelleCourtDomaineActivite, this.chkInactif);\n            \/\/4 - Alternative\n            this.formLayout.addFormItem(this.txtCodeDomaineActivite, \"Code Domaine d'Activit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n            this.formLayout.addFormItem(this.txtLibelleDomaineActivite, \"Libell\u00e9 Domaine d'Activit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n            this.formLayout.addFormItem(this.txtLibelleCourtDomaineActivite, \"Libell\u00e9 Abr\u00e9g\u00e9 Domaine d'Activit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n            this.formLayout.addFormItem(this.cboCodeSecteurActivite, \"Secteur d'Activit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n            this.formLayout.addFormItem(this.chkInactif, \"Inactif :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n            \/\/5 - Making the Layout Responsive : Custom responsive layouting\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top. In both cases there is only 1 column.\n            this.formLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n        } \n        catch (Exception e) \n        {\n            MessageDialogHelper.showAlertDialog(\"EditerDomaineActiviteDialog.configureComponents\", e.toString());\n            e.printStackTrace();\n        }\n    }","code_wo_comment":"private void configureComponents() {\n       \n        try \n        {\n           \n            this.formLayout.addClassName(\"fichier-form\");\n            this.formLayout.setSizeFull();\n           \n            this.txtCodeDomaineActivite.setWidth(100, Unit.PIXELS);\n            this.txtCodeDomaineActivite.setRequired(true);\n            this.txtCodeDomaineActivite.setRequiredIndicatorVisible(true);\n            this.txtCodeDomaineActivite.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtLibelleDomaineActivite.setWidth(400, Unit.PIXELS);\n            this.txtLibelleDomaineActivite.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtLibelleCourtDomaineActivite.setWidth(400, Unit.PIXELS);\n            this.txtLibelleCourtDomaineActivite.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.cboCodeSecteurActivite.setWidth(400, Unit.PIXELS);\n            this.cboCodeSecteurActivite.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeSecteurActivite.setItemLabelGenerator(SecteurActivite::getLibelleSecteurActivite);\n            this.cboCodeSecteurActivite.setRequired(true);\n            this.cboCodeSecteurActivite.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeSecteurActivite.setClearButtonVisible(true);\n           \n            this.cboCodeSecteurActivite.setAllowCustomValue(true);\n            this.cboCodeSecteurActivite.setPreventInvalidInput(true);\n            this.cboCodeSecteurActivite.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"Le Secteur d'Activit\u00e9 choisi est actuellement d\u00e9sactiv\u00e9. Veuillez en saisir un autre.\");\n                       \n                        this.cboCodeSecteurActivite.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeSecteurActivite.addCustomValueSetListener(event -> {\n                this.cboCodeSecteurActivite_NotInList(event.getDetail(), 50);\n            });\n            this.chkInactif.setAutofocus(false);\n           \n           \n           \n            Label lblCodeDomaineActiviteValidationStatus = new Label();\n            this.binder.forField(this.txtCodeDomaineActivite)\n                .asRequired(\"La Saisie du Code Domaine d'Activit\u00e9 est Obligatoire. Veuillez saisir le Code Domaine d'Activit\u00e9.\")\n                .withValidator(text -> text != null && text.length() <= 10, \"Code Domaine d'Activit\u00e9 ne peut contenir au plus 10 caract\u00e8res\")\n                .withValidationStatusHandler(status -> {lblCodeDomaineActiviteValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblCodeDomaineActiviteValidationStatus.setVisible(status.isError());})\n                .bind(DomaineActivite::getCodeDomaineActivite, DomaineActivite::setCodeDomaineActivite); \n            Label lblLibelleDomaineActiviteValidationStatus = new Label();\n            this.binder.forField(this.txtLibelleDomaineActivite)\n                .withValidator(text -> text.length() <= 50, \"Libell\u00e9 Domaine d'Activit\u00e9 ne peut contenir au plus 50 caract\u00e8res.\")\n                .withValidationStatusHandler(status -> {lblLibelleDomaineActiviteValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblLibelleDomaineActiviteValidationStatus.setVisible(status.isError());})\n                .bind(DomaineActivite::getLibelleDomaineActivite, DomaineActivite::setLibelleDomaineActivite); \n            Label lblLibelleCourtDomaineActiviteValidationStatus = new Label();\n            this.binder.forField(this.txtLibelleCourtDomaineActivite)\n                .withValidator(text -> text.length() <= 20, \"Libell\u00e9 Abr\u00e9g\u00e9 Domaine d'Activit\u00e9 ne peut contenir au plus 20 caract\u00e8res.\")\n                .withValidationStatusHandler(status -> {lblLibelleCourtDomaineActiviteValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblLibelleCourtDomaineActiviteValidationStatus.setVisible(status.isError());})\n                .bind(DomaineActivite::getLibelleCourtDomaineActivite, DomaineActivite::setLibelleCourtDomaineActivite); \n            Label lblSecteurActiviteValidationStatus = new Label();\n            this.binder.forField(this.cboCodeSecteurActivite)\n                .asRequired(\"La Saisie du Secteur d'Activit\u00e9 est requise. Veuillez s\u00e9lectionner un Secteur d'Activit\u00e9\")\n                .bind(DomaineActivite::getSecteurActivite, DomaineActivite::setSecteurActivite); \n            this.binder.forField(this.chkInactif)\n                .bind(DomaineActivite::isInactif, DomaineActivite::setInactif); \n           \n           \n           \n           \n            this.formLayout.addFormItem(this.txtCodeDomaineActivite, \"Code Domaine d'Activit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n            this.formLayout.addFormItem(this.txtLibelleDomaineActivite, \"Libell\u00e9 Domaine d'Activit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n            this.formLayout.addFormItem(this.txtLibelleCourtDomaineActivite, \"Libell\u00e9 Abr\u00e9g\u00e9 Domaine d'Activit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n            this.formLayout.addFormItem(this.cboCodeSecteurActivite, \"Secteur d'Activit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n            this.formLayout.addFormItem(this.chkInactif, \"Inactif :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH250);\n           \n           \n            this.formLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n        } \n        catch (Exception e) \n        {\n            MessageDialogHelper.showAlertDialog(\"EditerDomaineActiviteDialog.configureComponents\", e.toString());\n            e.printStackTrace();\n        }\n    }","cleancode":"private void configurecomponents() { try { this.formlayout.addclassname(\"fichier-form\"); this.formlayout.setsizefull(); this.txtcodedomaineactivite.setwidth(100, unit.pixels); this.txtcodedomaineactivite.setrequired(true); this.txtcodedomaineactivite.setrequiredindicatorvisible(true); this.txtcodedomaineactivite.addclassname(textfield_left_label); this.txtlibelledomaineactivite.setwidth(400, unit.pixels); this.txtlibelledomaineactivite.addclassname(textfield_left_label); this.txtlibellecourtdomaineactivite.setwidth(400, unit.pixels); this.txtlibellecourtdomaineactivite.addclassname(textfield_left_label); this.cbocodesecteuractivite.setwidth(400, unit.pixels); this.cbocodesecteuractivite.addclassname(combobox_left_label); this.cbocodesecteuractivite.setitemlabelgenerator(secteuractivite::getlibellesecteuractivite); this.cbocodesecteuractivite.setrequired(true); this.cbocodesecteuractivite.setrequiredindicatorvisible(true); this.cbocodesecteuractivite.setclearbuttonvisible(true); this.cbocodesecteuractivite.setallowcustomvalue(true); this.cbocodesecteuractivite.setpreventinvalidinput(true); this.cbocodesecteuractivite.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"le secteur d'activit\u00e9 choisi est actuellement d\u00e9sactiv\u00e9. veuillez en saisir un autre.\"); this.cbocodesecteuractivite.setvalue(event.getoldvalue()); } } }); this.cbocodesecteuractivite.addcustomvaluesetlistener(event -> { this.cbocodesecteuractivite_notinlist(event.getdetail(), 50); }); this.chkinactif.setautofocus(false); label lblcodedomaineactivitevalidationstatus = new label(); this.binder.forfield(this.txtcodedomaineactivite) .asrequired(\"la saisie du code domaine d'activit\u00e9 est obligatoire. veuillez saisir le code domaine d'activit\u00e9.\") .withvalidator(text -> text != null && text.length() <= 10, \"code domaine d'activit\u00e9 ne peut contenir au plus 10 caract\u00e8res\") .withvalidationstatushandler(status -> {lblcodedomaineactivitevalidationstatus.settext(status.getmessage().orelse(\"\")); lblcodedomaineactivitevalidationstatus.setvisible(status.iserror());}) .bind(domaineactivite::getcodedomaineactivite, domaineactivite::setcodedomaineactivite); label lbllibelledomaineactivitevalidationstatus = new label(); this.binder.forfield(this.txtlibelledomaineactivite) .withvalidator(text -> text.length() <= 50, \"libell\u00e9 domaine d'activit\u00e9 ne peut contenir au plus 50 caract\u00e8res.\") .withvalidationstatushandler(status -> {lbllibelledomaineactivitevalidationstatus.settext(status.getmessage().orelse(\"\")); lbllibelledomaineactivitevalidationstatus.setvisible(status.iserror());}) .bind(domaineactivite::getlibelledomaineactivite, domaineactivite::setlibelledomaineactivite); label lbllibellecourtdomaineactivitevalidationstatus = new label(); this.binder.forfield(this.txtlibellecourtdomaineactivite) .withvalidator(text -> text.length() <= 20, \"libell\u00e9 abr\u00e9g\u00e9 domaine d'activit\u00e9 ne peut contenir au plus 20 caract\u00e8res.\") .withvalidationstatushandler(status -> {lbllibellecourtdomaineactivitevalidationstatus.settext(status.getmessage().orelse(\"\")); lbllibellecourtdomaineactivitevalidationstatus.setvisible(status.iserror());}) .bind(domaineactivite::getlibellecourtdomaineactivite, domaineactivite::setlibellecourtdomaineactivite); label lblsecteuractivitevalidationstatus = new label(); this.binder.forfield(this.cbocodesecteuractivite) .asrequired(\"la saisie du secteur d'activit\u00e9 est requise. veuillez s\u00e9lectionner un secteur d'activit\u00e9\") .bind(domaineactivite::getsecteuractivite, domaineactivite::setsecteuractivite); this.binder.forfield(this.chkinactif) .bind(domaineactivite::isinactif, domaineactivite::setinactif); this.formlayout.addformitem(this.txtcodedomaineactivite, \"code domaine d'activit\u00e9 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width250); this.formlayout.addformitem(this.txtlibelledomaineactivite, \"libell\u00e9 domaine d'activit\u00e9 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width250); this.formlayout.addformitem(this.txtlibellecourtdomaineactivite, \"libell\u00e9 abr\u00e9g\u00e9 domaine d'activit\u00e9 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width250); this.formlayout.addformitem(this.cbocodesecteuractivite, \"secteur d'activit\u00e9 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width250); this.formlayout.addformitem(this.chkinactif, \"inactif :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width250); this.formlayout.setresponsivesteps(new formlayout.responsivestep(\"0\", 1, formlayout.responsivestep.labelsposition.top), new formlayout.responsivestep(panel_flex_basis, 1, formlayout.responsivestep.labelsposition.aside)); } catch (exception e) { messagedialoghelper.showalertdialog(\"editerdomaineactivitedialog.configurecomponents\", e.tostring()); e.printstacktrace(); } }","repo":"jdissou\/sigdep01_01","label":[1,0,0,0]}
{"id":3516,"original_code":"public int read(ByteBuffer buffer) {\n        if (disconnected)\n            return -1;\n        int startPos = readBuffer.position();\n        int bufferRemaining = buffer.remaining();\n        int readBufferRemaining = readBuffer.remaining();\n        if (bufferRemaining >= readBufferRemaining)\n            buffer.put(readBuffer);\n        else {\n            \/\/ TODO this could be optimized\n            for (int i = 0; i < bufferRemaining; i++)\n                buffer.put(readBuffer.get());\n        }\n        return readBuffer.position() - startPos;\n    }","code_wo_comment":"public int read(ByteBuffer buffer) {\n        if (disconnected)\n            return -1;\n        int startPos = readBuffer.position();\n        int bufferRemaining = buffer.remaining();\n        int readBufferRemaining = readBuffer.remaining();\n        if (bufferRemaining >= readBufferRemaining)\n            buffer.put(readBuffer);\n        else {\n           \n            for (int i = 0; i < bufferRemaining; i++)\n                buffer.put(readBuffer.get());\n        }\n        return readBuffer.position() - startPos;\n    }","cleancode":"public int read(bytebuffer buffer) { if (disconnected) return -1; int startpos = readbuffer.position(); int bufferremaining = buffer.remaining(); int readbufferremaining = readbuffer.remaining(); if (bufferremaining >= readbufferremaining) buffer.put(readbuffer); else { for (int i = 0; i < bufferremaining; i++) buffer.put(readbuffer.get()); } return readbuffer.position() - startpos; }","repo":"george-mcintyre\/epics-core-java-backport-1.5","label":[1,0,0,0]}
{"id":3517,"original_code":"public int write(ByteBuffer buffer) throws IOException {\n        if (disconnected)\n            return -1;    \/\/ TODO: not by the JavaDoc API spec\n        if (throwExceptionOnSend)\n            throw new IOException(\"text IO exception\");\n        \/\/ we could write remaining bytes, but for test this is enough\n        if (buffer.remaining() > writeBuffer.remaining())\n            return 0;\n        int startPos = buffer.position();\n        writeBuffer.put(buffer);\n        return buffer.position() - startPos;\n    }","code_wo_comment":"public int write(ByteBuffer buffer) throws IOException {\n        if (disconnected)\n            return -1;   \n        if (throwExceptionOnSend)\n            throw new IOException(\"text IO exception\");\n       \n        if (buffer.remaining() > writeBuffer.remaining())\n            return 0;\n        int startPos = buffer.position();\n        writeBuffer.put(buffer);\n        return buffer.position() - startPos;\n    }","cleancode":"public int write(bytebuffer buffer) throws ioexception { if (disconnected) return -1; if (throwexceptiononsend) throw new ioexception(\"text io exception\"); if (buffer.remaining() > writebuffer.remaining()) return 0; int startpos = buffer.position(); writebuffer.put(buffer); return buffer.position() - startpos; }","repo":"george-mcintyre\/epics-core-java-backport-1.5","label":[1,0,0,0]}
{"id":3520,"original_code":"private KeyAttributes getDefaultKeyAttributes() {\n        KeyAttributes keyAttributes = new KeyAttributes();\n        keyAttributes.setAlgorithm(\"RSA\");\n        keyAttributes.setMode(\"ECB\");\n        keyAttributes.setDigestAlgorithm(\"SHA-384\");\n\/\/        keyAttributes.id;\n        keyAttributes.setKeyLength(3072);\n\/\/        keyAttributes.name;\n        keyAttributes.setPaddingMode(\"OAEPWithSHA-384AndMGF1Padding\");\n        keyAttributes.setRole(\"keyEncryption\");\n\/\/        keyAttributes.transferPolicy;  \/\/ no transfer policy because this key is not transferable;  maybe this should be a urn with \"private\" at the end.\n        return keyAttributes;\n    }","code_wo_comment":"private KeyAttributes getDefaultKeyAttributes() {\n        KeyAttributes keyAttributes = new KeyAttributes();\n        keyAttributes.setAlgorithm(\"RSA\");\n        keyAttributes.setMode(\"ECB\");\n        keyAttributes.setDigestAlgorithm(\"SHA-384\");\n        keyAttributes.setKeyLength(3072);\n        keyAttributes.setPaddingMode(\"OAEPWithSHA-384AndMGF1Padding\");\n        keyAttributes.setRole(\"keyEncryption\");\n        return keyAttributes;\n    }","cleancode":"private keyattributes getdefaultkeyattributes() { keyattributes keyattributes = new keyattributes(); keyattributes.setalgorithm(\"rsa\"); keyattributes.setmode(\"ecb\"); keyattributes.setdigestalgorithm(\"sha-384\"); keyattributes.setkeylength(3072); keyattributes.setpaddingmode(\"oaepwithsha-384andmgf1padding\"); keyattributes.setrole(\"keyencryption\"); return keyattributes; }","repo":"intel-secl\/key-broker-service","label":[0,0,1,0]}
{"id":11748,"original_code":"@Test\n    public void testAddressCreateAsBtcOnTestnet() {\n        Network network = Network.findBuiltin(\"bitcoin-testnet\").get();\n        Optional<Address> ob1 = Address.create(\"mm7DDqVkFd35XcWecFipfTYM5dByBzn7nq\", network);\n        assertTrue(ob1.isPresent());\n        Address b1 = ob1.get();\n        assertEquals(\"mm7DDqVkFd35XcWecFipfTYM5dByBzn7nq\", b1.toString());\n        \/\/ TODO: Expand coverage\n    }","code_wo_comment":"@Test\n    public void testAddressCreateAsBtcOnTestnet() {\n        Network network = Network.findBuiltin(\"bitcoin-testnet\").get();\n        Optional<Address> ob1 = Address.create(\"mm7DDqVkFd35XcWecFipfTYM5dByBzn7nq\", network);\n        assertTrue(ob1.isPresent());\n        Address b1 = ob1.get();\n        assertEquals(\"mm7DDqVkFd35XcWecFipfTYM5dByBzn7nq\", b1.toString());\n       \n    }","cleancode":"@test public void testaddresscreateasbtcontestnet() { network network = network.findbuiltin(\"bitcoin-testnet\").get(); optional<address> ob1 = address.create(\"mm7ddqvkfd35xcwecfipftym5dbybzn7nq\", network); asserttrue(ob1.ispresent()); address b1 = ob1.get(); assertequals(\"mm7ddqvkfd35xcwecfipftym5dbybzn7nq\", b1.tostring()); }","repo":"globalid\/walletkit","label":[0,0,0,1]}
{"id":3563,"original_code":"protected final char[] readLine() throws IOException {\n\t\tboolean foundLine = false;\n\t\tchar[] returnLine = null;\n\t\tchar[] partialLine = null;\n\t\twhile (!foundLine) {\n\t\t\t\/\/ System.out.println(\"readline \" + positionInBuffer + \" \" + new\n\t\t\t\/\/ String(buffer));\n\t\t\tif (positionInBuffer < 0 || !buffer.hasRemaining()) {\n\t\t\t\t\/\/ read more data\n\t\t\t\tcharactersRead = read();\n\t\t\t\ttotalCharactersRead += charactersRead;\n\t\t\t\tpositionInBuffer = 0;\n\t\t\t}\n\t\t\tint[] lineBoundaries = getNextLineBoundaries(positionInBuffer,\n\t\t\t\t\tcharactersRead, buffer);\n\t\t\tint lengthOfLine;\n\t\t\tif (lineBoundaries[0] < 0 && lineBoundaries[1] < 0) {\n\t\t\t\t\/\/ We reached the end of the buffer and did not find a new line.\n\t\t\t\t\/\/ reset positionInBuffer\n\t\t\t\t\/\/ Continue and read in more data\n\t\t\t\tif (charactersRead < 0) {\n\t\t\t\t\treturn partialLine;\n\t\t\t\t}\n\t\t\t\tpositionInBuffer = -1;\n\t\t\t\tcontinue;\n\t\t\t} else if (lineBoundaries[1] >= 0) {\n\t\t\t\t\/\/ Newline found\n\t\t\t\tlengthOfLine = lineBoundaries[1]\n\t\t\t\t\t\t- Math.max(0, lineBoundaries[0]) + 1;\n\t\t\t} else {\n\t\t\t\tlengthOfLine = charactersRead - lineBoundaries[0];\n\t\t\t}\n\t\t\t\/************************************************************************************************\n\t\t\t * TODO I think this is broken because lineBounardaries[0] is not\n\t\t\t * taken into account when populating the buffer like it was in\n\t\t\t * System.arrayCopy\n\t\t\t *************************************************************************************************\/\n\t\t\tif (charactersRead < 0) {\n\t\t\t\t\/\/ We've reached the end of the file\n\t\t\t\treturn partialLine;\n\t\t\t} else if (lineBoundaries[0] >= 0) {\n\t\t\t\tif (lineBoundaries[1] < 0) {\n\t\t\t\t\t\/\/ If partialLine is already created, just add to it.\n\t\t\t\t\t\/\/ TODO this is found below. Break it out as a function or\n\t\t\t\t\t\/\/ change the if statement?\n\t\t\t\t\tif (partialLine == null) {\n\t\t\t\t\t\tpartialLine = new char[lengthOfLine];\n\t\t\t\t\t\tbuffer.position(lineBoundaries[0]);\n\t\t\t\t\t\tbuffer.get(partialLine, 0, lengthOfLine);\n\t\t\t\t\t\t\/\/ System.arraycopy(buffer, lineBoundaries[0],\n\t\t\t\t\t\t\/\/ partialLine, 0, lengthOfLine);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchar[] newPartialLine = new char[lengthOfLine\n\t\t\t\t\t\t\t\t+ partialLine.length];\n\t\t\t\t\t\t\/\/ TODO do we need two copies?\n\t\t\t\t\t\tSystem.arraycopy(partialLine, 0, newPartialLine, 0,\n\t\t\t\t\t\t\t\tpartialLine.length);\n\t\t\t\t\t\t\/\/ TODO this does not look right\n\t\t\t\t\t\tbuffer.position(lineBoundaries[0]);\n\t\t\t\t\t\tbuffer.get(newPartialLine, partialLine.length,\n\t\t\t\t\t\t\t\tlengthOfLine);\n\t\t\t\t\t\t\/\/ System.arraycopy(buffer, lineBoundaries[0],\n\t\t\t\t\t\t\/\/ newPartialLine, partialLine.length, lengthOfLine);\n\t\t\t\t\t\tpartialLine = newPartialLine;\n\t\t\t\t\t}\n\t\t\t\t\tpositionInBuffer = -1;\n\t\t\t\t} else if (lineBoundaries[0] == lineBoundaries[1]\n\t\t\t\t\t\t&& (buffer.get(lineBoundaries[0]) == '\\n' || buffer\n\t\t\t\t\t\t\t\t.get(lineBoundaries[0]) == '\\r')) {\n\t\t\t\t\t\/\/ Found a new line. If there is a partial line, return it\n\t\t\t\t\t\/\/ otherwise keep looking.\n\t\t\t\t\t\/\/ Todo put a better check than this\n\t\t\t\t\tpositionInBuffer = lineBoundaries[1] + 2;\n\t\t\t\t\tif (partialLine != null) {\n\t\t\t\t\t\treturn partialLine;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (partialLine == null) {\n\t\t\t\t\t\treturnLine = new char[lengthOfLine];\n\t\t\t\t\t\tbuffer.position(lineBoundaries[0]);\n\t\t\t\t\t\tbuffer.get(returnLine, 0, lengthOfLine);\n\t\t\t\t\t\t\/\/ System.arraycopy(buffer, lineBoundaries[0],\n\t\t\t\t\t\t\/\/ returnLine, 0, lengthOfLine);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturnLine = new char[lengthOfLine + partialLine.length];\n\t\t\t\t\t\t\/\/ TODO is this right?\n\t\t\t\t\t\tSystem.arraycopy(partialLine, 0, returnLine, 0,\n\t\t\t\t\t\t\t\tpartialLine.length);\n\t\t\t\t\t\tbuffer.position(lineBoundaries[0]);\n\t\t\t\t\t\tbuffer.get(returnLine, partialLine.length, lengthOfLine);\n\t\t\t\t\t\t\/\/ System.arraycopy(buffer, lineBoundaries[0],\n\t\t\t\t\t\t\/\/ returnLine, partialLine.length, lengthOfLine);\n\t\t\t\t\t\tpartialLine = null;\n\t\t\t\t\t}\n\t\t\t\t\tpositionInBuffer = lineBoundaries[1] + 2;\n\t\t\t\t\treturn returnLine;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t\/\/ Keep looping. The only case where I can think of that this\n\t\t\t\t\/\/ would happen is if\n\t\t\t\t\/\/ the buffer is full of new line characters. Hopefully that\n\t\t\t\t\/\/ will never happen.\n\t\t\t}\n\t\t}\n\t\treturn returnLine;\n\t}","code_wo_comment":"protected final char[] readLine() throws IOException {\n\t\tboolean foundLine = false;\n\t\tchar[] returnLine = null;\n\t\tchar[] partialLine = null;\n\t\twhile (!foundLine) {\n\t\t\n\t\t\n\t\t\tif (positionInBuffer < 0 || !buffer.hasRemaining()) {\n\t\t\t\n\t\t\t\tcharactersRead = read();\n\t\t\t\ttotalCharactersRead += charactersRead;\n\t\t\t\tpositionInBuffer = 0;\n\t\t\t}\n\t\t\tint[] lineBoundaries = getNextLineBoundaries(positionInBuffer,\n\t\t\t\t\tcharactersRead, buffer);\n\t\t\tint lengthOfLine;\n\t\t\tif (lineBoundaries[0] < 0 && lineBoundaries[1] < 0) {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tif (charactersRead < 0) {\n\t\t\t\t\treturn partialLine;\n\t\t\t\t}\n\t\t\t\tpositionInBuffer = -1;\n\t\t\t\tcontinue;\n\t\t\t} else if (lineBoundaries[1] >= 0) {\n\t\t\t\n\t\t\t\tlengthOfLine = lineBoundaries[1]\n\t\t\t\t\t\t- Math.max(0, lineBoundaries[0]) + 1;\n\t\t\t} else {\n\t\t\t\tlengthOfLine = charactersRead - lineBoundaries[0];\n\t\t\t}\n\t\t\n\t\t\tif (charactersRead < 0) {\n\t\t\t\n\t\t\t\treturn partialLine;\n\t\t\t} else if (lineBoundaries[0] >= 0) {\n\t\t\t\tif (lineBoundaries[1] < 0) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tif (partialLine == null) {\n\t\t\t\t\t\tpartialLine = new char[lengthOfLine];\n\t\t\t\t\t\tbuffer.position(lineBoundaries[0]);\n\t\t\t\t\t\tbuffer.get(partialLine, 0, lengthOfLine);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchar[] newPartialLine = new char[lengthOfLine\n\t\t\t\t\t\t\t\t+ partialLine.length];\n\t\t\t\t\t\n\t\t\t\t\t\tSystem.arraycopy(partialLine, 0, newPartialLine, 0,\n\t\t\t\t\t\t\t\tpartialLine.length);\n\t\t\t\t\t\n\t\t\t\t\t\tbuffer.position(lineBoundaries[0]);\n\t\t\t\t\t\tbuffer.get(newPartialLine, partialLine.length,\n\t\t\t\t\t\t\t\tlengthOfLine);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\tpartialLine = newPartialLine;\n\t\t\t\t\t}\n\t\t\t\t\tpositionInBuffer = -1;\n\t\t\t\t} else if (lineBoundaries[0] == lineBoundaries[1]\n\t\t\t\t\t\t&& (buffer.get(lineBoundaries[0]) == '\\n' || buffer\n\t\t\t\t\t\t\t\t.get(lineBoundaries[0]) == '\\r')) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tpositionInBuffer = lineBoundaries[1] + 2;\n\t\t\t\t\tif (partialLine != null) {\n\t\t\t\t\t\treturn partialLine;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (partialLine == null) {\n\t\t\t\t\t\treturnLine = new char[lengthOfLine];\n\t\t\t\t\t\tbuffer.position(lineBoundaries[0]);\n\t\t\t\t\t\tbuffer.get(returnLine, 0, lengthOfLine);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturnLine = new char[lengthOfLine + partialLine.length];\n\t\t\t\t\t\n\t\t\t\t\t\tSystem.arraycopy(partialLine, 0, returnLine, 0,\n\t\t\t\t\t\t\t\tpartialLine.length);\n\t\t\t\t\t\tbuffer.position(lineBoundaries[0]);\n\t\t\t\t\t\tbuffer.get(returnLine, partialLine.length, lengthOfLine);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\tpartialLine = null;\n\t\t\t\t\t}\n\t\t\t\t\tpositionInBuffer = lineBoundaries[1] + 2;\n\t\t\t\t\treturn returnLine;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn returnLine;\n\t}","cleancode":"protected final char[] readline() throws ioexception { boolean foundline = false; char[] returnline = null; char[] partialline = null; while (!foundline) { if (positioninbuffer < 0 || !buffer.hasremaining()) { charactersread = read(); totalcharactersread += charactersread; positioninbuffer = 0; } int[] lineboundaries = getnextlineboundaries(positioninbuffer, charactersread, buffer); int lengthofline; if (lineboundaries[0] < 0 && lineboundaries[1] < 0) { if (charactersread < 0) { return partialline; } positioninbuffer = -1; continue; } else if (lineboundaries[1] >= 0) { lengthofline = lineboundaries[1] - math.max(0, lineboundaries[0]) + 1; } else { lengthofline = charactersread - lineboundaries[0]; } if (charactersread < 0) { return partialline; } else if (lineboundaries[0] >= 0) { if (lineboundaries[1] < 0) { if (partialline == null) { partialline = new char[lengthofline]; buffer.position(lineboundaries[0]); buffer.get(partialline, 0, lengthofline); } else { char[] newpartialline = new char[lengthofline + partialline.length]; system.arraycopy(partialline, 0, newpartialline, 0, partialline.length); buffer.position(lineboundaries[0]); buffer.get(newpartialline, partialline.length, lengthofline); partialline = newpartialline; } positioninbuffer = -1; } else if (lineboundaries[0] == lineboundaries[1] && (buffer.get(lineboundaries[0]) == '\\n' || buffer .get(lineboundaries[0]) == '\\r')) { positioninbuffer = lineboundaries[1] + 2; if (partialline != null) { return partialline; } } else { if (partialline == null) { returnline = new char[lengthofline]; buffer.position(lineboundaries[0]); buffer.get(returnline, 0, lengthofline); } else { returnline = new char[lengthofline + partialline.length]; system.arraycopy(partialline, 0, returnline, 0, partialline.length); buffer.position(lineboundaries[0]); buffer.get(returnline, partialline.length, lengthofline); partialline = null; } positioninbuffer = lineboundaries[1] + 2; return returnline; } } else { } } return returnline; }","repo":"jayaskren\/FastOpencsv","label":[1,0,1,0]}
{"id":20113,"original_code":"public int getCurrentIdentifier() {\n      \/\/ TODO stop casting documents to ints\n      return (int) (offset + current);\n    }","code_wo_comment":"public int getCurrentIdentifier() {\n     \n      return (int) (offset + current);\n    }","cleancode":"public int getcurrentidentifier() { return (int) (offset + current); }","repo":"hao44le\/CS473HW4-Galago-3.10","label":[1,0,0,0]}
{"id":11952,"original_code":"public double compare(String v1, String v2) {\n    \/\/ FIXME: it should be possible here to say that, actually, we\n    \/\/ didn't learn anything from comparing these two values, so that\n    \/\/ probability is set to 0.5.\n    if (comparator == null)\n      return 0.5; \/\/ we ignore properties with no comparator\n    double sim = comparator.compare(v1, v2);\n    if (sim >= 0.5)\n      return ((high - 0.5) * (sim * sim)) + 0.5;\n    else\n      return low;\n  }","code_wo_comment":"public double compare(String v1, String v2) {\n   \n   \n   \n    if (comparator == null)\n      return 0.5;\n    double sim = comparator.compare(v1, v2);\n    if (sim >= 0.5)\n      return ((high - 0.5) * (sim * sim)) + 0.5;\n    else\n      return low;\n  }","cleancode":"public double compare(string v1, string v2) { if (comparator == null) return 0.5; double sim = comparator.compare(v1, v2); if (sim >= 0.5) return ((high - 0.5) * (sim * sim)) + 0.5; else return low; }","repo":"haoyuan\/Duke","label":[0,0,1,0]}
{"id":12056,"original_code":"@Override\n    public synchronized void connected(final Mesos mesos) {\n      System.out.println(\"Connected\");\n      state = State.CONNECTED;\n      retryTimer = new Timer();\n      retryTimer.schedule(new TimerTask() {\n        @Override\n        public void run() {\n          doReliableRegistration(mesos);\n        }\n      }, 0, 1000); \/\/ Repeat every 1 second\n    }","code_wo_comment":"@Override\n    public synchronized void connected(final Mesos mesos) {\n      System.out.println(\"Connected\");\n      state = State.CONNECTED;\n      retryTimer = new Timer();\n      retryTimer.schedule(new TimerTask() {\n        @Override\n        public void run() {\n          doReliableRegistration(mesos);\n        }\n      }, 0, 1000);\n    }","cleancode":"@override public synchronized void connected(final mesos mesos) { system.out.println(\"connected\"); state = state.connected; retrytimer = new timer(); retrytimer.schedule(new timertask() { @override public void run() { doreliableregistration(mesos); } }, 0, 1000); }","repo":"j143\/mesos","label":[1,0,0,0]}
{"id":12180,"original_code":"private static boolean isCacheContainsAllEntryAttributes(WSResourceConfig targetConfig, List<RNSEntryResponseType> entries)\n\t{\n\t\tString targetContainerId = targetConfig.getContainerId();\n\t\tif (targetContainerId == null)\n\t\t\treturn true;\n\t\tboolean attributesMissingFromResourcesOfSameContainer = false;\n\t\tfor (RNSEntryResponseType entry : entries) {\n\t\t\tURI entryWSIndentifier = CacheUtils.getEPI(entry.getEndpoint());\n\t\t\tWSResourceConfig entryConfig = (WSResourceConfig) CacheManager.getItemFromCache(entryWSIndentifier, WSResourceConfig.class);\n\t\t\tif (entryConfig == null)\n\t\t\t\tcontinue;\n\t\t\tString entryContainerId = entryConfig.getContainerId();\n\t\t\tif (targetContainerId.equals(entryContainerId)) {\n\t\t\t\t\/\/ A checking on permissions-string attribute has been made because it is applicable\n\t\t\t\t\/\/ for both RNS and ByteIO. A thorough testing on all attributes will be an overkill.\n\t\t\t\tObject permissionProperty = CacheManager.getItemFromCache(entryConfig.getWsIdentifier(),\n\t\t\t\t\tGenesisIIBaseRP.PERMISSIONS_STRING_QNAME, MessageElement.class);\n\t\t\t\tif (permissionProperty == null) {\n\t\t\t\t\tattributesMissingFromResourcesOfSameContainer = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn !attributesMissingFromResourcesOfSameContainer;\n\t}","code_wo_comment":"private static boolean isCacheContainsAllEntryAttributes(WSResourceConfig targetConfig, List<RNSEntryResponseType> entries)\n\t{\n\t\tString targetContainerId = targetConfig.getContainerId();\n\t\tif (targetContainerId == null)\n\t\t\treturn true;\n\t\tboolean attributesMissingFromResourcesOfSameContainer = false;\n\t\tfor (RNSEntryResponseType entry : entries) {\n\t\t\tURI entryWSIndentifier = CacheUtils.getEPI(entry.getEndpoint());\n\t\t\tWSResourceConfig entryConfig = (WSResourceConfig) CacheManager.getItemFromCache(entryWSIndentifier, WSResourceConfig.class);\n\t\t\tif (entryConfig == null)\n\t\t\t\tcontinue;\n\t\t\tString entryContainerId = entryConfig.getContainerId();\n\t\t\tif (targetContainerId.equals(entryContainerId)) {\n\t\t\t\n\t\t\t\n\t\t\t\tObject permissionProperty = CacheManager.getItemFromCache(entryConfig.getWsIdentifier(),\n\t\t\t\t\tGenesisIIBaseRP.PERMISSIONS_STRING_QNAME, MessageElement.class);\n\t\t\t\tif (permissionProperty == null) {\n\t\t\t\t\tattributesMissingFromResourcesOfSameContainer = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn !attributesMissingFromResourcesOfSameContainer;\n\t}","cleancode":"private static boolean iscachecontainsallentryattributes(wsresourceconfig targetconfig, list<rnsentryresponsetype> entries) { string targetcontainerid = targetconfig.getcontainerid(); if (targetcontainerid == null) return true; boolean attributesmissingfromresourcesofsamecontainer = false; for (rnsentryresponsetype entry : entries) { uri entrywsindentifier = cacheutils.getepi(entry.getendpoint()); wsresourceconfig entryconfig = (wsresourceconfig) cachemanager.getitemfromcache(entrywsindentifier, wsresourceconfig.class); if (entryconfig == null) continue; string entrycontainerid = entryconfig.getcontainerid(); if (targetcontainerid.equals(entrycontainerid)) { object permissionproperty = cachemanager.getitemfromcache(entryconfig.getwsidentifier(), genesisiibaserp.permissions_string_qname, messageelement.class); if (permissionproperty == null) { attributesmissingfromresourcesofsamecontainer = true; break; } } } return !attributesmissingfromresourcesofsamecontainer; }","repo":"genesis-2\/trunk","label":[1,0,0,0]}
{"id":20495,"original_code":"@Override\n    public void onNotificationPosted(StatusBarNotification sbn) {\n        Prefs prefs = GBApplication.getPrefs();\n        if (GBApplication.isRunningLollipopOrLater()) {\n            if (\"call\".equals(sbn.getNotification().category) && prefs.getBoolean(\"notification_support_voip_calls\", false)) {\n                handleCallNotification(sbn);\n                return;\n            }\n        }\n        if (shouldIgnore(sbn)) {\n            LOG.info(\"Ignore notification\");\n            return;\n        }\n        switch (GBApplication.getGrantedInterruptionFilter()) {\n            case NotificationManager.INTERRUPTION_FILTER_ALL:\n                break;\n            case NotificationManager.INTERRUPTION_FILTER_ALARMS:\n            case NotificationManager.INTERRUPTION_FILTER_NONE:\n                return;\n            case NotificationManager.INTERRUPTION_FILTER_PRIORITY:\n                \/\/ FIXME: Handle Reminders and Events if they are enabled in Do Not Disturb\n                return;\n        }\n        String source = sbn.getPackageName().toLowerCase();\n        Notification notification = sbn.getNotification();\n        if (notificationOldRepeatPrevention.containsKey(source)) {\n            if (notification.when <= notificationOldRepeatPrevention.get(source)) {\n                LOG.info(\"NOT processing notification, already sent newer notifications from this source.\");\n                return;\n            }\n        }\n        \/\/ Ignore too frequent notifications, according to user preference\n        long min_timeout = (long)prefs.getInt(\"notifications_timeout\", 0) * 1000L;\n        long cur_time = System.currentTimeMillis();\n        if (notificationBurstPrevention.containsKey(source)) {\n            long last_time = notificationBurstPrevention.get(source);\n            if (cur_time - last_time < min_timeout) {\n                LOG.info(\"Ignoring frequent notification, last one was \" + (cur_time - last_time) + \"ms ago\");\n                return;\n            }\n        }\n        NotificationSpec notificationSpec = new NotificationSpec();\n        \/\/ determinate Source App Name (\"Label\")\n        String name = getAppName(source);\n        if (name != null) {\n            notificationSpec.sourceName = name;\n        }\n        boolean preferBigText = false;\n        \/\/ Get the app ID that generated this notification. For now only used by pebble color, but may be more useful later.\n        notificationSpec.sourceAppId = source;\n        notificationSpec.type = AppNotificationType.getInstance().get(source);\n        \/\/FIXME: some quirks lookup table would be the minor evil here\n        if (source.startsWith(\"com.fsck.k9\")) {\n            if (NotificationCompat.isGroupSummary(notification)) {\n                LOG.info(\"ignore K9 group summary\");\n                return;\n            }\n            preferBigText = true;\n        }\n        if (notificationSpec.type == null) {\n            notificationSpec.type = NotificationType.UNKNOWN;\n        }\n        \/\/ Get color\n        notificationSpec.pebbleColor = getPebbleColorForNotification(notificationSpec);\n        LOG.info(\"Processing notification \" + notificationSpec.getId() + \" age: \" + (System.currentTimeMillis() - notification.when) + \" from source \" + source + \" with flags: \" + notification.flags);\n        dissectNotificationTo(notification, notificationSpec, preferBigText);\n        if (!checkNotificationContentForWhiteAndBlackList(sbn.getPackageName().toLowerCase(), notificationSpec.body)) {\n            return;\n        }\n        \/\/ ignore Gadgetbridge's very own notifications, except for those from the debug screen\n        if (getApplicationContext().getPackageName().equals(source)) {\n            if (!getApplicationContext().getString(R.string.test_notification).equals(notificationSpec.title)) {\n                return;\n            }\n        }\n        NotificationCompat.WearableExtender wearableExtender = new NotificationCompat.WearableExtender(notification);\n        List<NotificationCompat.Action> actions = wearableExtender.getActions();\n        if (actions.size() == 0 && NotificationCompat.isGroupSummary(notification)) { \/\/this could cause #395 to come back\n            LOG.info(\"Not forwarding notification, FLAG_GROUP_SUMMARY is set and no wearable action present. Notification flags: \" + notification.flags);\n            return;\n        }\n        notificationSpec.attachedActions = new ArrayList<>();\n        \/\/ DISMISS action\n        NotificationSpec.Action dismissAction = new NotificationSpec.Action();\n        dismissAction.title = \"Dismiss\";\n        dismissAction.type = NotificationSpec.Action.TYPE_SYNTECTIC_DISMISS;\n        notificationSpec.attachedActions.add(dismissAction);\n        for (NotificationCompat.Action act : actions) {\n            if (act != null) {\n                NotificationSpec.Action wearableAction = new NotificationSpec.Action();\n                wearableAction.title = act.getTitle().toString();\n                if(act.getRemoteInputs()!=null) {\n                    wearableAction.type = NotificationSpec.Action.TYPE_WEARABLE_REPLY;\n                } else {\n                    wearableAction.type = NotificationSpec.Action.TYPE_WEARABLE_SIMPLE;\n                }\n                notificationSpec.attachedActions.add(wearableAction);\n                mActionLookup.add((notificationSpec.getId()<<4) + notificationSpec.attachedActions.size(), act);\n                LOG.info(\"found wearable action: \" + notificationSpec.attachedActions.size() + \" - \"+ act.getTitle() + \"  \" + sbn.getTag());\n            }\n        }\n        \/\/ OPEN action\n        NotificationSpec.Action openAction = new NotificationSpec.Action();\n        openAction.title = getString(R.string._pebble_watch_open_on_phone);\n        openAction.type = NotificationSpec.Action.TYPE_SYNTECTIC_OPEN;\n        notificationSpec.attachedActions.add(openAction);\n        \/\/ MUTE action\n        NotificationSpec.Action muteAction = new NotificationSpec.Action();\n        muteAction.title = getString(R.string._pebble_watch_mute);\n        muteAction.type = NotificationSpec.Action.TYPE_SYNTECTIC_MUTE;\n        notificationSpec.attachedActions.add(muteAction);\n        mNotificationHandleLookup.add(notificationSpec.getId(), sbn.getPostTime()); \/\/ for both DISMISS and OPEN\n        mPackageLookup.add(notificationSpec.getId(), sbn.getPackageName()); \/\/ for MUTE\n        notificationBurstPrevention.put(source, cur_time);\n        if(0 != notification.when) {\n            notificationOldRepeatPrevention.put(source, notification.when);\n        }else {\n            LOG.info(\"This app might show old\/duplicate notifications. notification.when is 0 for \" + source);\n        }\n        GBApplication.deviceService().onNotification(notificationSpec);\n    }","code_wo_comment":"@Override\n    public void onNotificationPosted(StatusBarNotification sbn) {\n        Prefs prefs = GBApplication.getPrefs();\n        if (GBApplication.isRunningLollipopOrLater()) {\n            if (\"call\".equals(sbn.getNotification().category) && prefs.getBoolean(\"notification_support_voip_calls\", false)) {\n                handleCallNotification(sbn);\n                return;\n            }\n        }\n        if (shouldIgnore(sbn)) {\n            LOG.info(\"Ignore notification\");\n            return;\n        }\n        switch (GBApplication.getGrantedInterruptionFilter()) {\n            case NotificationManager.INTERRUPTION_FILTER_ALL:\n                break;\n            case NotificationManager.INTERRUPTION_FILTER_ALARMS:\n            case NotificationManager.INTERRUPTION_FILTER_NONE:\n                return;\n            case NotificationManager.INTERRUPTION_FILTER_PRIORITY:\n               \n                return;\n        }\n        String source = sbn.getPackageName().toLowerCase();\n        Notification notification = sbn.getNotification();\n        if (notificationOldRepeatPrevention.containsKey(source)) {\n            if (notification.when <= notificationOldRepeatPrevention.get(source)) {\n                LOG.info(\"NOT processing notification, already sent newer notifications from this source.\");\n                return;\n            }\n        }\n       \n        long min_timeout = (long)prefs.getInt(\"notifications_timeout\", 0) * 1000L;\n        long cur_time = System.currentTimeMillis();\n        if (notificationBurstPrevention.containsKey(source)) {\n            long last_time = notificationBurstPrevention.get(source);\n            if (cur_time - last_time < min_timeout) {\n                LOG.info(\"Ignoring frequent notification, last one was \" + (cur_time - last_time) + \"ms ago\");\n                return;\n            }\n        }\n        NotificationSpec notificationSpec = new NotificationSpec();\n       \n        String name = getAppName(source);\n        if (name != null) {\n            notificationSpec.sourceName = name;\n        }\n        boolean preferBigText = false;\n       \n        notificationSpec.sourceAppId = source;\n        notificationSpec.type = AppNotificationType.getInstance().get(source);\n       \n        if (source.startsWith(\"com.fsck.k9\")) {\n            if (NotificationCompat.isGroupSummary(notification)) {\n                LOG.info(\"ignore K9 group summary\");\n                return;\n            }\n            preferBigText = true;\n        }\n        if (notificationSpec.type == null) {\n            notificationSpec.type = NotificationType.UNKNOWN;\n        }\n       \n        notificationSpec.pebbleColor = getPebbleColorForNotification(notificationSpec);\n        LOG.info(\"Processing notification \" + notificationSpec.getId() + \" age: \" + (System.currentTimeMillis() - notification.when) + \" from source \" + source + \" with flags: \" + notification.flags);\n        dissectNotificationTo(notification, notificationSpec, preferBigText);\n        if (!checkNotificationContentForWhiteAndBlackList(sbn.getPackageName().toLowerCase(), notificationSpec.body)) {\n            return;\n        }\n       \n        if (getApplicationContext().getPackageName().equals(source)) {\n            if (!getApplicationContext().getString(R.string.test_notification).equals(notificationSpec.title)) {\n                return;\n            }\n        }\n        NotificationCompat.WearableExtender wearableExtender = new NotificationCompat.WearableExtender(notification);\n        List<NotificationCompat.Action> actions = wearableExtender.getActions();\n        if (actions.size() == 0 && NotificationCompat.isGroupSummary(notification)) {\n            LOG.info(\"Not forwarding notification, FLAG_GROUP_SUMMARY is set and no wearable action present. Notification flags: \" + notification.flags);\n            return;\n        }\n        notificationSpec.attachedActions = new ArrayList<>();\n       \n        NotificationSpec.Action dismissAction = new NotificationSpec.Action();\n        dismissAction.title = \"Dismiss\";\n        dismissAction.type = NotificationSpec.Action.TYPE_SYNTECTIC_DISMISS;\n        notificationSpec.attachedActions.add(dismissAction);\n        for (NotificationCompat.Action act : actions) {\n            if (act != null) {\n                NotificationSpec.Action wearableAction = new NotificationSpec.Action();\n                wearableAction.title = act.getTitle().toString();\n                if(act.getRemoteInputs()!=null) {\n                    wearableAction.type = NotificationSpec.Action.TYPE_WEARABLE_REPLY;\n                } else {\n                    wearableAction.type = NotificationSpec.Action.TYPE_WEARABLE_SIMPLE;\n                }\n                notificationSpec.attachedActions.add(wearableAction);\n                mActionLookup.add((notificationSpec.getId()<<4) + notificationSpec.attachedActions.size(), act);\n                LOG.info(\"found wearable action: \" + notificationSpec.attachedActions.size() + \" - \"+ act.getTitle() + \"  \" + sbn.getTag());\n            }\n        }\n       \n        NotificationSpec.Action openAction = new NotificationSpec.Action();\n        openAction.title = getString(R.string._pebble_watch_open_on_phone);\n        openAction.type = NotificationSpec.Action.TYPE_SYNTECTIC_OPEN;\n        notificationSpec.attachedActions.add(openAction);\n       \n        NotificationSpec.Action muteAction = new NotificationSpec.Action();\n        muteAction.title = getString(R.string._pebble_watch_mute);\n        muteAction.type = NotificationSpec.Action.TYPE_SYNTECTIC_MUTE;\n        notificationSpec.attachedActions.add(muteAction);\n        mNotificationHandleLookup.add(notificationSpec.getId(), sbn.getPostTime());\n        mPackageLookup.add(notificationSpec.getId(), sbn.getPackageName());\n        notificationBurstPrevention.put(source, cur_time);\n        if(0 != notification.when) {\n            notificationOldRepeatPrevention.put(source, notification.when);\n        }else {\n            LOG.info(\"This app might show old\/duplicate notifications. notification.when is 0 for \" + source);\n        }\n        GBApplication.deviceService().onNotification(notificationSpec);\n    }","cleancode":"@override public void onnotificationposted(statusbarnotification sbn) { prefs prefs = gbapplication.getprefs(); if (gbapplication.isrunninglollipoporlater()) { if (\"call\".equals(sbn.getnotification().category) && prefs.getboolean(\"notification_support_voip_calls\", false)) { handlecallnotification(sbn); return; } } if (shouldignore(sbn)) { log.info(\"ignore notification\"); return; } switch (gbapplication.getgrantedinterruptionfilter()) { case notificationmanager.interruption_filter_all: break; case notificationmanager.interruption_filter_alarms: case notificationmanager.interruption_filter_none: return; case notificationmanager.interruption_filter_priority: return; } string source = sbn.getpackagename().tolowercase(); notification notification = sbn.getnotification(); if (notificationoldrepeatprevention.containskey(source)) { if (notification.when <= notificationoldrepeatprevention.get(source)) { log.info(\"not processing notification, already sent newer notifications from this source.\"); return; } } long min_timeout = (long)prefs.getint(\"notifications_timeout\", 0) * 1000l; long cur_time = system.currenttimemillis(); if (notificationburstprevention.containskey(source)) { long last_time = notificationburstprevention.get(source); if (cur_time - last_time < min_timeout) { log.info(\"ignoring frequent notification, last one was \" + (cur_time - last_time) + \"ms ago\"); return; } } notificationspec notificationspec = new notificationspec(); string name = getappname(source); if (name != null) { notificationspec.sourcename = name; } boolean preferbigtext = false; notificationspec.sourceappid = source; notificationspec.type = appnotificationtype.getinstance().get(source); if (source.startswith(\"com.fsck.k9\")) { if (notificationcompat.isgroupsummary(notification)) { log.info(\"ignore k9 group summary\"); return; } preferbigtext = true; } if (notificationspec.type == null) { notificationspec.type = notificationtype.unknown; } notificationspec.pebblecolor = getpebblecolorfornotification(notificationspec); log.info(\"processing notification \" + notificationspec.getid() + \" age: \" + (system.currenttimemillis() - notification.when) + \" from source \" + source + \" with flags: \" + notification.flags); dissectnotificationto(notification, notificationspec, preferbigtext); if (!checknotificationcontentforwhiteandblacklist(sbn.getpackagename().tolowercase(), notificationspec.body)) { return; } if (getapplicationcontext().getpackagename().equals(source)) { if (!getapplicationcontext().getstring(r.string.test_notification).equals(notificationspec.title)) { return; } } notificationcompat.wearableextender wearableextender = new notificationcompat.wearableextender(notification); list<notificationcompat.action> actions = wearableextender.getactions(); if (actions.size() == 0 && notificationcompat.isgroupsummary(notification)) { log.info(\"not forwarding notification, flag_group_summary is set and no wearable action present. notification flags: \" + notification.flags); return; } notificationspec.attachedactions = new arraylist<>(); notificationspec.action dismissaction = new notificationspec.action(); dismissaction.title = \"dismiss\"; dismissaction.type = notificationspec.action.type_syntectic_dismiss; notificationspec.attachedactions.add(dismissaction); for (notificationcompat.action act : actions) { if (act != null) { notificationspec.action wearableaction = new notificationspec.action(); wearableaction.title = act.gettitle().tostring(); if(act.getremoteinputs()!=null) { wearableaction.type = notificationspec.action.type_wearable_reply; } else { wearableaction.type = notificationspec.action.type_wearable_simple; } notificationspec.attachedactions.add(wearableaction); mactionlookup.add((notificationspec.getid()<<4) + notificationspec.attachedactions.size(), act); log.info(\"found wearable action: \" + notificationspec.attachedactions.size() + \" - \"+ act.gettitle() + \" \" + sbn.gettag()); } } notificationspec.action openaction = new notificationspec.action(); openaction.title = getstring(r.string._pebble_watch_open_on_phone); openaction.type = notificationspec.action.type_syntectic_open; notificationspec.attachedactions.add(openaction); notificationspec.action muteaction = new notificationspec.action(); muteaction.title = getstring(r.string._pebble_watch_mute); muteaction.type = notificationspec.action.type_syntectic_mute; notificationspec.attachedactions.add(muteaction); mnotificationhandlelookup.add(notificationspec.getid(), sbn.getposttime()); mpackagelookup.add(notificationspec.getid(), sbn.getpackagename()); notificationburstprevention.put(source, cur_time); if(0 != notification.when) { notificationoldrepeatprevention.put(source, notification.when); }else { log.info(\"this app might show old\/duplicate notifications. notification.when is 0 for \" + source); } gbapplication.deviceservice().onnotification(notificationspec); }","repo":"hurjeesic\/YourSleeping","label":[1,0,1,0]}
{"id":20579,"original_code":"public List<PlayItem> queryForPlayableItems (final String query1, final String query2, final int maxResults) throws MorriganException {\n\t\tList<PlayItem> ret = new LinkedList<PlayItem>();\n\t\tList<MediaListReference> items = new LinkedList<MediaListReference>();\n\t\tList<MediaListReference> matches = new LinkedList<MediaListReference>();\n\t\titems.addAll(this.mediaFactory.getAllLocalMixedMediaDbs());\n\t\titems.addAll(RemoteMixedMediaDbHelper.getAllRemoteMmdb(Config.DEFAULT));\n\t\t\/\/ First search exact.\n\t\tfor (MediaListReference i : items) {\n\t\t\tif (i.getTitle().equals(query1)) matches.add(i);\n\t\t}\n\t\t\/\/ Second search case-insensitive, but still exact.\n\t\tif (matches.size() < 1) {\n\t\t\tfor (MediaListReference i : items) {\n\t\t\t\tif (i.getTitle().equalsIgnoreCase(query1)) matches.add(i);\n\t\t\t}\n\t\t}\n\t\t\/\/ Third search sub-string.\n\t\tif (matches.size() < 1) {\n\t\t\tfor (MediaListReference i : items) {\n\t\t\t\tif (i.getTitle().contains(query1)) matches.add(i);\n\t\t\t}\n\t\t}\n\t\t\/\/ Fourth search sub-string and case-insensitive.\n\t\tif (matches.size() < 1) {\n\t\t\tfor (MediaListReference i : items) {\n\t\t\t\tif (i.getTitle().toLowerCase().contains(query1.toLowerCase())) matches.add(i);\n\t\t\t}\n\t\t}\n\t\tfor (MediaListReference explorerItem : matches) {\n\t\t\tif (ret.size() >= maxResults) break;\n\t\t\t\/*\n\t\t\t * FIXME this will load the DB (if its not already loaded), which is excessive if we are\n\t\t\t * just going to show some search results.\n\t\t\t *\/\n\t\t\tIMediaTrackDb<?, ? extends IMediaTrack> db = mediaListReferenceToReadTrackDb(explorerItem);\n\t\t\tif (query2 == null) {\n\t\t\t\tret.add(new PlayItem(db, null));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tList<? extends IMediaTrack> results;\n\t\t\t\ttry {\n\t\t\t\t\tresults = db.simpleSearch(query2, maxResults);\n\t\t\t\t}\n\t\t\t\tcatch (DbException e) {\n\t\t\t\t\tthrow new MorriganException(e);\n\t\t\t\t}\n\t\t\t\tfor (IMediaTrack result : results) {\n\t\t\t\t\tif (ret.size() >= maxResults) break;\n\t\t\t\t\tret.add(new PlayItem(db, result));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}","code_wo_comment":"public List<PlayItem> queryForPlayableItems (final String query1, final String query2, final int maxResults) throws MorriganException {\n\t\tList<PlayItem> ret = new LinkedList<PlayItem>();\n\t\tList<MediaListReference> items = new LinkedList<MediaListReference>();\n\t\tList<MediaListReference> matches = new LinkedList<MediaListReference>();\n\t\titems.addAll(this.mediaFactory.getAllLocalMixedMediaDbs());\n\t\titems.addAll(RemoteMixedMediaDbHelper.getAllRemoteMmdb(Config.DEFAULT));\n\t\n\t\tfor (MediaListReference i : items) {\n\t\t\tif (i.getTitle().equals(query1)) matches.add(i);\n\t\t}\n\t\n\t\tif (matches.size() < 1) {\n\t\t\tfor (MediaListReference i : items) {\n\t\t\t\tif (i.getTitle().equalsIgnoreCase(query1)) matches.add(i);\n\t\t\t}\n\t\t}\n\t\n\t\tif (matches.size() < 1) {\n\t\t\tfor (MediaListReference i : items) {\n\t\t\t\tif (i.getTitle().contains(query1)) matches.add(i);\n\t\t\t}\n\t\t}\n\t\n\t\tif (matches.size() < 1) {\n\t\t\tfor (MediaListReference i : items) {\n\t\t\t\tif (i.getTitle().toLowerCase().contains(query1.toLowerCase())) matches.add(i);\n\t\t\t}\n\t\t}\n\t\tfor (MediaListReference explorerItem : matches) {\n\t\t\tif (ret.size() >= maxResults) break;\n\t\t\n\t\t\tIMediaTrackDb<?, ? extends IMediaTrack> db = mediaListReferenceToReadTrackDb(explorerItem);\n\t\t\tif (query2 == null) {\n\t\t\t\tret.add(new PlayItem(db, null));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tList<? extends IMediaTrack> results;\n\t\t\t\ttry {\n\t\t\t\t\tresults = db.simpleSearch(query2, maxResults);\n\t\t\t\t}\n\t\t\t\tcatch (DbException e) {\n\t\t\t\t\tthrow new MorriganException(e);\n\t\t\t\t}\n\t\t\t\tfor (IMediaTrack result : results) {\n\t\t\t\t\tif (ret.size() >= maxResults) break;\n\t\t\t\t\tret.add(new PlayItem(db, result));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}","cleancode":"public list<playitem> queryforplayableitems (final string query1, final string query2, final int maxresults) throws morriganexception { list<playitem> ret = new linkedlist<playitem>(); list<medialistreference> items = new linkedlist<medialistreference>(); list<medialistreference> matches = new linkedlist<medialistreference>(); items.addall(this.mediafactory.getalllocalmixedmediadbs()); items.addall(remotemixedmediadbhelper.getallremotemmdb(config.default)); for (medialistreference i : items) { if (i.gettitle().equals(query1)) matches.add(i); } if (matches.size() < 1) { for (medialistreference i : items) { if (i.gettitle().equalsignorecase(query1)) matches.add(i); } } if (matches.size() < 1) { for (medialistreference i : items) { if (i.gettitle().contains(query1)) matches.add(i); } } if (matches.size() < 1) { for (medialistreference i : items) { if (i.gettitle().tolowercase().contains(query1.tolowercase())) matches.add(i); } } for (medialistreference exploreritem : matches) { if (ret.size() >= maxresults) break; imediatrackdb<?, ? extends imediatrack> db = medialistreferencetoreadtrackdb(exploreritem); if (query2 == null) { ret.add(new playitem(db, null)); } else { list<? extends imediatrack> results; try { results = db.simplesearch(query2, maxresults); } catch (dbexception e) { throw new morriganexception(e); } for (imediatrack result : results) { if (ret.size() >= maxresults) break; ret.add(new playitem(db, result)); } } } return ret; }","repo":"haku\/Morrigan","label":[1,0,1,0]}
{"id":12405,"original_code":"public static \/*@Real*\/ double blackFormulaImpliedStdDevApproximation(\n            final PlainVanillaPayoff payoff,\n            @Real final double strike,\n            @Real final double forward,\n            @Real final double blackPrice) {\n        \/\/ TODO : complete\n        return blackFormulaImpliedStdDevApproximation(payoff, strike, forward, blackPrice, 1.0, 0.0);\n    }","code_wo_comment":"public static double blackFormulaImpliedStdDevApproximation(\n            final PlainVanillaPayoff payoff,\n            @Real final double strike,\n            @Real final double forward,\n            @Real final double blackPrice) {\n       \n        return blackFormulaImpliedStdDevApproximation(payoff, strike, forward, blackPrice, 1.0, 0.0);\n    }","cleancode":"public static double blackformulaimpliedstddevapproximation( final plainvanillapayoff payoff, @real final double strike, @real final double forward, @real final double blackprice) { return blackformulaimpliedstddevapproximation(payoff, strike, forward, blackprice, 1.0, 0.0); }","repo":"imperialft\/jquantlib","label":[0,1,0,0]}
{"id":12406,"original_code":"public static \/*@Real*\/ double blackFormulaImpliedStdDevApproximation(\n            final PlainVanillaPayoff payoff,\n            @Real final double strike,\n            @Real final double forward,\n            @Real final double blackPrice,\n            @DiscountFactor final double discount) {\n        \/\/ TODO : complete\n        return blackFormulaImpliedStdDevApproximation(payoff, strike, forward, blackPrice, discount, 0.0);\n    }","code_wo_comment":"public static double blackFormulaImpliedStdDevApproximation(\n            final PlainVanillaPayoff payoff,\n            @Real final double strike,\n            @Real final double forward,\n            @Real final double blackPrice,\n            @DiscountFactor final double discount) {\n       \n        return blackFormulaImpliedStdDevApproximation(payoff, strike, forward, blackPrice, discount, 0.0);\n    }","cleancode":"public static double blackformulaimpliedstddevapproximation( final plainvanillapayoff payoff, @real final double strike, @real final double forward, @real final double blackprice, @discountfactor final double discount) { return blackformulaimpliedstddevapproximation(payoff, strike, forward, blackprice, discount, 0.0); }","repo":"imperialft\/jquantlib","label":[0,1,0,0]}
{"id":12417,"original_code":"@Override\n        protected String doInBackground(Object[] par) {\n            \/\/ do above Server call here\n            Rule mRule = (Rule) par[0];\n            String user = (String) par[1];\n            HttpClient client = new DefaultHttpClient();\n            HttpPost post = new HttpPost(urlRulesApi);\n            List<NameValuePair> params = new ArrayList<NameValuePair>();\n            \/\/Parameters\n            params.add(new BasicNameValuePair(\"rule_title\", mRule.getRuleName()));\n            params.add(new BasicNameValuePair(\"rule_description\", mRule.getDescription()));\n            params.add(new BasicNameValuePair(\"rule_channel_one\", mRule.getIfElement()));\n            params.add(new BasicNameValuePair(\"rule_channel_two\", mRule.getDoElement()));\n            params.add(new BasicNameValuePair(\"rule_event_title\", mRule.getIfAction()));\n            params.add(new BasicNameValuePair(\"rule_action_title\",mRule.getDoAction()));\n            params.add(new BasicNameValuePair(\"rule_place\", mRule.getPlace()));\n            params.add(new BasicNameValuePair(\"rule_creator\", user));\n            params.add(new BasicNameValuePair(\"rule\", mRule.getEyeRule()));\/\/EYE rule with prefix\n            params.add(new BasicNameValuePair(\"command\", \"createRule\"));\n            Log.i(\"RULE\",\"My ruleee\"+ mRule.getEyeRule());\n            String response = \"\";\n            try {\n                post.setEntity(new UrlEncodedFormEntity(params));\n                HttpResponse resp = null;\n                resp = client.execute(post);\n                HttpEntity ent = resp.getEntity();\n                response = EntityUtils.toString(ent);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return response;\n        }","code_wo_comment":"@Override\n        protected String doInBackground(Object[] par) {\n           \n            Rule mRule = (Rule) par[0];\n            String user = (String) par[1];\n            HttpClient client = new DefaultHttpClient();\n            HttpPost post = new HttpPost(urlRulesApi);\n            List<NameValuePair> params = new ArrayList<NameValuePair>();\n           \n            params.add(new BasicNameValuePair(\"rule_title\", mRule.getRuleName()));\n            params.add(new BasicNameValuePair(\"rule_description\", mRule.getDescription()));\n            params.add(new BasicNameValuePair(\"rule_channel_one\", mRule.getIfElement()));\n            params.add(new BasicNameValuePair(\"rule_channel_two\", mRule.getDoElement()));\n            params.add(new BasicNameValuePair(\"rule_event_title\", mRule.getIfAction()));\n            params.add(new BasicNameValuePair(\"rule_action_title\",mRule.getDoAction()));\n            params.add(new BasicNameValuePair(\"rule_place\", mRule.getPlace()));\n            params.add(new BasicNameValuePair(\"rule_creator\", user));\n            params.add(new BasicNameValuePair(\"rule\", mRule.getEyeRule()))\n            params.add(new BasicNameValuePair(\"command\", \"createRule\"));\n            Log.i(\"RULE\",\"My ruleee\"+ mRule.getEyeRule());\n            String response = \"\";\n            try {\n                post.setEntity(new UrlEncodedFormEntity(params));\n                HttpResponse resp = null;\n                resp = client.execute(post);\n                HttpEntity ent = resp.getEntity();\n                response = EntityUtils.toString(ent);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return response;\n        }","cleancode":"@override protected string doinbackground(object[] par) { rule mrule = (rule) par[0]; string user = (string) par[1]; httpclient client = new defaulthttpclient(); httppost post = new httppost(urlrulesapi); list<namevaluepair> params = new arraylist<namevaluepair>(); params.add(new basicnamevaluepair(\"rule_title\", mrule.getrulename())); params.add(new basicnamevaluepair(\"rule_description\", mrule.getdescription())); params.add(new basicnamevaluepair(\"rule_channel_one\", mrule.getifelement())); params.add(new basicnamevaluepair(\"rule_channel_two\", mrule.getdoelement())); params.add(new basicnamevaluepair(\"rule_event_title\", mrule.getifaction())); params.add(new basicnamevaluepair(\"rule_action_title\",mrule.getdoaction())); params.add(new basicnamevaluepair(\"rule_place\", mrule.getplace())); params.add(new basicnamevaluepair(\"rule_creator\", user)); params.add(new basicnamevaluepair(\"rule\", mrule.geteyerule())) params.add(new basicnamevaluepair(\"command\", \"createrule\")); log.i(\"rule\",\"my ruleee\"+ mrule.geteyerule()); string response = \"\"; try { post.setentity(new urlencodedformentity(params)); httpresponse resp = null; resp = client.execute(post); httpentity ent = resp.getentity(); response = entityutils.tostring(ent); } catch (ioexception e) { e.printstacktrace(); } return response; }","repo":"gsi-upm\/ewe-tasker-android","label":[0,1,0,0]}
{"id":12418,"original_code":"@Override\n        protected String doInBackground(String[] par) {\n            \/\/ do above Server call here\n            HttpClient client = new DefaultHttpClient();\n            HttpPost post = new HttpPost(urlInputApi);\n            List<NameValuePair> params = new ArrayList<NameValuePair>();\n            params.add(new BasicNameValuePair(\"inputEvent\", par[0]));\n            params.add(new BasicNameValuePair(\"user\", par[1]));\n            params.add(new BasicNameValuePair(\"command\", \"insertinput\"));\n            String response = \"\";\n            try {\n                post.setEntity(new UrlEncodedFormEntity(params));\n                HttpResponse resp = null;\n                resp = client.execute(post);\n                HttpEntity ent = resp.getEntity();\n                response = EntityUtils.toString(ent);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return response;\n        }","code_wo_comment":"@Override\n        protected String doInBackground(String[] par) {\n           \n            HttpClient client = new DefaultHttpClient();\n            HttpPost post = new HttpPost(urlInputApi);\n            List<NameValuePair> params = new ArrayList<NameValuePair>();\n            params.add(new BasicNameValuePair(\"inputEvent\", par[0]));\n            params.add(new BasicNameValuePair(\"user\", par[1]));\n            params.add(new BasicNameValuePair(\"command\", \"insertinput\"));\n            String response = \"\";\n            try {\n                post.setEntity(new UrlEncodedFormEntity(params));\n                HttpResponse resp = null;\n                resp = client.execute(post);\n                HttpEntity ent = resp.getEntity();\n                response = EntityUtils.toString(ent);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return response;\n        }","cleancode":"@override protected string doinbackground(string[] par) { httpclient client = new defaulthttpclient(); httppost post = new httppost(urlinputapi); list<namevaluepair> params = new arraylist<namevaluepair>(); params.add(new basicnamevaluepair(\"inputevent\", par[0])); params.add(new basicnamevaluepair(\"user\", par[1])); params.add(new basicnamevaluepair(\"command\", \"insertinput\")); string response = \"\"; try { post.setentity(new urlencodedformentity(params)); httpresponse resp = null; resp = client.execute(post); httpentity ent = resp.getentity(); response = entityutils.tostring(ent); } catch (ioexception e) { e.printstacktrace(); } return response; }","repo":"gsi-upm\/ewe-tasker-android","label":[0,1,0,0]}
{"id":12580,"original_code":"@Bean\n    public MongoClient mongoClient() {\n        MongoClientOptions.Builder options = MongoClientOptions.builder()   \/\/TODO: make connection options configurable\n                .connectionsPerHost(4)\n                .maxConnectionIdleTime(60000)\n                .maxConnectionLifeTime(120000);\n        ServerAddress serverAddress = new ServerAddress(mongoConfiguration.getHost(), mongoConfiguration.getPort());\n        MongoCredential credential = getCredentials(mongoConfiguration.getAuth());\n        if (credential == null) {\n            LOG.info(\"Connecting to mongo without auth\");\n        } else {\n            LOG.info(\"Mongo credential: user: '{}', password: '***', authenticationDatabase: '{}'\", mongoConfiguration.getAuth().getUser(), mongoConfiguration.getAuth().getAuthBase());\n        }\n        return credential == null ? new MongoClient(serverAddress) :\n                new MongoClient(serverAddress, Collections.singletonList(credential), options.build());\n    }","code_wo_comment":"@Bean\n    public MongoClient mongoClient() {\n        MongoClientOptions.Builder options = MongoClientOptions.builder()  \n                .connectionsPerHost(4)\n                .maxConnectionIdleTime(60000)\n                .maxConnectionLifeTime(120000);\n        ServerAddress serverAddress = new ServerAddress(mongoConfiguration.getHost(), mongoConfiguration.getPort());\n        MongoCredential credential = getCredentials(mongoConfiguration.getAuth());\n        if (credential == null) {\n            LOG.info(\"Connecting to mongo without auth\");\n        } else {\n            LOG.info(\"Mongo credential: user: '{}', password: '***', authenticationDatabase: '{}'\", mongoConfiguration.getAuth().getUser(), mongoConfiguration.getAuth().getAuthBase());\n        }\n        return credential == null ? new MongoClient(serverAddress) :\n                new MongoClient(serverAddress, Collections.singletonList(credential), options.build());\n    }","cleancode":"@bean public mongoclient mongoclient() { mongoclientoptions.builder options = mongoclientoptions.builder() .connectionsperhost(4) .maxconnectionidletime(60000) .maxconnectionlifetime(120000); serveraddress serveraddress = new serveraddress(mongoconfiguration.gethost(), mongoconfiguration.getport()); mongocredential credential = getcredentials(mongoconfiguration.getauth()); if (credential == null) { log.info(\"connecting to mongo without auth\"); } else { log.info(\"mongo credential: user: '{}', password: '***', authenticationdatabase: '{}'\", mongoconfiguration.getauth().getuser(), mongoconfiguration.getauth().getauthbase()); } return credential == null ? new mongoclient(serveraddress) : new mongoclient(serveraddress, collections.singletonlist(credential), options.build()); }","repo":"hutoroff\/jagpb","label":[1,0,0,0]}
{"id":20776,"original_code":"public CompoundBitVectorInterval binaryXor(\n      CompoundBitVectorInterval pState,\n      boolean pAllowSignedWrapAround,\n      final OverflowEventHandler pOverflowEventHandler) {\n    checkBitVectorCompatibilityWith(pState.info);\n    if (isBottom() || pState.isBottom()) {\n      return bottom(info);\n    }\n    if (isSingleton() && pState.isSingleton()) {\n      return of(\n          BitVectorInterval.cast(\n              info,\n              getValue().xor(pState.getValue()),\n              pAllowSignedWrapAround,\n              pOverflowEventHandler));\n    }\n    if (pState.isSingleton() && pState.containsZero()) {\n      return this;\n    }\n    if (isSingleton() && containsZero()) {\n      return pState;\n    }\n    \/\/ [0,1] ^ 1 = [0,1]\n    if (pState.isSingleton() && pState.contains(1) && equals(getZeroToOne(info))) {\n      return this;\n    }\n    \/\/ 1 ^ [0,1] = [0,1]\n    if (isSingleton() && contains(1) && pState.equals(getZeroToOne(info))) {\n      return getZeroToOne(info);\n    }\n    if (pState.isSingleton()) {\n      CompoundBitVectorInterval result = bottom(info);\n      for (BitVectorInterval interval : intervals) {\n        if (!interval.isSingleton()) {\n          return getInternal(info.getRange());\n        }\n        result =\n            result.unionWith(\n                BitVectorInterval.cast(\n                    info,\n                    interval.getLowerBound().xor(pState.getValue()),\n                    pAllowSignedWrapAround,\n                    pOverflowEventHandler));\n      }\n      return result;\n    } else if (isSingleton()) {\n      return pState.binaryXor(this, pAllowSignedWrapAround, pOverflowEventHandler);\n    }\n    \/\/ TODO maybe a more exact implementation is possible?\n    return getInternal(info.getRange());\n  }","code_wo_comment":"public CompoundBitVectorInterval binaryXor(\n      CompoundBitVectorInterval pState,\n      boolean pAllowSignedWrapAround,\n      final OverflowEventHandler pOverflowEventHandler) {\n    checkBitVectorCompatibilityWith(pState.info);\n    if (isBottom() || pState.isBottom()) {\n      return bottom(info);\n    }\n    if (isSingleton() && pState.isSingleton()) {\n      return of(\n          BitVectorInterval.cast(\n              info,\n              getValue().xor(pState.getValue()),\n              pAllowSignedWrapAround,\n              pOverflowEventHandler));\n    }\n    if (pState.isSingleton() && pState.containsZero()) {\n      return this;\n    }\n    if (isSingleton() && containsZero()) {\n      return pState;\n    }\n   \n    if (pState.isSingleton() && pState.contains(1) && equals(getZeroToOne(info))) {\n      return this;\n    }\n   \n    if (isSingleton() && contains(1) && pState.equals(getZeroToOne(info))) {\n      return getZeroToOne(info);\n    }\n    if (pState.isSingleton()) {\n      CompoundBitVectorInterval result = bottom(info);\n      for (BitVectorInterval interval : intervals) {\n        if (!interval.isSingleton()) {\n          return getInternal(info.getRange());\n        }\n        result =\n            result.unionWith(\n                BitVectorInterval.cast(\n                    info,\n                    interval.getLowerBound().xor(pState.getValue()),\n                    pAllowSignedWrapAround,\n                    pOverflowEventHandler));\n      }\n      return result;\n    } else if (isSingleton()) {\n      return pState.binaryXor(this, pAllowSignedWrapAround, pOverflowEventHandler);\n    }\n   \n    return getInternal(info.getRange());\n  }","cleancode":"public compoundbitvectorinterval binaryxor( compoundbitvectorinterval pstate, boolean pallowsignedwraparound, final overfloweventhandler poverfloweventhandler) { checkbitvectorcompatibilitywith(pstate.info); if (isbottom() || pstate.isbottom()) { return bottom(info); } if (issingleton() && pstate.issingleton()) { return of( bitvectorinterval.cast( info, getvalue().xor(pstate.getvalue()), pallowsignedwraparound, poverfloweventhandler)); } if (pstate.issingleton() && pstate.containszero()) { return this; } if (issingleton() && containszero()) { return pstate; } if (pstate.issingleton() && pstate.contains(1) && equals(getzerotoone(info))) { return this; } if (issingleton() && contains(1) && pstate.equals(getzerotoone(info))) { return getzerotoone(info); } if (pstate.issingleton()) { compoundbitvectorinterval result = bottom(info); for (bitvectorinterval interval : intervals) { if (!interval.issingleton()) { return getinternal(info.getrange()); } result = result.unionwith( bitvectorinterval.cast( info, interval.getlowerbound().xor(pstate.getvalue()), pallowsignedwraparound, poverfloweventhandler)); } return result; } else if (issingleton()) { return pstate.binaryxor(this, pallowsignedwraparound, poverfloweventhandler); } return getinternal(info.getrange()); }","repo":"jcdubois\/cpachecker","label":[1,0,0,0]}
{"id":20777,"original_code":"public CompoundBitVectorInterval binaryNot(\n      boolean pAllowSignedWrapAround, final OverflowEventHandler pOverflowEventHandler) {\n    if (isBottom()) {\n      return bottom(info);\n    }\n    CompoundBitVectorInterval result = bottom(info);\n    for (BitVectorInterval interval : intervals) {\n      if (!interval.isSingleton()) {\n        \/\/ TODO maybe a more exact implementation is possible?\n        return getInternal(info.getRange());\n      }\n      final BitVectorInterval partialResult;\n      if (info.isSigned()) {\n        partialResult =\n            BitVectorInterval.cast(\n                info,\n                interval.getLowerBound().not(),\n                pAllowSignedWrapAround,\n                pOverflowEventHandler);\n      } else {\n        partialResult =\n            BitVectorInterval.cast(\n                info,\n                new BigInteger(1, interval.getLowerBound().not().toByteArray()),\n                pAllowSignedWrapAround,\n                pOverflowEventHandler);\n      }\n      result = result.unionWith(partialResult);\n    }\n    return result;\n  }","code_wo_comment":"public CompoundBitVectorInterval binaryNot(\n      boolean pAllowSignedWrapAround, final OverflowEventHandler pOverflowEventHandler) {\n    if (isBottom()) {\n      return bottom(info);\n    }\n    CompoundBitVectorInterval result = bottom(info);\n    for (BitVectorInterval interval : intervals) {\n      if (!interval.isSingleton()) {\n       \n        return getInternal(info.getRange());\n      }\n      final BitVectorInterval partialResult;\n      if (info.isSigned()) {\n        partialResult =\n            BitVectorInterval.cast(\n                info,\n                interval.getLowerBound().not(),\n                pAllowSignedWrapAround,\n                pOverflowEventHandler);\n      } else {\n        partialResult =\n            BitVectorInterval.cast(\n                info,\n                new BigInteger(1, interval.getLowerBound().not().toByteArray()),\n                pAllowSignedWrapAround,\n                pOverflowEventHandler);\n      }\n      result = result.unionWith(partialResult);\n    }\n    return result;\n  }","cleancode":"public compoundbitvectorinterval binarynot( boolean pallowsignedwraparound, final overfloweventhandler poverfloweventhandler) { if (isbottom()) { return bottom(info); } compoundbitvectorinterval result = bottom(info); for (bitvectorinterval interval : intervals) { if (!interval.issingleton()) { return getinternal(info.getrange()); } final bitvectorinterval partialresult; if (info.issigned()) { partialresult = bitvectorinterval.cast( info, interval.getlowerbound().not(), pallowsignedwraparound, poverfloweventhandler); } else { partialresult = bitvectorinterval.cast( info, new biginteger(1, interval.getlowerbound().not().tobytearray()), pallowsignedwraparound, poverfloweventhandler); } result = result.unionwith(partialresult); } return result; }","repo":"jcdubois\/cpachecker","label":[1,0,0,0]}
{"id":20778,"original_code":"public CompoundBitVectorInterval binaryOr(\n      CompoundBitVectorInterval pState,\n      boolean pAllowSignedWrapAround,\n      final OverflowEventHandler pOverflowEventHandler) {\n    checkBitVectorCompatibilityWith(pState.info);\n    if (isBottom() || pState.isBottom()) {\n      return bottom(info);\n    }\n    if (isSingleton() && containsZero()) {\n      return pState;\n    }\n    if (pState.isSingleton() && pState.containsZero()) {\n      return this;\n    }\n    if (pState.isSingleton()) {\n      CompoundBitVectorInterval result = bottom(info);\n      for (BitVectorInterval interval : intervals) {\n        if (!interval.isSingleton()) {\n          return getInternal(info.getRange());\n        }\n        result =\n            result.unionWith(\n                BitVectorInterval.cast(\n                    info,\n                    interval.getLowerBound().or(pState.getValue()),\n                    pAllowSignedWrapAround,\n                    pOverflowEventHandler));\n      }\n      return result;\n    } else if (isSingleton()) {\n      return pState.binaryOr(this, pAllowSignedWrapAround, pOverflowEventHandler);\n    }\n    \/\/ TODO maybe a more exact implementation is possible?\n    return getInternal(info.getRange());\n  }","code_wo_comment":"public CompoundBitVectorInterval binaryOr(\n      CompoundBitVectorInterval pState,\n      boolean pAllowSignedWrapAround,\n      final OverflowEventHandler pOverflowEventHandler) {\n    checkBitVectorCompatibilityWith(pState.info);\n    if (isBottom() || pState.isBottom()) {\n      return bottom(info);\n    }\n    if (isSingleton() && containsZero()) {\n      return pState;\n    }\n    if (pState.isSingleton() && pState.containsZero()) {\n      return this;\n    }\n    if (pState.isSingleton()) {\n      CompoundBitVectorInterval result = bottom(info);\n      for (BitVectorInterval interval : intervals) {\n        if (!interval.isSingleton()) {\n          return getInternal(info.getRange());\n        }\n        result =\n            result.unionWith(\n                BitVectorInterval.cast(\n                    info,\n                    interval.getLowerBound().or(pState.getValue()),\n                    pAllowSignedWrapAround,\n                    pOverflowEventHandler));\n      }\n      return result;\n    } else if (isSingleton()) {\n      return pState.binaryOr(this, pAllowSignedWrapAround, pOverflowEventHandler);\n    }\n   \n    return getInternal(info.getRange());\n  }","cleancode":"public compoundbitvectorinterval binaryor( compoundbitvectorinterval pstate, boolean pallowsignedwraparound, final overfloweventhandler poverfloweventhandler) { checkbitvectorcompatibilitywith(pstate.info); if (isbottom() || pstate.isbottom()) { return bottom(info); } if (issingleton() && containszero()) { return pstate; } if (pstate.issingleton() && pstate.containszero()) { return this; } if (pstate.issingleton()) { compoundbitvectorinterval result = bottom(info); for (bitvectorinterval interval : intervals) { if (!interval.issingleton()) { return getinternal(info.getrange()); } result = result.unionwith( bitvectorinterval.cast( info, interval.getlowerbound().or(pstate.getvalue()), pallowsignedwraparound, poverfloweventhandler)); } return result; } else if (issingleton()) { return pstate.binaryor(this, pallowsignedwraparound, poverfloweventhandler); } return getinternal(info.getrange()); }","repo":"jcdubois\/cpachecker","label":[1,0,0,0]}
{"id":12631,"original_code":"private boolean isEmailValid(String email) {\n        \/\/TODO: Replace this with your own logic\n        return email.contains(\"@\");\n    }","code_wo_comment":"private boolean isEmailValid(String email) {\n       \n        return email.contains(\"@\");\n    }","cleancode":"private boolean isemailvalid(string email) { return email.contains(\"@\"); }","repo":"herbertkip\/Web-App","label":[1,0,0,0]}
{"id":12632,"original_code":"private boolean isPasswordValid(String password) {\n        \/\/TODO: Replace this with your own logic\n        return password.length() > 4;\n    }","code_wo_comment":"private boolean isPasswordValid(String password) {\n       \n        return password.length() > 4;\n    }","cleancode":"private boolean ispasswordvalid(string password) { return password.length() > 4; }","repo":"herbertkip\/Web-App","label":[1,0,0,0]}
{"id":20863,"original_code":"public void runOpMode()\n    {\n        initRobot();\n        gyro.calibrate();\n        while (!isStopRequested() &&\n               gyro.isCalibrating())\n        {\n            sleep(50);\n        }\n        waitForStart();\n        \/\/startRobot();\n        \/\/sleep(1000);  \/\/Give motors time to ramp up to speed\n        long minLoopInterval = Long.MAX_VALUE;\n        long maxLoopInterval = Long.MIN_VALUE;\n        long loopCount = 0;\n        long prevLoopTime;\n        long minSampleInterval = Long.MAX_VALUE;\n        long maxSampleInterval = Long.MIN_VALUE;\n        long sampleCount = 0;\n        long prevSampleTime;\n        long totalSampleTime = 0;\n        long startTime = System.nanoTime();\n        prevSampleTime = startTime;\n        prevLoopTime = startTime;\n        int prevSample = getSensorValue();\n        ElapsedTime spdTimer = new ElapsedTime();\n        double spdTimout = 2.0;\n        double curSpd = 0.3;\n        long stoppedSleepTime = 0;\n        \/\/TODO: SBH - Figure out how to register\/deregister if timing shows its needed\n        \/\/colorSensor.getI2cController().deregisterForPortReadyCallback(colorSensor.getPort());\n        while (opModeIsActive() && curSpd <= 0.35)\n        {\n            Log.i(TAG, String.format(Locale.US, \"TESTING AT SPEED = %5.2f\", curSpd));\n            startRobot(curSpd);\n            while (spdTimer.seconds() < spdTimout)\n            {\n                long currTime = System.nanoTime();\n                int currSample = getSensorValue();\n                long loopInterval = currTime - prevLoopTime;\n                long sampleTime = 0;\n                boolean sampleIsNew = false;\n                if (currSample != prevSample)\n                {\n                    sampleIsNew = true;\n                    sampleTime = currTime - prevSampleTime;\n                    sampleCount++;\n                    prevSample = currSample;\n                    totalSampleTime += sampleTime;\n                    prevSampleTime = currTime;\n                    if (sampleTime < minSampleInterval)\n                        minSampleInterval = sampleTime;\n                    else if (sampleTime > maxSampleInterval)\n                        maxSampleInterval = sampleTime;\n                }\n                if (loopInterval < minLoopInterval)\n                {\n                    minLoopInterval = loopInterval;\n                } else if (loopInterval > maxLoopInterval)\n                {\n                    maxLoopInterval = loopInterval;\n                }\n                if (sampleIsNew)\n                {\n                    logRobot(String.format(Locale.US, \"NEW SAMPLE - sampleTime %7.3f\",\n                            sampleTime \/ MS2NS));\n                }\n                logRobot(String.format(Locale.US, \"[%4d:%7.3f] LoopInterval=%7.3f, \",\n                        loopCount, (currTime - startTime) \/ MS2NS, loopInterval \/ MS2NS));\n                prevLoopTime = currTime;\n                if (useSleep)\n                {\n                    long startSleepTime = System.nanoTime();\n                    waitForTick(sleepMs);\n                    long endSleepTime = System.nanoTime();\n                    totalSampleTime -= (endSleepTime - startSleepTime);\n                }\n                loopCount++;\n            }\n            stopRobot();\n            long startStopSleepTime = System.nanoTime();\n            waitForTick(500);\n            stoppedSleepTime += (System.nanoTime() - startStopSleepTime);\n            spdTimer.reset();\n            if(curSpd < 0.15) curSpd += 0.01;\n            else curSpd += 0.05;\n            \/\/TODO: SBH - Figure out how to register\/deregister if timing shows its needed\n            \/\/colorSensor.getI2cController()\n            \/\/           .registerForI2cPortReadyCallback(colorSensor, colorSensor.getPort());\n        }\n        stopRobot();\n        long endTime = System.nanoTime() - stoppedSleepTime;\n        Log.i(TAG, String.format(\n                \"Loop: MinInterval=%7.3f, MaxInterval=%7.3f, AvgInterval=%7.3f\",\n                minLoopInterval\/MS2NS, maxLoopInterval\/MS2NS,\n                (endTime - startTime)\/MS2NS\/loopCount));\n        Log.i(TAG, String.format(\n                \"Sensor: MinSampleInterval=%7.3f, MaxSampleInterval=%7.3f, AvgSampleInterval=%7.3f %7.3f\",\n                minSampleInterval\/MS2NS, maxSampleInterval\/MS2NS,\n                (endTime - startTime)\/MS2NS\/sampleCount,\n                (double)totalSampleTime\/MS2NS\/sampleCount));\n    }","code_wo_comment":"public void runOpMode()\n    {\n        initRobot();\n        gyro.calibrate();\n        while (!isStopRequested() &&\n               gyro.isCalibrating())\n        {\n            sleep(50);\n        }\n        waitForStart();\n       \n       \n        long minLoopInterval = Long.MAX_VALUE;\n        long maxLoopInterval = Long.MIN_VALUE;\n        long loopCount = 0;\n        long prevLoopTime;\n        long minSampleInterval = Long.MAX_VALUE;\n        long maxSampleInterval = Long.MIN_VALUE;\n        long sampleCount = 0;\n        long prevSampleTime;\n        long totalSampleTime = 0;\n        long startTime = System.nanoTime();\n        prevSampleTime = startTime;\n        prevLoopTime = startTime;\n        int prevSample = getSensorValue();\n        ElapsedTime spdTimer = new ElapsedTime();\n        double spdTimout = 2.0;\n        double curSpd = 0.3;\n        long stoppedSleepTime = 0;\n       \n       \n        while (opModeIsActive() && curSpd <= 0.35)\n        {\n            Log.i(TAG, String.format(Locale.US, \"TESTING AT SPEED = %5.2f\", curSpd));\n            startRobot(curSpd);\n            while (spdTimer.seconds() < spdTimout)\n            {\n                long currTime = System.nanoTime();\n                int currSample = getSensorValue();\n                long loopInterval = currTime - prevLoopTime;\n                long sampleTime = 0;\n                boolean sampleIsNew = false;\n                if (currSample != prevSample)\n                {\n                    sampleIsNew = true;\n                    sampleTime = currTime - prevSampleTime;\n                    sampleCount++;\n                    prevSample = currSample;\n                    totalSampleTime += sampleTime;\n                    prevSampleTime = currTime;\n                    if (sampleTime < minSampleInterval)\n                        minSampleInterval = sampleTime;\n                    else if (sampleTime > maxSampleInterval)\n                        maxSampleInterval = sampleTime;\n                }\n                if (loopInterval < minLoopInterval)\n                {\n                    minLoopInterval = loopInterval;\n                } else if (loopInterval > maxLoopInterval)\n                {\n                    maxLoopInterval = loopInterval;\n                }\n                if (sampleIsNew)\n                {\n                    logRobot(String.format(Locale.US, \"NEW SAMPLE - sampleTime %7.3f\",\n                            sampleTime \/ MS2NS));\n                }\n                logRobot(String.format(Locale.US, \"[%4d:%7.3f] LoopInterval=%7.3f, \",\n                        loopCount, (currTime - startTime) \/ MS2NS, loopInterval \/ MS2NS));\n                prevLoopTime = currTime;\n                if (useSleep)\n                {\n                    long startSleepTime = System.nanoTime();\n                    waitForTick(sleepMs);\n                    long endSleepTime = System.nanoTime();\n                    totalSampleTime -= (endSleepTime - startSleepTime);\n                }\n                loopCount++;\n            }\n            stopRobot();\n            long startStopSleepTime = System.nanoTime();\n            waitForTick(500);\n            stoppedSleepTime += (System.nanoTime() - startStopSleepTime);\n            spdTimer.reset();\n            if(curSpd < 0.15) curSpd += 0.01;\n            else curSpd += 0.05;\n           \n           \n           \n        }\n        stopRobot();\n        long endTime = System.nanoTime() - stoppedSleepTime;\n        Log.i(TAG, String.format(\n                \"Loop: MinInterval=%7.3f, MaxInterval=%7.3f, AvgInterval=%7.3f\",\n                minLoopInterval\/MS2NS, maxLoopInterval\/MS2NS,\n                (endTime - startTime)\/MS2NS\/loopCount));\n        Log.i(TAG, String.format(\n                \"Sensor: MinSampleInterval=%7.3f, MaxSampleInterval=%7.3f, AvgSampleInterval=%7.3f %7.3f\",\n                minSampleInterval\/MS2NS, maxSampleInterval\/MS2NS,\n                (endTime - startTime)\/MS2NS\/sampleCount,\n                (double)totalSampleTime\/MS2NS\/sampleCount));\n    }","cleancode":"public void runopmode() { initrobot(); gyro.calibrate(); while (!isstoprequested() && gyro.iscalibrating()) { sleep(50); } waitforstart(); long minloopinterval = long.max_value; long maxloopinterval = long.min_value; long loopcount = 0; long prevlooptime; long minsampleinterval = long.max_value; long maxsampleinterval = long.min_value; long samplecount = 0; long prevsampletime; long totalsampletime = 0; long starttime = system.nanotime(); prevsampletime = starttime; prevlooptime = starttime; int prevsample = getsensorvalue(); elapsedtime spdtimer = new elapsedtime(); double spdtimout = 2.0; double curspd = 0.3; long stoppedsleeptime = 0; while (opmodeisactive() && curspd <= 0.35) { log.i(tag, string.format(locale.us, \"testing at speed = %5.2f\", curspd)); startrobot(curspd); while (spdtimer.seconds() < spdtimout) { long currtime = system.nanotime(); int currsample = getsensorvalue(); long loopinterval = currtime - prevlooptime; long sampletime = 0; boolean sampleisnew = false; if (currsample != prevsample) { sampleisnew = true; sampletime = currtime - prevsampletime; samplecount++; prevsample = currsample; totalsampletime += sampletime; prevsampletime = currtime; if (sampletime < minsampleinterval) minsampleinterval = sampletime; else if (sampletime > maxsampleinterval) maxsampleinterval = sampletime; } if (loopinterval < minloopinterval) { minloopinterval = loopinterval; } else if (loopinterval > maxloopinterval) { maxloopinterval = loopinterval; } if (sampleisnew) { logrobot(string.format(locale.us, \"new sample - sampletime %7.3f\", sampletime \/ ms2ns)); } logrobot(string.format(locale.us, \"[%4d:%7.3f] loopinterval=%7.3f, \", loopcount, (currtime - starttime) \/ ms2ns, loopinterval \/ ms2ns)); prevlooptime = currtime; if (usesleep) { long startsleeptime = system.nanotime(); waitfortick(sleepms); long endsleeptime = system.nanotime(); totalsampletime -= (endsleeptime - startsleeptime); } loopcount++; } stoprobot(); long startstopsleeptime = system.nanotime(); waitfortick(500); stoppedsleeptime += (system.nanotime() - startstopsleeptime); spdtimer.reset(); if(curspd < 0.15) curspd += 0.01; else curspd += 0.05; } stoprobot(); long endtime = system.nanotime() - stoppedsleeptime; log.i(tag, string.format( \"loop: mininterval=%7.3f, maxinterval=%7.3f, avginterval=%7.3f\", minloopinterval\/ms2ns, maxloopinterval\/ms2ns, (endtime - starttime)\/ms2ns\/loopcount)); log.i(tag, string.format( \"sensor: minsampleinterval=%7.3f, maxsampleinterval=%7.3f, avgsampleinterval=%7.3f %7.3f\", minsampleinterval\/ms2ns, maxsampleinterval\/ms2ns, (endtime - starttime)\/ms2ns\/samplecount, (double)totalsampletime\/ms2ns\/samplecount)); }","repo":"goncalvesm1\/Robot_Project","label":[0,1,0,0]}
{"id":12744,"original_code":"@PostMapping(value = \"\/{id}\/msg\", consumes = \"text\/plain\", produces = \"text\/plain\")\n    public String receiveOrderAndReturnResult(@PathVariable int id, @RequestBody String command) {\n        command = command.toLowerCase().trim();\n        logger.debug(\"User (\" + id + \") sent command: \" + command);\n        \/\/ TODO: replace with login\n        if (\"start\".equals(command)) {\n            return gameService.pickClass(id);\n        }\n        try {\n            var result = gameService.execute(id, command);\n            logger.trace(\"Adding color to Result with message:\");\n            logger.debug(result.getMessage());\n            return addColor(result);\n        } catch (InvalidCommandException e) {\n            logger.debug(\"Parsing user provided command failed.\", e);\n            return e.getMessage();\n        }\n    }","code_wo_comment":"@PostMapping(value = \"\/{id}\/msg\", consumes = \"text\/plain\", produces = \"text\/plain\")\n    public String receiveOrderAndReturnResult(@PathVariable int id, @RequestBody String command) {\n        command = command.toLowerCase().trim();\n        logger.debug(\"User (\" + id + \") sent command: \" + command);\n       \n        if (\"start\".equals(command)) {\n            return gameService.pickClass(id);\n        }\n        try {\n            var result = gameService.execute(id, command);\n            logger.trace(\"Adding color to Result with message:\");\n            logger.debug(result.getMessage());\n            return addColor(result);\n        } catch (InvalidCommandException e) {\n            logger.debug(\"Parsing user provided command failed.\", e);\n            return e.getMessage();\n        }\n    }","cleancode":"@postmapping(value = \"\/{id}\/msg\", consumes = \"text\/plain\", produces = \"text\/plain\") public string receiveorderandreturnresult(@pathvariable int id, @requestbody string command) { command = command.tolowercase().trim(); logger.debug(\"user (\" + id + \") sent command: \" + command); if (\"start\".equals(command)) { return gameservice.pickclass(id); } try { var result = gameservice.execute(id, command); logger.trace(\"adding color to result with message:\"); logger.debug(result.getmessage()); return addcolor(result); } catch (invalidcommandexception e) { logger.debug(\"parsing user provided command failed.\", e); return e.getmessage(); } }","repo":"hjaremko\/cute-animals","label":[1,0,0,0]}
{"id":20968,"original_code":"public synchronized List<PlayerInput> findInputsByPlayerNumberAndSimTick(final int playerNumber, final long simTick) {\n        List<PlayerInput> playerInputs = new ArrayList<PlayerInput>();\n        \/\/ TODO Do not use linear search?\n        for (PlayerInput playerInput : this.playerInputs) {\n            if (playerInput.getPlayerNumber() == playerNumber && playerInput.getSimTick() == simTick) {\n                playerInputs.add(playerInput);\n            }\n        }\n        return playerInputs;\n    }","code_wo_comment":"public synchronized List<PlayerInput> findInputsByPlayerNumberAndSimTick(final int playerNumber, final long simTick) {\n        List<PlayerInput> playerInputs = new ArrayList<PlayerInput>();\n       \n        for (PlayerInput playerInput : this.playerInputs) {\n            if (playerInput.getPlayerNumber() == playerNumber && playerInput.getSimTick() == simTick) {\n                playerInputs.add(playerInput);\n            }\n        }\n        return playerInputs;\n    }","cleancode":"public synchronized list<playerinput> findinputsbyplayernumberandsimtick(final int playernumber, final long simtick) { list<playerinput> playerinputs = new arraylist<playerinput>(); for (playerinput playerinput : this.playerinputs) { if (playerinput.getplayernumber() == playernumber && playerinput.getsimtick() == simtick) { playerinputs.add(playerinput); } } return playerinputs; }","repo":"guxuede\/gm","label":[1,0,0,0]}
{"id":12982,"original_code":"@Override\n\tpublic BaseURL toBaseURL(FacesContext facesContext) throws MalformedURLException {\n\t\tBaseURL baseURL;\n\t\tString uri = bridgeURI.toString();\n\t\t\/\/ If the URL is opaque, meaning it starts with something like \"portlet:\" or \"mailto:\" and\n\t\t\/\/ doesn't have the double-forward-slash like \"http:\/\/\" does, then\n\t\tif (bridgeURI.isOpaque()) {\n\t\t\t\/\/ If the URI starts with \"portlet:\", then return a BaseURL that contains the modified\n\t\t\t\/\/ parameters. This will be a URL that represents navigation to a different viewId.\n\t\t\tif (bridgeURI.isPortletScheme()) {\n\t\t\t\t\/\/ TCK: modeViewIDTest\n\t\t\t\t\/\/ TCK: requestRenderIgnoresScopeViaCreateViewTest\n\t\t\t\t\/\/ TCK: requestRenderRedisplayTest\n\t\t\t\t\/\/ TCK: requestRedisplayOutOfScopeTest\n\t\t\t\t\/\/ TCK: renderRedirectTest\n\t\t\t\t\/\/ TCK: ignoreCurrentViewIdModeChangeTest\n\t\t\t\t\/\/ TCK: exceptionThrownWhenNoDefaultViewIdTest\n\t\t\t\tString portletMode = getParameter(Bridge.PORTLET_MODE_PARAMETER);\n\t\t\t\tboolean modeChanged = ((portletMode != null) && (portletMode.length() > 0));\n\t\t\t\tBridge.PortletPhase urlPortletPhase = bridgeURI.getPortletPhase();\n\t\t\t\tif (urlPortletPhase == Bridge.PortletPhase.ACTION_PHASE) {\n\t\t\t\t\tbaseURL = createActionURL(facesContext, modeChanged);\n\t\t\t\t}\n\t\t\t\telse if (urlPortletPhase == Bridge.PortletPhase.RENDER_PHASE) {\n\t\t\t\t\tbaseURL = createRenderURL(facesContext, modeChanged);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbaseURL = createResourceURL(facesContext, modeChanged);\n\t\t\t\t}\n\t\t\t\t\/\/ If the URI is self-referencing, meaning, it targets the current Faces view, then copy the render\n\t\t\t\t\/\/ parameters from the current PortletRequest to the BaseURL. NOTE: This has the added benefit of\n\t\t\t\t\/\/ copying the bridgeRequestScopeId render parameter, which will preserve the BridgeRequestScope if the\n\t\t\t\t\/\/ user clicks on the link (invokes the BaseURL).\n\t\t\t\tif (selfReferencing) {\n\t\t\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\t\t\tPortletRequest portletRequest = (PortletRequest) externalContext.getRequest();\n\t\t\t\t\tcopyRenderParameters(portletRequest, baseURL);\n\t\t\t\t}\n\t\t\t\t\/\/ If the portlet container created a PortletURL, then apply the PortletMode and WindowState to the\n\t\t\t\t\/\/ PortletURL.\n\t\t\t\tif (baseURL instanceof PortletURL) {\n\t\t\t\t\tPortletURL portletURL = (PortletURL) baseURL;\n\t\t\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\t\t\tPortletRequest portletRequest = (PortletRequest) externalContext.getRequest();\n\t\t\t\t\tPortletURLHelper.setPortletMode(portletURL, portletMode, portletRequest);\n\t\t\t\t\tString windowState = getParameter(Bridge.PORTLET_WINDOWSTATE_PARAMETER);\n\t\t\t\t\tPortletURLHelper.setWindowState(portletURL, windowState, portletRequest);\n\t\t\t\t}\n\t\t\t\t\/\/ Apply the security.\n\t\t\t\tString secure = getParameter(Bridge.PORTLET_SECURE_PARAMETER);\n\t\t\t\tPortletURLHelper.setSecure(baseURL, secure);\n\t\t\t\t\/\/ According to the Bridge Spec, the \"javax.portlet.faces.Secure\" parameter must not be \"carried\n\t\t\t\t\/\/ forward to the generated reference.\" According to a clarification in the Portlet 3.0 JavaDoc for\n\t\t\t\t\/\/ BaseURL#setProperty(String,String), setting the parameter to null will remove it.\n\t\t\t\tbaseURL.setParameter(Bridge.PORTLET_SECURE_PARAMETER, (String) null);\n\t\t\t}\n\t\t\t\/\/ Otherwise, return the a BaseURL string representation (unmodified value) as required by the Bridge Spec.\n\t\t\telse {\n\t\t\t\t\/\/ TCK: encodeResourceURLOpaqueTest\n\t\t\t\tbaseURL = new BaseURLNonEncodedImpl(bridgeURI, encoding);\n\t\t\t}\n\t\t}\n\t\t\/\/ Otherwise, if the URL is a JSF2 portlet resource URL, then\n\t\telse if (PortletResourceUtilCompat.isPortletResourceURL(uri)) {\n\t\t\t\/\/ FACES-63 Return the URI unmodified to prevent double-encoding of resource URLs.\n\t\t\tbaseURL = new BaseURLBridgeURIAdapterImpl(bridgeURI);\n\t\t}\n\t\t\/\/ Otherwise, if the URL is not a JSF2 portlet resource URL, but still contains the \"javax.faces.resource\"\n\t\t\/\/ resource URL identifier, then return a ResourceURL that can retrieve the JSF2 resource.\n\t\telse if ((uri != null) && uri.contains(\"javax.faces.resource\")) {\n\t\t\tbaseURL = createResourceURL(facesContext, bridgeURI.getParameterMap());\n\t\t}\n\t\t\/\/ Otherwise, if the URL is relative, in that it starts with \"..\/\", then return a BaseURL string representation\n\t\t\/\/ of the URL that contains the context-path.\n\t\telse if (bridgeURI.isPathRelative()) {\n\t\t\t\/\/ TCK: encodeResourceURLRelativeURLTest\n\t\t\t\/\/ TCK: encodeResourceURLRelativeURLBackLinkTest\n\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\tString contextPath = externalContext.getRequestContextPath();\n\t\t\tbaseURL = new BaseURLRelativeImpl(bridgeURI, contextPath);\n\t\t}\n\t\t\/\/ Otherwise, if the URL is external, then return an encoded BaseURL string representation of the URL.\n\t\telse if (bridgeURI.isExternal(contextPath)) {\n\t\t\t\/\/ TCK: encodeResourceURLForeignExternalURLBackLinkTest\n\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\tPortletResponse portletResponse = (PortletResponse) externalContext.getResponse();\n\t\t\tbaseURL = new BaseURLPortletResponseEncodedImpl(bridgeURI, portletResponse);\n\t\t}\n\t\t\/\/ Otherwise, if the URL originally contained the \"javax.portlet.faces.ViewLink\" which represents navigation\n\t\t\/\/ to a different Faces view, then\n\t\telse if (viewLink) {\n\t\t\tString portletMode = getParameter(Bridge.PORTLET_MODE_PARAMETER);\n\t\t\tString windowState = getParameter(Bridge.PORTLET_WINDOWSTATE_PARAMETER);\n\t\t\tboolean secure = BooleanHelper.toBoolean(getParameter(Bridge.PORTLET_SECURE_PARAMETER));\n\t\t\t\/\/ If the URL targets a Faces viewId, then return a PortletURL (Action URL) that targets the view with the\n\t\t\t\/\/ appropriate PortletMode, WindowState, and Security settings built into the URL. For more info, see\n\t\t\t\/\/ JavaDoc comments for {@link Bridge#VIEW_LINK}.\n\t\t\tif (getViewId() != null) {\n\t\t\t\t\/\/ TCK: encodeResourceURLViewLinkTest\n\t\t\t\t\/\/ TCK: encodeResourceURLViewLinkWithBackLinkTest\n\t\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\t\tPortletRequest portletRequest = (PortletRequest) externalContext.getRequest();\n\t\t\t\tPortletURL actionURL = createActionURL(facesContext, PortletURLHelper.EXCLUDED_PARAMETER_NAMES);\n\t\t\t\tPortletURLHelper.setPortletMode(actionURL, portletMode, portletRequest);\n\t\t\t\tPortletURLHelper.setWindowState(actionURL, windowState, portletRequest);\n\t\t\t\tPortletURLHelper.setSecure(actionURL, secure);\n\t\t\t\t\/\/ According to the Bridge Spec, the \"javax.portlet.faces.Secure\" parameter must not be \"carried\n\t\t\t\t\/\/ forward to the generated reference.\" According to a clarification in the Portlet 3.0 JavaDoc for\n\t\t\t\t\/\/ BaseURL#setProperty(String,String), setting the parameter to null will remove it.\n\t\t\t\tactionURL.setParameter(Bridge.PORTLET_SECURE_PARAMETER, (String) null);\n\t\t\t\tbaseURL = actionURL;\n\t\t\t}\n\t\t\t\/\/ Otherwise, return a PortletURL (Render URL) that contains the \"_jsfBridgeNonFacesView\" render parameter,\n\t\t\t\/\/ which is a signal to the GenericFacesPortlet to dispatch to this non-Faces target when the URL is\n\t\t\t\/\/ requested. Note that this seems to be a use-case that is contradictory with the JavaDoc for\n\t\t\t\/\/ Brige#VIEW_LINK which claims navigation to a different view. But there are a number of tests in the TCK\n\t\t\t\/\/ that utilize this (see below).\n\t\t\telse {\n\t\t\t\tBridge.PortletPhase portletRequestPhase = BridgeUtil.getPortletRequestPhase(facesContext);\n\t\t\t\tif (isHeaderOrRenderOrResourcePhase(portletRequestPhase)) {\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewRenderTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithParamRenderTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithModeRenderTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithInvalidModeRenderTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithWindowStateRenderTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithInvalidWindowStateRenderTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewResourceTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithParamResourceTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithModeResourceTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithInvalidModeResourceTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithWindowStateResourceTest\n\t\t\t\t\t\/\/ TCK: encodeActionURLNonJSFViewWithInvalidWindowStateResourceTest\n\t\t\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\t\t\tPortletRequest portletRequest = (PortletRequest) externalContext.getRequest();\n\t\t\t\t\tPortletURL renderURL = createRenderURL(facesContext, PortletURLHelper.EXCLUDED_PARAMETER_NAMES);\n\t\t\t\t\trenderURL.setParameter(Bridge.NONFACES_TARGET_PATH_PARAMETER, bridgeURI.getPath());\n\t\t\t\t\tPortletURLHelper.setPortletMode(renderURL, portletMode, portletRequest);\n\t\t\t\t\tPortletURLHelper.setWindowState(renderURL, windowState, portletRequest);\n\t\t\t\t\tPortletURLHelper.setSecure(renderURL, secure);\n\t\t\t\t\t\/\/ According to the Bridge Spec, the \"javax.portlet.faces.Secure\" parameter must not be \"carried\n\t\t\t\t\t\/\/ forward to the generated reference.\" According to a clarification in the Portlet 3.0 JavaDoc for\n\t\t\t\t\t\/\/ BaseURL#setProperty(String,String), setting the parameter to null will remove it.\n\t\t\t\t\trenderURL.setParameter(Bridge.PORTLET_SECURE_PARAMETER, (String) null);\n\t\t\t\t\tbaseURL = renderURL;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalStateException(\"Unable to encode a URL for a non-Faces view in the \" +\n\t\t\t\t\t\tportletRequestPhase + \" of the portlet lifecycle.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\/\/ Otherwise, if the URL targets a Faces viewId, then return a ResourceURL that targets the view.\n\t\telse if (getViewId() != null) {\n\t\t\t\/\/ TCK: resourceAttrRetainedAfterRedisplayPPRTest\n\t\t\t\/\/ TCK: encodeActionURLJSFViewResourceTest\n\t\t\t\/\/ TCK: encodeActionURLWithParamResourceTest\n\t\t\t\/\/ TCK: encodeActionURLWithModeResourceTest\n\t\t\t\/\/ TCK: encodeActionURLWithInvalidModeResourceTest\n\t\t\t\/\/ TCK: encodeActionURLWithWindowStateResourceTest\n\t\t\t\/\/ TCK: encodeActionURLWithInvalidWindowStateResourceTest\n\t\t\t\/\/ TCK: encodeURLEscapingTest\n\t\t\t\/\/ TCK: encodeResourceURLWithModeTest\n\t\t\tbaseURL = createResourceURL(facesContext, PortletURLHelper.EXCLUDED_PARAMETER_NAMES);\n\t\t}\n\t\t\/\/ Otherwise, if the bridge must encode the URL to satisfy \"in-protocol\" resource serving, then return a\n\t\t\/\/ an appropriate ResourceURL.\n\t\telse if (inProtocol) {\n\t\t\t\/\/ TCK: nonFacesResourceTest\n\t\t\tResourceURL resourceURL = createResourceURL(facesContext);\n\t\t\tresourceURL.setResourceID(bridgeURI.getContextRelativePath(contextPath));\n\t\t\tbaseURL = resourceURL;\n\t\t}\n\t\t\/\/ Otherwise, assume that the URL is for an resource external to the portlet context like\n\t\t\/\/ \"\/portalcontext\/resources\/foo.png\" and return a BaseURL string representation of it.\n\t\telse {\n\t\t\t\/\/ TCK: encodeResourceURLTest\n\t\t\t\/\/ TCK: encodeResourceURLBackLinkTest\n\t\t\tbaseURL = new BaseURLBridgeURIAdapterImpl(bridgeURI);\n\t\t}\n\t\treturn baseURL;\n\t}","code_wo_comment":"@Override\n\tpublic BaseURL toBaseURL(FacesContext facesContext) throws MalformedURLException {\n\t\tBaseURL baseURL;\n\t\tString uri = bridgeURI.toString();\n\t\n\t\n\t\tif (bridgeURI.isOpaque()) {\n\t\t\n\t\t\n\t\t\tif (bridgeURI.isPortletScheme()) {\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tString portletMode = getParameter(Bridge.PORTLET_MODE_PARAMETER);\n\t\t\t\tboolean modeChanged = ((portletMode != null) && (portletMode.length() > 0));\n\t\t\t\tBridge.PortletPhase urlPortletPhase = bridgeURI.getPortletPhase();\n\t\t\t\tif (urlPortletPhase == Bridge.PortletPhase.ACTION_PHASE) {\n\t\t\t\t\tbaseURL = createActionURL(facesContext, modeChanged);\n\t\t\t\t}\n\t\t\t\telse if (urlPortletPhase == Bridge.PortletPhase.RENDER_PHASE) {\n\t\t\t\t\tbaseURL = createRenderURL(facesContext, modeChanged);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbaseURL = createResourceURL(facesContext, modeChanged);\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tif (selfReferencing) {\n\t\t\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\t\t\tPortletRequest portletRequest = (PortletRequest) externalContext.getRequest();\n\t\t\t\t\tcopyRenderParameters(portletRequest, baseURL);\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tif (baseURL instanceof PortletURL) {\n\t\t\t\t\tPortletURL portletURL = (PortletURL) baseURL;\n\t\t\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\t\t\tPortletRequest portletRequest = (PortletRequest) externalContext.getRequest();\n\t\t\t\t\tPortletURLHelper.setPortletMode(portletURL, portletMode, portletRequest);\n\t\t\t\t\tString windowState = getParameter(Bridge.PORTLET_WINDOWSTATE_PARAMETER);\n\t\t\t\t\tPortletURLHelper.setWindowState(portletURL, windowState, portletRequest);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tString secure = getParameter(Bridge.PORTLET_SECURE_PARAMETER);\n\t\t\t\tPortletURLHelper.setSecure(baseURL, secure);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tbaseURL.setParameter(Bridge.PORTLET_SECURE_PARAMETER, (String) null);\n\t\t\t}\n\t\t\n\t\t\telse {\n\t\t\t\n\t\t\t\tbaseURL = new BaseURLNonEncodedImpl(bridgeURI, encoding);\n\t\t\t}\n\t\t}\n\t\n\t\telse if (PortletResourceUtilCompat.isPortletResourceURL(uri)) {\n\t\t\n\t\t\tbaseURL = new BaseURLBridgeURIAdapterImpl(bridgeURI);\n\t\t}\n\t\n\t\n\t\telse if ((uri != null) && uri.contains(\"javax.faces.resource\")) {\n\t\t\tbaseURL = createResourceURL(facesContext, bridgeURI.getParameterMap());\n\t\t}\n\t\n\t\n\t\telse if (bridgeURI.isPathRelative()) {\n\t\t\n\t\t\n\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\tString contextPath = externalContext.getRequestContextPath();\n\t\t\tbaseURL = new BaseURLRelativeImpl(bridgeURI, contextPath);\n\t\t}\n\t\n\t\telse if (bridgeURI.isExternal(contextPath)) {\n\t\t\n\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\tPortletResponse portletResponse = (PortletResponse) externalContext.getResponse();\n\t\t\tbaseURL = new BaseURLPortletResponseEncodedImpl(bridgeURI, portletResponse);\n\t\t}\n\t\n\t\n\t\telse if (viewLink) {\n\t\t\tString portletMode = getParameter(Bridge.PORTLET_MODE_PARAMETER);\n\t\t\tString windowState = getParameter(Bridge.PORTLET_WINDOWSTATE_PARAMETER);\n\t\t\tboolean secure = BooleanHelper.toBoolean(getParameter(Bridge.PORTLET_SECURE_PARAMETER));\n\t\t\n\t\t\n\t\t\n\t\t\tif (getViewId() != null) {\n\t\t\t\n\t\t\t\n\t\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\t\tPortletRequest portletRequest = (PortletRequest) externalContext.getRequest();\n\t\t\t\tPortletURL actionURL = createActionURL(facesContext, PortletURLHelper.EXCLUDED_PARAMETER_NAMES);\n\t\t\t\tPortletURLHelper.setPortletMode(actionURL, portletMode, portletRequest);\n\t\t\t\tPortletURLHelper.setWindowState(actionURL, windowState, portletRequest);\n\t\t\t\tPortletURLHelper.setSecure(actionURL, secure);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tactionURL.setParameter(Bridge.PORTLET_SECURE_PARAMETER, (String) null);\n\t\t\t\tbaseURL = actionURL;\n\t\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\telse {\n\t\t\t\tBridge.PortletPhase portletRequestPhase = BridgeUtil.getPortletRequestPhase(facesContext);\n\t\t\t\tif (isHeaderOrRenderOrResourcePhase(portletRequestPhase)) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tExternalContext externalContext = facesContext.getExternalContext();\n\t\t\t\t\tPortletRequest portletRequest = (PortletRequest) externalContext.getRequest();\n\t\t\t\t\tPortletURL renderURL = createRenderURL(facesContext, PortletURLHelper.EXCLUDED_PARAMETER_NAMES);\n\t\t\t\t\trenderURL.setParameter(Bridge.NONFACES_TARGET_PATH_PARAMETER, bridgeURI.getPath());\n\t\t\t\t\tPortletURLHelper.setPortletMode(renderURL, portletMode, portletRequest);\n\t\t\t\t\tPortletURLHelper.setWindowState(renderURL, windowState, portletRequest);\n\t\t\t\t\tPortletURLHelper.setSecure(renderURL, secure);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\trenderURL.setParameter(Bridge.PORTLET_SECURE_PARAMETER, (String) null);\n\t\t\t\t\tbaseURL = renderURL;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalStateException(\"Unable to encode a URL for a non-Faces view in the \" +\n\t\t\t\t\t\tportletRequestPhase + \" of the portlet lifecycle.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\telse if (getViewId() != null) {\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\tbaseURL = createResourceURL(facesContext, PortletURLHelper.EXCLUDED_PARAMETER_NAMES);\n\t\t}\n\t\n\t\n\t\telse if (inProtocol) {\n\t\t\n\t\t\tResourceURL resourceURL = createResourceURL(facesContext);\n\t\t\tresourceURL.setResourceID(bridgeURI.getContextRelativePath(contextPath));\n\t\t\tbaseURL = resourceURL;\n\t\t}\n\t\n\t\n\t\telse {\n\t\t\n\t\t\n\t\t\tbaseURL = new BaseURLBridgeURIAdapterImpl(bridgeURI);\n\t\t}\n\t\treturn baseURL;\n\t}","cleancode":"@override public baseurl tobaseurl(facescontext facescontext) throws malformedurlexception { baseurl baseurl; string uri = bridgeuri.tostring(); if (bridgeuri.isopaque()) { if (bridgeuri.isportletscheme()) { string portletmode = getparameter(bridge.portlet_mode_parameter); boolean modechanged = ((portletmode != null) && (portletmode.length() > 0)); bridge.portletphase urlportletphase = bridgeuri.getportletphase(); if (urlportletphase == bridge.portletphase.action_phase) { baseurl = createactionurl(facescontext, modechanged); } else if (urlportletphase == bridge.portletphase.render_phase) { baseurl = createrenderurl(facescontext, modechanged); } else { baseurl = createresourceurl(facescontext, modechanged); } if (selfreferencing) { externalcontext externalcontext = facescontext.getexternalcontext(); portletrequest portletrequest = (portletrequest) externalcontext.getrequest(); copyrenderparameters(portletrequest, baseurl); } if (baseurl instanceof portleturl) { portleturl portleturl = (portleturl) baseurl; externalcontext externalcontext = facescontext.getexternalcontext(); portletrequest portletrequest = (portletrequest) externalcontext.getrequest(); portleturlhelper.setportletmode(portleturl, portletmode, portletrequest); string windowstate = getparameter(bridge.portlet_windowstate_parameter); portleturlhelper.setwindowstate(portleturl, windowstate, portletrequest); } string secure = getparameter(bridge.portlet_secure_parameter); portleturlhelper.setsecure(baseurl, secure); baseurl.setparameter(bridge.portlet_secure_parameter, (string) null); } else { baseurl = new baseurlnonencodedimpl(bridgeuri, encoding); } } else if (portletresourceutilcompat.isportletresourceurl(uri)) { baseurl = new baseurlbridgeuriadapterimpl(bridgeuri); } else if ((uri != null) && uri.contains(\"javax.faces.resource\")) { baseurl = createresourceurl(facescontext, bridgeuri.getparametermap()); } else if (bridgeuri.ispathrelative()) { externalcontext externalcontext = facescontext.getexternalcontext(); string contextpath = externalcontext.getrequestcontextpath(); baseurl = new baseurlrelativeimpl(bridgeuri, contextpath); } else if (bridgeuri.isexternal(contextpath)) { externalcontext externalcontext = facescontext.getexternalcontext(); portletresponse portletresponse = (portletresponse) externalcontext.getresponse(); baseurl = new baseurlportletresponseencodedimpl(bridgeuri, portletresponse); } else if (viewlink) { string portletmode = getparameter(bridge.portlet_mode_parameter); string windowstate = getparameter(bridge.portlet_windowstate_parameter); boolean secure = booleanhelper.toboolean(getparameter(bridge.portlet_secure_parameter)); if (getviewid() != null) { externalcontext externalcontext = facescontext.getexternalcontext(); portletrequest portletrequest = (portletrequest) externalcontext.getrequest(); portleturl actionurl = createactionurl(facescontext, portleturlhelper.excluded_parameter_names); portleturlhelper.setportletmode(actionurl, portletmode, portletrequest); portleturlhelper.setwindowstate(actionurl, windowstate, portletrequest); portleturlhelper.setsecure(actionurl, secure); actionurl.setparameter(bridge.portlet_secure_parameter, (string) null); baseurl = actionurl; } else { bridge.portletphase portletrequestphase = bridgeutil.getportletrequestphase(facescontext); if (isheaderorrenderorresourcephase(portletrequestphase)) { externalcontext externalcontext = facescontext.getexternalcontext(); portletrequest portletrequest = (portletrequest) externalcontext.getrequest(); portleturl renderurl = createrenderurl(facescontext, portleturlhelper.excluded_parameter_names); renderurl.setparameter(bridge.nonfaces_target_path_parameter, bridgeuri.getpath()); portleturlhelper.setportletmode(renderurl, portletmode, portletrequest); portleturlhelper.setwindowstate(renderurl, windowstate, portletrequest); portleturlhelper.setsecure(renderurl, secure); renderurl.setparameter(bridge.portlet_secure_parameter, (string) null); baseurl = renderurl; } else { throw new illegalstateexception(\"unable to encode a url for a non-faces view in the \" + portletrequestphase + \" of the portlet lifecycle.\"); } } } else if (getviewid() != null) { baseurl = createresourceurl(facescontext, portleturlhelper.excluded_parameter_names); } else if (inprotocol) { resourceurl resourceurl = createresourceurl(facescontext); resourceurl.setresourceid(bridgeuri.getcontextrelativepath(contextpath)); baseurl = resourceurl; } else { baseurl = new baseurlbridgeuriadapterimpl(bridgeuri); } return baseurl; }","repo":"jgorny\/liferay-faces-bridge-impl","label":[0,1,0,0]}
{"id":13218,"original_code":"public static <N, T extends N> int getItemSize(ReadableWDocument<N, ?, T> doc, N node) {\n    \/\/ Short circuit if it's a text node, implementation is simpler\n    T textNode = doc.asText(node);\n    if (textNode != null) {\n      return doc.getLength(textNode);\n    }\n    \/\/ Otherwise, calculate two locations and subtract\n    N parent = doc.getParentElement(node);\n    if (parent == null) {\n      \/\/ Requesting size of the document root.\n      \/\/ TODO(danilatos\/anorth) This would change if we have multiple roots.\n      noteCodeThatWillBreakWithMultipleRoots();\n      return doc.size();\n    }\n    N next = doc.getNextSibling(node);\n    int locationAfter = next != null ? doc.getLocation(next)\n        : doc.getLocation(Point.end(parent));\n    return locationAfter - doc.getLocation(node);\n  }","code_wo_comment":"public static <N, T extends N> int getItemSize(ReadableWDocument<N, ?, T> doc, N node) {\n   \n    T textNode = doc.asText(node);\n    if (textNode != null) {\n      return doc.getLength(textNode);\n    }\n   \n    N parent = doc.getParentElement(node);\n    if (parent == null) {\n     \n     \n      noteCodeThatWillBreakWithMultipleRoots();\n      return doc.size();\n    }\n    N next = doc.getNextSibling(node);\n    int locationAfter = next != null ? doc.getLocation(next)\n        : doc.getLocation(Point.end(parent));\n    return locationAfter - doc.getLocation(node);\n  }","cleancode":"public static <n, t extends n> int getitemsize(readablewdocument<n, ?, t> doc, n node) { t textnode = doc.astext(node); if (textnode != null) { return doc.getlength(textnode); } n parent = doc.getparentelement(node); if (parent == null) { notecodethatwillbreakwithmultipleroots(); return doc.size(); } n next = doc.getnextsibling(node); int locationafter = next != null ? doc.getlocation(next) : doc.getlocation(point.end(parent)); return locationafter - doc.getlocation(node); }","repo":"gburd\/wave","label":[1,0,0,0]}
{"id":13290,"original_code":"private void resolveAllProperties(Properties props, IXMLElement xmlProp, File file) throws CompilerException\n    {\n        variableSubstitutor.setBracesRequired(true);\n        for (Enumeration e = props.keys(); e.hasMoreElements();)\n        {\n            String name = (String) e.nextElement();\n            String value = props.getProperty(name);\n            int mods = -1;\n            do\n            {\n                StringReader read = new StringReader(value);\n                StringWriter write = new StringWriter();\n                try\n                {\n                    try\n                    {\n                        mods = variableSubstitutor.substitute(read, write, SubstitutionType.TYPE_AT);\n                    }\n                    catch (Exception e1)\n                    {\n                        throw new IOException(e1.getMessage());\n                    }\n                    \/\/ TODO: check for circular references. We need to know\n                    \/\/ which\n                    \/\/ variables were substituted to do that\n                    props.put(name, value);\n                }\n                catch (IOException ex)\n                {\n                    assertionHelper.parseError(xmlProp, \"Faild to load file: \" + file.getAbsolutePath(),\n                            ex);\n                }\n            }\n            while (mods != 0);\n        }\n    }","code_wo_comment":"private void resolveAllProperties(Properties props, IXMLElement xmlProp, File file) throws CompilerException\n    {\n        variableSubstitutor.setBracesRequired(true);\n        for (Enumeration e = props.keys(); e.hasMoreElements();)\n        {\n            String name = (String) e.nextElement();\n            String value = props.getProperty(name);\n            int mods = -1;\n            do\n            {\n                StringReader read = new StringReader(value);\n                StringWriter write = new StringWriter();\n                try\n                {\n                    try\n                    {\n                        mods = variableSubstitutor.substitute(read, write, SubstitutionType.TYPE_AT);\n                    }\n                    catch (Exception e1)\n                    {\n                        throw new IOException(e1.getMessage());\n                    }\n                   \n                   \n                   \n                    props.put(name, value);\n                }\n                catch (IOException ex)\n                {\n                    assertionHelper.parseError(xmlProp, \"Faild to load file: \" + file.getAbsolutePath(),\n                            ex);\n                }\n            }\n            while (mods != 0);\n        }\n    }","cleancode":"private void resolveallproperties(properties props, ixmlelement xmlprop, file file) throws compilerexception { variablesubstitutor.setbracesrequired(true); for (enumeration e = props.keys(); e.hasmoreelements();) { string name = (string) e.nextelement(); string value = props.getproperty(name); int mods = -1; do { stringreader read = new stringreader(value); stringwriter write = new stringwriter(); try { try { mods = variablesubstitutor.substitute(read, write, substitutiontype.type_at); } catch (exception e1) { throw new ioexception(e1.getmessage()); } props.put(name, value); } catch (ioexception ex) { assertionhelper.parseerror(xmlprop, \"faild to load file: \" + file.getabsolutepath(), ex); } } while (mods != 0); } }","repo":"guilhermemota\/izpack","label":[1,0,0,0]}
{"id":13571,"original_code":"public PeRatio computePeRatio(final TickerPrice price) {\n    \/*\n     * TODO: Need to verify the denominator to be used in this formula. I was not able to understand this from the\n     * document\n     *\/\n    return PeRatio.compute(price, computeDividendYield(price));\n  }","code_wo_comment":"public PeRatio computePeRatio(final TickerPrice price) {\n   \n    return PeRatio.compute(price, computeDividendYield(price));\n  }","cleancode":"public peratio computeperatio(final tickerprice price) { return peratio.compute(price, computedividendyield(price)); }","repo":"javacreed\/super-simple-stocks","label":[0,1,0,0]}
{"id":29973,"original_code":"@Override\n\tpublic MultiSelect<T> build() {\n\t\tfinal MultiSelectListBox<ITEM> component = getComponent();\n\t\t\/\/ check DataProvider\n\t\tif (!new ExceptionSwallowingSupplier<>(() -> component.getDataProvider()).get().isPresent()) {\n\t\t\t\/\/ default data provider\n\t\t\tcomponent.setDataProvider(DataProvider.ofCollection(Collections.emptySet()));\n\t\t}\n\t\t\/\/ configure captions\n\t\tif (!customItemCaptionGenerator && !itemCaptions.isEmpty()) {\n\t\t\tcomponent.setRenderer(new TextRenderer<>(\n\t\t\t\t\tnew DeferrableItemLabelGenerator<>(itemCaptions, component, isDeferredLocalizationEnabled())));\n\t\t}\n\t\t\/\/ items\n\t\tif (!items.isEmpty()) {\n\t\t\tcomponent.setItems(items);\n\t\t}\n\t\tfinal Input<Set<ITEM>> itemInput = Input.builder(component).requiredPropertyHandler((f, c) -> {\n\t\t\treturn false;\n\t\t\t\/\/ TODO not supported by web component at time of writing\n\t\t\t\/\/ return f.isRequiredIndicatorVisible();\n\t\t}, (f, c, v) -> {\n\t\t\t\/\/ TODO not supported by web component at time of writing\n\t\t\t\/\/ f.setRequiredIndicatorVisible(v);\n\t\t}).isEmptySupplier(f -> f.getValue() == null || f.getValue().isEmpty()).build();\n\t\tfinal MultiSelectInputAdapter<T, ITEM, MultiSelectListBox<ITEM>> multiSelect = new MultiSelectInputAdapter<>(\n\t\t\t\titemInput, new MultiSelectListBoxItemConverterAdapter<>(component, itemConverter),\n\t\t\t\tms -> component.getDataProvider().refreshAll(), () -> {\n\t\t\t\t\tif (component.getDataProvider() != null) {\n\t\t\t\t\t\treturn component.getDataProvider().fetch(new Query<>()).collect(Collectors.toSet());\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t\tselectionListeners.forEach(listener -> multiSelect.addSelectionListener(listener));\n\t\tgetValueChangeListeners().forEach(listener -> multiSelect.addValueChangeListener(listener));\n\t\tgetReadonlyChangeListeners().forEach(listener -> multiSelect.addReadonlyChangeListener(listener));\n\t\tgetAdapters().getAdapters().forEach((t, a) -> multiSelect.setAdapter(t, a));\n\t\treturn multiSelect;\n\t}","code_wo_comment":"@Override\n\tpublic MultiSelect<T> build() {\n\t\tfinal MultiSelectListBox<ITEM> component = getComponent();\n\t\n\t\tif (!new ExceptionSwallowingSupplier<>(() -> component.getDataProvider()).get().isPresent()) {\n\t\t\n\t\t\tcomponent.setDataProvider(DataProvider.ofCollection(Collections.emptySet()));\n\t\t}\n\t\n\t\tif (!customItemCaptionGenerator && !itemCaptions.isEmpty()) {\n\t\t\tcomponent.setRenderer(new TextRenderer<>(\n\t\t\t\t\tnew DeferrableItemLabelGenerator<>(itemCaptions, component, isDeferredLocalizationEnabled())));\n\t\t}\n\t\n\t\tif (!items.isEmpty()) {\n\t\t\tcomponent.setItems(items);\n\t\t}\n\t\tfinal Input<Set<ITEM>> itemInput = Input.builder(component).requiredPropertyHandler((f, c) -> {\n\t\t\treturn false;\n\t\t\n\t\t\n\t\t}, (f, c, v) -> {\n\t\t\n\t\t\n\t\t}).isEmptySupplier(f -> f.getValue() == null || f.getValue().isEmpty()).build();\n\t\tfinal MultiSelectInputAdapter<T, ITEM, MultiSelectListBox<ITEM>> multiSelect = new MultiSelectInputAdapter<>(\n\t\t\t\titemInput, new MultiSelectListBoxItemConverterAdapter<>(component, itemConverter),\n\t\t\t\tms -> component.getDataProvider().refreshAll(), () -> {\n\t\t\t\t\tif (component.getDataProvider() != null) {\n\t\t\t\t\t\treturn component.getDataProvider().fetch(new Query<>()).collect(Collectors.toSet());\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t\tselectionListeners.forEach(listener -> multiSelect.addSelectionListener(listener));\n\t\tgetValueChangeListeners().forEach(listener -> multiSelect.addValueChangeListener(listener));\n\t\tgetReadonlyChangeListeners().forEach(listener -> multiSelect.addReadonlyChangeListener(listener));\n\t\tgetAdapters().getAdapters().forEach((t, a) -> multiSelect.setAdapter(t, a));\n\t\treturn multiSelect;\n\t}","cleancode":"@override public multiselect<t> build() { final multiselectlistbox<item> component = getcomponent(); if (!new exceptionswallowingsupplier<>(() -> component.getdataprovider()).get().ispresent()) { component.setdataprovider(dataprovider.ofcollection(collections.emptyset())); } if (!customitemcaptiongenerator && !itemcaptions.isempty()) { component.setrenderer(new textrenderer<>( new deferrableitemlabelgenerator<>(itemcaptions, component, isdeferredlocalizationenabled()))); } if (!items.isempty()) { component.setitems(items); } final input<set<item>> iteminput = input.builder(component).requiredpropertyhandler((f, c) -> { return false; }, (f, c, v) -> { }).isemptysupplier(f -> f.getvalue() == null || f.getvalue().isempty()).build(); final multiselectinputadapter<t, item, multiselectlistbox<item>> multiselect = new multiselectinputadapter<>( iteminput, new multiselectlistboxitemconverteradapter<>(component, itemconverter), ms -> component.getdataprovider().refreshall(), () -> { if (component.getdataprovider() != null) { return component.getdataprovider().fetch(new query<>()).collect(collectors.toset()); } return null; }); selectionlisteners.foreach(listener -> multiselect.addselectionlistener(listener)); getvaluechangelisteners().foreach(listener -> multiselect.addvaluechangelistener(listener)); getreadonlychangelisteners().foreach(listener -> multiselect.addreadonlychangelistener(listener)); getadapters().getadapters().foreach((t, a) -> multiselect.setadapter(t, a)); return multiselect; }","repo":"holon-platform\/holon-vaadin-flow","label":[0,0,1,0]}
{"id":29974,"original_code":"@Override\n\tpublic ListMultiSelectInputBuilder<T, ITEM> required(boolean required) {\n\t\t\/\/ TODO not supported at time of writing\n\t\t\/\/ getComponent().setRequiredIndicatorVisible(required);\n\t\treturn getConfigurator();\n\t}","code_wo_comment":"@Override\n\tpublic ListMultiSelectInputBuilder<T, ITEM> required(boolean required) {\n\t\n\t\n\t\treturn getConfigurator();\n\t}","cleancode":"@override public listmultiselectinputbuilder<t, item> required(boolean required) { return getconfigurator(); }","repo":"holon-platform\/holon-vaadin-flow","label":[0,1,0,0]}
{"id":13607,"original_code":"public void generateMethods(FhirToHapiTypeConverter converter, List<Method> methods) {\n        List<HapiType> types = converter.getHapiTypes();\n        System.out.println(\"Attribute path:\" + converter.getFullAttributePath());\n        if (\"Immunization.doseQuantity\".equals(converter.getFullAttributePath())) {\n            System.out.println(\"Start Debugging\");\n        }\n        if (types == null || types.isEmpty() || converter.getCardinality() == Cardinality.CONSTRAINED_OUT) {\n            return;\n        } else {\n            if(converter.isMultiType()) {\n\/\/                Method method = Method.constructNoArgMethod(Method.buildGetterName(converter.parseAttributeName()), \"org.hl7.fhir.dstu3.model.Type\");\n\/\/                method.setBody(getTemplate().getAdapterGetMethodDelegationWithTryCatchBody(converter.parseAttributeName()));\n\/\/                addMethod(methods, method);\n                buildGetterMethod(methods, converter.parseAttributeName(), \"org.hl7.fhir.dstu3.model.Type\", null, false, null);\n\/\/                method = constructSetMethodSignature(converter.parseAttributeName(), \"org.hl7.fhir.dstu3.model.Type\", getParentType());\n\/\/                method.setBody(getTemplate().getAdapterSetMethodDelegationBody(converter.parseAttributeName()));\n\/\/                method.addImport(\"org.hl7.fhir.dstu3.model.Type\");\n\/\/                addMethod(methods, method);\n                buildSetterMethod(methods, converter.parseAttributeName(), \"org.hl7.fhir.dstu3.model.Type\", getParentType());\n            }\n            if(converter.isReferenceMultiType() && !converter.isMultipleCardinality() && !converter.isMultiType()) {\n\/\/                Method method = Method.constructNoArgMethod(Method.buildGetterName(converter.parseAttributeName()), \"org.hl7.fhir.dstu3.model.Reference\");\n\/\/                method.setBody(getTemplate().getAdapterGetMethodDelegationWithTryCatchBody(converter.parseAttributeName()));\n\/\/                addMethod(methods, method);\n                buildGetterMethod(methods, converter.parseAttributeName(), \"org.hl7.fhir.dstu3.model.Reference\", null, false, null);\n\/\/                method = Method.constructNoArgMethod(Method.buildGetterName(converter.parseAttributeName() + \"Target\"), \"org.hl7.fhir.dstu3.model.Resource\");\n\/\/                method.setBody(getTemplate().getAdapterGetMethodDelegationWithTryCatchBody(converter.parseAttributeName() + \"Target\"));\n\/\/                addMethod(methods, method);\n                buildGetterMethod(methods, converter.parseAttributeName() + \"Target\", \"org.hl7.fhir.dstu3.model.Resource\", null, false, null);\n            }\n            for (HapiType type : types) {\n                if (type.getDatatype() == null && type.getGeneratedType() == null) {\n                    System.out.println(\"Investigate : \" + converter.getFullAttributePath());\n                    \/\/TODO Currently not handled: text, meta, references\n                    continue;\n                }\n                if (type.isReference()) {\n                    handleReferenceTypes(converter, type, methods);\n                } else if (!type.isResource() && type.getGeneratedType() != null) {\n                    handleExtendedDatatypes(converter, type, methods);\n                } else if (type.isBackboneElement()) {\n                    handleDatatypeMethods(converter, type, methods);\n                } else if (type.isEnumerationType()) {\n                    handleEnumTypeMethods(converter, type, methods);\n                } else {\n                    FhirDatatypeEnum datatype = FhirDatatypeEnum.getEnumeratedDatatype(type.getFhirType());\n                    if (datatype != null && datatype.isPrimitiveDatatype()) {\n                        handlePrimitiveTypeMethods(converter, type, methods);\n                        \/\/TODO Create methods that return the equivalent java type\n                    } else {\n                        handleDatatypeMethods(converter, type, methods);\n                    }\n                }\n            }\n            if (converter.isMultiType()) {\n                \/\/TODO Add org.hl7.fhir.dstu3.model.Type method\n            }\n        }\n    }","code_wo_comment":"public void generateMethods(FhirToHapiTypeConverter converter, List<Method> methods) {\n        List<HapiType> types = converter.getHapiTypes();\n        System.out.println(\"Attribute path:\" + converter.getFullAttributePath());\n        if (\"Immunization.doseQuantity\".equals(converter.getFullAttributePath())) {\n            System.out.println(\"Start Debugging\");\n        }\n        if (types == null || types.isEmpty() || converter.getCardinality() == Cardinality.CONSTRAINED_OUT) {\n            return;\n        } else {\n            if(converter.isMultiType()) {\n                buildGetterMethod(methods, converter.parseAttributeName(), \"org.hl7.fhir.dstu3.model.Type\", null, false, null);\n                buildSetterMethod(methods, converter.parseAttributeName(), \"org.hl7.fhir.dstu3.model.Type\", getParentType());\n            }\n            if(converter.isReferenceMultiType() && !converter.isMultipleCardinality() && !converter.isMultiType()) {\n                buildGetterMethod(methods, converter.parseAttributeName(), \"org.hl7.fhir.dstu3.model.Reference\", null, false, null);\n                buildGetterMethod(methods, converter.parseAttributeName() + \"Target\", \"org.hl7.fhir.dstu3.model.Resource\", null, false, null);\n            }\n            for (HapiType type : types) {\n                if (type.getDatatype() == null && type.getGeneratedType() == null) {\n                    System.out.println(\"Investigate : \" + converter.getFullAttributePath());\n                   \n                    continue;\n                }\n                if (type.isReference()) {\n                    handleReferenceTypes(converter, type, methods);\n                } else if (!type.isResource() && type.getGeneratedType() != null) {\n                    handleExtendedDatatypes(converter, type, methods);\n                } else if (type.isBackboneElement()) {\n                    handleDatatypeMethods(converter, type, methods);\n                } else if (type.isEnumerationType()) {\n                    handleEnumTypeMethods(converter, type, methods);\n                } else {\n                    FhirDatatypeEnum datatype = FhirDatatypeEnum.getEnumeratedDatatype(type.getFhirType());\n                    if (datatype != null && datatype.isPrimitiveDatatype()) {\n                        handlePrimitiveTypeMethods(converter, type, methods);\n                       \n                    } else {\n                        handleDatatypeMethods(converter, type, methods);\n                    }\n                }\n            }\n            if (converter.isMultiType()) {\n               \n            }\n        }\n    }","cleancode":"public void generatemethods(fhirtohapitypeconverter converter, list<method> methods) { list<hapitype> types = converter.gethapitypes(); system.out.println(\"attribute path:\" + converter.getfullattributepath()); if (\"immunization.dosequantity\".equals(converter.getfullattributepath())) { system.out.println(\"start debugging\"); } if (types == null || types.isempty() || converter.getcardinality() == cardinality.constrained_out) { return; } else { if(converter.ismultitype()) { buildgettermethod(methods, converter.parseattributename(), \"org.hl7.fhir.dstu3.model.type\", null, false, null); buildsettermethod(methods, converter.parseattributename(), \"org.hl7.fhir.dstu3.model.type\", getparenttype()); } if(converter.isreferencemultitype() && !converter.ismultiplecardinality() && !converter.ismultitype()) { buildgettermethod(methods, converter.parseattributename(), \"org.hl7.fhir.dstu3.model.reference\", null, false, null); buildgettermethod(methods, converter.parseattributename() + \"target\", \"org.hl7.fhir.dstu3.model.resource\", null, false, null); } for (hapitype type : types) { if (type.getdatatype() == null && type.getgeneratedtype() == null) { system.out.println(\"investigate : \" + converter.getfullattributepath()); continue; } if (type.isreference()) { handlereferencetypes(converter, type, methods); } else if (!type.isresource() && type.getgeneratedtype() != null) { handleextendeddatatypes(converter, type, methods); } else if (type.isbackboneelement()) { handledatatypemethods(converter, type, methods); } else if (type.isenumerationtype()) { handleenumtypemethods(converter, type, methods); } else { fhirdatatypeenum datatype = fhirdatatypeenum.getenumerateddatatype(type.getfhirtype()); if (datatype != null && datatype.isprimitivedatatype()) { handleprimitivetypemethods(converter, type, methods); } else { handledatatypemethods(converter, type, methods); } } } if (converter.ismultitype()) { } } }","repo":"hapifhir\/hapi-profile-code-generator","label":[0,1,0,0]}
{"id":13608,"original_code":"public void handlePrimitiveTypeMethods(FhirToHapiTypeConverter converter, HapiType type, List<Method> methods) {\n        String attributeName = converter.parseAttributeName();\n        if (converter.isMultiType()) {\n            handlePrimitiveMultiType(converter, type, methods, attributeName);\/\/TODO Path never appears to be visited. Consider removing.\n        } else {\n            if(converter.isMultipleCardinality()) {\n                handlePrimitiveListType(converter, type, methods, attributeName);\n            } else {\n                handlePrimitiveType(converter, type, methods, attributeName);\n            }\n        }\n    }","code_wo_comment":"public void handlePrimitiveTypeMethods(FhirToHapiTypeConverter converter, HapiType type, List<Method> methods) {\n        String attributeName = converter.parseAttributeName();\n        if (converter.isMultiType()) {\n            handlePrimitiveMultiType(converter, type, methods, attributeName)\n        } else {\n            if(converter.isMultipleCardinality()) {\n                handlePrimitiveListType(converter, type, methods, attributeName);\n            } else {\n                handlePrimitiveType(converter, type, methods, attributeName);\n            }\n        }\n    }","cleancode":"public void handleprimitivetypemethods(fhirtohapitypeconverter converter, hapitype type, list<method> methods) { string attributename = converter.parseattributename(); if (converter.ismultitype()) { handleprimitivemultitype(converter, type, methods, attributename) } else { if(converter.ismultiplecardinality()) { handleprimitivelisttype(converter, type, methods, attributename); } else { handleprimitivetype(converter, type, methods, attributename); } } }","repo":"hapifhir\/hapi-profile-code-generator","label":[1,0,0,0]}
{"id":30286,"original_code":"private Algorithm configIntermedAlgo(final boolean hasBeenPreviouslySorted) {\n        AbstractMultiStepAlgo algorithm = null; \n        Map<StepIOKeys, AlgoIOKeys> stepToAlgoKeysMapping = new StepAlgoKeyMapBuilder()\n                                        .add(INTERMEDIATE_DISTINCT_VALUES_HOLDER, DISTINCT_VALUES_HOLDER)\n                                        .add(INTERMEDIATE_SERIALIZED_FILE, INTERMEDIATE_OUTPUT_FILE)\n                                        .build();\n        if(hasBeenPreviouslySorted){\n            algorithm = new MultipleSortedFilesInputAlgo(\"Intermediate Algorithm\", stepToAlgoKeysMapping); \n        }else{\n            algorithm = new LoopThroughTableInputAlgo(\"Intermediate Algorithm\", stepToAlgoKeysMapping); \n        }\n        \/\/ initial steps\n        \/\/ algorithm.addInitStep(new ConfigIntermedColsInitStep());\n        algorithm.addInitStep(new ConstrIntermedDataColsInitStep());\n        algorithm.addInitStep(new ConstrIntermedGrpColsInitStep());\n        \/\/ if(!needsProgramaticSorting){\n        \/\/ algorithm.addInitStep(new ConfigIntermedIOInitStep());\n        \/\/ }else{\n        \/\/ algorithm.addInitStep(new\n        \/\/ ConfigMultiExternalFilesInputForIntermReportInitStep());\n        \/\/ }\n        algorithm.addInitStep(new ConfigIntermedReportOutputInitStep());\n        algorithm.addInitStep(stepInput -> {\n            ((IntermediateCrosstabOutput) stepInput.getContextParam(INTERMEDIATE_CROSSTAB_OUTPUT)).open();\n            return NO_RESULT;\n        });\n        \/\/ TODO: only when totals add the step below\n        algorithm.addInitStep(new IntermedReportExtractTotalsDataInitStep());\n        \/\/ only for debug\n        \/\/ algorithm.addInitStep(new ColumnHeaderOutputInitStep(\"Intermediate report\"));\n        \/\/ main steps\n        algorithm.addMainStep(new DistinctValuesDetectorStep());\n        algorithm.addMainStep(new IntermedGroupLevelDetectorStep());\n        \/\/ only for debug\n        \/\/ if( getShowTotals() || getShowGrandTotal()){\n        \/\/ algorithm.addMainStep(new FlatReportTotalsOutputStep());\n        \/\/ }\n        algorithm.addMainStep(new IntermedRowMangerStep());\n        if (getShowTotals() || getShowGrandTotal()) {\n            algorithm.addMainStep(new IntermedTotalsCalculatorStep());\n        }\n        \/\/ only for debug\n        \/\/ algorithm.addMainStep(new DataRowsOutputStep());\n        \/\/ if( intermediateGroupCols.size() > 0){\n        algorithm.addMainStep(new IntermedPreviousRowManagerStep());\n        \/\/ }\n        algorithm.addExitStep(stepInput -> {\n                ((IntermediateCrosstabOutput) stepInput.getContextParam(INTERMEDIATE_CROSSTAB_OUTPUT)).close();\n                return NO_RESULT;\n        });\n        algorithm.addExitStep(new IntermedSetResultsExitStep());\n        return algorithm;\n    }","code_wo_comment":"private Algorithm configIntermedAlgo(final boolean hasBeenPreviouslySorted) {\n        AbstractMultiStepAlgo algorithm = null; \n        Map<StepIOKeys, AlgoIOKeys> stepToAlgoKeysMapping = new StepAlgoKeyMapBuilder()\n                                        .add(INTERMEDIATE_DISTINCT_VALUES_HOLDER, DISTINCT_VALUES_HOLDER)\n                                        .add(INTERMEDIATE_SERIALIZED_FILE, INTERMEDIATE_OUTPUT_FILE)\n                                        .build();\n        if(hasBeenPreviouslySorted){\n            algorithm = new MultipleSortedFilesInputAlgo(\"Intermediate Algorithm\", stepToAlgoKeysMapping); \n        }else{\n            algorithm = new LoopThroughTableInputAlgo(\"Intermediate Algorithm\", stepToAlgoKeysMapping); \n        }\n       \n       \n        algorithm.addInitStep(new ConstrIntermedDataColsInitStep());\n        algorithm.addInitStep(new ConstrIntermedGrpColsInitStep());\n       \n       \n       \n       \n       \n       \n        algorithm.addInitStep(new ConfigIntermedReportOutputInitStep());\n        algorithm.addInitStep(stepInput -> {\n            ((IntermediateCrosstabOutput) stepInput.getContextParam(INTERMEDIATE_CROSSTAB_OUTPUT)).open();\n            return NO_RESULT;\n        });\n       \n        algorithm.addInitStep(new IntermedReportExtractTotalsDataInitStep());\n       \n       \n       \n        algorithm.addMainStep(new DistinctValuesDetectorStep());\n        algorithm.addMainStep(new IntermedGroupLevelDetectorStep());\n       \n       \n       \n       \n        algorithm.addMainStep(new IntermedRowMangerStep());\n        if (getShowTotals() || getShowGrandTotal()) {\n            algorithm.addMainStep(new IntermedTotalsCalculatorStep());\n        }\n       \n       \n       \n        algorithm.addMainStep(new IntermedPreviousRowManagerStep());\n       \n        algorithm.addExitStep(stepInput -> {\n                ((IntermediateCrosstabOutput) stepInput.getContextParam(INTERMEDIATE_CROSSTAB_OUTPUT)).close();\n                return NO_RESULT;\n        });\n        algorithm.addExitStep(new IntermedSetResultsExitStep());\n        return algorithm;\n    }","cleancode":"private algorithm configintermedalgo(final boolean hasbeenpreviouslysorted) { abstractmultistepalgo algorithm = null; map<stepiokeys, algoiokeys> steptoalgokeysmapping = new stepalgokeymapbuilder() .add(intermediate_distinct_values_holder, distinct_values_holder) .add(intermediate_serialized_file, intermediate_output_file) .build(); if(hasbeenpreviouslysorted){ algorithm = new multiplesortedfilesinputalgo(\"intermediate algorithm\", steptoalgokeysmapping); }else{ algorithm = new loopthroughtableinputalgo(\"intermediate algorithm\", steptoalgokeysmapping); } algorithm.addinitstep(new constrintermeddatacolsinitstep()); algorithm.addinitstep(new constrintermedgrpcolsinitstep()); algorithm.addinitstep(new configintermedreportoutputinitstep()); algorithm.addinitstep(stepinput -> { ((intermediatecrosstaboutput) stepinput.getcontextparam(intermediate_crosstab_output)).open(); return no_result; }); algorithm.addinitstep(new intermedreportextracttotalsdatainitstep()); algorithm.addmainstep(new distinctvaluesdetectorstep()); algorithm.addmainstep(new intermedgroupleveldetectorstep()); algorithm.addmainstep(new intermedrowmangerstep()); if (getshowtotals() || getshowgrandtotal()) { algorithm.addmainstep(new intermedtotalscalculatorstep()); } algorithm.addmainstep(new intermedpreviousrowmanagerstep()); algorithm.addexitstep(stepinput -> { ((intermediatecrosstaboutput) stepinput.getcontextparam(intermediate_crosstab_output)).close(); return no_result; }); algorithm.addexitstep(new intermedsetresultsexitstep()); return algorithm; }","repo":"humbletrader\/katechaki","label":[1,0,0,0]}
{"id":30517,"original_code":"private static void findIntersection(Map<String, LineString> linesByName) {\n        for (Entry<String, LineString> entryA : linesByName.entrySet()) {\n            for (Entry<String, LineString> entryB : linesByName.entrySet()) {\n                System.out.println(\"Checking \" + entryA.getKey() + \" against \"\n                        + entryB.getKey());\n                if (entryA.equals(entryB))\n                    continue;\n                \/\/ TODO: Introduce PreparedGeometry\n                if (entryA.getValue().intersects(entryB.getValue())) {\n                    System.out.println(entryA.getKey() + \" intersects \"\n                            + entryB.getKey());\n                    lineStringToJSON(entryA);\n                    lineStringToJSON(entryB);\n                    System.out\n                            .println(\"Intersection is \"\n                                    + entryA.getValue().intersection(\n                                            entryB.getValue()));\n                    System.exit(0);\n                }\n            }\n        }\n    }","code_wo_comment":"private static void findIntersection(Map<String, LineString> linesByName) {\n        for (Entry<String, LineString> entryA : linesByName.entrySet()) {\n            for (Entry<String, LineString> entryB : linesByName.entrySet()) {\n                System.out.println(\"Checking \" + entryA.getKey() + \" against \"\n                        + entryB.getKey());\n                if (entryA.equals(entryB))\n                    continue;\n               \n                if (entryA.getValue().intersects(entryB.getValue())) {\n                    System.out.println(entryA.getKey() + \" intersects \"\n                            + entryB.getKey());\n                    lineStringToJSON(entryA);\n                    lineStringToJSON(entryB);\n                    System.out\n                            .println(\"Intersection is \"\n                                    + entryA.getValue().intersection(\n                                            entryB.getValue()));\n                    System.exit(0);\n                }\n            }\n        }\n    }","cleancode":"private static void findintersection(map<string, linestring> linesbyname) { for (entry<string, linestring> entrya : linesbyname.entryset()) { for (entry<string, linestring> entryb : linesbyname.entryset()) { system.out.println(\"checking \" + entrya.getkey() + \" against \" + entryb.getkey()); if (entrya.equals(entryb)) continue; if (entrya.getvalue().intersects(entryb.getvalue())) { system.out.println(entrya.getkey() + \" intersects \" + entryb.getkey()); linestringtojson(entrya); linestringtojson(entryb); system.out .println(\"intersection is \" + entrya.getvalue().intersection( entryb.getvalue())); system.exit(0); } } } }","repo":"jettmarks\/clueRide-angular","label":[1,0,0,0]}
{"id":30631,"original_code":"public static double TotalHashCapacity(double bytes, double fpp) {\n    double word_bits = 32;\n    double bucket_words = 8;\n    double hash_bits = 32;\n    double result = 1;\n    \/\/ TODO: unify this exponential + binary search with the bytes needed function above\n    while (Fpp(result, bytes) < fpp) {\n      result *= 2;\n    }\n    if (result == 1) return 0;\n    double lo = 0;\n    while (lo + 1 < result) {\n       double mid = lo + (result - lo) \/ 2;\n       double test = Fpp(mid, bytes);\n       if (test < fpp)\n         lo = mid;\n       else if (test == fpp)\n         return mid;\n       else\n         result = mid;\n    }\n    return lo;\n  }","code_wo_comment":"public static double TotalHashCapacity(double bytes, double fpp) {\n    double word_bits = 32;\n    double bucket_words = 8;\n    double hash_bits = 32;\n    double result = 1;\n   \n    while (Fpp(result, bytes) < fpp) {\n      result *= 2;\n    }\n    if (result == 1) return 0;\n    double lo = 0;\n    while (lo + 1 < result) {\n       double mid = lo + (result - lo) \/ 2;\n       double test = Fpp(mid, bytes);\n       if (test < fpp)\n         lo = mid;\n       else if (test == fpp)\n         return mid;\n       else\n         result = mid;\n    }\n    return lo;\n  }","cleancode":"public static double totalhashcapacity(double bytes, double fpp) { double word_bits = 32; double bucket_words = 8; double hash_bits = 32; double result = 1; while (fpp(result, bytes) < fpp) { result *= 2; } if (result == 1) return 0; double lo = 0; while (lo + 1 < result) { double mid = lo + (result - lo) \/ 2; double test = fpp(mid, bytes); if (test < fpp) lo = mid; else if (test == fpp) return mid; else result = mid; } return lo; }","repo":"jbapple\/libfilter","label":[1,0,0,0]}
{"id":14341,"original_code":"@Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\/\/        add MQTT listener\n        MqttService.add_mqttListener(this);\n\/\/        need to bind the UI activity and the background service\n        Intent intent=new Intent(getActivity(),MqttService.class);\n\/\/        change the current msg-->different page has different topic\n\/\/        TODO: may use '#' to receive all msg, and different listener to select the topic they need\n        MqttService.setCur_topic(\"pic_data\");\n\/\/        TODO: this function is only used for >=API 8.0, so may be need to support other version's API\n        startForegroundService(getActivity(),intent);\n    }","code_wo_comment":"@Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        MqttService.add_mqttListener(this);\n        Intent intent=new Intent(getActivity(),MqttService.class);\n        MqttService.setCur_topic(\"pic_data\");\n        startForegroundService(getActivity(),intent);\n    }","cleancode":"@override public void oncreate(@nullable bundle savedinstancestate) { super.oncreate(savedinstancestate); mqttservice.add_mqttlistener(this); intent intent=new intent(getactivity(),mqttservice.class); mqttservice.setcur_topic(\"pic_data\"); startforegroundservice(getactivity(),intent); }","repo":"gjbang\/graduation-design","label":[1,1,0,0]}
{"id":22629,"original_code":"public synchronized void stop() {\n\t\ttask = null; \/\/ set the flag and while loop in the run() will exit\n\t\ti = 0;\n\t\tnotify(); \/\/ try to wake up the thread which associate this object\n\t}","code_wo_comment":"public synchronized void stop() {\n\t\ttask = null;\n\t\ti = 0;\n\t\tnotify();\n\t}","cleancode":"public synchronized void stop() { task = null; i = 0; notify(); }","repo":"jmwhite999\/_multithreaded_greyscaling","label":[1,0,0,0]}
{"id":30838,"original_code":"@Override\n    public String getAdditionalProposalInfo() {\n        try {\n            ASTNode coveringNode = mContext.getCoveringNode();\n            int start = coveringNode.getStartPosition();\n            int length = coveringNode.getLength();\n            IBuffer buffer = mContext.getCompilationUnit().getBuffer();\n            StringBuilder sb = new StringBuilder();\n            String string = buffer.getText(start, length);\n            string = ExtractStringRefactoring.unquoteAttrValue(string);\n            String token = ExtractStringInputPage.guessId(string);\n            \/\/ Look up the beginning and the end of the line (outside of the extracted string)\n            \/\/ such that we can show a preview of the diff, e.g. if you have\n            \/\/ foo.setTitle(\"Hello\"); we want to show foo.setTitle(R.string.hello);\n            \/\/ so we need to extract \"foo.setTitle(\" and \");\".\n            \/\/ Look backwards to the beginning of the line (and strip whitespace)\n            int i = start - 1;\n            while (i > 0) {\n                char c = buffer.getChar(i);\n                if (c == '\\r' || (c == '\\n')) {\n                    break;\n                }\n                i--;\n            }\n            String linePrefix = buffer.getText(i + 1, start - (i + 1)).trim();\n            \/\/ Look forwards to the end of the line (and strip whitespace)\n            i = start + length;\n            while (i < buffer.getLength()) {\n                char c = buffer.getChar(i);\n                if (c == '\\r' || (c == '\\n')) {\n                    break;\n                }\n                i++;\n            }\n            String lineSuffix = buffer.getText(start + length, i - (start + length));\n            \/\/ Should we show the replacement as just R.string.foo or\n            \/\/ context.getString(R.string.foo) ?\n            boolean useContext = false;\n            ASTNode parent = coveringNode.getParent();\n            if (parent != null) {\n                int type = parent.getNodeType();\n                if (type == ASTNode.ASSIGNMENT\n                        || type == ASTNode.VARIABLE_DECLARATION_STATEMENT\n                        || type == ASTNode.VARIABLE_DECLARATION_FRAGMENT\n                        || type == ASTNode.VARIABLE_DECLARATION_EXPRESSION) {\n                    useContext = true;\n                }\n            }\n            \/\/ Display .java change:\n            sb.append(\"...<br>\");                   \/\/$NON-NLS-1$\n            sb.append(linePrefix);\n            sb.append(\"<b>\");                       \/\/$NON-NLS-1$\n            if (useContext) {\n                sb.append(\"context.getString(\");    \/\/$NON-NLS-1$\n            }\n            sb.append(\"R.string.\");                 \/\/$NON-NLS-1$\n            sb.append(token);\n            if (useContext) {\n                sb.append(\")\");                     \/\/$NON-NLS-1$\n            }\n            sb.append(\"<\/b>\");                      \/\/$NON-NLS-1$\n            sb.append(lineSuffix);\n            sb.append(\"<br>...<br>\");               \/\/$NON-NLS-1$\n            \/\/ Display strings.xml change:\n            sb.append(\"<br>\");                      \/\/$NON-NLS-1$\n            sb.append(\"&lt;resources&gt;<br>\");     \/\/$NON-NLS-1$\n            sb.append(\"    <b>&lt;string name=\\\"\"); \/\/$NON-NLS-1$\n            sb.append(token);\n            sb.append(\"\\\"&gt;\");                    \/\/$NON-NLS-1$\n            sb.append(string);\n            sb.append(\"&lt;\/string&gt;<\/b><br>\");   \/\/$NON-NLS-1$\n            sb.append(\"&lt;\/resources&gt;\");        \/\/$NON-NLS-1$\n            return sb.toString();\n        } catch (JavaModelException e) {\n            AdtPlugin.log(e, null);\n        }\n        return \"Initiates the Extract String refactoring operation\";\n    }","code_wo_comment":"@Override\n    public String getAdditionalProposalInfo() {\n        try {\n            ASTNode coveringNode = mContext.getCoveringNode();\n            int start = coveringNode.getStartPosition();\n            int length = coveringNode.getLength();\n            IBuffer buffer = mContext.getCompilationUnit().getBuffer();\n            StringBuilder sb = new StringBuilder();\n            String string = buffer.getText(start, length);\n            string = ExtractStringRefactoring.unquoteAttrValue(string);\n            String token = ExtractStringInputPage.guessId(string);\n           \n           \n           \n           \n           \n            int i = start - 1;\n            while (i > 0) {\n                char c = buffer.getChar(i);\n                if (c == '\\r' || (c == '\\n')) {\n                    break;\n                }\n                i--;\n            }\n            String linePrefix = buffer.getText(i + 1, start - (i + 1)).trim();\n           \n            i = start + length;\n            while (i < buffer.getLength()) {\n                char c = buffer.getChar(i);\n                if (c == '\\r' || (c == '\\n')) {\n                    break;\n                }\n                i++;\n            }\n            String lineSuffix = buffer.getText(start + length, i - (start + length));\n           \n           \n            boolean useContext = false;\n            ASTNode parent = coveringNode.getParent();\n            if (parent != null) {\n                int type = parent.getNodeType();\n                if (type == ASTNode.ASSIGNMENT\n                        || type == ASTNode.VARIABLE_DECLARATION_STATEMENT\n                        || type == ASTNode.VARIABLE_DECLARATION_FRAGMENT\n                        || type == ASTNode.VARIABLE_DECLARATION_EXPRESSION) {\n                    useContext = true;\n                }\n            }\n           \n            sb.append(\"...<br>\");                  \n            sb.append(linePrefix);\n            sb.append(\"<b>\");                      \n            if (useContext) {\n                sb.append(\"context.getString(\");   \n            }\n            sb.append(\"R.string.\");                \n            sb.append(token);\n            if (useContext) {\n                sb.append(\")\");                    \n            }\n            sb.append(\"<\/b>\");                     \n            sb.append(lineSuffix);\n            sb.append(\"<br>...<br>\");              \n           \n            sb.append(\"<br>\");                     \n            sb.append(\"&lt;resources&gt;<br>\");    \n            sb.append(\"    <b>&lt;string name=\\\"\");\n            sb.append(token);\n            sb.append(\"\\\"&gt;\");                   \n            sb.append(string);\n            sb.append(\"&lt;\/string&gt;<\/b><br>\");  \n            sb.append(\"&lt;\/resources&gt;\");       \n            return sb.toString();\n        } catch (JavaModelException e) {\n            AdtPlugin.log(e, null);\n        }\n        return \"Initiates the Extract String refactoring operation\";\n    }","cleancode":"@override public string getadditionalproposalinfo() { try { astnode coveringnode = mcontext.getcoveringnode(); int start = coveringnode.getstartposition(); int length = coveringnode.getlength(); ibuffer buffer = mcontext.getcompilationunit().getbuffer(); stringbuilder sb = new stringbuilder(); string string = buffer.gettext(start, length); string = extractstringrefactoring.unquoteattrvalue(string); string token = extractstringinputpage.guessid(string); int i = start - 1; while (i > 0) { char c = buffer.getchar(i); if (c == '\\r' || (c == '\\n')) { break; } i--; } string lineprefix = buffer.gettext(i + 1, start - (i + 1)).trim(); i = start + length; while (i < buffer.getlength()) { char c = buffer.getchar(i); if (c == '\\r' || (c == '\\n')) { break; } i++; } string linesuffix = buffer.gettext(start + length, i - (start + length)); boolean usecontext = false; astnode parent = coveringnode.getparent(); if (parent != null) { int type = parent.getnodetype(); if (type == astnode.assignment || type == astnode.variable_declaration_statement || type == astnode.variable_declaration_fragment || type == astnode.variable_declaration_expression) { usecontext = true; } } sb.append(\"...<br>\"); sb.append(lineprefix); sb.append(\"<b>\"); if (usecontext) { sb.append(\"context.getstring(\"); } sb.append(\"r.string.\"); sb.append(token); if (usecontext) { sb.append(\")\"); } sb.append(\"<\/b>\"); sb.append(linesuffix); sb.append(\"<br>...<br>\"); sb.append(\"<br>\"); sb.append(\"&lt;resources&gt;<br>\"); sb.append(\" <b>&lt;string name=\\\"\"); sb.append(token); sb.append(\"\\\"&gt;\"); sb.append(string); sb.append(\"&lt;\/string&gt;<\/b><br>\"); sb.append(\"&lt;\/resources&gt;\"); return sb.tostring(); } catch (javamodelexception e) { adtplugin.log(e, null); } return \"initiates the extract string refactoring operation\"; }","repo":"jiangshide\/sdk","label":[1,0,0,0]}
{"id":22747,"original_code":"public void waitFor(String name,Cmd command,Context context,String input, long timeout, TimeUnit unit){\n        \/\/TODO use scheduled task to implement timeout\n        Waiter waiter = new Waiter(command,context,input);\n        waitFor(name,waiter);\n    }","code_wo_comment":"public void waitFor(String name,Cmd command,Context context,String input, long timeout, TimeUnit unit){\n       \n        Waiter waiter = new Waiter(command,context,input);\n        waitFor(name,waiter);\n    }","cleancode":"public void waitfor(string name,cmd command,context context,string input, long timeout, timeunit unit){ waiter waiter = new waiter(command,context,input); waitfor(name,waiter); }","repo":"johnaohara\/qDup","label":[0,1,0,0]}
{"id":30944,"original_code":"@Override\n        protected FilterResults performFiltering(CharSequence constraint) {\n            List<DailyExpenseTagsWithPicsPojo> filteredListHelper = new ArrayList<>();\n            List<DailyExpenseTagsWithPicsPojo> filteredList = new ArrayList<>();\n            \/\/----------- search = false, filter = false ----------------\n            if ((constraint == null || constraint.length() == 0) && (categoriesForFilter == null || categoriesForFilter.size() == 0) && (tagsForFilter == null || tagsForFilter.size() == 0)) {\n                filteredList.addAll(searchAllCosts);\n                \/\/----------- search = false, filter = true ----------------\n            } else if ((constraint == null || constraint.length() == 0) && (categoriesForFilter != null || tagsForFilter != null)) {\n                if (categoriesForFilter != null && tagsForFilter == null) {\n                    for (DailyExpenseTagsWithPicsPojo item : searchAllCosts) {\n                        for (String category : categoriesForFilter) {\n                            if (category.equals(item.getCostEntry().getCategory())) {\n                                filteredList.add(item);\n                            }\n                        }\n                    }\n                } else if (categoriesForFilter == null && tagsForFilter != null) {   \/\/todo bug\n                    for (DailyExpenseTagsWithPicsPojo item : searchAllCosts) {\n                        for (String tag : tagsForFilter) {\n                            if (item.getTagNames().contains(tag)) {\n                                if (!filteredList.contains(item)) {\n                                    filteredList.add(item);\n                                }\n                            }\n                        }\n                    }\n                } else if (categoriesForFilter != null && tagsForFilter != null) {\n                    for (DailyExpenseTagsWithPicsPojo item : searchAllCosts) {\n                        for (String category : categoriesForFilter) {\n                            if (category.equals(item.getCostEntry().getCategory())) {\n                                filteredListHelper.add(item);\n                            }\n                        }\n                    }\n                    for (DailyExpenseTagsWithPicsPojo item : filteredListHelper) {\n                        for (String tag : tagsForFilter) {\n                            if (item.getTagNames().contains(tag)) {\n                                if (!filteredList.contains(item)) {\n                                    filteredList.add(item);\n                                }\n                            }\n                        }\n                    }\n                }\n                \/\/----------- search = true, filter = false ----------------\n            } else if (constraint.length() != 0) {\n                String filterPattern = constraint.toString().toLowerCase().trim();\n                for (DailyExpenseTagsWithPicsPojo item : searchAllCosts) {\n                    if (item.getCostEntry().getName().toLowerCase().contains(filterPattern)) {\n                        filteredList.add(item);\n                    }\n                }\n            }\n            \/\/ TODO: simultaneously search what is filtered and filter what is searched\n            FilterResults results = new FilterResults();\n            results.values = filteredList;\n            Log.d(\"kraj metode\", \"testt\");\n            return results;\n        }","code_wo_comment":"@Override\n        protected FilterResults performFiltering(CharSequence constraint) {\n            List<DailyExpenseTagsWithPicsPojo> filteredListHelper = new ArrayList<>();\n            List<DailyExpenseTagsWithPicsPojo> filteredList = new ArrayList<>();\n           \n            if ((constraint == null || constraint.length() == 0) && (categoriesForFilter == null || categoriesForFilter.size() == 0) && (tagsForFilter == null || tagsForFilter.size() == 0)) {\n                filteredList.addAll(searchAllCosts);\n               \n            } else if ((constraint == null || constraint.length() == 0) && (categoriesForFilter != null || tagsForFilter != null)) {\n                if (categoriesForFilter != null && tagsForFilter == null) {\n                    for (DailyExpenseTagsWithPicsPojo item : searchAllCosts) {\n                        for (String category : categoriesForFilter) {\n                            if (category.equals(item.getCostEntry().getCategory())) {\n                                filteredList.add(item);\n                            }\n                        }\n                    }\n                } else if (categoriesForFilter == null && tagsForFilter != null) {  \n                    for (DailyExpenseTagsWithPicsPojo item : searchAllCosts) {\n                        for (String tag : tagsForFilter) {\n                            if (item.getTagNames().contains(tag)) {\n                                if (!filteredList.contains(item)) {\n                                    filteredList.add(item);\n                                }\n                            }\n                        }\n                    }\n                } else if (categoriesForFilter != null && tagsForFilter != null) {\n                    for (DailyExpenseTagsWithPicsPojo item : searchAllCosts) {\n                        for (String category : categoriesForFilter) {\n                            if (category.equals(item.getCostEntry().getCategory())) {\n                                filteredListHelper.add(item);\n                            }\n                        }\n                    }\n                    for (DailyExpenseTagsWithPicsPojo item : filteredListHelper) {\n                        for (String tag : tagsForFilter) {\n                            if (item.getTagNames().contains(tag)) {\n                                if (!filteredList.contains(item)) {\n                                    filteredList.add(item);\n                                }\n                            }\n                        }\n                    }\n                }\n               \n            } else if (constraint.length() != 0) {\n                String filterPattern = constraint.toString().toLowerCase().trim();\n                for (DailyExpenseTagsWithPicsPojo item : searchAllCosts) {\n                    if (item.getCostEntry().getName().toLowerCase().contains(filterPattern)) {\n                        filteredList.add(item);\n                    }\n                }\n            }\n           \n            FilterResults results = new FilterResults();\n            results.values = filteredList;\n            Log.d(\"kraj metode\", \"testt\");\n            return results;\n        }","cleancode":"@override protected filterresults performfiltering(charsequence constraint) { list<dailyexpensetagswithpicspojo> filteredlisthelper = new arraylist<>(); list<dailyexpensetagswithpicspojo> filteredlist = new arraylist<>(); if ((constraint == null || constraint.length() == 0) && (categoriesforfilter == null || categoriesforfilter.size() == 0) && (tagsforfilter == null || tagsforfilter.size() == 0)) { filteredlist.addall(searchallcosts); } else if ((constraint == null || constraint.length() == 0) && (categoriesforfilter != null || tagsforfilter != null)) { if (categoriesforfilter != null && tagsforfilter == null) { for (dailyexpensetagswithpicspojo item : searchallcosts) { for (string category : categoriesforfilter) { if (category.equals(item.getcostentry().getcategory())) { filteredlist.add(item); } } } } else if (categoriesforfilter == null && tagsforfilter != null) { for (dailyexpensetagswithpicspojo item : searchallcosts) { for (string tag : tagsforfilter) { if (item.gettagnames().contains(tag)) { if (!filteredlist.contains(item)) { filteredlist.add(item); } } } } } else if (categoriesforfilter != null && tagsforfilter != null) { for (dailyexpensetagswithpicspojo item : searchallcosts) { for (string category : categoriesforfilter) { if (category.equals(item.getcostentry().getcategory())) { filteredlisthelper.add(item); } } } for (dailyexpensetagswithpicspojo item : filteredlisthelper) { for (string tag : tagsforfilter) { if (item.gettagnames().contains(tag)) { if (!filteredlist.contains(item)) { filteredlist.add(item); } } } } } } else if (constraint.length() != 0) { string filterpattern = constraint.tostring().tolowercase().trim(); for (dailyexpensetagswithpicspojo item : searchallcosts) { if (item.getcostentry().getname().tolowercase().contains(filterpattern)) { filteredlist.add(item); } } } filterresults results = new filterresults(); results.values = filteredlist; log.d(\"kraj metode\", \"testt\"); return results; }","repo":"jkandcoding\/QuantiTanti_1","label":[0,1,1,0]}
{"id":22765,"original_code":"private Object convert(final Field field, final Val val) {\n        if (field != null && field.getFormat() != null && field.getFormat().getType() != null) {\n            final Type type = field.getFormat().getType();\n            if (Type.NUMBER.equals(type) || Type.DATE_TIME.equals(type)) {\n                return val.toDouble();\n            }\n        }\n        return val.toString();\n    }","code_wo_comment":"private Object convert(final Field field, final Val val) {\n        if (field != null && field.getFormat() != null && field.getFormat().getType() != null) {\n            final Type type = field.getFormat().getType();\n            if (Type.NUMBER.equals(type) || Type.DATE_TIME.equals(type)) {\n                return val.toDouble();\n            }\n        }\n        return val.toString();\n    }","cleancode":"private object convert(final field field, final val val) { if (field != null && field.getformat() != null && field.getformat().gettype() != null) { final type type = field.getformat().gettype(); if (type.number.equals(type) || type.date_time.equals(type)) { return val.todouble(); } } return val.tostring(); }","repo":"gcdev373\/stroom-query","label":[1,0,0,0]}
{"id":14676,"original_code":"@Override\n\tpublic Set<OperatorSet> detectPropertyOnline(\n\t\t\tSearchState relevantState,\n\t\t\tSearchTree tree) {\n\t\tSet<OperatorSet> result =  new HashSet<OperatorSet>();\n\t\t\/\/TODO: shouldn't this be in-fact an offline detector?\n\t\trelevantState = tree.getSentState(relevantState.iparentID);\n\t\tif(relevantState == null) return result;\n\t\t\/\/TODO: optimize\n\t\tfor(SearchState s1 : relevantState.successors){\n\t\t\tfor(SearchState s2 : relevantState.successors){\n\t\t\t\tif(s1.stateID != s2.stateID){\n\t\t\t\t\tOperatorSet opSet = new OperatorSet(EnumPrivacyProperty.PRIVATELY_NONDETERMINISTIC,true);\n\t\t\t\t\topSet.addAll(s1.responsibleOperators);\n\t\t\t\t\topSet.retainAll(s2.responsibleOperators);\n\t\t\t\t\tif(!opSet.isEmpty()){\n\t\t\t\t\t\tresult.add(opSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","code_wo_comment":"@Override\n\tpublic Set<OperatorSet> detectPropertyOnline(\n\t\t\tSearchState relevantState,\n\t\t\tSearchTree tree) {\n\t\tSet<OperatorSet> result =  new HashSet<OperatorSet>();\n\t\n\t\trelevantState = tree.getSentState(relevantState.iparentID);\n\t\tif(relevantState == null) return result;\n\t\n\t\tfor(SearchState s1 : relevantState.successors){\n\t\t\tfor(SearchState s2 : relevantState.successors){\n\t\t\t\tif(s1.stateID != s2.stateID){\n\t\t\t\t\tOperatorSet opSet = new OperatorSet(EnumPrivacyProperty.PRIVATELY_NONDETERMINISTIC,true);\n\t\t\t\t\topSet.addAll(s1.responsibleOperators);\n\t\t\t\t\topSet.retainAll(s2.responsibleOperators);\n\t\t\t\t\tif(!opSet.isEmpty()){\n\t\t\t\t\t\tresult.add(opSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","cleancode":"@override public set<operatorset> detectpropertyonline( searchstate relevantstate, searchtree tree) { set<operatorset> result = new hashset<operatorset>(); relevantstate = tree.getsentstate(relevantstate.iparentid); if(relevantstate == null) return result; for(searchstate s1 : relevantstate.successors){ for(searchstate s2 : relevantstate.successors){ if(s1.stateid != s2.stateid){ operatorset opset = new operatorset(enumprivacyproperty.privately_nondeterministic,true); opset.addall(s1.responsibleoperators); opset.retainall(s2.responsibleoperators); if(!opset.isempty()){ result.add(opset); } } } } return result; }","repo":"gree7\/privacy-analysis","label":[1,0,0,0]}
{"id":14772,"original_code":"@Override\n    public BundleDetails extract(final InputStream inputStream) throws IOException {\n        try (final JarInputStream jarInputStream = new JarInputStream(inputStream)) {\n            final Manifest manifest = jarInputStream.getManifest();\n            if (manifest == null) {\n                throw new IllegalArgumentException(\"NAR bundles must contain a valid MANIFEST\");\n            }\n            final Attributes attributes = manifest.getMainAttributes();\n            final String groupId = attributes.getValue(NarManifestEntry.NAR_GROUP.getManifestName());\n            final String artifactId = attributes.getValue(NarManifestEntry.NAR_ID.getManifestName());\n            final String version = attributes.getValue(NarManifestEntry.NAR_VERSION.getManifestName());\n            final BundleCoordinate bundleCoordinate = new BundleCoordinate(groupId, artifactId, version);\n            final String dependencyGroupId = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_GROUP.getManifestName());\n            final String dependencyArtifactId = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_ID.getManifestName());\n            final String dependencyVersion = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_VERSION.getManifestName());\n            final BundleCoordinate dependencyCoordinate;\n            if (dependencyArtifactId != null) {\n                dependencyCoordinate = new BundleCoordinate(dependencyGroupId, dependencyArtifactId, dependencyVersion);\n            } else {\n                dependencyCoordinate = null;\n            }\n            \/\/ TODO figure out what to do with build info\n            final String buildBranch = attributes.getValue(NarManifestEntry.BUILD_BRANCH.getManifestName());\n            final String buildTag = attributes.getValue(NarManifestEntry.BUILD_TAG.getManifestName());\n            final String buildRevision = attributes.getValue(NarManifestEntry.BUILD_REVISION.getManifestName());\n            final String buildTimestamp = attributes.getValue(NarManifestEntry.BUILD_TIMESTAMP.getManifestName());\n            final String buildJdk = attributes.getValue(NarManifestEntry.BUILD_JDK.getManifestName());\n            final String builtBy = attributes.getValue(NarManifestEntry.BUILT_BY.getManifestName());\n            final BundleDetails.Builder builder = new BundleDetails.Builder()\n                    .coordinate(bundleCoordinate)\n                    .dependencyCoordinate(dependencyCoordinate);\n            return builder.build();\n        }\n    }","code_wo_comment":"@Override\n    public BundleDetails extract(final InputStream inputStream) throws IOException {\n        try (final JarInputStream jarInputStream = new JarInputStream(inputStream)) {\n            final Manifest manifest = jarInputStream.getManifest();\n            if (manifest == null) {\n                throw new IllegalArgumentException(\"NAR bundles must contain a valid MANIFEST\");\n            }\n            final Attributes attributes = manifest.getMainAttributes();\n            final String groupId = attributes.getValue(NarManifestEntry.NAR_GROUP.getManifestName());\n            final String artifactId = attributes.getValue(NarManifestEntry.NAR_ID.getManifestName());\n            final String version = attributes.getValue(NarManifestEntry.NAR_VERSION.getManifestName());\n            final BundleCoordinate bundleCoordinate = new BundleCoordinate(groupId, artifactId, version);\n            final String dependencyGroupId = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_GROUP.getManifestName());\n            final String dependencyArtifactId = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_ID.getManifestName());\n            final String dependencyVersion = attributes.getValue(NarManifestEntry.NAR_DEPENDENCY_VERSION.getManifestName());\n            final BundleCoordinate dependencyCoordinate;\n            if (dependencyArtifactId != null) {\n                dependencyCoordinate = new BundleCoordinate(dependencyGroupId, dependencyArtifactId, dependencyVersion);\n            } else {\n                dependencyCoordinate = null;\n            }\n           \n            final String buildBranch = attributes.getValue(NarManifestEntry.BUILD_BRANCH.getManifestName());\n            final String buildTag = attributes.getValue(NarManifestEntry.BUILD_TAG.getManifestName());\n            final String buildRevision = attributes.getValue(NarManifestEntry.BUILD_REVISION.getManifestName());\n            final String buildTimestamp = attributes.getValue(NarManifestEntry.BUILD_TIMESTAMP.getManifestName());\n            final String buildJdk = attributes.getValue(NarManifestEntry.BUILD_JDK.getManifestName());\n            final String builtBy = attributes.getValue(NarManifestEntry.BUILT_BY.getManifestName());\n            final BundleDetails.Builder builder = new BundleDetails.Builder()\n                    .coordinate(bundleCoordinate)\n                    .dependencyCoordinate(dependencyCoordinate);\n            return builder.build();\n        }\n    }","cleancode":"@override public bundledetails extract(final inputstream inputstream) throws ioexception { try (final jarinputstream jarinputstream = new jarinputstream(inputstream)) { final manifest manifest = jarinputstream.getmanifest(); if (manifest == null) { throw new illegalargumentexception(\"nar bundles must contain a valid manifest\"); } final attributes attributes = manifest.getmainattributes(); final string groupid = attributes.getvalue(narmanifestentry.nar_group.getmanifestname()); final string artifactid = attributes.getvalue(narmanifestentry.nar_id.getmanifestname()); final string version = attributes.getvalue(narmanifestentry.nar_version.getmanifestname()); final bundlecoordinate bundlecoordinate = new bundlecoordinate(groupid, artifactid, version); final string dependencygroupid = attributes.getvalue(narmanifestentry.nar_dependency_group.getmanifestname()); final string dependencyartifactid = attributes.getvalue(narmanifestentry.nar_dependency_id.getmanifestname()); final string dependencyversion = attributes.getvalue(narmanifestentry.nar_dependency_version.getmanifestname()); final bundlecoordinate dependencycoordinate; if (dependencyartifactid != null) { dependencycoordinate = new bundlecoordinate(dependencygroupid, dependencyartifactid, dependencyversion); } else { dependencycoordinate = null; } final string buildbranch = attributes.getvalue(narmanifestentry.build_branch.getmanifestname()); final string buildtag = attributes.getvalue(narmanifestentry.build_tag.getmanifestname()); final string buildrevision = attributes.getvalue(narmanifestentry.build_revision.getmanifestname()); final string buildtimestamp = attributes.getvalue(narmanifestentry.build_timestamp.getmanifestname()); final string buildjdk = attributes.getvalue(narmanifestentry.build_jdk.getmanifestname()); final string builtby = attributes.getvalue(narmanifestentry.built_by.getmanifestname()); final bundledetails.builder builder = new bundledetails.builder() .coordinate(bundlecoordinate) .dependencycoordinate(dependencycoordinate); return builder.build(); } }","repo":"joaocc\/nifi-registry","label":[1,0,0,0]}
{"id":22990,"original_code":"private void addEvent(Event e, int globalId, int localId) {\n        EventData data = eventMap.getOrCreate(e);\n        data.setId(globalId);\n        data.setLocalId(localId);\n        eventList.add(data);\n        data.setWasExecuted(true);\n        if (data.isMemoryEvent()) {\n            \/\/ ===== Memory Events =====\n        \tBigInteger address = ((MemEvent) e).getAddress().getIntValue(e, model, context);\n            data.setAccessedAddress(address);\n            if (!addressReadsMap.containsKey(address)) {\n                addressReadsMap.put(address, new HashSet<>());\n                addressWritesMap.put(address, new HashSet<>());\n            }\n            if (data.isRead()) {\n                data.setValue(new BigInteger(model.evaluate(((RegWriter)e).getResultRegisterExpr()).toString()));\n                addressReadsMap.get(address).add(data);\n            } else if (data.isWrite()) {\n                data.setValue(((MemEvent)e).getMemValue().getIntValue(e, model, context));\n                addressWritesMap.get(address).add(data);\n                writeReadsMap.put(data, new HashSet<>());\n                if (data.isInit()) {\n                    addressInitMap.put(address, data);\n                }\n            } else {\n                throw new RuntimeException(\"Unexpected memory event\");\n            }\n        } else if (data.isFence()) {\n            \/\/ ===== Fences =====\n            String name = ((Fence)data.getEvent()).getName();\n            fenceMap.computeIfAbsent(name, key -> new HashSet<>()).add(data);\n        } else if (data.isJump()) {\n            \/\/ ===== Jumps =====\n            \/\/ We override the meaning of execution here. A jump is executed IFF its condition was true.\n            data.setWasExecuted(((CondJump)e).didJump(model, context));\n        } else {\n            \/\/TODO: Maybe add some other events (e.g. assertions)\n            \/\/ But for now all non-visible events are simply registered without\n            \/\/ having any data extracted\n        }\n    }","code_wo_comment":"private void addEvent(Event e, int globalId, int localId) {\n        EventData data = eventMap.getOrCreate(e);\n        data.setId(globalId);\n        data.setLocalId(localId);\n        eventList.add(data);\n        data.setWasExecuted(true);\n        if (data.isMemoryEvent()) {\n           \n        \tBigInteger address = ((MemEvent) e).getAddress().getIntValue(e, model, context);\n            data.setAccessedAddress(address);\n            if (!addressReadsMap.containsKey(address)) {\n                addressReadsMap.put(address, new HashSet<>());\n                addressWritesMap.put(address, new HashSet<>());\n            }\n            if (data.isRead()) {\n                data.setValue(new BigInteger(model.evaluate(((RegWriter)e).getResultRegisterExpr()).toString()));\n                addressReadsMap.get(address).add(data);\n            } else if (data.isWrite()) {\n                data.setValue(((MemEvent)e).getMemValue().getIntValue(e, model, context));\n                addressWritesMap.get(address).add(data);\n                writeReadsMap.put(data, new HashSet<>());\n                if (data.isInit()) {\n                    addressInitMap.put(address, data);\n                }\n            } else {\n                throw new RuntimeException(\"Unexpected memory event\");\n            }\n        } else if (data.isFence()) {\n           \n            String name = ((Fence)data.getEvent()).getName();\n            fenceMap.computeIfAbsent(name, key -> new HashSet<>()).add(data);\n        } else if (data.isJump()) {\n           \n           \n            data.setWasExecuted(((CondJump)e).didJump(model, context));\n        } else {\n           \n           \n           \n        }\n    }","cleancode":"private void addevent(event e, int globalid, int localid) { eventdata data = eventmap.getorcreate(e); data.setid(globalid); data.setlocalid(localid); eventlist.add(data); data.setwasexecuted(true); if (data.ismemoryevent()) { biginteger address = ((memevent) e).getaddress().getintvalue(e, model, context); data.setaccessedaddress(address); if (!addressreadsmap.containskey(address)) { addressreadsmap.put(address, new hashset<>()); addresswritesmap.put(address, new hashset<>()); } if (data.isread()) { data.setvalue(new biginteger(model.evaluate(((regwriter)e).getresultregisterexpr()).tostring())); addressreadsmap.get(address).add(data); } else if (data.iswrite()) { data.setvalue(((memevent)e).getmemvalue().getintvalue(e, model, context)); addresswritesmap.get(address).add(data); writereadsmap.put(data, new hashset<>()); if (data.isinit()) { addressinitmap.put(address, data); } } else { throw new runtimeexception(\"unexpected memory event\"); } } else if (data.isfence()) { string name = ((fence)data.getevent()).getname(); fencemap.computeifabsent(name, key -> new hashset<>()).add(data); } else if (data.isjump()) { data.setwasexecuted(((condjump)e).didjump(model, context)); } else { } }","repo":"hernanponcedeleon\/Dat3M","label":[0,1,0,0]}
{"id":23254,"original_code":"@Override\n    protected int writeParametersWireFormat ( byte[] dst, int dstIndex ) {\n        int start = dstIndex;\n        SMBUtil.writeInt2(mapInformationLevel(this.informationLevel), dst, dstIndex);\n        dstIndex += 2;\n        \/*\n         * windows98 has what appears to be another 4 0's followed by the share\n         * name as a zero terminated ascii string \"\\TMP\" + '\\0'\n         *\n         * As is this works, but it deviates from the spec section 4.1.6.6 but\n         * maybe I should put it in. Wonder what NT does?\n         *\/\n        return dstIndex - start;\n    }","code_wo_comment":"@Override\n    protected int writeParametersWireFormat ( byte[] dst, int dstIndex ) {\n        int start = dstIndex;\n        SMBUtil.writeInt2(mapInformationLevel(this.informationLevel), dst, dstIndex);\n        dstIndex += 2;\n       \n        return dstIndex - start;\n    }","cleancode":"@override protected int writeparameterswireformat ( byte[] dst, int dstindex ) { int start = dstindex; smbutil.writeint2(mapinformationlevel(this.informationlevel), dst, dstindex); dstindex += 2; return dstindex - start; }","repo":"goyourfly\/NovaCustom","label":[1,0,0,0]}
{"id":15149,"original_code":"private void configureComponents() {\n        \/\/Associate the data with the formLayout columns and load the data. \n        try \n        {\n            \/\/1 - Set properties of the form\n            this.tabs.addClassName(\"fichier-tab\");\n            this.tabs.setOrientation(Tabs.Orientation.HORIZONTAL);\n            this.tabs.setFlexGrowForEnclosedTabs(1); \/\/Tabs covering the full width of the tab bar\n            this.tabs.addThemeVariants(TabsVariant.LUMO_SMALL);\n            this.tabs.setWidthFull();\n            this.tabInfoGenerale.setLabel(\"Informations G\u00e9n\u00e9rales\");\n            this.tabDefinition.setLabel(\"D\u00e9finitions\");\n            this.tabAjustement.setLabel(\"Ajustement\");\n            this.tabCompteurBaseMontant.setLabel(\"Stockage des Compteurs Base et Montant\");\n            this.tabCompteurInterne.setLabel(\"Stockage des Compteurs Internes\");\n            this.tabCompteurExterne.setLabel(\"Stockage des Compteurs Externes\");\n            this.pages.setSizeFull(); \/\/sets the form size to fill the screen.\n            this.tabInfoGeneraleFormLayout.addClassName(\"fichier-form\");\n            this.tabInfoGeneraleFormLayout.setSizeFull(); \/\/sets the form size to fill the screen.\n            this.tabInfoGeneraleFormLayout.setVisible(true); \/\/At startup, set the first page visible, while the remaining are not\n            this.tabDefinitionFormLayout.addClassName(\"fichier-form\");\n            this.tabDefinitionFormLayout.setSizeFull(); \/\/sets the form size to fill the screen.\n            this.tabDefinitionFormLayout.setVisible(true); \/\/At startup, set the first page visible, while the remaining are not\n            this.tabAjustementFormLayout.addClassName(\"fichier-form\");\n            this.tabAjustementFormLayout.setSizeFull(); \/\/sets the form size to fill the screen.\n            this.tabAjustementFormLayout.setVisible(true); \/\/At startup, set the first page visible, while the remaining are not\n            this.tabCompteurBaseMontantFormLayout.addClassName(\"fichier-form\");\n            this.tabCompteurBaseMontantFormLayout.setSizeFull(); \/\/sets the form size to fill the screen.\n            this.tabCompteurBaseMontantFormLayout.setVisible(false); \/\/At startup, set the first page visible, while the remaining are not\n            this.tabCompteurInterneFormLayout.addClassName(\"fichier-form\");\n            this.tabCompteurInterneFormLayout.setSizeFull(); \/\/sets the form size to fill the screen.\n            this.tabCompteurInterneFormLayout.setVisible(false); \/\/At startup, set the first page visible, while the remaining are not\n            this.tabCompteurExterneFormLayout.addClassName(\"fichier-form\");\n            this.tabCompteurExterneFormLayout.setSizeFull(); \/\/sets the form size to fill the screen.\n            this.tabCompteurExterneFormLayout.setVisible(false); \/\/At startup, set the first page visible, while the remaining are not\n            \/\/2 - Define the Fields instances to use - We don't use .setLabel since we will use addFormItem instead of add to add items to the form - addFormItem allows us to set SuperTextField with on a FormaLayout when add doesn't\n            \/\/Contr\u00f4les de tabInfoGenerale\n            this.txtNoRubrique.setWidth(100, Unit.PIXELS);\n            this.txtNoRubrique.setRequired(true);\n            this.txtNoRubrique.setRequiredIndicatorVisible(true);\n            this.txtNoRubrique.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtLibelleRubrique.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.txtLibelleRubrique.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtLibelleCourtRubrique.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.txtLibelleCourtRubrique.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.chkInactif.setAutofocus(false); \/\/Sepecific for isInactif\n            this.chkEditionFacture.setAutofocus(true);\n            this.chkEditionSynthetique.setAutofocus(true);\n            \/\/Contr\u00f4les de tabDefinition\n            this.cboCodeModeValorisationRubrique.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeValorisationRubrique.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from ModeValorisationRubrique is the presentation value\n            this.cboCodeModeValorisationRubrique.setItemLabelGenerator(SystemeModeValorisationCommission::getLibelleModeValorisation);\n            this.cboCodeModeValorisationRubrique.setRequired(true);\n            this.cboCodeModeValorisationRubrique.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeValorisationRubrique.setLabel(\"ModeValorisationRubrique\");\n            \/\/???this.cboCodeModeValorisationRubrique.setId(\"this.cboCodeModeValorisationRubrique.getValue()\");\n            this.cboCodeModeValorisationRubrique.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeValorisationRubrique.setAllowCustomValue(false);\n            this.cboCodeModeValorisationRubrique.setPreventInvalidInput(true);\n            this.cboCodeModeValorisationRubrique.addValueChangeListener(event -> {\n                this.myControlsManageAccordingToModeValorisation();\n            });\n            this.txtMontantFixe.setWidth(100, Unit.PIXELS);\n            this.txtMontantFixe.setRequiredIndicatorVisible(true);\n            \/\/Tmp - this.txtMontantFixe.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtMontantFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER); \/\/Align Center for numeric value\n            this.txtMontantFixe.setLocale(Locale.FRENCH); \/\/Configuration options for HasLocale\n            this.txtMontantFixe.withNullValueAllowed(false);\n            this.cboCodeModeValorisationBase.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeValorisationBase.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from ModeValorisationBase is the presentation value\n            this.cboCodeModeValorisationBase.setItemLabelGenerator(SystemeModeValorisationBaseCommission::getLibelleModeValorisation);\n            this.cboCodeModeValorisationBase.setRequired(true);\n            this.cboCodeModeValorisationBase.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeValorisationBase.setLabel(\"ModeValorisationBase\");\n            \/\/???this.cboCodeModeValorisationBase.setId(\"this.cboCodeModeValorisationBase.getValue()\");\n            this.cboCodeModeValorisationBase.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeValorisationBase.setAllowCustomValue(false);\n            this.cboCodeModeValorisationBase.setPreventInvalidInput(true);\n            this.cboCodeModeValorisationBase.addValueChangeListener(event -> {\n                this.myControlsManageAccordingToModeValorisation();\n            });\n            this.txtBaseFixe.setWidth(100, Unit.PIXELS);\n            this.txtBaseFixe.setRequiredIndicatorVisible(true);\n            \/\/Tmp - this.txtBaseFixe.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtBaseFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER); \/\/Align Center for numeric value\n            this.txtBaseFixe.setLocale(Locale.FRENCH); \/\/Configuration options for HasLocale\n            this.txtBaseFixe.withNullValueAllowed(false);\n            this.cboCodeModeValorisationTaux.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeValorisationTaux.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from ModeValorisationTaux is the presentation value\n            this.cboCodeModeValorisationTaux.setItemLabelGenerator(SystemeModeValorisationTauxCommission::getLibelleModeValorisation);\n            this.cboCodeModeValorisationTaux.setRequired(true);\n            this.cboCodeModeValorisationTaux.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeValorisationTaux.setLabel(\"ModeValorisationTaux\");\n            \/\/???this.cboCodeModeValorisationTaux.setId(\"this.cboCodeModeValorisationTaux.getValue()\");\n            this.cboCodeModeValorisationTaux.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeValorisationTaux.setAllowCustomValue(false);\n            this.cboCodeModeValorisationTaux.setPreventInvalidInput(true);\n            this.cboCodeModeValorisationTaux.addValueChangeListener(event -> {\n                this.myControlsManageAccordingToModeValorisation();\n            });\n            this.txtTauxFixe.setWidth(100, Unit.PIXELS);\n            this.txtTauxFixe.setRequiredIndicatorVisible(true);\n            \/\/Tmp - this.txtTauxFixe.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtTauxFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER); \/\/Align Center for numeric value\n            this.txtTauxFixe.setLocale(Locale.FRENCH); \/\/Configuration options for HasLocale\n            this.txtTauxFixe.withNullValueAllowed(false);\n            this.txtCoefficientMultiplicateur.setWidth(100, Unit.PIXELS);\n            this.txtCoefficientMultiplicateur.setRequiredIndicatorVisible(true);\n            \/\/Tmp - this.txtCoefficientMultiplicateur.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtCoefficientMultiplicateur.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER); \/\/Align Center for numeric value\n            this.txtCoefficientMultiplicateur.setLocale(Locale.FRENCH); \/\/Configuration options for HasLocale\n            this.txtCoefficientMultiplicateur.withNullValueAllowed(false);\n            this.cboCodeTranche.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeTranche.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from TrancheValeur is the presentation value\n            this.cboCodeTranche.setItemLabelGenerator(TrancheValeur::getLibelleTranche);\n            this.cboCodeTranche.setRequired(true);\n            this.cboCodeTranche.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeTranche.setLabel(\"TrancheValeur\");\n            \/\/???this.cboCodeTranche.setId(\"person\");\n            this.cboCodeTranche.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeTranche.setAllowCustomValue(true);\n            this.cboCodeTranche.setPreventInvalidInput(true);\n            this.cboCodeTranche.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeTranche (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La Tranche de Valeur choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                        \/\/Cancel\n                        this.cboCodeTranche.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeTranche.addCustomValueSetListener(event -> {\n                this.cboCodeTranche_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeVariableRubrique.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeVariableRubrique.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from VariableService is the presentation value\n            this.cboCodeVariableRubrique.setItemLabelGenerator(VariableService::getLibelleVariable);\n            this.cboCodeVariableRubrique.setRequired(true);\n            this.cboCodeVariableRubrique.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeVariableRubrique.setLabel(\"VariableService\");\n            \/\/???this.cboCodeVariableRubrique.setId(\"person\");\n            this.cboCodeVariableRubrique.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeVariableRubrique.setAllowCustomValue(true);\n            this.cboCodeVariableRubrique.setPreventInvalidInput(true);\n            this.cboCodeVariableRubrique.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeVariableRubrique (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La Variable choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                        \/\/Cancel\n                        this.cboCodeVariableRubrique.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeVariableRubrique.addCustomValueSetListener(event -> {\n                this.cboCodeVariableRubrique_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeConstanteRubrique.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeConstanteRubrique.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from EmploiFonds is the presentation value\n            this.cboCodeConstanteRubrique.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteRubrique.setRequired(true);\n            this.cboCodeConstanteRubrique.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeConstanteRubrique.setLabel(\"EmploiFonds\");\n            \/\/???this.cboCodeConstanteRubrique.setId(\"person\");\n            this.cboCodeConstanteRubrique.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeConstanteRubrique.setAllowCustomValue(true);\n            this.cboCodeConstanteRubrique.setPreventInvalidInput(true);\n            this.cboCodeConstanteRubrique.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeConstanteRubrique (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                        \/\/Cancel\n                        this.cboCodeConstanteRubrique.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeConstanteRubrique.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteRubrique_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeVariableBase.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeVariableBase.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from VariableService is the presentation value\n            this.cboCodeVariableBase.setItemLabelGenerator(VariableService::getLibelleVariable);\n            this.cboCodeVariableBase.setRequired(true);\n            this.cboCodeVariableBase.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeVariableBase.setLabel(\"VariableService\");\n            \/\/???this.cboCodeVariableBase.setId(\"person\");\n            this.cboCodeVariableBase.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeVariableBase.setAllowCustomValue(true);\n            this.cboCodeVariableBase.setPreventInvalidInput(true);\n            this.cboCodeVariableBase.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeVariableBase (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La Variable choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                        \/\/Cancel\n                        this.cboCodeVariableBase.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeVariableBase.addCustomValueSetListener(event -> {\n                this.cboCodeVariableBase_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeConstanteBase.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeConstanteBase.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from EmploiFonds is the presentation value\n            this.cboCodeConstanteBase.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteBase.setRequired(true);\n            this.cboCodeConstanteBase.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeConstanteBase.setLabel(\"EmploiFonds\");\n            \/\/???this.cboCodeConstanteBase.setId(\"person\");\n            this.cboCodeConstanteBase.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeConstanteBase.setAllowCustomValue(true);\n            this.cboCodeConstanteBase.setPreventInvalidInput(true);\n            this.cboCodeConstanteBase.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeConstanteBase (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                        \/\/Cancel\n                        this.cboCodeConstanteBase.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeConstanteBase.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteBase_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeVariableTaux.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeVariableTaux.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from VariableService is the presentation value\n            this.cboCodeVariableTaux.setItemLabelGenerator(VariableService::getLibelleVariable);\n            this.cboCodeVariableTaux.setRequired(true);\n            this.cboCodeVariableTaux.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeVariableTaux.setLabel(\"VariableService\");\n            \/\/???this.cboCodeVariableTaux.setId(\"person\");\n            this.cboCodeVariableTaux.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeVariableTaux.setAllowCustomValue(true);\n            this.cboCodeVariableTaux.setPreventInvalidInput(true);\n            this.cboCodeVariableTaux.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeVariableTaux (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La Variable choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                        \/\/Cancel\n                        this.cboCodeVariableTaux.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeVariableTaux.addCustomValueSetListener(event -> {\n                this.cboCodeVariableTaux_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeConstanteTaux.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeConstanteTaux.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from EmploiFonds is the presentation value\n            this.cboCodeConstanteTaux.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteTaux.setRequired(true);\n            this.cboCodeConstanteTaux.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeConstanteTaux.setLabel(\"EmploiFonds\");\n            \/\/???this.cboCodeConstanteTaux.setId(\"person\");\n            this.cboCodeConstanteTaux.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeConstanteTaux.setAllowCustomValue(true);\n            this.cboCodeConstanteTaux.setPreventInvalidInput(true);\n            this.cboCodeConstanteTaux.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeConstanteTaux (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                        \/\/Cancel\n                        this.cboCodeConstanteTaux.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeConstanteTaux.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteTaux_NotInList(event.getDetail(), 50);\n            });\n            \/\/Contr\u00f4les de tabAjustement\n            this.cboCodeValeurMinimum.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeValeurMinimum.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeValeurMinMax is the presentation value\n            this.cboCodeValeurMinimum.setItemLabelGenerator(SystemeValeurMinMax::getLibelleValeur);\n            this.cboCodeValeurMinimum.setRequired(true);\n            this.cboCodeValeurMinimum.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeValeurMinimum.setLabel(\"SystemeValeurMinMax\");\n            \/\/???this.cboCodeValeurMinimum.setId(\"person\");\n            this.cboCodeValeurMinimum.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeValeurMinimum.setAllowCustomValue(false);\n            this.cboCodeValeurMinimum.setPreventInvalidInput(true);\n            this.txtValeurMinimumFixe.setWidth(100, Unit.PIXELS);\n            this.txtValeurMinimumFixe.setRequiredIndicatorVisible(true);\n            \/\/Tmp - this.txtValeurMinimumFixe.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtValeurMinimumFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER); \/\/Align Center for numeric value\n            this.txtValeurMinimumFixe.setLocale(Locale.FRENCH); \/\/Configuration options for HasLocale\n            this.txtValeurMinimumFixe.withNullValueAllowed(false);\n            this.cboCodeValeurMaximum.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeValeurMaximum.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeValeurMinMax is the presentation value\n            this.cboCodeValeurMaximum.setItemLabelGenerator(SystemeValeurMinMax::getLibelleValeur);\n            this.cboCodeValeurMaximum.setRequired(true);\n            this.cboCodeValeurMaximum.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeValeurMaximum.setLabel(\"SystemeValeurMinMax\");\n            \/\/???this.cboCodeValeurMaximum.setId(\"person\");\n            this.cboCodeValeurMaximum.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeValeurMaximum.setAllowCustomValue(false);\n            this.cboCodeValeurMaximum.setPreventInvalidInput(true);\n            this.txtValeurMaximumFixe.setWidth(100, Unit.PIXELS);\n            this.txtValeurMaximumFixe.setRequiredIndicatorVisible(true);\n            \/\/Tmp - this.txtValeurMaximumFixe.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtValeurMaximumFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER); \/\/Align Center for numeric value\n            this.txtValeurMaximumFixe.setLocale(Locale.FRENCH); \/\/Configuration options for HasLocale\n            this.txtValeurMaximumFixe.withNullValueAllowed(false);\n            this.cboCodeConstanteValeurMinimum.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeConstanteValeurMinimum.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from EmploiFonds is the presentation value\n            this.cboCodeConstanteValeurMinimum.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteValeurMinimum.setRequired(true);\n            this.cboCodeConstanteValeurMinimum.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeConstanteValeurMinimum.setLabel(\"EmploiFonds\");\n            \/\/???this.cboCodeConstanteValeurMinimum.setId(\"person\");\n            this.cboCodeConstanteValeurMinimum.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeConstanteValeurMinimum.setAllowCustomValue(true);\n            this.cboCodeConstanteValeurMinimum.setPreventInvalidInput(true);\n            this.cboCodeConstanteValeurMinimum.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeConstanteValeurMinimum (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                        \/\/Cancel\n                        this.cboCodeConstanteValeurMinimum.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeConstanteValeurMinimum.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteValeurMinimum_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeConstanteValeurMaximum.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeConstanteValeurMaximum.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from EmploiFonds is the presentation value\n            this.cboCodeConstanteValeurMaximum.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteValeurMaximum.setRequired(true);\n            this.cboCodeConstanteValeurMaximum.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeConstanteValeurMaximum.setLabel(\"EmploiFonds\");\n            \/\/???this.cboCodeConstanteValeurMaximum.setId(\"person\");\n            this.cboCodeConstanteValeurMaximum.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeConstanteValeurMaximum.setAllowCustomValue(true);\n            this.cboCodeConstanteValeurMaximum.setPreventInvalidInput(true);\n            this.cboCodeConstanteValeurMaximum.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                    \/\/BeforeUpdate CodeConstanteValeurMaximum (CIF): Contr\u00f4le de Inactif\n                    if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                        \/\/Cancel\n                        this.cboCodeConstanteValeurMaximum.setValue(event.getOldValue());\n                    } \/\/if (event.getValue() != null) {\n                }\n            });\n            \/**\n            * Allow users to enter a value which doesn't exist in the data set, and\n            * set it as the value of the ComboBox.\n            *\/\n            this.cboCodeConstanteValeurMaximum.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteValeurMaximum_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeModeAbattement.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeAbattement.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeAbattement is the presentation value\n            this.cboCodeModeAbattement.setItemLabelGenerator(SystemeModeAbattement::getLibelleModeAbattement);\n            this.cboCodeModeAbattement.setRequired(true);\n            this.cboCodeModeAbattement.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeAbattement.setLabel(\"SystemeModeAbattement\");\n            \/\/???this.cboCodeModeAbattement.setId(\"person\");\n            this.cboCodeModeAbattement.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeAbattement.setAllowCustomValue(false);\n            this.cboCodeModeAbattement.setPreventInvalidInput(true);\n            this.txtAbattementFixe.setWidth(100, Unit.PIXELS);\n            this.txtAbattementFixe.setRequiredIndicatorVisible(true);\n            \/\/Tmp - this.txtAbattementFixe.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtAbattementFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER); \/\/Align Center for numeric value\n            this.txtAbattementFixe.setLocale(Locale.FRENCH); \/\/Configuration options for HasLocale\n            this.txtAbattementFixe.withNullValueAllowed(false);\n            this.cboCodeModeArrondissement.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeArrondissement.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeArrondissement is the presentation value\n            this.cboCodeModeArrondissement.setItemLabelGenerator(SystemeModeArrondissement::getLibelleModeArrondissement);\n            this.cboCodeModeArrondissement.setRequired(true);\n            this.cboCodeModeArrondissement.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeArrondissement.setLabel(\"SystemeModeArrondissement\");\n            \/\/???this.cboCodeModeArrondissement.setId(\"person\");\n            this.cboCodeModeArrondissement.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeArrondissement.setAllowCustomValue(false);\n            this.cboCodeModeArrondissement.setPreventInvalidInput(true);\n            this.txtNombreChiffreArrondissement.setWidth(100, Unit.PIXELS);\n            this.txtNombreChiffreArrondissement.setRequiredIndicatorVisible(true);\n            \/\/Tmp - this.txtNombreChiffreArrondissement.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtNombreChiffreArrondissement.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER); \/\/Align Center for numeric value\n            this.txtNombreChiffreArrondissement.setLocale(Locale.FRENCH); \/\/Configuration options for HasLocale\n            this.txtNombreChiffreArrondissement.withNullValueAllowed(false);\n            \/\/Contr\u00f4les de tabCompteurBaseMontant\n            this.cboCodeModeStockageCompteurBase01.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurBase01.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageBaseMontant is the presentation value\n            this.cboCodeModeStockageCompteurBase01.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurBase01.setRequired(true);\n            this.cboCodeModeStockageCompteurBase01.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurBase01.setLabel(\"SystemeModeStockageBaseMontant\");\n            \/\/???this.cboCodeModeStockageCompteurBase01.setId(\"person\");\n            this.cboCodeModeStockageCompteurBase01.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurBase01.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurBase01.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurBase02.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurBase02.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageBaseMontant is the presentation value\n            this.cboCodeModeStockageCompteurBase02.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurBase02.setRequired(true);\n            this.cboCodeModeStockageCompteurBase02.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurBase02.setLabel(\"SystemeModeStockageBaseMontant\");\n            \/\/???this.cboCodeModeStockageCompteurBase02.setId(\"person\");\n            this.cboCodeModeStockageCompteurBase02.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurBase02.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurBase02.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurBase03.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurBase03.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageBaseMontant is the presentation value\n            this.cboCodeModeStockageCompteurBase03.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurBase03.setRequired(true);\n            this.cboCodeModeStockageCompteurBase03.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurBase03.setLabel(\"SystemeModeStockageBaseMontant\");\n            \/\/???this.cboCodeModeStockageCompteurBase03.setId(\"person\");\n            this.cboCodeModeStockageCompteurBase03.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurBase03.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurBase03.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurBase04.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurBase04.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageBaseMontant is the presentation value\n            this.cboCodeModeStockageCompteurBase04.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurBase04.setRequired(true);\n            this.cboCodeModeStockageCompteurBase04.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurBase04.setLabel(\"SystemeModeStockageBaseMontant\");\n            \/\/???this.cboCodeModeStockageCompteurBase04.setId(\"person\");\n            this.cboCodeModeStockageCompteurBase04.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurBase04.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurBase04.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurMontant01.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurMontant01.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageBaseMontant is the presentation value\n            this.cboCodeModeStockageCompteurMontant01.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurMontant01.setRequired(true);\n            this.cboCodeModeStockageCompteurMontant01.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurMontant01.setLabel(\"SystemeModeStockageBaseMontant\");\n            \/\/???this.cboCodeModeStockageCompteurMontant01.setId(\"person\");\n            this.cboCodeModeStockageCompteurMontant01.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurMontant01.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurMontant01.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurMontant02.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurMontant02.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageBaseMontant is the presentation value\n            this.cboCodeModeStockageCompteurMontant02.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurMontant02.setRequired(true);\n            this.cboCodeModeStockageCompteurMontant02.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurMontant02.setLabel(\"SystemeModeStockageBaseMontant\");\n            \/\/???this.cboCodeModeStockageCompteurMontant02.setId(\"person\");\n            this.cboCodeModeStockageCompteurMontant02.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurMontant02.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurMontant02.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurMontant03.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurMontant03.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageBaseMontant is the presentation value\n            this.cboCodeModeStockageCompteurMontant03.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurMontant03.setRequired(true);\n            this.cboCodeModeStockageCompteurMontant03.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurMontant03.setLabel(\"SystemeModeStockageBaseMontant\");\n            \/\/???this.cboCodeModeStockageCompteurMontant03.setId(\"person\");\n            this.cboCodeModeStockageCompteurMontant03.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurMontant03.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurMontant03.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurMontant04.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurMontant04.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageBaseMontant is the presentation value\n            this.cboCodeModeStockageCompteurMontant04.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurMontant04.setRequired(true);\n            this.cboCodeModeStockageCompteurMontant04.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurMontant04.setLabel(\"SystemeModeStockageBaseMontant\");\n            \/\/???this.cboCodeModeStockageCompteurMontant04.setId(\"person\");\n            this.cboCodeModeStockageCompteurMontant04.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurMontant04.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurMontant04.setPreventInvalidInput(true);\n            \/\/Contr\u00f4les de tabCompteurInterne\n            this.cboCodeModeStockageCompteurInterne01.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne01.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne01.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne01.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne01.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne01.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne01.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne01.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne01.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne01.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne02.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne02.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne02.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne02.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne02.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne02.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne02.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne02.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne02.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne02.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne03.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne03.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne03.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne03.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne03.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne03.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne03.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne03.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne03.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne03.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne04.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne04.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne04.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne04.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne04.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne04.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne04.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne04.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne04.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne04.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne05.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne05.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne05.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne05.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne05.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne05.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne05.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne05.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne05.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne05.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne06.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne06.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne06.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne06.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne06.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne06.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne06.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne06.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne06.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne06.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne07.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne07.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne07.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne07.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne07.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne07.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne07.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne07.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne07.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne07.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne08.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne08.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne08.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne08.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne08.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne08.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne08.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne08.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne08.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne08.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne09.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne09.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne09.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne09.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne09.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne09.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne09.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne09.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne09.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne09.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne10.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne10.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurInterne10.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne10.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne10.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurInterne10.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurInterne10.setId(\"person\");\n            this.cboCodeModeStockageCompteurInterne10.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurInterne10.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne10.setPreventInvalidInput(true);\n            \/\/Contr\u00f4les de tabCompteurExterne\n            this.cboCodeModeStockageCompteurExterne01.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne01.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne01.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne01.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne01.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne01.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne01.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne01.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne01.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne01.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne02.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne02.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne02.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne02.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne02.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne02.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne02.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne02.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne02.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne02.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne03.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne03.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne03.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne03.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne03.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne03.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne03.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne03.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne03.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne03.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne04.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne04.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne04.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne04.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne04.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne04.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne04.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne04.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne04.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne04.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne05.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne05.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne05.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne05.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne05.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne05.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne05.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne05.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne05.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne05.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne06.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne06.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne06.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne06.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne06.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne06.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne06.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne06.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne06.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne06.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne07.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne07.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne07.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne07.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne07.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne07.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne07.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne07.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne07.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne07.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne08.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne08.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne08.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne08.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne08.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne08.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne08.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne08.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne08.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne08.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne09.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne09.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne09.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne09.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne09.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne09.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne09.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne09.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne09.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne09.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne10.setWidth(350, Unit.PIXELS); \/\/setWidth(400, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne10.addClassName(COMBOBOX_LEFT_LABEL);\n            \/\/ Choose which property from SystemeModeStockageInterneExterne is the presentation value\n            this.cboCodeModeStockageCompteurExterne10.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne10.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne10.setRequiredIndicatorVisible(true);\n            \/\/???this.cboCodeModeStockageCompteurExterne10.setLabel(\"SystemeModeStockageInterneExterne\");\n            \/\/???this.cboCodeModeStockageCompteurExterne10.setId(\"person\");\n            this.cboCodeModeStockageCompteurExterne10.setClearButtonVisible(true);\n            \/\/Add Filtering\n            this.cboCodeModeStockageCompteurExterne10.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne10.setPreventInvalidInput(true);\n            \/\/3 - Bind Fields instances to use (Manual Data Binding)\n            \/\/ Easily bind forms to beans and manage validation and buffering\n            \/\/To bind a component to read-only data, use a null value for the setter.\n            Label lblNoRubriqueValidationStatus = new Label();\n            this.binder.forField(this.txtNoRubrique)\n                .asRequired(\"La Saisie du N\u00b0 Rubrique est Obligatoire. Veuillez saisir le N\u00b0 Rubrique.\")\n                .withValidator(text -> text != null && text.length() <= 10, \"N\u00b0 Rubrique ne peut contenir au plus 10 caract\u00e8res\")\n                .withValidationStatusHandler(status -> {lblNoRubriqueValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblNoRubriqueValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getNoRubrique, Rubrique::setNoRubrique); \n            Label lblLibelleRubriqueValidationStatus = new Label();\n            this.binder.forField(this.txtLibelleRubrique)\n                .asRequired(\"La Saisie du Libell\u00e9 de la Rubrique est Obligatoire. Veuillez saisir le Libell\u00e9 de la Rubrique.\")\n                .withValidator(text -> text.length() <= 50, \"Libell\u00e9 Rubrique ne peut contenir au plus 50 caract\u00e8res.\")\n                .withValidationStatusHandler(status -> {lblLibelleRubriqueValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblLibelleRubriqueValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getLibelleRubrique, Rubrique::setLibelleRubrique); \n            Label lblLibelleCourtRubriqueValidationStatus = new Label();\n            this.binder.forField(this.txtLibelleCourtRubrique)\n                .asRequired(\"La Saisie du Libell\u00e9 Abr\u00e9g\u00e9 de la Rubrique est Obligatoire. Veuillez saisir le Libell\u00e9 de la Rubrique.\")\n                .withValidator(text -> text.length() <= 30, \"Libell\u00e9 Abr\u00e9g\u00e9 Rubrique ne peut contenir au plus 30 caract\u00e8res.\")\n                .withValidationStatusHandler(status -> {lblLibelleCourtRubriqueValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblLibelleCourtRubriqueValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getLibelleCourtRubrique, Rubrique::setLibelleCourtRubrique); \n            this.binder.forField(this.chkInactif)\n                .bind(Rubrique::isInactif, Rubrique::setInactif); \n            this.binder.forField(this.chkEditionFacture)\n                .bind(Rubrique::isEditionFacture, Rubrique::setEditionFacture); \n            this.binder.forField(this.chkEditionSynthetique)\n                .bind(Rubrique::isEditionSynthetique, Rubrique::setEditionSynthetique); \n            Label lblModeValorisationRubriqueValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeValorisationRubrique)\n                .asRequired(\"La Saisie du Mode de Valorisation de la Rubrique est requise. Veuillez s\u00e9lectionner un Mode de Valorisation de la Rubrique\")\n                .bind(Rubrique::getModeValorisationRubrique, Rubrique::setModeValorisationRubrique); \n            Label lblMontantFixeValidationStatus = new Label();\n            this.binder.forField(this.txtMontantFixe)\n                \/\/G\u00e9n\u00e9ralement pas de asRequired pour les nombres afin de permettre la saisie de z\u00e9ro - .asRequired(\"La Saisie du Montant Fixe est Obligatoire. Veuillez saisir le Montant Fixe.\")\n                \/\/.withConverter(Integer::valueOf, String::valueOf, \"Veuillez saisir un nombre\")\n                \/\/.withValidator(new RegexpValidator(\"Seuls les chiffres 0-9 sont accept\u00e9s\",\"\\\\d*\"))\n                .withValidationStatusHandler(status -> {lblMontantFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblMontantFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getMontantFixe, Rubrique::setMontantFixe); \n            Label lblModeValorisationBaseValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeValorisationBase)\n                \/\/.asRequired(\"La Saisie du Mode de D\u00e9termination de la Base est requise. Veuillez s\u00e9lectionner un Mode de D\u00e9termination de la Base\")\n                .bind(Rubrique::getModeValorisationBase, Rubrique::setModeValorisationBase); \n            Label lblBaseFixeValidationStatus = new Label();\n            this.binder.forField(this.txtBaseFixe)\n                \/\/G\u00e9n\u00e9ralement pas de asRequired pour les nombres afin de permettre la saisie de z\u00e9ro - .asRequired(\"La Saisie de la Base Fixe est Obligatoire. Veuillez saisir la Base.\")\n                \/\/.withConverter(Integer::valueOf, String::valueOf, \"Veuillez saisir un nombre\")\n                \/\/.withValidator(new RegexpValidator(\"Seuls les chiffres 0-9 sont accept\u00e9s\",\"\\\\d*\"))\n                .withValidationStatusHandler(status -> {lblBaseFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblBaseFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getBaseFixe, Rubrique::setBaseFixe); \n            Label lblModeValorisationTauxValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeValorisationTaux)\n                \/\/.asRequired(\"La Saisie du Mode de D\u00e9termination du Taux est requise. Veuillez s\u00e9lectionner un Mode de D\u00e9termination du Taux\")\n                .bind(Rubrique::getModeValorisationTaux, Rubrique::setModeValorisationTaux);             \n            Label lblTauxFixeValidationStatus = new Label();\n            this.binder.forField(this.txtTauxFixe)\n                \/\/G\u00e9n\u00e9ralement pas de asRequired pour les nombres afin de permettre la saisie de z\u00e9ro - .asRequired(\"La Saisie du Taux Fixe est Obligatoire. Veuillez saisir le Taux.\")\n                \/\/.withConverter(Integer::valueOf, String::valueOf, \"Veuillez saisir un nombre\")\n                \/\/.withValidator(new RegexpValidator(\"Seuls les chiffres 0-9 sont accept\u00e9s\",\"\\\\d*\"))\n                .withValidationStatusHandler(status -> {lblTauxFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblTauxFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getTauxFixe, Rubrique::setTauxFixe); \n            Label lblCoefficientMultiplicateurValidationStatus = new Label();\n            this.binder.forField(this.txtCoefficientMultiplicateur)\n                .asRequired(\"La Saisie du Coefficient Multiplicateur est Obligatoire. Veuillez saisir le Coefficient Multiplicateur.\")\n                \/\/.withConverter(Integer::valueOf, String::valueOf, \"Veuillez saisir un nombre\")\n                \/\/.withValidator(new RegexpValidator(\"Seuls les chiffres 0-9 sont accept\u00e9s\",\"\\\\d*\"))\n                .withValidationStatusHandler(status -> {lblCoefficientMultiplicateurValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblCoefficientMultiplicateurValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getCoefficientMultiplicateur, Rubrique::setCoefficientMultiplicateur); \n            Label lblTrancheValeurValidationStatus = new Label();\n            this.binder.forField(this.cboCodeTranche)\n                \/\/.asRequired(\"La Saisie de la Tranche est requise. Veuillez s\u00e9lectionner une Tranche\")\n                .bind(Rubrique::getTranche, Rubrique::setTranche); \n            Label lblVariableRubriqueValidationStatus = new Label();\n            this.binder.forField(this.cboCodeVariableRubrique)\n                \/\/.asRequired(\"La Saisie de la Variable Rubrique est requise. Veuillez s\u00e9lectionner une Variable\")\n                .bind(Rubrique::getVariableRubrique, Rubrique::setVariableRubrique); \n            Label lblConstanteRubriqueValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteRubrique)\n                \/\/.asRequired(\"La Saisie EmploiFonds Rubrique est requise. Veuillez s\u00e9lectionner une EmploiFonds\")\n                .bind(Rubrique::getConstanteRubrique, Rubrique::setConstanteRubrique); \n            Label lblVariableBaseValidationStatus = new Label();\n            this.binder.forField(this.cboCodeVariableBase)\n                \/\/.asRequired(\"La Saisie de la Variable Base est requise. Veuillez s\u00e9lectionner une Variable\")\n                .bind(Rubrique::getVariableBase, Rubrique::setVariableBase); \n            Label lblConstanteBaseValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteBase)\n                \/\/.asRequired(\"La Saisie EmploiFonds Base est requise. Veuillez s\u00e9lectionner une EmploiFonds\")\n                .bind(Rubrique::getConstanteBase, Rubrique::setConstanteBase); \n            Label lblVariableTauxValidationStatus = new Label();\n            this.binder.forField(this.cboCodeVariableTaux)\n                \/\/.asRequired(\"La Saisie de la Variable Taux est requise. Veuillez s\u00e9lectionner une Variable\")\n                .bind(Rubrique::getVariableTaux, Rubrique::setVariableTaux); \n            Label lblConstanteTauxValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteTaux)\n                \/\/.asRequired(\"La Saisie EmploiFonds Taux est requise. Veuillez s\u00e9lectionner une EmploiFonds\")\n                .bind(Rubrique::getConstanteTaux, Rubrique::setConstanteTaux); \n            Label lblValeurMinimumValidationStatus = new Label();\n            this.binder.forField(this.cboCodeValeurMinimum)\n                \/\/.asRequired(\"La Saisie de la Valeur Minimum est requise. Veuillez saisir la Valeur Minimum\")\n                .bind(Rubrique::getValeurMinimum, Rubrique::setValeurMinimum); \n            Label lblValeurMinimumFixeValidationStatus = new Label();\n            this.binder.forField(this.txtValeurMinimumFixe)\n                \/\/G\u00e9n\u00e9ralement pas de asRequired pour les nombres afin de permettre la saisie de z\u00e9ro - .asRequired(\"La Saisie de la Valeur Minimum Fixe est Obligatoire. Veuillez saisir la Valeur Minimum Fixe.\")\n                \/\/.withConverter(Integer::valueOf, String::valueOf, \"Veuillez saisir un nombre\")\n                \/\/.withValidator(new RegexpValidator(\"Seuls les chiffres 0-9 sont accept\u00e9s\",\"\\\\d*\"))\n                .withValidationStatusHandler(status -> {lblValeurMinimumFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblValeurMinimumFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getValeurMinimumFixe, Rubrique::setValeurMinimumFixe); \n            Label lblValeurMaximumValidationStatus = new Label();\n            this.binder.forField(this.cboCodeValeurMaximum)\n                \/\/.asRequired(\"La Saisie de la Valeur Maximum est requise. Veuillez saisir la Valeur Maximum\")\n                .bind(Rubrique::getValeurMaximum, Rubrique::setValeurMaximum); \n            Label lblValeurMaximumFixeValidationStatus = new Label();\n            this.binder.forField(this.txtValeurMaximumFixe)\n                \/\/G\u00e9n\u00e9ralement pas de asRequired pour les nombres afin de permettre la saisie de z\u00e9ro - .asRequired(\"La Saisie de la Valeur Maximum Fixe est Obligatoire. Veuillez saisir la Valeur Maximum Fixe.\")\n                \/\/.withConverter(Integer::valueOf, String::valueOf, \"Veuillez saisir un nombre\")\n                \/\/.withValidator(new RegexpValidator(\"Seuls les chiffres 0-9 sont accept\u00e9s\",\"\\\\d*\"))\n                .withValidationStatusHandler(status -> {lblValeurMaximumFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblValeurMaximumFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getValeurMaximumFixe, Rubrique::setValeurMaximumFixe); \n            Label lblConstanteValeurMinimumValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteValeurMinimum)\n                \/\/.asRequired(\"La Saisie de la EmploiFonds Valeur Minimum est requise. Veuillez saisir la EmploiFonds Valeur Minimum\")\n                .bind(Rubrique::getConstanteValeurMinimum, Rubrique::setConstanteValeurMinimum); \n            Label lblConstanteValeurMaximumValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteValeurMaximum)\n                \/\/.asRequired(\"La Saisie de la EmploiFonds Valeur Maximum est requise. Veuillez saisir la EmploiFonds Valeur Maximum\")\n                .bind(Rubrique::getConstanteValeurMaximum, Rubrique::setConstanteValeurMaximum); \n            Label lblModeAbattementValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeAbattement)\n                \/\/.asRequired(\"La Saisie du Mode Abattement est requise. Veuillez s\u00e9lectionner un Mode Abattement\")\n                .bind(Rubrique::getModeAbattement, Rubrique::setModeAbattement); \n            Label lblAbattementFixeValidationStatus = new Label();\n            this.binder.forField(this.txtAbattementFixe)\n                \/\/G\u00e9n\u00e9ralement pas de asRequired pour les nombres afin de permettre la saisie de z\u00e9ro - .asRequired(\"La Saisie de l'Abattement Fixe est Obligatoire. Veuillez saisir l'Abattement Fixe.\")\n                \/\/.withConverter(Integer::valueOf, String::valueOf, \"Veuillez saisir un nombre\")\n                \/\/.withValidator(new RegexpValidator(\"Seuls les chiffres 0-9 sont accept\u00e9s\",\"\\\\d*\"))\n                .withValidationStatusHandler(status -> {lblAbattementFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblAbattementFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getAbattementFixe, Rubrique::setAbattementFixe); \n            Label lblModeArrondissementValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeArrondissement)\n                \/\/.asRequired(\"La Saisie du Mode Arrondissement est requise. Veuillez s\u00e9lectionner un Mode Arrondissement\")\n                .bind(Rubrique::getModeArrondissement, Rubrique::setModeArrondissement); \n            Label lblNombreChiffreArrondissementValidationStatus = new Label();\n            this.binder.forField(this.txtNombreChiffreArrondissement)\n                \/\/G\u00e9n\u00e9ralement pas de asRequired pour les nombres afin de permettre la saisie de z\u00e9ro - .asRequired(\"La Saisie du Nombre Chiffre Arrondissement est Obligatoire. Veuillez saisir le Nombre Chiffre Arrondissement.\")\n                \/\/.withConverter(Integer::valueOf, String::valueOf, \"Veuillez saisir un nombre\")\n                \/\/.withValidator(new RegexpValidator(\"Seuls les chiffres 0-9 sont accept\u00e9s\",\"\\\\d*\"))\n                .withValidationStatusHandler(status -> {lblNombreChiffreArrondissementValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblNombreChiffreArrondissementValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getNombreChiffreArrondissement, Rubrique::setNombreChiffreArrondissement); \n            Label lblModeStockageCompteurBase01ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurBase01)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Base 01 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Base 01\")\n                .bind(Rubrique::getModeStockageCompteurBase01, Rubrique::setModeStockageCompteurBase01); \n            Label lblModeStockageCompteurBase02ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurBase02)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Base 02 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Base 02\")\n                .bind(Rubrique::getModeStockageCompteurBase02, Rubrique::setModeStockageCompteurBase02); \n            Label lblModeStockageCompteurBase03ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurBase03)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Base 03 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Base 03\")\n                .bind(Rubrique::getModeStockageCompteurBase03, Rubrique::setModeStockageCompteurBase03); \n            Label lblModeStockageCompteurBase04ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurBase04)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Base 04 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Base 04\")\n                .bind(Rubrique::getModeStockageCompteurBase04, Rubrique::setModeStockageCompteurBase04); \n            Label lblModeStockageCompteurMontant01ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurMontant01)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Montant 01 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Montant 01\")\n                .bind(Rubrique::getModeStockageCompteurMontant01, Rubrique::setModeStockageCompteurMontant01); \n            Label lblModeStockageCompteurMontant02ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurMontant02)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Montant 02 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Montant 02\")\n                .bind(Rubrique::getModeStockageCompteurMontant02, Rubrique::setModeStockageCompteurMontant02); \n            Label lblModeStockageCompteurMontant03ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurMontant03)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Montant 03 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Montant 03\")\n                .bind(Rubrique::getModeStockageCompteurMontant03, Rubrique::setModeStockageCompteurMontant03); \n            Label lblModeStockageCompteurMontant04ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurMontant04)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Montant 04 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Montant 04\")\n                .bind(Rubrique::getModeStockageCompteurMontant04, Rubrique::setModeStockageCompteurMontant04); \n            Label lblModeStockageCompteurInterne01ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne01)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 01 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne01, Rubrique::setModeStockageCompteurInterne01); \n            Label lblModeStockageCompteurInterne02ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne02)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 02 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne02, Rubrique::setModeStockageCompteurInterne02); \n            Label lblModeStockageCompteurInterne03ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne03)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 03 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne03, Rubrique::setModeStockageCompteurInterne03); \n            Label lblModeStockageCompteurInterne04ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne04)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 04 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne04, Rubrique::setModeStockageCompteurInterne04); \n            Label lblModeStockageCompteurInterne05ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne05)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 05 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne05, Rubrique::setModeStockageCompteurInterne05); \n            Label lblModeStockageCompteurInterne06ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne06)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 06 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne06, Rubrique::setModeStockageCompteurInterne06); \n            Label lblModeStockageCompteurInterne07ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne07)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 07 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne07, Rubrique::setModeStockageCompteurInterne07); \n            Label lblModeStockageCompteurInterne08ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne08)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 08 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne08, Rubrique::setModeStockageCompteurInterne08); \n            Label lblModeStockageCompteurInterne09ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne09)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 09 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne09, Rubrique::setModeStockageCompteurInterne09); \n            Label lblModeStockageCompteurInterne10ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne10)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Interne 10 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Interne\")\n                .bind(Rubrique::getModeStockageCompteurInterne10, Rubrique::setModeStockageCompteurInterne10); \n            Label lblModeStockageCompteurExterne01ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne01)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 01 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne01, Rubrique::setModeStockageCompteurExterne01); \n            Label lblModeStockageCompteurExterne02ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne02)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 02 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne02, Rubrique::setModeStockageCompteurExterne02); \n            Label lblModeStockageCompteurExterne03ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne03)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 03 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne03, Rubrique::setModeStockageCompteurExterne03); \n            Label lblModeStockageCompteurExterne04ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne04)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 04 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne04, Rubrique::setModeStockageCompteurExterne04); \n            Label lblModeStockageCompteurExterne05ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne05)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 05 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne05, Rubrique::setModeStockageCompteurExterne05); \n            Label lblModeStockageCompteurExterne06ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne06)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 06 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne06, Rubrique::setModeStockageCompteurExterne06); \n            Label lblModeStockageCompteurExterne07ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne07)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 07 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne07, Rubrique::setModeStockageCompteurExterne07); \n            Label lblModeStockageCompteurExterne08ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne08)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 08 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne08, Rubrique::setModeStockageCompteurExterne08); \n            Label lblModeStockageCompteurExterne09ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne09)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 09 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne09, Rubrique::setModeStockageCompteurExterne09); \n            Label lblModeStockageCompteurExterne10ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne10)\n                \/\/.asRequired(\"La Saisie du Mode de Stockage Compteur de Externe 10 est requise. Veuillez s\u00e9lectionner un Mode de Stockage Compteur de Externe\")\n                .bind(Rubrique::getModeStockageCompteurExterne10, Rubrique::setModeStockageCompteurExterne10); \n            \/* 3 - Alternative : Bind Fields instances that need validators manually and then bind all remaining fields using the bindInstanceFields method\n            this.binder.bindInstanceFields(this.formLayout); \/\/Automatic Data Binding\n            \/\/bindInstanceFields matches fields in Rubrique and RubriqueView based on their names.\n            *\/\n            \/\/4 - Add input fields to formLayout - We don't use .setLabel since we will use addFormItem instead of add to add items to the form - addFormItem allows us to set SuperTextField with on a FormaLayout when add doesn't\n            \/\/this.formLayout.add(this.txtNoRubrique, this.txtLibelleRubrique, this.txtLibelleCourtRubrique, this.txtNomMandataire, this.txtNoTelephone, this.txtNoMobile, this.txtNoTelecopie, this.datDateNaissance, this.txtLieuNaissance, this.txtAdresse, this.txtVille, this.txtNombreHomme, this.txtNombreFemme, this.chkInactif, this.txtNoPieceIdentite, this.chkDeposant, this.chkEmprunteur, this.chkGarant, this.chkDirigeant, this.chkAdministrateur);\n            \/\/4 - Alternative\n            this.tabInfoGeneraleFormLayout.addFormItem(this.txtNoRubrique, \"N\u00b0 Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.txtLibelleRubrique, \"Libell\u00e9 Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.txtLibelleCourtRubrique, \"Libell\u00e9 Abr\u00e9g\u00e9 Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.chkInactif, \"Inactif :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.chkEditionFacture, \"Edition Facture :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.chkEditionSynthetique, \"Edition Synth\u00e9tique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeModeValorisationRubrique, \"Mode Valorisation Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.txtMontantFixe, \"Montant Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeModeValorisationBase, \"Mode D\u00e9termination Base :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.txtBaseFixe, \"BaseFixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeModeValorisationTaux, \"Mode D\u00e9termination Taux :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.txtTauxFixe, \"Taux Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.txtCoefficientMultiplicateur, \"Coefficient Multiplicateur :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeTranche, \"Tranche :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeVariableRubrique, \"Variable Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeConstanteRubrique, \"EmploiFonds Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeVariableBase, \"Variable Base :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeConstanteBase, \"EmploiFonds Base :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeVariableTaux, \"Variable Taux :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeConstanteTaux, \"EmploiFonds Taux :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeValeurMinimum, \"Valeur Minimum :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.txtValeurMinimumFixe, \"Valeur Minimum Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeValeurMaximum, \"Titre Civilit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.txtValeurMaximumFixe, \"Valeur Maximum Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeConstanteValeurMinimum, \"EmploiFonds Valeur Minimum :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeConstanteValeurMaximum, \"EmploiFonds Valeur Maximum :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeModeAbattement, \"Mode Abattement :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.txtAbattementFixe, \"Abattement Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeModeArrondissement, \"Mode Arrondissement :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.txtNombreChiffreArrondissement, \"Nombre Chiffre Arrondissement :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurBase01, \"Compteur Base 01 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurBase02, \"Compteur Base 02 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurBase03, \"Compteur Base 03 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurBase04, \"Compteur Base 04 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurMontant01, \"Compteur Montant 01 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurMontant02, \"Compteur Montant 02 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurMontant03, \"Compteur Montant 03 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurMontant04, \"Compteur Montant 04 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne01, \"Compteur Interne 01 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne02, \"Compteur Interne 02 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne03, \"Compteur Interne 03 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne04, \"Compteur Interne 04 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne05, \"Compteur Interne 05 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne06, \"Compteur Interne 06 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne07, \"Compteur Interne 07 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne08, \"Compteur Interne 08 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne09, \"Compteur Interne 09 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne10, \"Compteur Interne 10 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne01, \"Compteur Externe 01 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne02, \"Compteur Externe 02 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne03, \"Compteur Externe 03 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne04, \"Compteur Externe 04 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne05, \"Compteur Externe 05 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne06, \"Compteur Externe 06 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne07, \"Compteur Externe 07 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne08, \"Compteur Externe 08 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne09, \"Compteur Externe 09 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne10, \"Compteur Externe 10 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            \/\/5 - Making the Layout Responsive : Custom responsive layouting\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top and there is only 1 column. The form will show 2 columns if width is >= 600px\n            tabInfoGeneraleFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            \/*\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top. In both cases there is only 1 column.\n            tabInfoGeneraleFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            *\/\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top and there is only 1 column. The form will show 2 columns if width is >= 600px\n            tabDefinitionFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            \/*\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top. In both cases there is only 1 column.\n            tabDefinitionFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            *\/\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top and there is only 1 column. The form will show 2 columns if width is >= 600px\n            tabAjustementFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            \/*\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top. In both cases there is only 1 column.\n            tabAjustementFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            *\/\n            this.tabCompteurBaseMontantFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            \/*\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top. In both cases there is only 1 column.\n            this.tabCompteurBaseMontantFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            *\/\n            this.tabCompteurInterneFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            \/*\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top. In both cases there is only 1 column.\n            this.tabCompteurInterneFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            *\/\n            this.tabCompteurExterneFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            \/*\n            \/\/breakpoint at 600px, with the label to the side. At resolutions lower than 600px, the label will be at the top. In both cases there is only 1 column.\n            this.tabCompteurExterneFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n            *\/\n            \/\/6 - Configure Tabs\n            this.tabsToPages.put(this.tabInfoGenerale, this.tabInfoGeneraleFormLayout);\n            this.tabsToPages.put(this.tabDefinition, this.tabDefinitionFormLayout);\n            this.tabsToPages.put(this.tabAjustement, this.tabAjustementFormLayout);\n            this.tabsToPages.put(this.tabCompteurBaseMontant, this.tabCompteurBaseMontantFormLayout);\n            this.tabsToPages.put(this.tabCompteurInterne, this.tabCompteurInterneFormLayout);\n            this.tabsToPages.put(this.tabCompteurExterne, this.tabCompteurExterneFormLayout);\n            this.tabs.add(this.tabInfoGenerale, this.tabDefinition, this.tabAjustement, this.tabCompteurBaseMontant, this.tabCompteurInterne, this.tabCompteurExterne);\n            this.pages.add(this.tabInfoGeneraleFormLayout, this.tabDefinitionFormLayout, this.tabAjustementFormLayout, this.tabCompteurBaseMontantFormLayout, this.tabCompteurInterneFormLayout, this.tabCompteurExterneFormLayout);        \n            \/\/Configure OnSelectedTabChange\n            this.tabs.addSelectedChangeListener(event -> {\n                VaadinSession.getCurrent().setAttribute(CACHED_SELECTED_TAB_INDEX, this.tabs.getSelectedIndex());\n                this.showSelectedTab();\n            });\n            \/\/Cache Selected Tab\n            if (VaadinSession.getCurrent().getAttribute(CACHED_SELECTED_TAB_INDEX) == null) {\n                VaadinSession.getCurrent().setAttribute(CACHED_SELECTED_TAB_INDEX, 0);\n            }\n            \/\/First Page to show programmatically\n            this.tabs.setSelectedIndex((int)VaadinSession.getCurrent().getAttribute(CACHED_SELECTED_TAB_INDEX)); \/\/Pre-select tabs\n            this.showSelectedTab();\n        } \n        catch (Exception e) \n        {\n            MessageDialogHelper.showAlertDialog(\"EditerRubriqueDialog.configureComponents\", e.toString());\n            e.printStackTrace();\n        }\n    }","code_wo_comment":"private void configureComponents() {\n       \n        try \n        {\n           \n            this.tabs.addClassName(\"fichier-tab\");\n            this.tabs.setOrientation(Tabs.Orientation.HORIZONTAL);\n            this.tabs.setFlexGrowForEnclosedTabs(1);\n            this.tabs.addThemeVariants(TabsVariant.LUMO_SMALL);\n            this.tabs.setWidthFull();\n            this.tabInfoGenerale.setLabel(\"Informations G\u00e9n\u00e9rales\");\n            this.tabDefinition.setLabel(\"D\u00e9finitions\");\n            this.tabAjustement.setLabel(\"Ajustement\");\n            this.tabCompteurBaseMontant.setLabel(\"Stockage des Compteurs Base et Montant\");\n            this.tabCompteurInterne.setLabel(\"Stockage des Compteurs Internes\");\n            this.tabCompteurExterne.setLabel(\"Stockage des Compteurs Externes\");\n            this.pages.setSizeFull();\n            this.tabInfoGeneraleFormLayout.addClassName(\"fichier-form\");\n            this.tabInfoGeneraleFormLayout.setSizeFull();\n            this.tabInfoGeneraleFormLayout.setVisible(true);\n            this.tabDefinitionFormLayout.addClassName(\"fichier-form\");\n            this.tabDefinitionFormLayout.setSizeFull();\n            this.tabDefinitionFormLayout.setVisible(true);\n            this.tabAjustementFormLayout.addClassName(\"fichier-form\");\n            this.tabAjustementFormLayout.setSizeFull();\n            this.tabAjustementFormLayout.setVisible(true);\n            this.tabCompteurBaseMontantFormLayout.addClassName(\"fichier-form\");\n            this.tabCompteurBaseMontantFormLayout.setSizeFull();\n            this.tabCompteurBaseMontantFormLayout.setVisible(false);\n            this.tabCompteurInterneFormLayout.addClassName(\"fichier-form\");\n            this.tabCompteurInterneFormLayout.setSizeFull();\n            this.tabCompteurInterneFormLayout.setVisible(false);\n            this.tabCompteurExterneFormLayout.addClassName(\"fichier-form\");\n            this.tabCompteurExterneFormLayout.setSizeFull();\n            this.tabCompteurExterneFormLayout.setVisible(false);\n           \n                       this.txtNoRubrique.setWidth(100, Unit.PIXELS);\n            this.txtNoRubrique.setRequired(true);\n            this.txtNoRubrique.setRequiredIndicatorVisible(true);\n            this.txtNoRubrique.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtLibelleRubrique.setWidth(350, Unit.PIXELS);\n            this.txtLibelleRubrique.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.txtLibelleCourtRubrique.setWidth(350, Unit.PIXELS);\n            this.txtLibelleCourtRubrique.addClassName(TEXTFIELD_LEFT_LABEL);\n            this.chkInactif.setAutofocus(false);\n            this.chkEditionFacture.setAutofocus(true);\n            this.chkEditionSynthetique.setAutofocus(true);\n                       this.cboCodeModeValorisationRubrique.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeValorisationRubrique.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeValorisationRubrique.setItemLabelGenerator(SystemeModeValorisationCommission::getLibelleModeValorisation);\n            this.cboCodeModeValorisationRubrique.setRequired(true);\n            this.cboCodeModeValorisationRubrique.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeValorisationRubrique.setClearButtonVisible(true);\n           \n            this.cboCodeModeValorisationRubrique.setAllowCustomValue(false);\n            this.cboCodeModeValorisationRubrique.setPreventInvalidInput(true);\n            this.cboCodeModeValorisationRubrique.addValueChangeListener(event -> {\n                this.myControlsManageAccordingToModeValorisation();\n            });\n            this.txtMontantFixe.setWidth(100, Unit.PIXELS);\n            this.txtMontantFixe.setRequiredIndicatorVisible(true);\n           \n            this.txtMontantFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER);\n            this.txtMontantFixe.setLocale(Locale.FRENCH);\n            this.txtMontantFixe.withNullValueAllowed(false);\n            this.cboCodeModeValorisationBase.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeValorisationBase.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeValorisationBase.setItemLabelGenerator(SystemeModeValorisationBaseCommission::getLibelleModeValorisation);\n            this.cboCodeModeValorisationBase.setRequired(true);\n            this.cboCodeModeValorisationBase.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeValorisationBase.setClearButtonVisible(true);\n           \n            this.cboCodeModeValorisationBase.setAllowCustomValue(false);\n            this.cboCodeModeValorisationBase.setPreventInvalidInput(true);\n            this.cboCodeModeValorisationBase.addValueChangeListener(event -> {\n                this.myControlsManageAccordingToModeValorisation();\n            });\n            this.txtBaseFixe.setWidth(100, Unit.PIXELS);\n            this.txtBaseFixe.setRequiredIndicatorVisible(true);\n           \n            this.txtBaseFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER);\n            this.txtBaseFixe.setLocale(Locale.FRENCH);\n            this.txtBaseFixe.withNullValueAllowed(false);\n            this.cboCodeModeValorisationTaux.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeValorisationTaux.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeValorisationTaux.setItemLabelGenerator(SystemeModeValorisationTauxCommission::getLibelleModeValorisation);\n            this.cboCodeModeValorisationTaux.setRequired(true);\n            this.cboCodeModeValorisationTaux.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeValorisationTaux.setClearButtonVisible(true);\n           \n            this.cboCodeModeValorisationTaux.setAllowCustomValue(false);\n            this.cboCodeModeValorisationTaux.setPreventInvalidInput(true);\n            this.cboCodeModeValorisationTaux.addValueChangeListener(event -> {\n                this.myControlsManageAccordingToModeValorisation();\n            });\n            this.txtTauxFixe.setWidth(100, Unit.PIXELS);\n            this.txtTauxFixe.setRequiredIndicatorVisible(true);\n           \n            this.txtTauxFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER);\n            this.txtTauxFixe.setLocale(Locale.FRENCH);\n            this.txtTauxFixe.withNullValueAllowed(false);\n            this.txtCoefficientMultiplicateur.setWidth(100, Unit.PIXELS);\n            this.txtCoefficientMultiplicateur.setRequiredIndicatorVisible(true);\n           \n            this.txtCoefficientMultiplicateur.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER);\n            this.txtCoefficientMultiplicateur.setLocale(Locale.FRENCH);\n            this.txtCoefficientMultiplicateur.withNullValueAllowed(false);\n            this.cboCodeTranche.setWidth(350, Unit.PIXELS);\n            this.cboCodeTranche.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeTranche.setItemLabelGenerator(TrancheValeur::getLibelleTranche);\n            this.cboCodeTranche.setRequired(true);\n            this.cboCodeTranche.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeTranche.setClearButtonVisible(true);\n           \n            this.cboCodeTranche.setAllowCustomValue(true);\n            this.cboCodeTranche.setPreventInvalidInput(true);\n            this.cboCodeTranche.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La Tranche de Valeur choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                       \n                        this.cboCodeTranche.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeTranche.addCustomValueSetListener(event -> {\n                this.cboCodeTranche_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeVariableRubrique.setWidth(350, Unit.PIXELS);\n            this.cboCodeVariableRubrique.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeVariableRubrique.setItemLabelGenerator(VariableService::getLibelleVariable);\n            this.cboCodeVariableRubrique.setRequired(true);\n            this.cboCodeVariableRubrique.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeVariableRubrique.setClearButtonVisible(true);\n           \n            this.cboCodeVariableRubrique.setAllowCustomValue(true);\n            this.cboCodeVariableRubrique.setPreventInvalidInput(true);\n            this.cboCodeVariableRubrique.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La Variable choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                       \n                        this.cboCodeVariableRubrique.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeVariableRubrique.addCustomValueSetListener(event -> {\n                this.cboCodeVariableRubrique_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeConstanteRubrique.setWidth(350, Unit.PIXELS);\n            this.cboCodeConstanteRubrique.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeConstanteRubrique.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteRubrique.setRequired(true);\n            this.cboCodeConstanteRubrique.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeConstanteRubrique.setClearButtonVisible(true);\n           \n            this.cboCodeConstanteRubrique.setAllowCustomValue(true);\n            this.cboCodeConstanteRubrique.setPreventInvalidInput(true);\n            this.cboCodeConstanteRubrique.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                       \n                        this.cboCodeConstanteRubrique.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeConstanteRubrique.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteRubrique_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeVariableBase.setWidth(350, Unit.PIXELS);\n            this.cboCodeVariableBase.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeVariableBase.setItemLabelGenerator(VariableService::getLibelleVariable);\n            this.cboCodeVariableBase.setRequired(true);\n            this.cboCodeVariableBase.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeVariableBase.setClearButtonVisible(true);\n           \n            this.cboCodeVariableBase.setAllowCustomValue(true);\n            this.cboCodeVariableBase.setPreventInvalidInput(true);\n            this.cboCodeVariableBase.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La Variable choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                       \n                        this.cboCodeVariableBase.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeVariableBase.addCustomValueSetListener(event -> {\n                this.cboCodeVariableBase_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeConstanteBase.setWidth(350, Unit.PIXELS);\n            this.cboCodeConstanteBase.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeConstanteBase.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteBase.setRequired(true);\n            this.cboCodeConstanteBase.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeConstanteBase.setClearButtonVisible(true);\n           \n            this.cboCodeConstanteBase.setAllowCustomValue(true);\n            this.cboCodeConstanteBase.setPreventInvalidInput(true);\n            this.cboCodeConstanteBase.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                       \n                        this.cboCodeConstanteBase.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeConstanteBase.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteBase_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeVariableTaux.setWidth(350, Unit.PIXELS);\n            this.cboCodeVariableTaux.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeVariableTaux.setItemLabelGenerator(VariableService::getLibelleVariable);\n            this.cboCodeVariableTaux.setRequired(true);\n            this.cboCodeVariableTaux.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeVariableTaux.setClearButtonVisible(true);\n           \n            this.cboCodeVariableTaux.setAllowCustomValue(true);\n            this.cboCodeVariableTaux.setPreventInvalidInput(true);\n            this.cboCodeVariableTaux.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La Variable choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                       \n                        this.cboCodeVariableTaux.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeVariableTaux.addCustomValueSetListener(event -> {\n                this.cboCodeVariableTaux_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeConstanteTaux.setWidth(350, Unit.PIXELS);\n            this.cboCodeConstanteTaux.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeConstanteTaux.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteTaux.setRequired(true);\n            this.cboCodeConstanteTaux.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeConstanteTaux.setClearButtonVisible(true);\n           \n            this.cboCodeConstanteTaux.setAllowCustomValue(true);\n            this.cboCodeConstanteTaux.setPreventInvalidInput(true);\n            this.cboCodeConstanteTaux.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                       \n                        this.cboCodeConstanteTaux.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeConstanteTaux.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteTaux_NotInList(event.getDetail(), 50);\n            });\n                       this.cboCodeValeurMinimum.setWidth(350, Unit.PIXELS);\n            this.cboCodeValeurMinimum.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeValeurMinimum.setItemLabelGenerator(SystemeValeurMinMax::getLibelleValeur);\n            this.cboCodeValeurMinimum.setRequired(true);\n            this.cboCodeValeurMinimum.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeValeurMinimum.setClearButtonVisible(true);\n           \n            this.cboCodeValeurMinimum.setAllowCustomValue(false);\n            this.cboCodeValeurMinimum.setPreventInvalidInput(true);\n            this.txtValeurMinimumFixe.setWidth(100, Unit.PIXELS);\n            this.txtValeurMinimumFixe.setRequiredIndicatorVisible(true);\n           \n            this.txtValeurMinimumFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER);\n            this.txtValeurMinimumFixe.setLocale(Locale.FRENCH);\n            this.txtValeurMinimumFixe.withNullValueAllowed(false);\n            this.cboCodeValeurMaximum.setWidth(350, Unit.PIXELS);\n            this.cboCodeValeurMaximum.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeValeurMaximum.setItemLabelGenerator(SystemeValeurMinMax::getLibelleValeur);\n            this.cboCodeValeurMaximum.setRequired(true);\n            this.cboCodeValeurMaximum.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeValeurMaximum.setClearButtonVisible(true);\n           \n            this.cboCodeValeurMaximum.setAllowCustomValue(false);\n            this.cboCodeValeurMaximum.setPreventInvalidInput(true);\n            this.txtValeurMaximumFixe.setWidth(100, Unit.PIXELS);\n            this.txtValeurMaximumFixe.setRequiredIndicatorVisible(true);\n           \n            this.txtValeurMaximumFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER);\n            this.txtValeurMaximumFixe.setLocale(Locale.FRENCH);\n            this.txtValeurMaximumFixe.withNullValueAllowed(false);\n            this.cboCodeConstanteValeurMinimum.setWidth(350, Unit.PIXELS);\n            this.cboCodeConstanteValeurMinimum.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeConstanteValeurMinimum.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteValeurMinimum.setRequired(true);\n            this.cboCodeConstanteValeurMinimum.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeConstanteValeurMinimum.setClearButtonVisible(true);\n           \n            this.cboCodeConstanteValeurMinimum.setAllowCustomValue(true);\n            this.cboCodeConstanteValeurMinimum.setPreventInvalidInput(true);\n            this.cboCodeConstanteValeurMinimum.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                       \n                        this.cboCodeConstanteValeurMinimum.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeConstanteValeurMinimum.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteValeurMinimum_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeConstanteValeurMaximum.setWidth(350, Unit.PIXELS);\n            this.cboCodeConstanteValeurMaximum.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeConstanteValeurMaximum.setItemLabelGenerator(EmploiFonds::getLibelleConstante);\n            this.cboCodeConstanteValeurMaximum.setRequired(true);\n            this.cboCodeConstanteValeurMaximum.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeConstanteValeurMaximum.setClearButtonVisible(true);\n           \n            this.cboCodeConstanteValeurMaximum.setAllowCustomValue(true);\n            this.cboCodeConstanteValeurMaximum.setPreventInvalidInput(true);\n            this.cboCodeConstanteValeurMaximum.addValueChangeListener(event -> {\n                if (event.getValue() != null) {\n                                       if (event.getValue().isInactif() == true) {\n                        MessageDialogHelper.showWarningDialog(\"Erreur de Saisie\", \"La EmploiFonds choisie est actuellement d\u00e9sactiv\u00e9e. Veuillez en saisir une autre.\");\n                       \n                        this.cboCodeConstanteValeurMaximum.setValue(event.getOldValue());\n                    }\n                }\n            });\n           \n            this.cboCodeConstanteValeurMaximum.addCustomValueSetListener(event -> {\n                this.cboCodeConstanteValeurMaximum_NotInList(event.getDetail(), 50);\n            });\n            this.cboCodeModeAbattement.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeAbattement.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeAbattement.setItemLabelGenerator(SystemeModeAbattement::getLibelleModeAbattement);\n            this.cboCodeModeAbattement.setRequired(true);\n            this.cboCodeModeAbattement.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeAbattement.setClearButtonVisible(true);\n           \n            this.cboCodeModeAbattement.setAllowCustomValue(false);\n            this.cboCodeModeAbattement.setPreventInvalidInput(true);\n            this.txtAbattementFixe.setWidth(100, Unit.PIXELS);\n            this.txtAbattementFixe.setRequiredIndicatorVisible(true);\n           \n            this.txtAbattementFixe.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER);\n            this.txtAbattementFixe.setLocale(Locale.FRENCH);\n            this.txtAbattementFixe.withNullValueAllowed(false);\n            this.cboCodeModeArrondissement.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeArrondissement.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeArrondissement.setItemLabelGenerator(SystemeModeArrondissement::getLibelleModeArrondissement);\n            this.cboCodeModeArrondissement.setRequired(true);\n            this.cboCodeModeArrondissement.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeArrondissement.setClearButtonVisible(true);\n           \n            this.cboCodeModeArrondissement.setAllowCustomValue(false);\n            this.cboCodeModeArrondissement.setPreventInvalidInput(true);\n            this.txtNombreChiffreArrondissement.setWidth(100, Unit.PIXELS);\n            this.txtNombreChiffreArrondissement.setRequiredIndicatorVisible(true);\n           \n            this.txtNombreChiffreArrondissement.addThemeVariants(TextFieldVariant.LUMO_ALIGN_CENTER);\n            this.txtNombreChiffreArrondissement.setLocale(Locale.FRENCH);\n            this.txtNombreChiffreArrondissement.withNullValueAllowed(false);\n                       this.cboCodeModeStockageCompteurBase01.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurBase01.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurBase01.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurBase01.setRequired(true);\n            this.cboCodeModeStockageCompteurBase01.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurBase01.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurBase01.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurBase01.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurBase02.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurBase02.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurBase02.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurBase02.setRequired(true);\n            this.cboCodeModeStockageCompteurBase02.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurBase02.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurBase02.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurBase02.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurBase03.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurBase03.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurBase03.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurBase03.setRequired(true);\n            this.cboCodeModeStockageCompteurBase03.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurBase03.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurBase03.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurBase03.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurBase04.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurBase04.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurBase04.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurBase04.setRequired(true);\n            this.cboCodeModeStockageCompteurBase04.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurBase04.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurBase04.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurBase04.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurMontant01.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurMontant01.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurMontant01.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurMontant01.setRequired(true);\n            this.cboCodeModeStockageCompteurMontant01.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurMontant01.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurMontant01.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurMontant01.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurMontant02.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurMontant02.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurMontant02.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurMontant02.setRequired(true);\n            this.cboCodeModeStockageCompteurMontant02.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurMontant02.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurMontant02.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurMontant02.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurMontant03.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurMontant03.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurMontant03.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurMontant03.setRequired(true);\n            this.cboCodeModeStockageCompteurMontant03.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurMontant03.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurMontant03.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurMontant03.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurMontant04.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurMontant04.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurMontant04.setItemLabelGenerator(SystemeModeStockageBaseMontant::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurMontant04.setRequired(true);\n            this.cboCodeModeStockageCompteurMontant04.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurMontant04.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurMontant04.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurMontant04.setPreventInvalidInput(true);\n                       this.cboCodeModeStockageCompteurInterne01.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne01.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne01.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne01.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne01.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne01.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne01.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne01.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne02.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne02.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne02.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne02.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne02.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne02.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne02.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne02.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne03.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne03.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne03.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne03.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne03.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne03.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne03.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne03.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne04.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne04.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne04.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne04.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne04.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne04.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne04.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne04.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne05.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne05.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne05.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne05.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne05.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne05.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne05.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne05.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne06.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne06.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne06.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne06.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne06.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne06.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne06.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne06.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne07.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne07.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne07.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne07.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne07.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne07.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne07.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne07.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne08.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne08.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne08.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne08.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne08.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne08.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne08.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne08.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne09.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne09.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne09.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne09.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne09.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne09.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne09.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne09.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurInterne10.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurInterne10.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurInterne10.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurInterne10.setRequired(true);\n            this.cboCodeModeStockageCompteurInterne10.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurInterne10.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurInterne10.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurInterne10.setPreventInvalidInput(true);\n                       this.cboCodeModeStockageCompteurExterne01.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne01.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne01.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne01.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne01.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne01.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne01.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne01.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne02.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne02.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne02.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne02.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne02.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne02.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne02.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne02.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne03.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne03.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne03.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne03.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne03.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne03.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne03.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne03.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne04.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne04.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne04.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne04.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne04.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne04.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne04.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne04.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne05.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne05.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne05.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne05.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne05.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne05.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne05.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne05.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne06.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne06.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne06.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne06.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne06.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne06.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne06.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne06.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne07.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne07.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne07.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne07.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne07.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne07.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne07.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne07.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne08.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne08.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne08.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne08.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne08.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne08.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne08.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne08.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne09.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne09.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne09.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne09.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne09.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne09.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne09.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne09.setPreventInvalidInput(true);\n            this.cboCodeModeStockageCompteurExterne10.setWidth(350, Unit.PIXELS);\n            this.cboCodeModeStockageCompteurExterne10.addClassName(COMBOBOX_LEFT_LABEL);\n           \n            this.cboCodeModeStockageCompteurExterne10.setItemLabelGenerator(SystemeModeStockageInterneExterne::getLibelleModeStockage);\n            this.cboCodeModeStockageCompteurExterne10.setRequired(true);\n            this.cboCodeModeStockageCompteurExterne10.setRequiredIndicatorVisible(true);\n           \n           \n            this.cboCodeModeStockageCompteurExterne10.setClearButtonVisible(true);\n           \n            this.cboCodeModeStockageCompteurExterne10.setAllowCustomValue(false);\n            this.cboCodeModeStockageCompteurExterne10.setPreventInvalidInput(true);\n           \n           \n           \n            Label lblNoRubriqueValidationStatus = new Label();\n            this.binder.forField(this.txtNoRubrique)\n                .asRequired(\"La Saisie du N\u00b0 Rubrique est Obligatoire. Veuillez saisir le N\u00b0 Rubrique.\")\n                .withValidator(text -> text != null && text.length() <= 10, \"N\u00b0 Rubrique ne peut contenir au plus 10 caract\u00e8res\")\n                .withValidationStatusHandler(status -> {lblNoRubriqueValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblNoRubriqueValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getNoRubrique, Rubrique::setNoRubrique); \n            Label lblLibelleRubriqueValidationStatus = new Label();\n            this.binder.forField(this.txtLibelleRubrique)\n                .asRequired(\"La Saisie du Libell\u00e9 de la Rubrique est Obligatoire. Veuillez saisir le Libell\u00e9 de la Rubrique.\")\n                .withValidator(text -> text.length() <= 50, \"Libell\u00e9 Rubrique ne peut contenir au plus 50 caract\u00e8res.\")\n                .withValidationStatusHandler(status -> {lblLibelleRubriqueValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblLibelleRubriqueValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getLibelleRubrique, Rubrique::setLibelleRubrique); \n            Label lblLibelleCourtRubriqueValidationStatus = new Label();\n            this.binder.forField(this.txtLibelleCourtRubrique)\n                .asRequired(\"La Saisie du Libell\u00e9 Abr\u00e9g\u00e9 de la Rubrique est Obligatoire. Veuillez saisir le Libell\u00e9 de la Rubrique.\")\n                .withValidator(text -> text.length() <= 30, \"Libell\u00e9 Abr\u00e9g\u00e9 Rubrique ne peut contenir au plus 30 caract\u00e8res.\")\n                .withValidationStatusHandler(status -> {lblLibelleCourtRubriqueValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblLibelleCourtRubriqueValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getLibelleCourtRubrique, Rubrique::setLibelleCourtRubrique); \n            this.binder.forField(this.chkInactif)\n                .bind(Rubrique::isInactif, Rubrique::setInactif); \n            this.binder.forField(this.chkEditionFacture)\n                .bind(Rubrique::isEditionFacture, Rubrique::setEditionFacture); \n            this.binder.forField(this.chkEditionSynthetique)\n                .bind(Rubrique::isEditionSynthetique, Rubrique::setEditionSynthetique); \n            Label lblModeValorisationRubriqueValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeValorisationRubrique)\n                .asRequired(\"La Saisie du Mode de Valorisation de la Rubrique est requise. Veuillez s\u00e9lectionner un Mode de Valorisation de la Rubrique\")\n                .bind(Rubrique::getModeValorisationRubrique, Rubrique::setModeValorisationRubrique); \n            Label lblMontantFixeValidationStatus = new Label();\n            this.binder.forField(this.txtMontantFixe)\n                            \n                               .withValidationStatusHandler(status -> {lblMontantFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblMontantFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getMontantFixe, Rubrique::setMontantFixe); \n            Label lblModeValorisationBaseValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeValorisationBase)\n                             .bind(Rubrique::getModeValorisationBase, Rubrique::setModeValorisationBase); \n            Label lblBaseFixeValidationStatus = new Label();\n            this.binder.forField(this.txtBaseFixe)\n                            \n                               .withValidationStatusHandler(status -> {lblBaseFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblBaseFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getBaseFixe, Rubrique::setBaseFixe); \n            Label lblModeValorisationTauxValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeValorisationTaux)\n                             .bind(Rubrique::getModeValorisationTaux, Rubrique::setModeValorisationTaux);             \n            Label lblTauxFixeValidationStatus = new Label();\n            this.binder.forField(this.txtTauxFixe)\n                            \n                               .withValidationStatusHandler(status -> {lblTauxFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblTauxFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getTauxFixe, Rubrique::setTauxFixe); \n            Label lblCoefficientMultiplicateurValidationStatus = new Label();\n            this.binder.forField(this.txtCoefficientMultiplicateur)\n                .asRequired(\"La Saisie du Coefficient Multiplicateur est Obligatoire. Veuillez saisir le Coefficient Multiplicateur.\")\n               \n                               .withValidationStatusHandler(status -> {lblCoefficientMultiplicateurValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblCoefficientMultiplicateurValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getCoefficientMultiplicateur, Rubrique::setCoefficientMultiplicateur); \n            Label lblTrancheValeurValidationStatus = new Label();\n            this.binder.forField(this.cboCodeTranche)\n                               .bind(Rubrique::getTranche, Rubrique::setTranche); \n            Label lblVariableRubriqueValidationStatus = new Label();\n            this.binder.forField(this.cboCodeVariableRubrique)\n                               .bind(Rubrique::getVariableRubrique, Rubrique::setVariableRubrique); \n            Label lblConstanteRubriqueValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteRubrique)\n                               .bind(Rubrique::getConstanteRubrique, Rubrique::setConstanteRubrique); \n            Label lblVariableBaseValidationStatus = new Label();\n            this.binder.forField(this.cboCodeVariableBase)\n                               .bind(Rubrique::getVariableBase, Rubrique::setVariableBase); \n            Label lblConstanteBaseValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteBase)\n                               .bind(Rubrique::getConstanteBase, Rubrique::setConstanteBase); \n            Label lblVariableTauxValidationStatus = new Label();\n            this.binder.forField(this.cboCodeVariableTaux)\n                               .bind(Rubrique::getVariableTaux, Rubrique::setVariableTaux); \n            Label lblConstanteTauxValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteTaux)\n                               .bind(Rubrique::getConstanteTaux, Rubrique::setConstanteTaux); \n            Label lblValeurMinimumValidationStatus = new Label();\n            this.binder.forField(this.cboCodeValeurMinimum)\n               \n                .bind(Rubrique::getValeurMinimum, Rubrique::setValeurMinimum); \n            Label lblValeurMinimumFixeValidationStatus = new Label();\n            this.binder.forField(this.txtValeurMinimumFixe)\n                            \n                               .withValidationStatusHandler(status -> {lblValeurMinimumFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblValeurMinimumFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getValeurMinimumFixe, Rubrique::setValeurMinimumFixe); \n            Label lblValeurMaximumValidationStatus = new Label();\n            this.binder.forField(this.cboCodeValeurMaximum)\n               \n                .bind(Rubrique::getValeurMaximum, Rubrique::setValeurMaximum); \n            Label lblValeurMaximumFixeValidationStatus = new Label();\n            this.binder.forField(this.txtValeurMaximumFixe)\n                            \n                               .withValidationStatusHandler(status -> {lblValeurMaximumFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblValeurMaximumFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getValeurMaximumFixe, Rubrique::setValeurMaximumFixe); \n            Label lblConstanteValeurMinimumValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteValeurMinimum)\n               \n                .bind(Rubrique::getConstanteValeurMinimum, Rubrique::setConstanteValeurMinimum); \n            Label lblConstanteValeurMaximumValidationStatus = new Label();\n            this.binder.forField(this.cboCodeConstanteValeurMaximum)\n               \n                .bind(Rubrique::getConstanteValeurMaximum, Rubrique::setConstanteValeurMaximum); \n            Label lblModeAbattementValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeAbattement)\n                               .bind(Rubrique::getModeAbattement, Rubrique::setModeAbattement); \n            Label lblAbattementFixeValidationStatus = new Label();\n            this.binder.forField(this.txtAbattementFixe)\n                            \n                               .withValidationStatusHandler(status -> {lblAbattementFixeValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblAbattementFixeValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getAbattementFixe, Rubrique::setAbattementFixe); \n            Label lblModeArrondissementValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeArrondissement)\n                               .bind(Rubrique::getModeArrondissement, Rubrique::setModeArrondissement); \n            Label lblNombreChiffreArrondissementValidationStatus = new Label();\n            this.binder.forField(this.txtNombreChiffreArrondissement)\n                            \n                               .withValidationStatusHandler(status -> {lblNombreChiffreArrondissementValidationStatus.setText(status.getMessage().orElse(\"\"));       \n                         lblNombreChiffreArrondissementValidationStatus.setVisible(status.isError());})\n                .bind(Rubrique::getNombreChiffreArrondissement, Rubrique::setNombreChiffreArrondissement); \n            Label lblModeStockageCompteurBase01ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurBase01)\n                               .bind(Rubrique::getModeStockageCompteurBase01, Rubrique::setModeStockageCompteurBase01); \n            Label lblModeStockageCompteurBase02ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurBase02)\n                               .bind(Rubrique::getModeStockageCompteurBase02, Rubrique::setModeStockageCompteurBase02); \n            Label lblModeStockageCompteurBase03ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurBase03)\n                               .bind(Rubrique::getModeStockageCompteurBase03, Rubrique::setModeStockageCompteurBase03); \n            Label lblModeStockageCompteurBase04ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurBase04)\n                               .bind(Rubrique::getModeStockageCompteurBase04, Rubrique::setModeStockageCompteurBase04); \n            Label lblModeStockageCompteurMontant01ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurMontant01)\n                               .bind(Rubrique::getModeStockageCompteurMontant01, Rubrique::setModeStockageCompteurMontant01); \n            Label lblModeStockageCompteurMontant02ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurMontant02)\n                               .bind(Rubrique::getModeStockageCompteurMontant02, Rubrique::setModeStockageCompteurMontant02); \n            Label lblModeStockageCompteurMontant03ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurMontant03)\n                               .bind(Rubrique::getModeStockageCompteurMontant03, Rubrique::setModeStockageCompteurMontant03); \n            Label lblModeStockageCompteurMontant04ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurMontant04)\n                               .bind(Rubrique::getModeStockageCompteurMontant04, Rubrique::setModeStockageCompteurMontant04); \n            Label lblModeStockageCompteurInterne01ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne01)\n                               .bind(Rubrique::getModeStockageCompteurInterne01, Rubrique::setModeStockageCompteurInterne01); \n            Label lblModeStockageCompteurInterne02ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne02)\n                               .bind(Rubrique::getModeStockageCompteurInterne02, Rubrique::setModeStockageCompteurInterne02); \n            Label lblModeStockageCompteurInterne03ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne03)\n                               .bind(Rubrique::getModeStockageCompteurInterne03, Rubrique::setModeStockageCompteurInterne03); \n            Label lblModeStockageCompteurInterne04ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne04)\n                               .bind(Rubrique::getModeStockageCompteurInterne04, Rubrique::setModeStockageCompteurInterne04); \n            Label lblModeStockageCompteurInterne05ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne05)\n                               .bind(Rubrique::getModeStockageCompteurInterne05, Rubrique::setModeStockageCompteurInterne05); \n            Label lblModeStockageCompteurInterne06ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne06)\n                               .bind(Rubrique::getModeStockageCompteurInterne06, Rubrique::setModeStockageCompteurInterne06); \n            Label lblModeStockageCompteurInterne07ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne07)\n                               .bind(Rubrique::getModeStockageCompteurInterne07, Rubrique::setModeStockageCompteurInterne07); \n            Label lblModeStockageCompteurInterne08ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne08)\n                               .bind(Rubrique::getModeStockageCompteurInterne08, Rubrique::setModeStockageCompteurInterne08); \n            Label lblModeStockageCompteurInterne09ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne09)\n                               .bind(Rubrique::getModeStockageCompteurInterne09, Rubrique::setModeStockageCompteurInterne09); \n            Label lblModeStockageCompteurInterne10ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurInterne10)\n                               .bind(Rubrique::getModeStockageCompteurInterne10, Rubrique::setModeStockageCompteurInterne10); \n            Label lblModeStockageCompteurExterne01ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne01)\n                               .bind(Rubrique::getModeStockageCompteurExterne01, Rubrique::setModeStockageCompteurExterne01); \n            Label lblModeStockageCompteurExterne02ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne02)\n                               .bind(Rubrique::getModeStockageCompteurExterne02, Rubrique::setModeStockageCompteurExterne02); \n            Label lblModeStockageCompteurExterne03ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne03)\n                               .bind(Rubrique::getModeStockageCompteurExterne03, Rubrique::setModeStockageCompteurExterne03); \n            Label lblModeStockageCompteurExterne04ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne04)\n                               .bind(Rubrique::getModeStockageCompteurExterne04, Rubrique::setModeStockageCompteurExterne04); \n            Label lblModeStockageCompteurExterne05ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne05)\n                               .bind(Rubrique::getModeStockageCompteurExterne05, Rubrique::setModeStockageCompteurExterne05); \n            Label lblModeStockageCompteurExterne06ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne06)\n                               .bind(Rubrique::getModeStockageCompteurExterne06, Rubrique::setModeStockageCompteurExterne06); \n            Label lblModeStockageCompteurExterne07ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne07)\n                               .bind(Rubrique::getModeStockageCompteurExterne07, Rubrique::setModeStockageCompteurExterne07); \n            Label lblModeStockageCompteurExterne08ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne08)\n                               .bind(Rubrique::getModeStockageCompteurExterne08, Rubrique::setModeStockageCompteurExterne08); \n            Label lblModeStockageCompteurExterne09ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne09)\n                               .bind(Rubrique::getModeStockageCompteurExterne09, Rubrique::setModeStockageCompteurExterne09); \n            Label lblModeStockageCompteurExterne10ValidationStatus = new Label();\n            this.binder.forField(this.cboCodeModeStockageCompteurExterne10)\n                               .bind(Rubrique::getModeStockageCompteurExterne10, Rubrique::setModeStockageCompteurExterne10); \n           \n           \n           \n           \n            this.tabInfoGeneraleFormLayout.addFormItem(this.txtNoRubrique, \"N\u00b0 Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.txtLibelleRubrique, \"Libell\u00e9 Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.txtLibelleCourtRubrique, \"Libell\u00e9 Abr\u00e9g\u00e9 Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.chkInactif, \"Inactif :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.chkEditionFacture, \"Edition Facture :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabInfoGeneraleFormLayout.addFormItem(this.chkEditionSynthetique, \"Edition Synth\u00e9tique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeModeValorisationRubrique, \"Mode Valorisation Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.txtMontantFixe, \"Montant Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeModeValorisationBase, \"Mode D\u00e9termination Base :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.txtBaseFixe, \"BaseFixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeModeValorisationTaux, \"Mode D\u00e9termination Taux :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.txtTauxFixe, \"Taux Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.txtCoefficientMultiplicateur, \"Coefficient Multiplicateur :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeTranche, \"Tranche :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeVariableRubrique, \"Variable Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeConstanteRubrique, \"EmploiFonds Rubrique :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeVariableBase, \"Variable Base :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeConstanteBase, \"EmploiFonds Base :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeVariableTaux, \"Variable Taux :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabDefinitionFormLayout.addFormItem(this.cboCodeConstanteTaux, \"EmploiFonds Taux :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeValeurMinimum, \"Valeur Minimum :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.txtValeurMinimumFixe, \"Valeur Minimum Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeValeurMaximum, \"Titre Civilit\u00e9 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.txtValeurMaximumFixe, \"Valeur Maximum Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeConstanteValeurMinimum, \"EmploiFonds Valeur Minimum :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeConstanteValeurMaximum, \"EmploiFonds Valeur Maximum :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeModeAbattement, \"Mode Abattement :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.txtAbattementFixe, \"Abattement Fixe :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.cboCodeModeArrondissement, \"Mode Arrondissement :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabAjustementFormLayout.addFormItem(this.txtNombreChiffreArrondissement, \"Nombre Chiffre Arrondissement :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurBase01, \"Compteur Base 01 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurBase02, \"Compteur Base 02 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurBase03, \"Compteur Base 03 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurBase04, \"Compteur Base 04 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurMontant01, \"Compteur Montant 01 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurMontant02, \"Compteur Montant 02 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurMontant03, \"Compteur Montant 03 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurBaseMontantFormLayout.addFormItem(this.cboCodeModeStockageCompteurMontant04, \"Compteur Montant 04 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne01, \"Compteur Interne 01 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne02, \"Compteur Interne 02 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne03, \"Compteur Interne 03 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne04, \"Compteur Interne 04 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne05, \"Compteur Interne 05 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne06, \"Compteur Interne 06 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne07, \"Compteur Interne 07 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne08, \"Compteur Interne 08 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne09, \"Compteur Interne 09 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurInterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurInterne10, \"Compteur Interne 10 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne01, \"Compteur Externe 01 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne02, \"Compteur Externe 02 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne03, \"Compteur Externe 03 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne04, \"Compteur Externe 04 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne05, \"Compteur Externe 05 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne06, \"Compteur Externe 06 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne07, \"Compteur Externe 07 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne08, \"Compteur Externe 08 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne09, \"Compteur Externe 09 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n            this.tabCompteurExterneFormLayout.addFormItem(this.cboCodeModeStockageCompteurExterne10, \"Compteur Externe 10 :\").getStyle().set(\"--vaadin-form-item-label-width\", FORM_ITEM_LABEL_WIDTH200);\n           \n           \n            tabInfoGeneraleFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n           \n           \n            tabDefinitionFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n           \n           \n            tabAjustementFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n           \n            this.tabCompteurBaseMontantFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n           \n            this.tabCompteurInterneFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n           \n            this.tabCompteurExterneFormLayout.setResponsiveSteps(new FormLayout.ResponsiveStep(\"0\", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP), \n                    new FormLayout.ResponsiveStep(PANEL_FLEX_BASIS, 2, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));\n           \n           \n            this.tabsToPages.put(this.tabInfoGenerale, this.tabInfoGeneraleFormLayout);\n            this.tabsToPages.put(this.tabDefinition, this.tabDefinitionFormLayout);\n            this.tabsToPages.put(this.tabAjustement, this.tabAjustementFormLayout);\n            this.tabsToPages.put(this.tabCompteurBaseMontant, this.tabCompteurBaseMontantFormLayout);\n            this.tabsToPages.put(this.tabCompteurInterne, this.tabCompteurInterneFormLayout);\n            this.tabsToPages.put(this.tabCompteurExterne, this.tabCompteurExterneFormLayout);\n            this.tabs.add(this.tabInfoGenerale, this.tabDefinition, this.tabAjustement, this.tabCompteurBaseMontant, this.tabCompteurInterne, this.tabCompteurExterne);\n            this.pages.add(this.tabInfoGeneraleFormLayout, this.tabDefinitionFormLayout, this.tabAjustementFormLayout, this.tabCompteurBaseMontantFormLayout, this.tabCompteurInterneFormLayout, this.tabCompteurExterneFormLayout);        \n           \n            this.tabs.addSelectedChangeListener(event -> {\n                VaadinSession.getCurrent().setAttribute(CACHED_SELECTED_TAB_INDEX, this.tabs.getSelectedIndex());\n                this.showSelectedTab();\n            });\n           \n            if (VaadinSession.getCurrent().getAttribute(CACHED_SELECTED_TAB_INDEX) == null) {\n                VaadinSession.getCurrent().setAttribute(CACHED_SELECTED_TAB_INDEX, 0);\n            }\n           \n            this.tabs.setSelectedIndex((int)VaadinSession.getCurrent().getAttribute(CACHED_SELECTED_TAB_INDEX));\n            this.showSelectedTab();\n        } \n        catch (Exception e) \n        {\n            MessageDialogHelper.showAlertDialog(\"EditerRubriqueDialog.configureComponents\", e.toString());\n            e.printStackTrace();\n        }\n    }","cleancode":"private void configurecomponents() { try { this.tabs.addclassname(\"fichier-tab\"); this.tabs.setorientation(tabs.orientation.horizontal); this.tabs.setflexgrowforenclosedtabs(1); this.tabs.addthemevariants(tabsvariant.lumo_small); this.tabs.setwidthfull(); this.tabinfogenerale.setlabel(\"informations g\u00e9n\u00e9rales\"); this.tabdefinition.setlabel(\"d\u00e9finitions\"); this.tabajustement.setlabel(\"ajustement\"); this.tabcompteurbasemontant.setlabel(\"stockage des compteurs base et montant\"); this.tabcompteurinterne.setlabel(\"stockage des compteurs internes\"); this.tabcompteurexterne.setlabel(\"stockage des compteurs externes\"); this.pages.setsizefull(); this.tabinfogeneraleformlayout.addclassname(\"fichier-form\"); this.tabinfogeneraleformlayout.setsizefull(); this.tabinfogeneraleformlayout.setvisible(true); this.tabdefinitionformlayout.addclassname(\"fichier-form\"); this.tabdefinitionformlayout.setsizefull(); this.tabdefinitionformlayout.setvisible(true); this.tabajustementformlayout.addclassname(\"fichier-form\"); this.tabajustementformlayout.setsizefull(); this.tabajustementformlayout.setvisible(true); this.tabcompteurbasemontantformlayout.addclassname(\"fichier-form\"); this.tabcompteurbasemontantformlayout.setsizefull(); this.tabcompteurbasemontantformlayout.setvisible(false); this.tabcompteurinterneformlayout.addclassname(\"fichier-form\"); this.tabcompteurinterneformlayout.setsizefull(); this.tabcompteurinterneformlayout.setvisible(false); this.tabcompteurexterneformlayout.addclassname(\"fichier-form\"); this.tabcompteurexterneformlayout.setsizefull(); this.tabcompteurexterneformlayout.setvisible(false); this.txtnorubrique.setwidth(100, unit.pixels); this.txtnorubrique.setrequired(true); this.txtnorubrique.setrequiredindicatorvisible(true); this.txtnorubrique.addclassname(textfield_left_label); this.txtlibellerubrique.setwidth(350, unit.pixels); this.txtlibellerubrique.addclassname(textfield_left_label); this.txtlibellecourtrubrique.setwidth(350, unit.pixels); this.txtlibellecourtrubrique.addclassname(textfield_left_label); this.chkinactif.setautofocus(false); this.chkeditionfacture.setautofocus(true); this.chkeditionsynthetique.setautofocus(true); this.cbocodemodevalorisationrubrique.setwidth(350, unit.pixels); this.cbocodemodevalorisationrubrique.addclassname(combobox_left_label); this.cbocodemodevalorisationrubrique.setitemlabelgenerator(systememodevalorisationcommission::getlibellemodevalorisation); this.cbocodemodevalorisationrubrique.setrequired(true); this.cbocodemodevalorisationrubrique.setrequiredindicatorvisible(true); this.cbocodemodevalorisationrubrique.setclearbuttonvisible(true); this.cbocodemodevalorisationrubrique.setallowcustomvalue(false); this.cbocodemodevalorisationrubrique.setpreventinvalidinput(true); this.cbocodemodevalorisationrubrique.addvaluechangelistener(event -> { this.mycontrolsmanageaccordingtomodevalorisation(); }); this.txtmontantfixe.setwidth(100, unit.pixels); this.txtmontantfixe.setrequiredindicatorvisible(true); this.txtmontantfixe.addthemevariants(textfieldvariant.lumo_align_center); this.txtmontantfixe.setlocale(locale.french); this.txtmontantfixe.withnullvalueallowed(false); this.cbocodemodevalorisationbase.setwidth(350, unit.pixels); this.cbocodemodevalorisationbase.addclassname(combobox_left_label); this.cbocodemodevalorisationbase.setitemlabelgenerator(systememodevalorisationbasecommission::getlibellemodevalorisation); this.cbocodemodevalorisationbase.setrequired(true); this.cbocodemodevalorisationbase.setrequiredindicatorvisible(true); this.cbocodemodevalorisationbase.setclearbuttonvisible(true); this.cbocodemodevalorisationbase.setallowcustomvalue(false); this.cbocodemodevalorisationbase.setpreventinvalidinput(true); this.cbocodemodevalorisationbase.addvaluechangelistener(event -> { this.mycontrolsmanageaccordingtomodevalorisation(); }); this.txtbasefixe.setwidth(100, unit.pixels); this.txtbasefixe.setrequiredindicatorvisible(true); this.txtbasefixe.addthemevariants(textfieldvariant.lumo_align_center); this.txtbasefixe.setlocale(locale.french); this.txtbasefixe.withnullvalueallowed(false); this.cbocodemodevalorisationtaux.setwidth(350, unit.pixels); this.cbocodemodevalorisationtaux.addclassname(combobox_left_label); this.cbocodemodevalorisationtaux.setitemlabelgenerator(systememodevalorisationtauxcommission::getlibellemodevalorisation); this.cbocodemodevalorisationtaux.setrequired(true); this.cbocodemodevalorisationtaux.setrequiredindicatorvisible(true); this.cbocodemodevalorisationtaux.setclearbuttonvisible(true); this.cbocodemodevalorisationtaux.setallowcustomvalue(false); this.cbocodemodevalorisationtaux.setpreventinvalidinput(true); this.cbocodemodevalorisationtaux.addvaluechangelistener(event -> { this.mycontrolsmanageaccordingtomodevalorisation(); }); this.txttauxfixe.setwidth(100, unit.pixels); this.txttauxfixe.setrequiredindicatorvisible(true); this.txttauxfixe.addthemevariants(textfieldvariant.lumo_align_center); this.txttauxfixe.setlocale(locale.french); this.txttauxfixe.withnullvalueallowed(false); this.txtcoefficientmultiplicateur.setwidth(100, unit.pixels); this.txtcoefficientmultiplicateur.setrequiredindicatorvisible(true); this.txtcoefficientmultiplicateur.addthemevariants(textfieldvariant.lumo_align_center); this.txtcoefficientmultiplicateur.setlocale(locale.french); this.txtcoefficientmultiplicateur.withnullvalueallowed(false); this.cbocodetranche.setwidth(350, unit.pixels); this.cbocodetranche.addclassname(combobox_left_label); this.cbocodetranche.setitemlabelgenerator(tranchevaleur::getlibelletranche); this.cbocodetranche.setrequired(true); this.cbocodetranche.setrequiredindicatorvisible(true); this.cbocodetranche.setclearbuttonvisible(true); this.cbocodetranche.setallowcustomvalue(true); this.cbocodetranche.setpreventinvalidinput(true); this.cbocodetranche.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"la tranche de valeur choisie est actuellement d\u00e9sactiv\u00e9e. veuillez en saisir une autre.\"); this.cbocodetranche.setvalue(event.getoldvalue()); } } }); this.cbocodetranche.addcustomvaluesetlistener(event -> { this.cbocodetranche_notinlist(event.getdetail(), 50); }); this.cbocodevariablerubrique.setwidth(350, unit.pixels); this.cbocodevariablerubrique.addclassname(combobox_left_label); this.cbocodevariablerubrique.setitemlabelgenerator(variableservice::getlibellevariable); this.cbocodevariablerubrique.setrequired(true); this.cbocodevariablerubrique.setrequiredindicatorvisible(true); this.cbocodevariablerubrique.setclearbuttonvisible(true); this.cbocodevariablerubrique.setallowcustomvalue(true); this.cbocodevariablerubrique.setpreventinvalidinput(true); this.cbocodevariablerubrique.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"la variable choisie est actuellement d\u00e9sactiv\u00e9e. veuillez en saisir une autre.\"); this.cbocodevariablerubrique.setvalue(event.getoldvalue()); } } }); this.cbocodevariablerubrique.addcustomvaluesetlistener(event -> { this.cbocodevariablerubrique_notinlist(event.getdetail(), 50); }); this.cbocodeconstanterubrique.setwidth(350, unit.pixels); this.cbocodeconstanterubrique.addclassname(combobox_left_label); this.cbocodeconstanterubrique.setitemlabelgenerator(emploifonds::getlibelleconstante); this.cbocodeconstanterubrique.setrequired(true); this.cbocodeconstanterubrique.setrequiredindicatorvisible(true); this.cbocodeconstanterubrique.setclearbuttonvisible(true); this.cbocodeconstanterubrique.setallowcustomvalue(true); this.cbocodeconstanterubrique.setpreventinvalidinput(true); this.cbocodeconstanterubrique.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"la emploifonds choisie est actuellement d\u00e9sactiv\u00e9e. veuillez en saisir une autre.\"); this.cbocodeconstanterubrique.setvalue(event.getoldvalue()); } } }); this.cbocodeconstanterubrique.addcustomvaluesetlistener(event -> { this.cbocodeconstanterubrique_notinlist(event.getdetail(), 50); }); this.cbocodevariablebase.setwidth(350, unit.pixels); this.cbocodevariablebase.addclassname(combobox_left_label); this.cbocodevariablebase.setitemlabelgenerator(variableservice::getlibellevariable); this.cbocodevariablebase.setrequired(true); this.cbocodevariablebase.setrequiredindicatorvisible(true); this.cbocodevariablebase.setclearbuttonvisible(true); this.cbocodevariablebase.setallowcustomvalue(true); this.cbocodevariablebase.setpreventinvalidinput(true); this.cbocodevariablebase.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"la variable choisie est actuellement d\u00e9sactiv\u00e9e. veuillez en saisir une autre.\"); this.cbocodevariablebase.setvalue(event.getoldvalue()); } } }); this.cbocodevariablebase.addcustomvaluesetlistener(event -> { this.cbocodevariablebase_notinlist(event.getdetail(), 50); }); this.cbocodeconstantebase.setwidth(350, unit.pixels); this.cbocodeconstantebase.addclassname(combobox_left_label); this.cbocodeconstantebase.setitemlabelgenerator(emploifonds::getlibelleconstante); this.cbocodeconstantebase.setrequired(true); this.cbocodeconstantebase.setrequiredindicatorvisible(true); this.cbocodeconstantebase.setclearbuttonvisible(true); this.cbocodeconstantebase.setallowcustomvalue(true); this.cbocodeconstantebase.setpreventinvalidinput(true); this.cbocodeconstantebase.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"la emploifonds choisie est actuellement d\u00e9sactiv\u00e9e. veuillez en saisir une autre.\"); this.cbocodeconstantebase.setvalue(event.getoldvalue()); } } }); this.cbocodeconstantebase.addcustomvaluesetlistener(event -> { this.cbocodeconstantebase_notinlist(event.getdetail(), 50); }); this.cbocodevariabletaux.setwidth(350, unit.pixels); this.cbocodevariabletaux.addclassname(combobox_left_label); this.cbocodevariabletaux.setitemlabelgenerator(variableservice::getlibellevariable); this.cbocodevariabletaux.setrequired(true); this.cbocodevariabletaux.setrequiredindicatorvisible(true); this.cbocodevariabletaux.setclearbuttonvisible(true); this.cbocodevariabletaux.setallowcustomvalue(true); this.cbocodevariabletaux.setpreventinvalidinput(true); this.cbocodevariabletaux.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"la variable choisie est actuellement d\u00e9sactiv\u00e9e. veuillez en saisir une autre.\"); this.cbocodevariabletaux.setvalue(event.getoldvalue()); } } }); this.cbocodevariabletaux.addcustomvaluesetlistener(event -> { this.cbocodevariabletaux_notinlist(event.getdetail(), 50); }); this.cbocodeconstantetaux.setwidth(350, unit.pixels); this.cbocodeconstantetaux.addclassname(combobox_left_label); this.cbocodeconstantetaux.setitemlabelgenerator(emploifonds::getlibelleconstante); this.cbocodeconstantetaux.setrequired(true); this.cbocodeconstantetaux.setrequiredindicatorvisible(true); this.cbocodeconstantetaux.setclearbuttonvisible(true); this.cbocodeconstantetaux.setallowcustomvalue(true); this.cbocodeconstantetaux.setpreventinvalidinput(true); this.cbocodeconstantetaux.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"la emploifonds choisie est actuellement d\u00e9sactiv\u00e9e. veuillez en saisir une autre.\"); this.cbocodeconstantetaux.setvalue(event.getoldvalue()); } } }); this.cbocodeconstantetaux.addcustomvaluesetlistener(event -> { this.cbocodeconstantetaux_notinlist(event.getdetail(), 50); }); this.cbocodevaleurminimum.setwidth(350, unit.pixels); this.cbocodevaleurminimum.addclassname(combobox_left_label); this.cbocodevaleurminimum.setitemlabelgenerator(systemevaleurminmax::getlibellevaleur); this.cbocodevaleurminimum.setrequired(true); this.cbocodevaleurminimum.setrequiredindicatorvisible(true); this.cbocodevaleurminimum.setclearbuttonvisible(true); this.cbocodevaleurminimum.setallowcustomvalue(false); this.cbocodevaleurminimum.setpreventinvalidinput(true); this.txtvaleurminimumfixe.setwidth(100, unit.pixels); this.txtvaleurminimumfixe.setrequiredindicatorvisible(true); this.txtvaleurminimumfixe.addthemevariants(textfieldvariant.lumo_align_center); this.txtvaleurminimumfixe.setlocale(locale.french); this.txtvaleurminimumfixe.withnullvalueallowed(false); this.cbocodevaleurmaximum.setwidth(350, unit.pixels); this.cbocodevaleurmaximum.addclassname(combobox_left_label); this.cbocodevaleurmaximum.setitemlabelgenerator(systemevaleurminmax::getlibellevaleur); this.cbocodevaleurmaximum.setrequired(true); this.cbocodevaleurmaximum.setrequiredindicatorvisible(true); this.cbocodevaleurmaximum.setclearbuttonvisible(true); this.cbocodevaleurmaximum.setallowcustomvalue(false); this.cbocodevaleurmaximum.setpreventinvalidinput(true); this.txtvaleurmaximumfixe.setwidth(100, unit.pixels); this.txtvaleurmaximumfixe.setrequiredindicatorvisible(true); this.txtvaleurmaximumfixe.addthemevariants(textfieldvariant.lumo_align_center); this.txtvaleurmaximumfixe.setlocale(locale.french); this.txtvaleurmaximumfixe.withnullvalueallowed(false); this.cbocodeconstantevaleurminimum.setwidth(350, unit.pixels); this.cbocodeconstantevaleurminimum.addclassname(combobox_left_label); this.cbocodeconstantevaleurminimum.setitemlabelgenerator(emploifonds::getlibelleconstante); this.cbocodeconstantevaleurminimum.setrequired(true); this.cbocodeconstantevaleurminimum.setrequiredindicatorvisible(true); this.cbocodeconstantevaleurminimum.setclearbuttonvisible(true); this.cbocodeconstantevaleurminimum.setallowcustomvalue(true); this.cbocodeconstantevaleurminimum.setpreventinvalidinput(true); this.cbocodeconstantevaleurminimum.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"la emploifonds choisie est actuellement d\u00e9sactiv\u00e9e. veuillez en saisir une autre.\"); this.cbocodeconstantevaleurminimum.setvalue(event.getoldvalue()); } } }); this.cbocodeconstantevaleurminimum.addcustomvaluesetlistener(event -> { this.cbocodeconstantevaleurminimum_notinlist(event.getdetail(), 50); }); this.cbocodeconstantevaleurmaximum.setwidth(350, unit.pixels); this.cbocodeconstantevaleurmaximum.addclassname(combobox_left_label); this.cbocodeconstantevaleurmaximum.setitemlabelgenerator(emploifonds::getlibelleconstante); this.cbocodeconstantevaleurmaximum.setrequired(true); this.cbocodeconstantevaleurmaximum.setrequiredindicatorvisible(true); this.cbocodeconstantevaleurmaximum.setclearbuttonvisible(true); this.cbocodeconstantevaleurmaximum.setallowcustomvalue(true); this.cbocodeconstantevaleurmaximum.setpreventinvalidinput(true); this.cbocodeconstantevaleurmaximum.addvaluechangelistener(event -> { if (event.getvalue() != null) { if (event.getvalue().isinactif() == true) { messagedialoghelper.showwarningdialog(\"erreur de saisie\", \"la emploifonds choisie est actuellement d\u00e9sactiv\u00e9e. veuillez en saisir une autre.\"); this.cbocodeconstantevaleurmaximum.setvalue(event.getoldvalue()); } } }); this.cbocodeconstantevaleurmaximum.addcustomvaluesetlistener(event -> { this.cbocodeconstantevaleurmaximum_notinlist(event.getdetail(), 50); }); this.cbocodemodeabattement.setwidth(350, unit.pixels); this.cbocodemodeabattement.addclassname(combobox_left_label); this.cbocodemodeabattement.setitemlabelgenerator(systememodeabattement::getlibellemodeabattement); this.cbocodemodeabattement.setrequired(true); this.cbocodemodeabattement.setrequiredindicatorvisible(true); this.cbocodemodeabattement.setclearbuttonvisible(true); this.cbocodemodeabattement.setallowcustomvalue(false); this.cbocodemodeabattement.setpreventinvalidinput(true); this.txtabattementfixe.setwidth(100, unit.pixels); this.txtabattementfixe.setrequiredindicatorvisible(true); this.txtabattementfixe.addthemevariants(textfieldvariant.lumo_align_center); this.txtabattementfixe.setlocale(locale.french); this.txtabattementfixe.withnullvalueallowed(false); this.cbocodemodearrondissement.setwidth(350, unit.pixels); this.cbocodemodearrondissement.addclassname(combobox_left_label); this.cbocodemodearrondissement.setitemlabelgenerator(systememodearrondissement::getlibellemodearrondissement); this.cbocodemodearrondissement.setrequired(true); this.cbocodemodearrondissement.setrequiredindicatorvisible(true); this.cbocodemodearrondissement.setclearbuttonvisible(true); this.cbocodemodearrondissement.setallowcustomvalue(false); this.cbocodemodearrondissement.setpreventinvalidinput(true); this.txtnombrechiffrearrondissement.setwidth(100, unit.pixels); this.txtnombrechiffrearrondissement.setrequiredindicatorvisible(true); this.txtnombrechiffrearrondissement.addthemevariants(textfieldvariant.lumo_align_center); this.txtnombrechiffrearrondissement.setlocale(locale.french); this.txtnombrechiffrearrondissement.withnullvalueallowed(false); this.cbocodemodestockagecompteurbase01.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurbase01.addclassname(combobox_left_label); this.cbocodemodestockagecompteurbase01.setitemlabelgenerator(systememodestockagebasemontant::getlibellemodestockage); this.cbocodemodestockagecompteurbase01.setrequired(true); this.cbocodemodestockagecompteurbase01.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurbase01.setclearbuttonvisible(true); this.cbocodemodestockagecompteurbase01.setallowcustomvalue(false); this.cbocodemodestockagecompteurbase01.setpreventinvalidinput(true); this.cbocodemodestockagecompteurbase02.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurbase02.addclassname(combobox_left_label); this.cbocodemodestockagecompteurbase02.setitemlabelgenerator(systememodestockagebasemontant::getlibellemodestockage); this.cbocodemodestockagecompteurbase02.setrequired(true); this.cbocodemodestockagecompteurbase02.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurbase02.setclearbuttonvisible(true); this.cbocodemodestockagecompteurbase02.setallowcustomvalue(false); this.cbocodemodestockagecompteurbase02.setpreventinvalidinput(true); this.cbocodemodestockagecompteurbase03.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurbase03.addclassname(combobox_left_label); this.cbocodemodestockagecompteurbase03.setitemlabelgenerator(systememodestockagebasemontant::getlibellemodestockage); this.cbocodemodestockagecompteurbase03.setrequired(true); this.cbocodemodestockagecompteurbase03.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurbase03.setclearbuttonvisible(true); this.cbocodemodestockagecompteurbase03.setallowcustomvalue(false); this.cbocodemodestockagecompteurbase03.setpreventinvalidinput(true); this.cbocodemodestockagecompteurbase04.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurbase04.addclassname(combobox_left_label); this.cbocodemodestockagecompteurbase04.setitemlabelgenerator(systememodestockagebasemontant::getlibellemodestockage); this.cbocodemodestockagecompteurbase04.setrequired(true); this.cbocodemodestockagecompteurbase04.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurbase04.setclearbuttonvisible(true); this.cbocodemodestockagecompteurbase04.setallowcustomvalue(false); this.cbocodemodestockagecompteurbase04.setpreventinvalidinput(true); this.cbocodemodestockagecompteurmontant01.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurmontant01.addclassname(combobox_left_label); this.cbocodemodestockagecompteurmontant01.setitemlabelgenerator(systememodestockagebasemontant::getlibellemodestockage); this.cbocodemodestockagecompteurmontant01.setrequired(true); this.cbocodemodestockagecompteurmontant01.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurmontant01.setclearbuttonvisible(true); this.cbocodemodestockagecompteurmontant01.setallowcustomvalue(false); this.cbocodemodestockagecompteurmontant01.setpreventinvalidinput(true); this.cbocodemodestockagecompteurmontant02.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurmontant02.addclassname(combobox_left_label); this.cbocodemodestockagecompteurmontant02.setitemlabelgenerator(systememodestockagebasemontant::getlibellemodestockage); this.cbocodemodestockagecompteurmontant02.setrequired(true); this.cbocodemodestockagecompteurmontant02.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurmontant02.setclearbuttonvisible(true); this.cbocodemodestockagecompteurmontant02.setallowcustomvalue(false); this.cbocodemodestockagecompteurmontant02.setpreventinvalidinput(true); this.cbocodemodestockagecompteurmontant03.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurmontant03.addclassname(combobox_left_label); this.cbocodemodestockagecompteurmontant03.setitemlabelgenerator(systememodestockagebasemontant::getlibellemodestockage); this.cbocodemodestockagecompteurmontant03.setrequired(true); this.cbocodemodestockagecompteurmontant03.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurmontant03.setclearbuttonvisible(true); this.cbocodemodestockagecompteurmontant03.setallowcustomvalue(false); this.cbocodemodestockagecompteurmontant03.setpreventinvalidinput(true); this.cbocodemodestockagecompteurmontant04.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurmontant04.addclassname(combobox_left_label); this.cbocodemodestockagecompteurmontant04.setitemlabelgenerator(systememodestockagebasemontant::getlibellemodestockage); this.cbocodemodestockagecompteurmontant04.setrequired(true); this.cbocodemodestockagecompteurmontant04.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurmontant04.setclearbuttonvisible(true); this.cbocodemodestockagecompteurmontant04.setallowcustomvalue(false); this.cbocodemodestockagecompteurmontant04.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne01.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne01.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne01.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne01.setrequired(true); this.cbocodemodestockagecompteurinterne01.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne01.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne01.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne01.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne02.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne02.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne02.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne02.setrequired(true); this.cbocodemodestockagecompteurinterne02.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne02.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne02.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne02.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne03.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne03.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne03.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne03.setrequired(true); this.cbocodemodestockagecompteurinterne03.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne03.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne03.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne03.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne04.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne04.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne04.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne04.setrequired(true); this.cbocodemodestockagecompteurinterne04.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne04.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne04.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne04.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne05.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne05.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne05.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne05.setrequired(true); this.cbocodemodestockagecompteurinterne05.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne05.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne05.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne05.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne06.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne06.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne06.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne06.setrequired(true); this.cbocodemodestockagecompteurinterne06.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne06.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne06.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne06.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne07.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne07.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne07.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne07.setrequired(true); this.cbocodemodestockagecompteurinterne07.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne07.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne07.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne07.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne08.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne08.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne08.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne08.setrequired(true); this.cbocodemodestockagecompteurinterne08.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne08.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne08.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne08.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne09.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne09.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne09.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne09.setrequired(true); this.cbocodemodestockagecompteurinterne09.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne09.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne09.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne09.setpreventinvalidinput(true); this.cbocodemodestockagecompteurinterne10.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurinterne10.addclassname(combobox_left_label); this.cbocodemodestockagecompteurinterne10.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurinterne10.setrequired(true); this.cbocodemodestockagecompteurinterne10.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurinterne10.setclearbuttonvisible(true); this.cbocodemodestockagecompteurinterne10.setallowcustomvalue(false); this.cbocodemodestockagecompteurinterne10.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne01.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne01.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne01.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne01.setrequired(true); this.cbocodemodestockagecompteurexterne01.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne01.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne01.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne01.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne02.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne02.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne02.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne02.setrequired(true); this.cbocodemodestockagecompteurexterne02.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne02.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne02.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne02.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne03.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne03.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne03.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne03.setrequired(true); this.cbocodemodestockagecompteurexterne03.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne03.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne03.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne03.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne04.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne04.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne04.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne04.setrequired(true); this.cbocodemodestockagecompteurexterne04.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne04.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne04.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne04.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne05.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne05.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne05.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne05.setrequired(true); this.cbocodemodestockagecompteurexterne05.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne05.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne05.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne05.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne06.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne06.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne06.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne06.setrequired(true); this.cbocodemodestockagecompteurexterne06.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne06.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne06.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne06.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne07.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne07.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne07.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne07.setrequired(true); this.cbocodemodestockagecompteurexterne07.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne07.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne07.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne07.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne08.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne08.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne08.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne08.setrequired(true); this.cbocodemodestockagecompteurexterne08.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne08.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne08.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne08.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne09.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne09.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne09.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne09.setrequired(true); this.cbocodemodestockagecompteurexterne09.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne09.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne09.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne09.setpreventinvalidinput(true); this.cbocodemodestockagecompteurexterne10.setwidth(350, unit.pixels); this.cbocodemodestockagecompteurexterne10.addclassname(combobox_left_label); this.cbocodemodestockagecompteurexterne10.setitemlabelgenerator(systememodestockageinterneexterne::getlibellemodestockage); this.cbocodemodestockagecompteurexterne10.setrequired(true); this.cbocodemodestockagecompteurexterne10.setrequiredindicatorvisible(true); this.cbocodemodestockagecompteurexterne10.setclearbuttonvisible(true); this.cbocodemodestockagecompteurexterne10.setallowcustomvalue(false); this.cbocodemodestockagecompteurexterne10.setpreventinvalidinput(true); label lblnorubriquevalidationstatus = new label(); this.binder.forfield(this.txtnorubrique) .asrequired(\"la saisie du n\u00b0 rubrique est obligatoire. veuillez saisir le n\u00b0 rubrique.\") .withvalidator(text -> text != null && text.length() <= 10, \"n\u00b0 rubrique ne peut contenir au plus 10 caract\u00e8res\") .withvalidationstatushandler(status -> {lblnorubriquevalidationstatus.settext(status.getmessage().orelse(\"\")); lblnorubriquevalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getnorubrique, rubrique::setnorubrique); label lbllibellerubriquevalidationstatus = new label(); this.binder.forfield(this.txtlibellerubrique) .asrequired(\"la saisie du libell\u00e9 de la rubrique est obligatoire. veuillez saisir le libell\u00e9 de la rubrique.\") .withvalidator(text -> text.length() <= 50, \"libell\u00e9 rubrique ne peut contenir au plus 50 caract\u00e8res.\") .withvalidationstatushandler(status -> {lbllibellerubriquevalidationstatus.settext(status.getmessage().orelse(\"\")); lbllibellerubriquevalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getlibellerubrique, rubrique::setlibellerubrique); label lbllibellecourtrubriquevalidationstatus = new label(); this.binder.forfield(this.txtlibellecourtrubrique) .asrequired(\"la saisie du libell\u00e9 abr\u00e9g\u00e9 de la rubrique est obligatoire. veuillez saisir le libell\u00e9 de la rubrique.\") .withvalidator(text -> text.length() <= 30, \"libell\u00e9 abr\u00e9g\u00e9 rubrique ne peut contenir au plus 30 caract\u00e8res.\") .withvalidationstatushandler(status -> {lbllibellecourtrubriquevalidationstatus.settext(status.getmessage().orelse(\"\")); lbllibellecourtrubriquevalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getlibellecourtrubrique, rubrique::setlibellecourtrubrique); this.binder.forfield(this.chkinactif) .bind(rubrique::isinactif, rubrique::setinactif); this.binder.forfield(this.chkeditionfacture) .bind(rubrique::iseditionfacture, rubrique::seteditionfacture); this.binder.forfield(this.chkeditionsynthetique) .bind(rubrique::iseditionsynthetique, rubrique::seteditionsynthetique); label lblmodevalorisationrubriquevalidationstatus = new label(); this.binder.forfield(this.cbocodemodevalorisationrubrique) .asrequired(\"la saisie du mode de valorisation de la rubrique est requise. veuillez s\u00e9lectionner un mode de valorisation de la rubrique\") .bind(rubrique::getmodevalorisationrubrique, rubrique::setmodevalorisationrubrique); label lblmontantfixevalidationstatus = new label(); this.binder.forfield(this.txtmontantfixe) .withvalidationstatushandler(status -> {lblmontantfixevalidationstatus.settext(status.getmessage().orelse(\"\")); lblmontantfixevalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getmontantfixe, rubrique::setmontantfixe); label lblmodevalorisationbasevalidationstatus = new label(); this.binder.forfield(this.cbocodemodevalorisationbase) .bind(rubrique::getmodevalorisationbase, rubrique::setmodevalorisationbase); label lblbasefixevalidationstatus = new label(); this.binder.forfield(this.txtbasefixe) .withvalidationstatushandler(status -> {lblbasefixevalidationstatus.settext(status.getmessage().orelse(\"\")); lblbasefixevalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getbasefixe, rubrique::setbasefixe); label lblmodevalorisationtauxvalidationstatus = new label(); this.binder.forfield(this.cbocodemodevalorisationtaux) .bind(rubrique::getmodevalorisationtaux, rubrique::setmodevalorisationtaux); label lbltauxfixevalidationstatus = new label(); this.binder.forfield(this.txttauxfixe) .withvalidationstatushandler(status -> {lbltauxfixevalidationstatus.settext(status.getmessage().orelse(\"\")); lbltauxfixevalidationstatus.setvisible(status.iserror());}) .bind(rubrique::gettauxfixe, rubrique::settauxfixe); label lblcoefficientmultiplicateurvalidationstatus = new label(); this.binder.forfield(this.txtcoefficientmultiplicateur) .asrequired(\"la saisie du coefficient multiplicateur est obligatoire. veuillez saisir le coefficient multiplicateur.\") .withvalidationstatushandler(status -> {lblcoefficientmultiplicateurvalidationstatus.settext(status.getmessage().orelse(\"\")); lblcoefficientmultiplicateurvalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getcoefficientmultiplicateur, rubrique::setcoefficientmultiplicateur); label lbltranchevaleurvalidationstatus = new label(); this.binder.forfield(this.cbocodetranche) .bind(rubrique::gettranche, rubrique::settranche); label lblvariablerubriquevalidationstatus = new label(); this.binder.forfield(this.cbocodevariablerubrique) .bind(rubrique::getvariablerubrique, rubrique::setvariablerubrique); label lblconstanterubriquevalidationstatus = new label(); this.binder.forfield(this.cbocodeconstanterubrique) .bind(rubrique::getconstanterubrique, rubrique::setconstanterubrique); label lblvariablebasevalidationstatus = new label(); this.binder.forfield(this.cbocodevariablebase) .bind(rubrique::getvariablebase, rubrique::setvariablebase); label lblconstantebasevalidationstatus = new label(); this.binder.forfield(this.cbocodeconstantebase) .bind(rubrique::getconstantebase, rubrique::setconstantebase); label lblvariabletauxvalidationstatus = new label(); this.binder.forfield(this.cbocodevariabletaux) .bind(rubrique::getvariabletaux, rubrique::setvariabletaux); label lblconstantetauxvalidationstatus = new label(); this.binder.forfield(this.cbocodeconstantetaux) .bind(rubrique::getconstantetaux, rubrique::setconstantetaux); label lblvaleurminimumvalidationstatus = new label(); this.binder.forfield(this.cbocodevaleurminimum) .bind(rubrique::getvaleurminimum, rubrique::setvaleurminimum); label lblvaleurminimumfixevalidationstatus = new label(); this.binder.forfield(this.txtvaleurminimumfixe) .withvalidationstatushandler(status -> {lblvaleurminimumfixevalidationstatus.settext(status.getmessage().orelse(\"\")); lblvaleurminimumfixevalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getvaleurminimumfixe, rubrique::setvaleurminimumfixe); label lblvaleurmaximumvalidationstatus = new label(); this.binder.forfield(this.cbocodevaleurmaximum) .bind(rubrique::getvaleurmaximum, rubrique::setvaleurmaximum); label lblvaleurmaximumfixevalidationstatus = new label(); this.binder.forfield(this.txtvaleurmaximumfixe) .withvalidationstatushandler(status -> {lblvaleurmaximumfixevalidationstatus.settext(status.getmessage().orelse(\"\")); lblvaleurmaximumfixevalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getvaleurmaximumfixe, rubrique::setvaleurmaximumfixe); label lblconstantevaleurminimumvalidationstatus = new label(); this.binder.forfield(this.cbocodeconstantevaleurminimum) .bind(rubrique::getconstantevaleurminimum, rubrique::setconstantevaleurminimum); label lblconstantevaleurmaximumvalidationstatus = new label(); this.binder.forfield(this.cbocodeconstantevaleurmaximum) .bind(rubrique::getconstantevaleurmaximum, rubrique::setconstantevaleurmaximum); label lblmodeabattementvalidationstatus = new label(); this.binder.forfield(this.cbocodemodeabattement) .bind(rubrique::getmodeabattement, rubrique::setmodeabattement); label lblabattementfixevalidationstatus = new label(); this.binder.forfield(this.txtabattementfixe) .withvalidationstatushandler(status -> {lblabattementfixevalidationstatus.settext(status.getmessage().orelse(\"\")); lblabattementfixevalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getabattementfixe, rubrique::setabattementfixe); label lblmodearrondissementvalidationstatus = new label(); this.binder.forfield(this.cbocodemodearrondissement) .bind(rubrique::getmodearrondissement, rubrique::setmodearrondissement); label lblnombrechiffrearrondissementvalidationstatus = new label(); this.binder.forfield(this.txtnombrechiffrearrondissement) .withvalidationstatushandler(status -> {lblnombrechiffrearrondissementvalidationstatus.settext(status.getmessage().orelse(\"\")); lblnombrechiffrearrondissementvalidationstatus.setvisible(status.iserror());}) .bind(rubrique::getnombrechiffrearrondissement, rubrique::setnombrechiffrearrondissement); label lblmodestockagecompteurbase01validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurbase01) .bind(rubrique::getmodestockagecompteurbase01, rubrique::setmodestockagecompteurbase01); label lblmodestockagecompteurbase02validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurbase02) .bind(rubrique::getmodestockagecompteurbase02, rubrique::setmodestockagecompteurbase02); label lblmodestockagecompteurbase03validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurbase03) .bind(rubrique::getmodestockagecompteurbase03, rubrique::setmodestockagecompteurbase03); label lblmodestockagecompteurbase04validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurbase04) .bind(rubrique::getmodestockagecompteurbase04, rubrique::setmodestockagecompteurbase04); label lblmodestockagecompteurmontant01validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurmontant01) .bind(rubrique::getmodestockagecompteurmontant01, rubrique::setmodestockagecompteurmontant01); label lblmodestockagecompteurmontant02validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurmontant02) .bind(rubrique::getmodestockagecompteurmontant02, rubrique::setmodestockagecompteurmontant02); label lblmodestockagecompteurmontant03validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurmontant03) .bind(rubrique::getmodestockagecompteurmontant03, rubrique::setmodestockagecompteurmontant03); label lblmodestockagecompteurmontant04validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurmontant04) .bind(rubrique::getmodestockagecompteurmontant04, rubrique::setmodestockagecompteurmontant04); label lblmodestockagecompteurinterne01validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne01) .bind(rubrique::getmodestockagecompteurinterne01, rubrique::setmodestockagecompteurinterne01); label lblmodestockagecompteurinterne02validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne02) .bind(rubrique::getmodestockagecompteurinterne02, rubrique::setmodestockagecompteurinterne02); label lblmodestockagecompteurinterne03validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne03) .bind(rubrique::getmodestockagecompteurinterne03, rubrique::setmodestockagecompteurinterne03); label lblmodestockagecompteurinterne04validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne04) .bind(rubrique::getmodestockagecompteurinterne04, rubrique::setmodestockagecompteurinterne04); label lblmodestockagecompteurinterne05validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne05) .bind(rubrique::getmodestockagecompteurinterne05, rubrique::setmodestockagecompteurinterne05); label lblmodestockagecompteurinterne06validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne06) .bind(rubrique::getmodestockagecompteurinterne06, rubrique::setmodestockagecompteurinterne06); label lblmodestockagecompteurinterne07validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne07) .bind(rubrique::getmodestockagecompteurinterne07, rubrique::setmodestockagecompteurinterne07); label lblmodestockagecompteurinterne08validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne08) .bind(rubrique::getmodestockagecompteurinterne08, rubrique::setmodestockagecompteurinterne08); label lblmodestockagecompteurinterne09validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne09) .bind(rubrique::getmodestockagecompteurinterne09, rubrique::setmodestockagecompteurinterne09); label lblmodestockagecompteurinterne10validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurinterne10) .bind(rubrique::getmodestockagecompteurinterne10, rubrique::setmodestockagecompteurinterne10); label lblmodestockagecompteurexterne01validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne01) .bind(rubrique::getmodestockagecompteurexterne01, rubrique::setmodestockagecompteurexterne01); label lblmodestockagecompteurexterne02validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne02) .bind(rubrique::getmodestockagecompteurexterne02, rubrique::setmodestockagecompteurexterne02); label lblmodestockagecompteurexterne03validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne03) .bind(rubrique::getmodestockagecompteurexterne03, rubrique::setmodestockagecompteurexterne03); label lblmodestockagecompteurexterne04validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne04) .bind(rubrique::getmodestockagecompteurexterne04, rubrique::setmodestockagecompteurexterne04); label lblmodestockagecompteurexterne05validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne05) .bind(rubrique::getmodestockagecompteurexterne05, rubrique::setmodestockagecompteurexterne05); label lblmodestockagecompteurexterne06validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne06) .bind(rubrique::getmodestockagecompteurexterne06, rubrique::setmodestockagecompteurexterne06); label lblmodestockagecompteurexterne07validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne07) .bind(rubrique::getmodestockagecompteurexterne07, rubrique::setmodestockagecompteurexterne07); label lblmodestockagecompteurexterne08validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne08) .bind(rubrique::getmodestockagecompteurexterne08, rubrique::setmodestockagecompteurexterne08); label lblmodestockagecompteurexterne09validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne09) .bind(rubrique::getmodestockagecompteurexterne09, rubrique::setmodestockagecompteurexterne09); label lblmodestockagecompteurexterne10validationstatus = new label(); this.binder.forfield(this.cbocodemodestockagecompteurexterne10) .bind(rubrique::getmodestockagecompteurexterne10, rubrique::setmodestockagecompteurexterne10); this.tabinfogeneraleformlayout.addformitem(this.txtnorubrique, \"n\u00b0 rubrique :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabinfogeneraleformlayout.addformitem(this.txtlibellerubrique, \"libell\u00e9 rubrique :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabinfogeneraleformlayout.addformitem(this.txtlibellecourtrubrique, \"libell\u00e9 abr\u00e9g\u00e9 rubrique :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabinfogeneraleformlayout.addformitem(this.chkinactif, \"inactif :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabinfogeneraleformlayout.addformitem(this.chkeditionfacture, \"edition facture :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabinfogeneraleformlayout.addformitem(this.chkeditionsynthetique, \"edition synth\u00e9tique :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodemodevalorisationrubrique, \"mode valorisation rubrique :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.txtmontantfixe, \"montant fixe :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodemodevalorisationbase, \"mode d\u00e9termination base :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.txtbasefixe, \"basefixe :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodemodevalorisationtaux, \"mode d\u00e9termination taux :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.txttauxfixe, \"taux fixe :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.txtcoefficientmultiplicateur, \"coefficient multiplicateur :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodetranche, \"tranche :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodevariablerubrique, \"variable rubrique :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodeconstanterubrique, \"emploifonds rubrique :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodevariablebase, \"variable base :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodeconstantebase, \"emploifonds base :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodevariabletaux, \"variable taux :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabdefinitionformlayout.addformitem(this.cbocodeconstantetaux, \"emploifonds taux :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.cbocodevaleurminimum, \"valeur minimum :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.txtvaleurminimumfixe, \"valeur minimum fixe :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.cbocodevaleurmaximum, \"titre civilit\u00e9 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.txtvaleurmaximumfixe, \"valeur maximum fixe :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.cbocodeconstantevaleurminimum, \"emploifonds valeur minimum :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.cbocodeconstantevaleurmaximum, \"emploifonds valeur maximum :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.cbocodemodeabattement, \"mode abattement :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.txtabattementfixe, \"abattement fixe :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.cbocodemodearrondissement, \"mode arrondissement :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabajustementformlayout.addformitem(this.txtnombrechiffrearrondissement, \"nombre chiffre arrondissement :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurbasemontantformlayout.addformitem(this.cbocodemodestockagecompteurbase01, \"compteur base 01 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurbasemontantformlayout.addformitem(this.cbocodemodestockagecompteurbase02, \"compteur base 02 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurbasemontantformlayout.addformitem(this.cbocodemodestockagecompteurbase03, \"compteur base 03 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurbasemontantformlayout.addformitem(this.cbocodemodestockagecompteurbase04, \"compteur base 04 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurbasemontantformlayout.addformitem(this.cbocodemodestockagecompteurmontant01, \"compteur montant 01 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurbasemontantformlayout.addformitem(this.cbocodemodestockagecompteurmontant02, \"compteur montant 02 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurbasemontantformlayout.addformitem(this.cbocodemodestockagecompteurmontant03, \"compteur montant 03 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurbasemontantformlayout.addformitem(this.cbocodemodestockagecompteurmontant04, \"compteur montant 04 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne01, \"compteur interne 01 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne02, \"compteur interne 02 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne03, \"compteur interne 03 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne04, \"compteur interne 04 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne05, \"compteur interne 05 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne06, \"compteur interne 06 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne07, \"compteur interne 07 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne08, \"compteur interne 08 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne09, \"compteur interne 09 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurinterneformlayout.addformitem(this.cbocodemodestockagecompteurinterne10, \"compteur interne 10 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne01, \"compteur externe 01 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne02, \"compteur externe 02 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne03, \"compteur externe 03 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne04, \"compteur externe 04 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne05, \"compteur externe 05 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne06, \"compteur externe 06 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne07, \"compteur externe 07 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne08, \"compteur externe 08 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne09, \"compteur externe 09 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); this.tabcompteurexterneformlayout.addformitem(this.cbocodemodestockagecompteurexterne10, \"compteur externe 10 :\").getstyle().set(\"--vaadin-form-item-label-width\", form_item_label_width200); tabinfogeneraleformlayout.setresponsivesteps(new formlayout.responsivestep(\"0\", 1, formlayout.responsivestep.labelsposition.top), new formlayout.responsivestep(panel_flex_basis, 2, formlayout.responsivestep.labelsposition.aside)); tabdefinitionformlayout.setresponsivesteps(new formlayout.responsivestep(\"0\", 1, formlayout.responsivestep.labelsposition.top), new formlayout.responsivestep(panel_flex_basis, 2, formlayout.responsivestep.labelsposition.aside)); tabajustementformlayout.setresponsivesteps(new formlayout.responsivestep(\"0\", 1, formlayout.responsivestep.labelsposition.top), new formlayout.responsivestep(panel_flex_basis, 2, formlayout.responsivestep.labelsposition.aside)); this.tabcompteurbasemontantformlayout.setresponsivesteps(new formlayout.responsivestep(\"0\", 1, formlayout.responsivestep.labelsposition.top), new formlayout.responsivestep(panel_flex_basis, 2, formlayout.responsivestep.labelsposition.aside)); this.tabcompteurinterneformlayout.setresponsivesteps(new formlayout.responsivestep(\"0\", 1, formlayout.responsivestep.labelsposition.top), new formlayout.responsivestep(panel_flex_basis, 2, formlayout.responsivestep.labelsposition.aside)); this.tabcompteurexterneformlayout.setresponsivesteps(new formlayout.responsivestep(\"0\", 1, formlayout.responsivestep.labelsposition.top), new formlayout.responsivestep(panel_flex_basis, 2, formlayout.responsivestep.labelsposition.aside)); this.tabstopages.put(this.tabinfogenerale, this.tabinfogeneraleformlayout); this.tabstopages.put(this.tabdefinition, this.tabdefinitionformlayout); this.tabstopages.put(this.tabajustement, this.tabajustementformlayout); this.tabstopages.put(this.tabcompteurbasemontant, this.tabcompteurbasemontantformlayout); this.tabstopages.put(this.tabcompteurinterne, this.tabcompteurinterneformlayout); this.tabstopages.put(this.tabcompteurexterne, this.tabcompteurexterneformlayout); this.tabs.add(this.tabinfogenerale, this.tabdefinition, this.tabajustement, this.tabcompteurbasemontant, this.tabcompteurinterne, this.tabcompteurexterne); this.pages.add(this.tabinfogeneraleformlayout, this.tabdefinitionformlayout, this.tabajustementformlayout, this.tabcompteurbasemontantformlayout, this.tabcompteurinterneformlayout, this.tabcompteurexterneformlayout); this.tabs.addselectedchangelistener(event -> { vaadinsession.getcurrent().setattribute(cached_selected_tab_index, this.tabs.getselectedindex()); this.showselectedtab(); }); if (vaadinsession.getcurrent().getattribute(cached_selected_tab_index) == null) { vaadinsession.getcurrent().setattribute(cached_selected_tab_index, 0); } this.tabs.setselectedindex((int)vaadinsession.getcurrent().getattribute(cached_selected_tab_index)); this.showselectedtab(); } catch (exception e) { messagedialoghelper.showalertdialog(\"editerrubriquedialog.configurecomponents\", e.tostring()); e.printstacktrace(); } }","repo":"jdissou\/sigdep01_01","label":[1,0,0,0]}
{"id":15434,"original_code":"@JsonGetter(\"name\")\n    public String getName ( ) { \n        return this.name;\n    }","code_wo_comment":"@JsonGetter(\"name\")\n    public String getName ( ) { \n        return this.name;\n    }","cleancode":"@jsongetter(\"name\") public string getname ( ) { return this.name; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15435,"original_code":"@JsonSetter(\"name\")\n    public void setName (String value) { \n        this.name = value;\n    }","code_wo_comment":"@JsonSetter(\"name\")\n    public void setName (String value) { \n        this.name = value;\n    }","cleancode":"@jsonsetter(\"name\") public void setname (string value) { this.name = value; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15436,"original_code":"@JsonGetter(\"product_details\")\n    public ProductData getProductDetails ( ) { \n        return this.productDetails;\n    }","code_wo_comment":"@JsonGetter(\"product_details\")\n    public ProductData getProductDetails ( ) { \n        return this.productDetails;\n    }","cleancode":"@jsongetter(\"product_details\") public productdata getproductdetails ( ) { return this.productdetails; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15437,"original_code":"@JsonSetter(\"product_details\")\n    public void setProductDetails (ProductData value) { \n        this.productDetails = value;\n    }","code_wo_comment":"@JsonSetter(\"product_details\")\n    public void setProductDetails (ProductData value) { \n        this.productDetails = value;\n    }","cleancode":"@jsonsetter(\"product_details\") public void setproductdetails (productdata value) { this.productdetails = value; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15438,"original_code":"@JsonGetter(\"product_id\")\n    public Integer getProductId ( ) { \n        return this.productId;\n    }","code_wo_comment":"@JsonGetter(\"product_id\")\n    public Integer getProductId ( ) { \n        return this.productId;\n    }","cleancode":"@jsongetter(\"product_id\") public integer getproductid ( ) { return this.productid; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15439,"original_code":"@JsonSetter(\"product_id\")\n    public void setProductId (Integer value) { \n        this.productId = value;\n    }","code_wo_comment":"@JsonSetter(\"product_id\")\n    public void setProductId (Integer value) { \n        this.productId = value;\n    }","cleancode":"@jsonsetter(\"product_id\") public void setproductid (integer value) { this.productid = value; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15440,"original_code":"@JsonGetter(\"product_identifiers\")\n    public ProductIdentifiers getProductIdentifiers ( ) { \n        return this.productIdentifiers;\n    }","code_wo_comment":"@JsonGetter(\"product_identifiers\")\n    public ProductIdentifiers getProductIdentifiers ( ) { \n        return this.productIdentifiers;\n    }","cleancode":"@jsongetter(\"product_identifiers\") public productidentifiers getproductidentifiers ( ) { return this.productidentifiers; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15441,"original_code":"@JsonSetter(\"product_identifiers\")\n    public void setProductIdentifiers (ProductIdentifiers value) { \n        this.productIdentifiers = value;\n    }","code_wo_comment":"@JsonSetter(\"product_identifiers\")\n    public void setProductIdentifiers (ProductIdentifiers value) { \n        this.productIdentifiers = value;\n    }","cleancode":"@jsonsetter(\"product_identifiers\") public void setproductidentifiers (productidentifiers value) { this.productidentifiers = value; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15442,"original_code":"@JsonGetter(\"product_timestamps\")\n    public ProductTimestamps getProductTimestamps ( ) { \n        return this.productTimestamps;\n    }","code_wo_comment":"@JsonGetter(\"product_timestamps\")\n    public ProductTimestamps getProductTimestamps ( ) { \n        return this.productTimestamps;\n    }","cleancode":"@jsongetter(\"product_timestamps\") public producttimestamps getproducttimestamps ( ) { return this.producttimestamps; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15443,"original_code":"@JsonSetter(\"product_timestamps\")\n    public void setProductTimestamps (ProductTimestamps value) { \n        this.productTimestamps = value;\n    }","code_wo_comment":"@JsonSetter(\"product_timestamps\")\n    public void setProductTimestamps (ProductTimestamps value) { \n        this.productTimestamps = value;\n    }","cleancode":"@jsonsetter(\"product_timestamps\") public void setproducttimestamps (producttimestamps value) { this.producttimestamps = value; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15444,"original_code":"@JsonGetter(\"purchase_history\")\n    public List<PurchaseInfo> getPurchaseHistory ( ) { \n        return this.purchaseHistory;\n    }","code_wo_comment":"@JsonGetter(\"purchase_history\")\n    public List<PurchaseInfo> getPurchaseHistory ( ) { \n        return this.purchaseHistory;\n    }","cleancode":"@jsongetter(\"purchase_history\") public list<purchaseinfo> getpurchasehistory ( ) { return this.purchasehistory; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":15445,"original_code":"@JsonSetter(\"purchase_history\")\n    public void setPurchaseHistory (List<PurchaseInfo> value) { \n        this.purchaseHistory = value;\n    }","code_wo_comment":"@JsonSetter(\"purchase_history\")\n    public void setPurchaseHistory (List<PurchaseInfo> value) { \n        this.purchaseHistory = value;\n    }","cleancode":"@jsonsetter(\"purchase_history\") public void setpurchasehistory (list<purchaseinfo> value) { this.purchasehistory = value; }","repo":"information-machine\/information-machine-api-android","label":[0,0,0,0]}
{"id":23670,"original_code":"public Configs getConfigs() {\n        Configs configs = null;\n        InputStream is = settingsFacade.getRawConfig(SMS_CONFIGS_FILE_NAME);\n        String errorMessage = null;\n        if (is == null) {\n            throw new JsonIOException(SMS_CONFIGS_FILE_NAME + \" missing\");\n        }\n        try {\n            String jsonText = IOUtils.toString(is);\n            Gson gson = new Gson();\n            configs = gson.fromJson(jsonText, Configs.class);\n        } catch (Exception e) {\n            errorMessage = \"Might you have a malformed \" + SMS_CONFIGS_FILE_NAME + \" file? \" + e.toString();\n        } finally {\n            try {\n                is.close();\n            } catch (IOException e) {\n                \/\/ Ignore IO exception, what are we going to do anyway?\n                logger.error(\"IOException when closing config file {}: {}\", SMS_CONFIGS_FILE_NAME, e);\n            }\n        }\n        if (errorMessage != null) {\n            throw new JsonIOException(errorMessage);\n        }\n        return configs;\n    }","code_wo_comment":"public Configs getConfigs() {\n        Configs configs = null;\n        InputStream is = settingsFacade.getRawConfig(SMS_CONFIGS_FILE_NAME);\n        String errorMessage = null;\n        if (is == null) {\n            throw new JsonIOException(SMS_CONFIGS_FILE_NAME + \" missing\");\n        }\n        try {\n            String jsonText = IOUtils.toString(is);\n            Gson gson = new Gson();\n            configs = gson.fromJson(jsonText, Configs.class);\n        } catch (Exception e) {\n            errorMessage = \"Might you have a malformed \" + SMS_CONFIGS_FILE_NAME + \" file? \" + e.toString();\n        } finally {\n            try {\n                is.close();\n            } catch (IOException e) {\n               \n                logger.error(\"IOException when closing config file {}: {}\", SMS_CONFIGS_FILE_NAME, e);\n            }\n        }\n        if (errorMessage != null) {\n            throw new JsonIOException(errorMessage);\n        }\n        return configs;\n    }","cleancode":"public configs getconfigs() { configs configs = null; inputstream is = settingsfacade.getrawconfig(sms_configs_file_name); string errormessage = null; if (is == null) { throw new jsonioexception(sms_configs_file_name + \" missing\"); } try { string jsontext = ioutils.tostring(is); gson gson = new gson(); configs = gson.fromjson(jsontext, configs.class); } catch (exception e) { errormessage = \"might you have a malformed \" + sms_configs_file_name + \" file? \" + e.tostring(); } finally { try { is.close(); } catch (ioexception e) { logger.error(\"ioexception when closing config file {}: {}\", sms_configs_file_name, e); } } if (errormessage != null) { throw new jsonioexception(errormessage); } return configs; }","repo":"jkondrat\/modules","label":[1,0,0,0]}
{"id":15511,"original_code":"@Override\n\tpublic Socket createSocket (final Socket plainSocket, final String host, final int port, final boolean autoClose) throws IOException, UnknownHostException {\n\t\t\/\/ we don't need the plainSocket\n\t\tif (autoClose) plainSocket.close();\n\t\t\/\/ create and connect SSL socket, but don't do hostname\/certificate verification yet.\n\t\tfinal SSLCertificateSocketFactory sslSocketFactory = (SSLCertificateSocketFactory) SSLCertificateSocketFactory.getDefault(0);\n\t\tsslSocketFactory.setTrustManagers(this.trustManager);\n\t\tfinal SSLSocket sock = (SSLSocket) sslSocketFactory.createSocket(InetAddress.getByName(host), port);\n\t\t\/\/ Protocols...\n\t\tfinal List<String> protocols = new ArrayList<String>();\n\t\tfor (final String protocol : sock.getSupportedProtocols()) {\n\t\t\tif (!protocol.toUpperCase(Locale.ENGLISH).contains(\"SSL\")) protocols.add(protocol);\n\t\t}\n\t\tsock.setEnabledProtocols(protocols.toArray(new String[0]));\n\t\t\/\/ Ciphers...\n\t\tfinal HashSet<String> ciphers = new HashSet<String>(ALLOWED_CIPHERS);\n\t\tciphers.retainAll(Arrays.asList(sock.getSupportedCipherSuites()));\n\t\tciphers.addAll(new HashSet<String>(Arrays.asList(sock.getEnabledCipherSuites()))); \/\/ All all already enabled ones for compatibility.\n\t\tsock.setEnabledCipherSuites(ciphers.toArray(new String[0]));\n\t\t\/\/ set up SNI before the handshake.\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n\t\t\tsslSocketFactory.setHostname(sock, host);\n\t\t}\n\t\telse { \/\/ This hack seems to work on my 4.0.4 tablet.\n\t\t\ttry {\n\t\t\t\tfinal java.lang.reflect.Method setHostnameMethod = sock.getClass().getMethod(\"setHostname\", String.class);\n\t\t\t\tsetHostnameMethod.invoke(sock, host);\n\t\t\t}\n\t\t\tcatch (final Exception e) {\n\t\t\t\tLOG.w(\"SNI not useable: %s\", ExcpetionHelper.causeTrace(e));\n\t\t\t}\n\t\t}\n\t\t\/\/ verify hostname and certificate.\n\t\tfinal SSLSession session = sock.getSession();\n\t\tif (!HOSTNAME_VERIFIER.verify(host, session)) throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + host);\n\t\tLOG.i(\"Connected %s %s %s.\", session.getPeerHost(), session.getProtocol(), session.getCipherSuite());\n\t\treturn sock;\n\t}","code_wo_comment":"@Override\n\tpublic Socket createSocket (final Socket plainSocket, final String host, final int port, final boolean autoClose) throws IOException, UnknownHostException {\n\t\n\t\tif (autoClose) plainSocket.close();\n\t\n\t\tfinal SSLCertificateSocketFactory sslSocketFactory = (SSLCertificateSocketFactory) SSLCertificateSocketFactory.getDefault(0);\n\t\tsslSocketFactory.setTrustManagers(this.trustManager);\n\t\tfinal SSLSocket sock = (SSLSocket) sslSocketFactory.createSocket(InetAddress.getByName(host), port);\n\t\n\t\tfinal List<String> protocols = new ArrayList<String>();\n\t\tfor (final String protocol : sock.getSupportedProtocols()) {\n\t\t\tif (!protocol.toUpperCase(Locale.ENGLISH).contains(\"SSL\")) protocols.add(protocol);\n\t\t}\n\t\tsock.setEnabledProtocols(protocols.toArray(new String[0]));\n\t\n\t\tfinal HashSet<String> ciphers = new HashSet<String>(ALLOWED_CIPHERS);\n\t\tciphers.retainAll(Arrays.asList(sock.getSupportedCipherSuites()));\n\t\tciphers.addAll(new HashSet<String>(Arrays.asList(sock.getEnabledCipherSuites())));\n\t\tsock.setEnabledCipherSuites(ciphers.toArray(new String[0]));\n\t\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n\t\t\tsslSocketFactory.setHostname(sock, host);\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tfinal java.lang.reflect.Method setHostnameMethod = sock.getClass().getMethod(\"setHostname\", String.class);\n\t\t\t\tsetHostnameMethod.invoke(sock, host);\n\t\t\t}\n\t\t\tcatch (final Exception e) {\n\t\t\t\tLOG.w(\"SNI not useable: %s\", ExcpetionHelper.causeTrace(e));\n\t\t\t}\n\t\t}\n\t\n\t\tfinal SSLSession session = sock.getSession();\n\t\tif (!HOSTNAME_VERIFIER.verify(host, session)) throw new SSLPeerUnverifiedException(\"Cannot verify hostname: \" + host);\n\t\tLOG.i(\"Connected %s %s %s.\", session.getPeerHost(), session.getProtocol(), session.getCipherSuite());\n\t\treturn sock;\n\t}","cleancode":"@override public socket createsocket (final socket plainsocket, final string host, final int port, final boolean autoclose) throws ioexception, unknownhostexception { if (autoclose) plainsocket.close(); final sslcertificatesocketfactory sslsocketfactory = (sslcertificatesocketfactory) sslcertificatesocketfactory.getdefault(0); sslsocketfactory.settrustmanagers(this.trustmanager); final sslsocket sock = (sslsocket) sslsocketfactory.createsocket(inetaddress.getbyname(host), port); final list<string> protocols = new arraylist<string>(); for (final string protocol : sock.getsupportedprotocols()) { if (!protocol.touppercase(locale.english).contains(\"ssl\")) protocols.add(protocol); } sock.setenabledprotocols(protocols.toarray(new string[0])); final hashset<string> ciphers = new hashset<string>(allowed_ciphers); ciphers.retainall(arrays.aslist(sock.getsupportedciphersuites())); ciphers.addall(new hashset<string>(arrays.aslist(sock.getenabledciphersuites()))); sock.setenabledciphersuites(ciphers.toarray(new string[0])); if (build.version.sdk_int >= build.version_codes.jelly_bean_mr1) { sslsocketfactory.sethostname(sock, host); } else { try { final java.lang.reflect.method sethostnamemethod = sock.getclass().getmethod(\"sethostname\", string.class); sethostnamemethod.invoke(sock, host); } catch (final exception e) { log.w(\"sni not useable: %s\", excpetionhelper.causetrace(e)); } } final sslsession session = sock.getsession(); if (!hostname_verifier.verify(host, session)) throw new sslpeerunverifiedexception(\"cannot verify hostname: \" + host); log.i(\"connected %s %s %s.\", session.getpeerhost(), session.getprotocol(), session.getciphersuite()); return sock; }","repo":"haku\/Onosendai","label":[1,0,0,0]}
{"id":23703,"original_code":"@Test\n  public void providerCannotBeUsedIfNotAssigned() throws IOException, InterruptedException {\n    setupWorkspace(\"user_defined_providers\");\n    EventCollector collector = new EventCollector(EnumSet.allOf(EventKind.class));\n    parser = createParser(collector);\n    \/\/ TODO(T48080142): When we wrap up all of these validation errors into something human\n    \/\/ friendly, this will become a build file error\n    thrown.expect(Exception.class);\n    thrown.expectMessage(\"\/\/not_assigned:defs.bzl referenced from \/\/not_assigned:BUCK\");\n    parser.getManifest(ForwardRelPath.of(\"not_assigned\/BUCK\"));\n  }","code_wo_comment":"@Test\n  public void providerCannotBeUsedIfNotAssigned() throws IOException, InterruptedException {\n    setupWorkspace(\"user_defined_providers\");\n    EventCollector collector = new EventCollector(EnumSet.allOf(EventKind.class));\n    parser = createParser(collector);\n   \n   \n    thrown.expect(Exception.class);\n    thrown.expectMessage(\"\/\/not_assigned:defs.bzl referenced from \/\/not_assigned:BUCK\");\n    parser.getManifest(ForwardRelPath.of(\"not_assigned\/BUCK\"));\n  }","cleancode":"@test public void providercannotbeusedifnotassigned() throws ioexception, interruptedexception { setupworkspace(\"user_defined_providers\"); eventcollector collector = new eventcollector(enumset.allof(eventkind.class)); parser = createparser(collector); thrown.expect(exception.class); thrown.expectmessage(\"\/\/not_assigned:defs.bzl referenced from \/\/not_assigned:buck\"); parser.getmanifest(forwardrelpath.of(\"not_assigned\/buck\")); }","repo":"jasonnam\/buck","label":[0,0,1,0]}
{"id":15556,"original_code":"@Test\n    public void testDeleteBuildDefinition()\n        throws ContinuumStoreException\n    {\n        Project project = projectDao.getProjectWithAllDetails( testProject1.getId() );\n        BuildDefinition buildDefinition = project.getBuildDefinitions().get( 1 );\n        project.getBuildDefinitions().remove( 0 );\n        projectDao.updateProject( project );\n        project = projectDao.getProjectWithAllDetails( testProject1.getId() );\n        assertEquals( \"check size is now 1\", 1, project.getBuildDefinitions().size() );\n        BuildDefinition retrievedBuildDefinition = project.getBuildDefinitions().get( 0 );\n        assertBuildDefinitionEquals( buildDefinition, retrievedBuildDefinition );\n        assertScheduleEquals( testSchedule2, retrievedBuildDefinition.getSchedule() );\n        assertProfileEquals( testProfile2, retrievedBuildDefinition.getProfile() );\n        \/\/ !! These actually aren't happening !!\n        \/\/ TODO: test the def was physically deleted\n        \/\/ TODO: test the schedule\/profile was NOT physically deleted\n    }","code_wo_comment":"@Test\n    public void testDeleteBuildDefinition()\n        throws ContinuumStoreException\n    {\n        Project project = projectDao.getProjectWithAllDetails( testProject1.getId() );\n        BuildDefinition buildDefinition = project.getBuildDefinitions().get( 1 );\n        project.getBuildDefinitions().remove( 0 );\n        projectDao.updateProject( project );\n        project = projectDao.getProjectWithAllDetails( testProject1.getId() );\n        assertEquals( \"check size is now 1\", 1, project.getBuildDefinitions().size() );\n        BuildDefinition retrievedBuildDefinition = project.getBuildDefinitions().get( 0 );\n        assertBuildDefinitionEquals( buildDefinition, retrievedBuildDefinition );\n        assertScheduleEquals( testSchedule2, retrievedBuildDefinition.getSchedule() );\n        assertProfileEquals( testProfile2, retrievedBuildDefinition.getProfile() );\n       \n       \n       \n    }","cleancode":"@test public void testdeletebuilddefinition() throws continuumstoreexception { project project = projectdao.getprojectwithalldetails( testproject1.getid() ); builddefinition builddefinition = project.getbuilddefinitions().get( 1 ); project.getbuilddefinitions().remove( 0 ); projectdao.updateproject( project ); project = projectdao.getprojectwithalldetails( testproject1.getid() ); assertequals( \"check size is now 1\", 1, project.getbuilddefinitions().size() ); builddefinition retrievedbuilddefinition = project.getbuilddefinitions().get( 0 ); assertbuilddefinitionequals( builddefinition, retrievedbuilddefinition ); assertscheduleequals( testschedule2, retrievedbuilddefinition.getschedule() ); assertprofileequals( testprofile2, retrievedbuilddefinition.getprofile() ); }","repo":"isabella232\/continuum","label":[0,0,0,1]}
{"id":15558,"original_code":"@Test\n    public void testDeleteGroupBuildDefinition()\n        throws ContinuumStoreException\n    {\n        ProjectGroup projectGroup = projectGroupDao.getProjectGroupWithBuildDetailsByProjectGroupId(\n            defaultProjectGroup.getId() );\n        projectGroup.getBuildDefinitions().remove( 0 );\n        projectGroupDao.updateProjectGroup( projectGroup );\n        projectGroup = projectGroupDao.getProjectGroupWithBuildDetailsByProjectGroupId( defaultProjectGroup.getId() );\n        assertEquals( \"check size is now 0\", 0, projectGroup.getBuildDefinitions().size() );\n        \/\/ !! These actually aren't happening !!\n        \/\/ TODO: test the def was physically deleted\n        \/\/ TODO: test the schedule\/profile was NOT physically deleted\n    }","code_wo_comment":"@Test\n    public void testDeleteGroupBuildDefinition()\n        throws ContinuumStoreException\n    {\n        ProjectGroup projectGroup = projectGroupDao.getProjectGroupWithBuildDetailsByProjectGroupId(\n            defaultProjectGroup.getId() );\n        projectGroup.getBuildDefinitions().remove( 0 );\n        projectGroupDao.updateProjectGroup( projectGroup );\n        projectGroup = projectGroupDao.getProjectGroupWithBuildDetailsByProjectGroupId( defaultProjectGroup.getId() );\n        assertEquals( \"check size is now 0\", 0, projectGroup.getBuildDefinitions().size() );\n       \n       \n       \n    }","cleancode":"@test public void testdeletegroupbuilddefinition() throws continuumstoreexception { projectgroup projectgroup = projectgroupdao.getprojectgroupwithbuilddetailsbyprojectgroupid( defaultprojectgroup.getid() ); projectgroup.getbuilddefinitions().remove( 0 ); projectgroupdao.updateprojectgroup( projectgroup ); projectgroup = projectgroupdao.getprojectgroupwithbuilddetailsbyprojectgroupid( defaultprojectgroup.getid() ); assertequals( \"check size is now 0\", 0, projectgroup.getbuilddefinitions().size() ); }","repo":"isabella232\/continuum","label":[0,0,0,1]}
{"id":32006,"original_code":"@Override\n\tpublic void handleEvent(Event event) {\n\t\tList<Entity> entities = entityManager.getEntitiesContainingComponent(VisionComponent.class);\n\t\tif (entities == null)\n\t\t\treturn;\n\t\tEntityCreatedEvent entityCreatedEvent = (EntityCreatedEvent) event;\n\t\tfor (Entity entity : entities) {\n\t\t\tVisionComponent visionComponent = (VisionComponent) entityManager.getComponentInEntity(entity, VisionComponent.class);\n\t\t\tvisionComponent.createEntity(entityCreatedEvent.getEntity());\n\t\t\tSystem.out.println(\"EntityEvent: \" + entityCreatedEvent.getEntity());\n\t\t}\n\t}","code_wo_comment":"@Override\n\tpublic void handleEvent(Event event) {\n\t\tList<Entity> entities = entityManager.getEntitiesContainingComponent(VisionComponent.class);\n\t\tif (entities == null)\n\t\t\treturn;\n\t\tEntityCreatedEvent entityCreatedEvent = (EntityCreatedEvent) event;\n\t\tfor (Entity entity : entities) {\n\t\t\tVisionComponent visionComponent = (VisionComponent) entityManager.getComponentInEntity(entity, VisionComponent.class);\n\t\t\tvisionComponent.createEntity(entityCreatedEvent.getEntity());\n\t\t\tSystem.out.println(\"EntityEvent: \" + entityCreatedEvent.getEntity());\n\t\t}\n\t}","cleancode":"@override public void handleevent(event event) { list<entity> entities = entitymanager.getentitiescontainingcomponent(visioncomponent.class); if (entities == null) return; entitycreatedevent entitycreatedevent = (entitycreatedevent) event; for (entity entity : entities) { visioncomponent visioncomponent = (visioncomponent) entitymanager.getcomponentinentity(entity, visioncomponent.class); visioncomponent.createentity(entitycreatedevent.getentity()); system.out.println(\"entityevent: \" + entitycreatedevent.getentity()); } }","repo":"haxic\/Heavy-Space","label":[1,0,0,0]}
{"id":23877,"original_code":"@Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        \/\/ TODO: Manage sizes to avoid specific ones. It always must be parent size (match_parent)\n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n        mWidth.set(widthSize);\n        mHeight.set(heightSize);\n        mQuadrangle.set(0, 0, widthSize, heightSize);\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    }","code_wo_comment":"@Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n       \n        int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n        mWidth.set(widthSize);\n        mHeight.set(heightSize);\n        mQuadrangle.set(0, 0, widthSize, heightSize);\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    }","cleancode":"@override protected void onmeasure(int widthmeasurespec, int heightmeasurespec) { int widthsize = measurespec.getsize(widthmeasurespec); int heightsize = measurespec.getsize(heightmeasurespec); mwidth.set(widthsize); mheight.set(heightsize); mquadrangle.set(0, 0, widthsize, heightsize); super.onmeasure(widthmeasurespec, heightmeasurespec); }","repo":"gemalto\/idcloud-kyc-sample-android","label":[0,1,0,0]}
{"id":7781,"original_code":"public static void main(String args[]) throws FileNotFoundException {\n        \/\/ TODO: use sane arg parsing\n        if (args.length != 7 && args.length != 8) {\n            throw new RuntimeException(\"usage: Processor trace-file tcg-dump-out inst-info-dump hierarchy-dump test-case-name test-method-name tested-class [output-package]\");\n        }\n        String traceFileName = args[0];\n        String tcgDump = args[1];\n        String iiDump = args[2];\n        String hierDump = args[3];\n        String testCaseName = args[4];\n        String testMethodName = args[5];\n        ClassName testedClass = ClassName.fromDotted(args[6]);\n        String outputPackage = args.length == 8\n            ? args[7]\n            : testedClass.dottedPackageName();\n        Hierarchy hierarchy = Hierarchy.createFromFile(hierDump);\n        TestCaseGenerator tcg\n            = new TestCaseGenerator(testCaseName, outputPackage);\n        TestMethodGenerator tmg = new TestMethodGenerator(testMethodName,\n                                                          hierarchy,\n                                                          true);\n        tcg.addChunk(tmg);\n        InputStream in = new FileInputStream(traceFileName);\n        Deserializer<TraceEvent> d\n            = Deserializer.getDeserializer(in, TraceEvent.class);\n        Map<Instance, InstanceInfo> iis = readInstanceInfos(iiDump);\n        Processor p = new Processor(tmg, testedClass, iis, hierarchy);\n        d.process(p);\n        PrintStream ps = new PrintStream(tcgDump);\n        Serializer<TestCaseGenerator> s = Serializer.getSerializer(ps);\n        s.write(tcg);\n        s.close();\n    }","code_wo_comment":"public static void main(String args[]) throws FileNotFoundException {\n       \n        if (args.length != 7 && args.length != 8) {\n            throw new RuntimeException(\"usage: Processor trace-file tcg-dump-out inst-info-dump hierarchy-dump test-case-name test-method-name tested-class [output-package]\");\n        }\n        String traceFileName = args[0];\n        String tcgDump = args[1];\n        String iiDump = args[2];\n        String hierDump = args[3];\n        String testCaseName = args[4];\n        String testMethodName = args[5];\n        ClassName testedClass = ClassName.fromDotted(args[6]);\n        String outputPackage = args.length == 8\n            ? args[7]\n            : testedClass.dottedPackageName();\n        Hierarchy hierarchy = Hierarchy.createFromFile(hierDump);\n        TestCaseGenerator tcg\n            = new TestCaseGenerator(testCaseName, outputPackage);\n        TestMethodGenerator tmg = new TestMethodGenerator(testMethodName,\n                                                          hierarchy,\n                                                          true);\n        tcg.addChunk(tmg);\n        InputStream in = new FileInputStream(traceFileName);\n        Deserializer<TraceEvent> d\n            = Deserializer.getDeserializer(in, TraceEvent.class);\n        Map<Instance, InstanceInfo> iis = readInstanceInfos(iiDump);\n        Processor p = new Processor(tmg, testedClass, iis, hierarchy);\n        d.process(p);\n        PrintStream ps = new PrintStream(tcgDump);\n        Serializer<TestCaseGenerator> s = Serializer.getSerializer(ps);\n        s.write(tcg);\n        s.close();\n    }","cleancode":"public static void main(string args[]) throws filenotfoundexception { if (args.length != 7 && args.length != 8) { throw new runtimeexception(\"usage: processor trace-file tcg-dump-out inst-info-dump hierarchy-dump test-case-name test-method-name tested-class [output-package]\"); } string tracefilename = args[0]; string tcgdump = args[1]; string iidump = args[2]; string hierdump = args[3]; string testcasename = args[4]; string testmethodname = args[5]; classname testedclass = classname.fromdotted(args[6]); string outputpackage = args.length == 8 ? args[7] : testedclass.dottedpackagename(); hierarchy hierarchy = hierarchy.createfromfile(hierdump); testcasegenerator tcg = new testcasegenerator(testcasename, outputpackage); testmethodgenerator tmg = new testmethodgenerator(testmethodname, hierarchy, true); tcg.addchunk(tmg); inputstream in = new fileinputstream(tracefilename); deserializer<traceevent> d = deserializer.getdeserializer(in, traceevent.class); map<instance, instanceinfo> iis = readinstanceinfos(iidump); processor p = new processor(tmg, testedclass, iis, hierarchy); d.process(p); printstream ps = new printstream(tcgdump); serializer<testcasegenerator> s = serializer.getserializer(ps); s.write(tcg); s.close(); }","repo":"glasser\/amock","label":[1,0,0,0]}
{"id":7812,"original_code":"@Override\n\tpublic void run(double frac) {\n\t\tlogger.trace(\"run -> begin of method\");\n\t\ttry {\n\t\t\tworkingDataset = new GranularityAggregationTree(sourceDataset.getDataColumnSchema(),granularities.length+1);\n\t\t\tArrayList<TemporalObject> currentBranches = new ArrayList<TemporalObject>();\n\t\t\tArrayList<ArrayList<TemporalObject>> currentLeaves = new ArrayList<ArrayList<TemporalObject>>();\n\t\t\tfor(TemporalObject iO : sourceDataset.temporalObjects()) {\n\t\t\t\tlong inf = iO.getTemporalElement().asGeneric().getGranule().getInf();\n\t\t\t\tint i = 0;\n\t\t\t\tfor(TemporalObject iB : currentBranches) {\n\t\t\t\t\tif (iB.getTemporalElement().asGeneric().getGranule().contains(inf)) {\n\t\t    \t\t\tcurrentLeaves.get(i).add(iO);\n\t\t    \t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tif(i >= currentBranches.size()) {\n\t\t\t    \tGranule newGranule = new Granule(inf,inf,granularities[0]); \n\t\t\t    \tInstant newTe = workingDataset.addInstant(newGranule);\n\t\t\t    \tcurrentBranches.add(workingDataset.addTemporalObject(newTe));\n\t\t\t    \tArrayList<TemporalObject> leaves = new ArrayList<TemporalObject>();\n\t\t\t    \tleaves.add(iO);\n\t\t\t    \tcurrentLeaves.add(leaves);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong[] roots = new long[currentBranches.size()];\n\t\t\tfor(int i=0; i<currentBranches.size(); i++)\n\t\t\t\troots[i] = currentBranches.get(i).getId();\n\t\t\tif (granularities.length > 1) {\t\t\t\n\t\t\t\tfor(int i=1; i<granularities.length;i++) {\n\t\t\t\t\tArrayList<ArrayList<TemporalObject>> futureLeaves = new ArrayList<ArrayList<TemporalObject>>();\n\t\t\t\t\tArrayList<TemporalObject> futureBranches = new ArrayList<TemporalObject>(); \n\t\t\t\t\tint whichChild = 0;\n\t\t\t\t\tfor(int k=0; k<currentLeaves.size();k++) {\n\t\t\t\t\t\tArrayList<TemporalObject> iCurrentLeaves = currentLeaves.get(k);\n\t\t\t\t\t\twhile(iCurrentLeaves.size() > 0) {\n\t\t\t\t\t\t\tTemporalObject currentLeave = iCurrentLeaves.get(0);\n\t\t\t\t\t\t\tiCurrentLeaves.remove(0);\n\t\t\t\t\t\t\tTemporalObject targetBranch = null;\n\t\t\t\t\t\t\tlong inf = currentLeave.getTemporalElement().asGeneric().getInf();\n\t\t\t\t\t\t\tlong sup = currentLeave.getTemporalElement().asGeneric().getSup();\n\t\t\t\t\t\t\twhichChild = 0;\n\t\t\t\t\t\t\tfor(int l=0; l<k; l++)\n\t\t\t\t\t\t\t\twhichChild += currentBranches.get(l).getChildCount();\n\t\t\t\t\t\t\tfor(TemporalObject potentialBranch : currentBranches.get(k).childObjects()) {\n\t\t\t\t\t\t\t\tif (potentialBranch.getTemporalElement().asGeneric().getGranule().contains(inf)) {\n\t\t\t\t\t\t\t\t\ttargetBranch = potentialBranch;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twhichChild++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (targetBranch == null) {\n\t\t\t\t\t\t\t\tGranule newGranule = new Granule(inf,sup,granularities[i]); \n\t\t\t\t\t\t\t\tInstant newTe = workingDataset.addInstant(newGranule);\n\t\t\t\t\t\t\t\ttargetBranch = workingDataset.addTemporalObject(newTe);\n\t\t\t\t\t\t\t\tfutureBranches.add(targetBranch);\n\t\t\t\t\t\t\t\tfutureLeaves.add(new ArrayList<TemporalObject>());\t\t\t\t\t    \t\n\t\t\t\t\t\t\t\twhichChild = futureLeaves.size() - 1;\n\t\t\t\t\t\t\t\tcurrentBranches.get(k).linkWithChild(targetBranch);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfutureLeaves.get(whichChild).add(currentLeave);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(i==granularities.length-1) {\n\t\t\t\t\t\tfor(int j=0; j<futureBranches.size(); j++ ) {\n\t\t\t\t\t\t\taggregate(futureBranches.get(j),futureLeaves.get(j),granularities.length-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentBranches = futureBranches;\n\t\t\t\t\t\tcurrentLeaves = futureLeaves;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(long iRoot : roots)\n\t\t\t\t\taggregate(workingDataset.getTemporalObject(iRoot),0);\n\t\t\t} else {\n\t\t\t\tfor(int i=0; i<roots.length; i++)\n\t\t\t\t\taggregate(workingDataset.getTemporalObject(roots[i]),currentLeaves.get(i),0);\n\t\t\t}\n\t\t\t\/\/ TODO this could be cleaned\n\t\t\tfor (long rootId : roots) {\n\t\t\t    workingDataset.getTemporalObject(rootId).setRoot(true);\n\t\t\t}\n\t\t} catch (TemporalDataException e1) {\n\t\t\t\/\/ TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t}","code_wo_comment":"@Override\n\tpublic void run(double frac) {\n\t\tlogger.trace(\"run -> begin of method\");\n\t\ttry {\n\t\t\tworkingDataset = new GranularityAggregationTree(sourceDataset.getDataColumnSchema(),granularities.length+1);\n\t\t\tArrayList<TemporalObject> currentBranches = new ArrayList<TemporalObject>();\n\t\t\tArrayList<ArrayList<TemporalObject>> currentLeaves = new ArrayList<ArrayList<TemporalObject>>();\n\t\t\tfor(TemporalObject iO : sourceDataset.temporalObjects()) {\n\t\t\t\tlong inf = iO.getTemporalElement().asGeneric().getGranule().getInf();\n\t\t\t\tint i = 0;\n\t\t\t\tfor(TemporalObject iB : currentBranches) {\n\t\t\t\t\tif (iB.getTemporalElement().asGeneric().getGranule().contains(inf)) {\n\t\t    \t\t\tcurrentLeaves.get(i).add(iO);\n\t\t    \t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tif(i >= currentBranches.size()) {\n\t\t\t    \tGranule newGranule = new Granule(inf,inf,granularities[0]); \n\t\t\t    \tInstant newTe = workingDataset.addInstant(newGranule);\n\t\t\t    \tcurrentBranches.add(workingDataset.addTemporalObject(newTe));\n\t\t\t    \tArrayList<TemporalObject> leaves = new ArrayList<TemporalObject>();\n\t\t\t    \tleaves.add(iO);\n\t\t\t    \tcurrentLeaves.add(leaves);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong[] roots = new long[currentBranches.size()];\n\t\t\tfor(int i=0; i<currentBranches.size(); i++)\n\t\t\t\troots[i] = currentBranches.get(i).getId();\n\t\t\tif (granularities.length > 1) {\t\t\t\n\t\t\t\tfor(int i=1; i<granularities.length;i++) {\n\t\t\t\t\tArrayList<ArrayList<TemporalObject>> futureLeaves = new ArrayList<ArrayList<TemporalObject>>();\n\t\t\t\t\tArrayList<TemporalObject> futureBranches = new ArrayList<TemporalObject>(); \n\t\t\t\t\tint whichChild = 0;\n\t\t\t\t\tfor(int k=0; k<currentLeaves.size();k++) {\n\t\t\t\t\t\tArrayList<TemporalObject> iCurrentLeaves = currentLeaves.get(k);\n\t\t\t\t\t\twhile(iCurrentLeaves.size() > 0) {\n\t\t\t\t\t\t\tTemporalObject currentLeave = iCurrentLeaves.get(0);\n\t\t\t\t\t\t\tiCurrentLeaves.remove(0);\n\t\t\t\t\t\t\tTemporalObject targetBranch = null;\n\t\t\t\t\t\t\tlong inf = currentLeave.getTemporalElement().asGeneric().getInf();\n\t\t\t\t\t\t\tlong sup = currentLeave.getTemporalElement().asGeneric().getSup();\n\t\t\t\t\t\t\twhichChild = 0;\n\t\t\t\t\t\t\tfor(int l=0; l<k; l++)\n\t\t\t\t\t\t\t\twhichChild += currentBranches.get(l).getChildCount();\n\t\t\t\t\t\t\tfor(TemporalObject potentialBranch : currentBranches.get(k).childObjects()) {\n\t\t\t\t\t\t\t\tif (potentialBranch.getTemporalElement().asGeneric().getGranule().contains(inf)) {\n\t\t\t\t\t\t\t\t\ttargetBranch = potentialBranch;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twhichChild++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (targetBranch == null) {\n\t\t\t\t\t\t\t\tGranule newGranule = new Granule(inf,sup,granularities[i]); \n\t\t\t\t\t\t\t\tInstant newTe = workingDataset.addInstant(newGranule);\n\t\t\t\t\t\t\t\ttargetBranch = workingDataset.addTemporalObject(newTe);\n\t\t\t\t\t\t\t\tfutureBranches.add(targetBranch);\n\t\t\t\t\t\t\t\tfutureLeaves.add(new ArrayList<TemporalObject>());\t\t\t\t\t    \t\n\t\t\t\t\t\t\t\twhichChild = futureLeaves.size() - 1;\n\t\t\t\t\t\t\t\tcurrentBranches.get(k).linkWithChild(targetBranch);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfutureLeaves.get(whichChild).add(currentLeave);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(i==granularities.length-1) {\n\t\t\t\t\t\tfor(int j=0; j<futureBranches.size(); j++ ) {\n\t\t\t\t\t\t\taggregate(futureBranches.get(j),futureLeaves.get(j),granularities.length-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentBranches = futureBranches;\n\t\t\t\t\t\tcurrentLeaves = futureLeaves;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(long iRoot : roots)\n\t\t\t\t\taggregate(workingDataset.getTemporalObject(iRoot),0);\n\t\t\t} else {\n\t\t\t\tfor(int i=0; i<roots.length; i++)\n\t\t\t\t\taggregate(workingDataset.getTemporalObject(roots[i]),currentLeaves.get(i),0);\n\t\t\t}\n\t\t\n\t\t\tfor (long rootId : roots) {\n\t\t\t    workingDataset.getTemporalObject(rootId).setRoot(true);\n\t\t\t}\n\t\t} catch (TemporalDataException e1) {\n\t\t\n\t\t\te1.printStackTrace();\n\t\t}\n\t}","cleancode":"@override public void run(double frac) { logger.trace(\"run -> begin of method\"); try { workingdataset = new granularityaggregationtree(sourcedataset.getdatacolumnschema(),granularities.length+1); arraylist<temporalobject> currentbranches = new arraylist<temporalobject>(); arraylist<arraylist<temporalobject>> currentleaves = new arraylist<arraylist<temporalobject>>(); for(temporalobject io : sourcedataset.temporalobjects()) { long inf = io.gettemporalelement().asgeneric().getgranule().getinf(); int i = 0; for(temporalobject ib : currentbranches) { if (ib.gettemporalelement().asgeneric().getgranule().contains(inf)) { currentleaves.get(i).add(io); break; } i++; } if(i >= currentbranches.size()) { granule newgranule = new granule(inf,inf,granularities[0]); instant newte = workingdataset.addinstant(newgranule); currentbranches.add(workingdataset.addtemporalobject(newte)); arraylist<temporalobject> leaves = new arraylist<temporalobject>(); leaves.add(io); currentleaves.add(leaves); } } long[] roots = new long[currentbranches.size()]; for(int i=0; i<currentbranches.size(); i++) roots[i] = currentbranches.get(i).getid(); if (granularities.length > 1) { for(int i=1; i<granularities.length;i++) { arraylist<arraylist<temporalobject>> futureleaves = new arraylist<arraylist<temporalobject>>(); arraylist<temporalobject> futurebranches = new arraylist<temporalobject>(); int whichchild = 0; for(int k=0; k<currentleaves.size();k++) { arraylist<temporalobject> icurrentleaves = currentleaves.get(k); while(icurrentleaves.size() > 0) { temporalobject currentleave = icurrentleaves.get(0); icurrentleaves.remove(0); temporalobject targetbranch = null; long inf = currentleave.gettemporalelement().asgeneric().getinf(); long sup = currentleave.gettemporalelement().asgeneric().getsup(); whichchild = 0; for(int l=0; l<k; l++) whichchild += currentbranches.get(l).getchildcount(); for(temporalobject potentialbranch : currentbranches.get(k).childobjects()) { if (potentialbranch.gettemporalelement().asgeneric().getgranule().contains(inf)) { targetbranch = potentialbranch; break; } whichchild++; } if (targetbranch == null) { granule newgranule = new granule(inf,sup,granularities[i]); instant newte = workingdataset.addinstant(newgranule); targetbranch = workingdataset.addtemporalobject(newte); futurebranches.add(targetbranch); futureleaves.add(new arraylist<temporalobject>()); whichchild = futureleaves.size() - 1; currentbranches.get(k).linkwithchild(targetbranch); } futureleaves.get(whichchild).add(currentleave); } } if(i==granularities.length-1) { for(int j=0; j<futurebranches.size(); j++ ) { aggregate(futurebranches.get(j),futureleaves.get(j),granularities.length-1); } } else { currentbranches = futurebranches; currentleaves = futureleaves; } } for(long iroot : roots) aggregate(workingdataset.gettemporalobject(iroot),0); } else { for(int i=0; i<roots.length; i++) aggregate(workingdataset.gettemporalobject(roots[i]),currentleaves.get(i),0); } for (long rootid : roots) { workingdataset.gettemporalobject(rootid).setroot(true); } } catch (temporaldataexception e1) { e1.printstacktrace(); } }","repo":"ieg-vienna\/TimeBench","label":[1,0,0,0]}
{"id":7861,"original_code":"@Override\n  @SuppressFBWarnings(\"BC_UNCONFIRMED_CAST\")\n  protected void runApiSpecificTests(HttpSecurityDescription securityDescription)\n      throws SuiteBroken {\n    this.currentState.selectedHeiId = getParameterValue(HEI_ID_PARAMETER, this::getSelectedHeiId);\n  }","code_wo_comment":"@Override\n  @SuppressFBWarnings(\"BC_UNCONFIRMED_CAST\")\n  protected void runApiSpecificTests(HttpSecurityDescription securityDescription)\n      throws SuiteBroken {\n    this.currentState.selectedHeiId = getParameterValue(HEI_ID_PARAMETER, this::getSelectedHeiId);\n  }","cleancode":"@override @suppressfbwarnings(\"bc_unconfirmed_cast\") protected void runapispecifictests(httpsecuritydescription securitydescription) throws suitebroken { this.currentstate.selectedheiid = getparametervalue(hei_id_parameter, this::getselectedheiid); }","repo":"j-be\/ewp-registry-service","label":[1,0,0,0]}
{"id":7912,"original_code":"private BeanDescriptorImpl<T> getBeanDescriptorInternal() {\n\t\treturn new BeanDescriptorImpl<T>(\n\t\t\t\tbeanClass,\n\t\t\t\tgetClassLevelConstraintsAsDescriptors(),\n\t\t\t\tgetConstrainedPropertiesAsDescriptors(),\n\t\t\t\tgetMethodsAsDescriptors(),\n\t\t\t\tdefaultGroupSequenceIsRedefined(),\n\t\t\t\tgetDefaultGroupSequence( null )\n\t\t);\n\t}","code_wo_comment":"private BeanDescriptorImpl<T> getBeanDescriptorInternal() {\n\t\treturn new BeanDescriptorImpl<T>(\n\t\t\t\tbeanClass,\n\t\t\t\tgetClassLevelConstraintsAsDescriptors(),\n\t\t\t\tgetConstrainedPropertiesAsDescriptors(),\n\t\t\t\tgetMethodsAsDescriptors(),\n\t\t\t\tdefaultGroupSequenceIsRedefined(),\n\t\t\t\tgetDefaultGroupSequence( null )\n\t\t);\n\t}","cleancode":"private beandescriptorimpl<t> getbeandescriptorinternal() { return new beandescriptorimpl<t>( beanclass, getclasslevelconstraintsasdescriptors(), getconstrainedpropertiesasdescriptors(), getmethodsasdescriptors(), defaultgroupsequenceisredefined(), getdefaultgroupsequence( null ) ); }","repo":"gastaldi\/hibernate-validator","label":[0,0,0,0]}
{"id":8028,"original_code":"public void webHookEvent(GerritProjectEvent projectEvent) {\n        log.info(\"Got Webhook:\" + projectEvent);\n        \/\/ TODO Update open changes according to event. For now, just read them all\n        scheduleRefresh();\n    }","code_wo_comment":"public void webHookEvent(GerritProjectEvent projectEvent) {\n        log.info(\"Got Webhook:\" + projectEvent);\n       \n        scheduleRefresh();\n    }","cleancode":"public void webhookevent(gerritprojectevent projectevent) { log.info(\"got webhook:\" + projectevent); schedulerefresh(); }","repo":"johannesc\/gerrit-builder-plugin","label":[0,1,0,0]}
{"id":16325,"original_code":"private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {\/\/GEN-FIRST:event_orderButtonActionPerformed\n        AddOrderForm orderForm = AddOrderForm.getInstance();\n        System.out.println(lowOnStock.get(stockTable.getSelectedColumn()));\n        AdminMainForm admin = AdminMainForm.getInstance();\n        admin.showForm(orderForm);\n        orderForm.setDrug(lowOnStock.get(stockTable.getSelectedRow()));\n        \/\/orderForm.setVisible(true);\/\/ TODO add your handling code here:\n    }","code_wo_comment":"private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {        AddOrderForm orderForm = AddOrderForm.getInstance();\n        System.out.println(lowOnStock.get(stockTable.getSelectedColumn()));\n        AdminMainForm admin = AdminMainForm.getInstance();\n        admin.showForm(orderForm);\n        orderForm.setDrug(lowOnStock.get(stockTable.getSelectedRow()));\n       \n    }","cleancode":"private void orderbuttonactionperformed(java.awt.event.actionevent evt) { addorderform orderform = addorderform.getinstance(); system.out.println(lowonstock.get(stocktable.getselectedcolumn())); adminmainform admin = adminmainform.getinstance(); admin.showform(orderform); orderform.setdrug(lowonstock.get(stocktable.getselectedrow())); }","repo":"isurunix\/pharmacy-manager","label":[0,1,0,0]}
