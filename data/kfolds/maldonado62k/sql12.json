{"projectname":"sql12","classification":"DEFECT","comment":"todo: this is a bug in the code at the moment. if table \"test\" isn't qualified then this test passes so we need to beef up qualified tablename handling."}
{"projectname":"sql12","classification":"DEFECT","comment":"cast to int required as dimension::setsize(double,double) doesn't appear to do anything in jdk1.2.2."}
{"projectname":"sql12","classification":"DEFECT","comment":"this won't work on derby where non-varchar columns cannot be altered among other restrictions. tablecolumninfo nullintvc = getvarcharcolumn(\"nullint\", true, \"defval\", \"a varchar comment\"); string altercoltypesql dialect.getcolumntypealtersql(firstcol, nullintvc); runsql(session, altercoltypesql);"}
{"projectname":"sql12","classification":"DEFECT","comment":"the following query produces a result that should be editable, but it currently isn't"}
{"projectname":"sql12","classification":"DEFECT","comment":"we know this fails - bug# 1700093"}
{"projectname":"sql12","classification":"DEFECT","comment":"installcolorsandfont needs to be run twice. background and foreground colors only work if run after the super call but font only works if run before the super call. may be a bug in jdk 1.4"}
{"projectname":"sql12","classification":"DEFECT","comment":"todo: remove this when frontbase bug gets fixed. for some reason, frontbase renames the unique indexes to a generated value. since we don't know what that new name for the index is, skip dropping it for now."}
{"projectname":"sql12","classification":"DEFECT","comment":"fails on db2 8.1 for linux however, windows 8.1 fixpak 14 driver (2.10.52) works without exception also, linux 9.0.1 server with 3.1.57 driver works fine as well"}
{"projectname":"sql12","classification":"DEFECT","comment":"bug #1995728 ms-sql is inconsistent with regard to setting the current catalog. if you have a database with periods or spaces, then in some cases you must surround the catalog with quotes. for example, if you have a catalog named 'db with spaces' you must execute the following sql: use \"db with spaces\" however, the same is not always true for the jdbc api method connection.setcatalog. for some old versions of microsoft drivers, you must quote the catalog as well. but for newer versions of the driver, you must not quote the catalog. so here, we attempt to use the unquoted version first, then if that fails, we will try quoting it."}
{"projectname":"sql12","classification":"DEFECT","comment":"this is here because addcompletionsatlistbegin() won't work when schema info is still loading"}
{"projectname":"sql12","classification":"DEFECT","comment":"this works only on jdk 1.5 with jdk 1.4.x fonts will be bold for all swingset themes. see also swingset2 demos in jdk 1.4 and jdk 1.5"}
{"projectname":"sql12","classification":"DEFECT","comment":"these don't appear to work. rowheadertablecol1.setresizable(true); rowheadertablecol2.setresizable(true); cornertablecol1.setresizable(true); cornertablecol2.setresizable(true);"}
{"projectname":"sql12","classification":"DEFECT","comment":"if we are connecting to a database, then this is fine. however, when using mockobjects, this is problematic since there are many unimplemented methods in the mockobjects implementation that are required by this."}
{"projectname":"sql12","classification":"DEFECT","comment":"issue: after importing the data, we could tell the user that it has been successfully imported. this would give good positive feedback. however, it would mean that they need to click on yet another button to dismiss that message. on the other hand, since the operation is synchronous, the user cannot proceed to do anything until it is done. if we assume that import usually works correctly unless they are shown an error message, then we do not need to display anything here."}
{"projectname":"sql12","classification":"DEFECT","comment":"todo: this won't work when the column has values with quotes in them. use preparedstatements instead."}
{"projectname":"sql12","classification":"DEFECT","comment":"todo: when 1.4 is the earliest version supported, include the following line here: scrollpane.setwheelscrollingenabled(true); the scroll-wheel function is important for ease of use, but the setwheelscrollingenabled function is not available in java 1.3."}
{"projectname":"sql12","classification":"DEFECT","comment":"in case this is called by the awt thread, log a message - this is most likey a bug"}
{"projectname":"sql12","classification":"DEFECT","comment":"bug 2480365: it is very important to get the uri from the url and not simply do new file(url.getfile()). in the case where the path contains spaces, they get encoded as %20 in the string returned from url.getfile(). java.io.file doesn't know how to deal with them (i.e. replace them with spaces) and the resulting file is rendered non-existent."}
{"projectname":"sql12","classification":"DEFECT","comment":"if we don't always show the scrollbars the whole datatypepreferencespanel is flickering like hell."}
{"projectname":"sql12","classification":"DEFECT","comment":"bug #1757076 always use false unless user specifies otherwise; this breaks date editing in derby (possibly db2 as well)"}
{"projectname":"sql12","classification":"DEFECT","comment":"some lafs don't work under java 6 or later."}
{"projectname":"sql12","classification":"DEFECT","comment":"todo: setup title correctly. settitle(gettitle() + \": \" + _session.getsessionsheet().gettitle());"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: these 2 should be handled with an iterator!!!"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo verify this is correct"}
{"projectname":"sql12","classification":"DESIGN","comment":"??? for now, use the same renderer as everyone else. ?? ?? in future: change this to use a new instance of renderer ?? for this data type."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: this should be handled with an iterator!!!"}
{"projectname":"sql12","classification":"DESIGN","comment":"sqlfilteraction.java created on march 22, 2003, 10:55 am adapted from sessionpropertiesaction.java by colin bell. todo: change name to contentstabfilteraction"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: do we need this one."}
{"projectname":"sql12","classification":"DESIGN","comment":"jason: do we need these?"}
{"projectname":"sql12","classification":"DESIGN","comment":"??? for now, use the same renderer as everyone else. ?? ?? in future: change this to use a new instance of renederer ?? for this data type."}
{"projectname":"sql12","classification":"DESIGN","comment":"bad - converting a url to a file this way is problematic when the file path contains spaces"}
{"projectname":"sql12","classification":"DESIGN","comment":"jason: remove?? _session.getsessionsheet().getsqlpanel().executesql(sql);"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: this is a nasty quick hack. needs an api to do this."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: delete this class copyright (c) 2001 colin bell colbell@users.sourceforge.net this library is free software; you can redistribute it and\/or modify it under the terms of the gnu lesser general public license as published by the free software foundation; either version 2.1 of the license, or (at your option) any later version. this library is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. see the gnu lesser general public license for more details. you should have received a copy of the gnu lesser general public license along with this library; if not, write to the free software foundation, inc., 59 temple place, suite 330, boston, ma 02111-1307 usa"}
{"projectname":"sql12","classification":"DESIGN","comment":"not used"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: hard coded -. jdbc\/odbc bridge jdk1.4 brings back -9 for nvarchar columns in ms sql server tables."}
{"projectname":"sql12","classification":"DESIGN","comment":"hear no evil, see no evil"}
{"projectname":"sql12","classification":"DESIGN","comment":"when i tried using a length for longvarbinary that is the max length of the source records, i get the following exception: exception condition 239. data exception - string data, right truncation. i tried bit varying(32767) with data that had max length of 16384. so it's back to maximum length hard-coded for now. registercolumntype(types.longvarbinary, 2147000000, \"bit varying($l)\");"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: is this right???"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: this should not be public. check all usages of it and put appropriate methods in an api object."}
{"projectname":"sql12","classification":"DESIGN","comment":"jason: do we need this? getsqlpanel().selected();"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: rename to iobjecttreenodeexpander"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: hard coded -. jdbc\/odbc bridge jdk1.4 brings back -9 for nvarchar columns in ms sql server tables. -8 is rowid in oracle."}
{"projectname":"sql12","classification":"DESIGN","comment":"set the property values note: this may have already been done by another instance of this datatype created to handle a different column."}
{"projectname":"sql12","classification":"DESIGN","comment":"always add plugins - there is not a good way to compare plugin zips and their extracted contents at the moment. todo: determine the best way to derive the filesize and checksum of the plugin zip that was last extracted. should we keep it around? how about using the current release.xml file ? come to think of it, perhaps we shouldn't be computing the checksum of *any* existing files, why don't we just get it from the current release.xml file?"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: verify this"}
{"projectname":"sql12","classification":"DESIGN","comment":"multiple rows - not good"}
{"projectname":"sql12","classification":"DESIGN","comment":"?? extract this out into a class like cascadeinternalframepositioner."}
{"projectname":"sql12","classification":"DESIGN","comment":"?? is there any way to check for invalid input? valid input includes ?? at least any printable character, but could it also include unprintable ?? characters?"}
{"projectname":"sql12","classification":"DESIGN","comment":"cast is not so nice, but framework doesn't meet new requirements."}
{"projectname":"sql12","classification":"DESIGN","comment":"end-kludge"}
{"projectname":"sql12","classification":"DESIGN","comment":"total hack! type other(1111) can be other types as well?"}
{"projectname":"sql12","classification":"DESIGN","comment":"jason: should be part of status bar?"}
{"projectname":"sql12","classification":"DESIGN","comment":"??getridofthis"}
{"projectname":"sql12","classification":"DESIGN","comment":"don't call super. packing this frame causes problems."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: delete me"}
{"projectname":"sql12","classification":"DESIGN","comment":"note. some dbmss such as oracle do not allow: \"select *, rowid from table\" you cannot have any column name in the columns clause if you have * in there. aliasing the table name seems to be the best way to get around the problem."}
{"projectname":"sql12","classification":"DESIGN","comment":"we are displaying a new dataset, so if there was a cell editor in operation, tell it to cancel. ???? how does this impact popup display?"}
{"projectname":"sql12","classification":"DESIGN","comment":"kludge: we want some info about the columns to be available for validating the user input during cell editing operations. ideally we would get that info inside the resultsetdataset class during the creation of the columndefinition objects by using various functions in resultsetmetadata such as isnullable(idx). unfortunately, in at least some dbmss (e.g. postgres, hsdb) the results of those calls are not the same (and are less accurate than) the sqlmetadata.getcolumns() call used in columnstab to get the column info. even more unfortunate is the fact that the set of attributes reported on by the two calls is not the same, with the resultsetmetadata listing things not provided by getcolumns. most of the data provided by the resultsetmetadata calls is correct. however, the nullable\/not-nullable property is not set correctly in at least two dbmss, while it is correct for those dbmss in the getcolumns() info. therefore, we collect the collumn nullability information from getcolumns() and pass that info to the resultset to override what it got from the resultsetmetadata."}
{"projectname":"sql12","classification":"DESIGN","comment":"the utility class that reads and writes release info from\/to the release.xml file todo: spring-inject when this class is a spring bean"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: this won't work when the column has values with quotes in them. use preparedstatements instead. hmmm... instead of insert statements, could we not just create a sequence and generate a select statement that: a) uses the sequence for the pkid b) selects distinct values that would be a more efficient approach that would also eliminate this quoting problem"}
{"projectname":"sql12","classification":"DESIGN","comment":"the following only works if swingutilities.getroot(table) returns and instanceof basemdiparentframe. if swingtuilities.getroot(table) returns and instance of dialog or frame, then other code must be used."}
{"projectname":"sql12","classification":"DESIGN","comment":"need to somehow call sqlresultexecuterpanel.rerunselectedresulttab(true); something like : sqlresultexecuterpanel panel = getpanel(); panel.rerunselectedresulttab(true); however, that doesn't apply when the user is exporting from the table contents table. there needs to be a more generic way to do this for all tables containing data that is to be exported where some of the fields contain placeholders. for now, we just inform the user and let them either continue or abort and change the configuration manually, re-run the query \/ reload the table data and re-export."}
{"projectname":"sql12","classification":"DESIGN","comment":"?? split these 4 functions off into a subclass of basefavouriteaction"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: rename this to gettabletype."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: bizarre that i couldn't find a valid sql to drop an index."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: ? dialog handling on cancelled ?"}
{"projectname":"sql12","classification":"DESIGN","comment":"this refactoring depends on the following api methods: getcreatetablesql"}
{"projectname":"sql12","classification":"DESIGN","comment":"should probably create my own table model but i am being a bit slack."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo probably want to allow the user to set these sequence properties ?? sequence settings."}
{"projectname":"sql12","classification":"DESIGN","comment":"we set expected and checksum to -1 here, since we don't have that information for release.xml file todo: can httpclient be used to get the byte-size of release.xml so we can perform this check?"}
{"projectname":"sql12","classification":"DESIGN","comment":"here, i don't completely understand how these types are to be used in all databases and i haven't yet had time to implement support in the dialects for them. so, this exclude list will keep these less commonly used types from failing the test. also, since not all of these types appear in java5 and we currently support compiling the code base with it, i use the integer values for new types that were introduces in java6, rather than the type constant name."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: delete this class - unused"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: find out why kludge: for some reason, i am not able to get the sheet to size correctly. it always displays with a size that causes the sub-panels to have their scrollbars showing. add a bit of an increase in the size of the panel so the scrollbars are not displayed."}
{"projectname":"sql12","classification":"DESIGN","comment":"copied from java doc matcher.replaceall: note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string. dollar signs may be treated as references to captured subsequences as described above, and backslashes are used to escape literal characters in the replacement string."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: clean this mess up!!!! load plugins. load all plugin jars into class loader."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: subclass these hibernate dialects to provide the \"canpasteto\" api method in hibernatedialect interface. private static final db2390dialect db2390dialect = new db2390dialect();"}
{"projectname":"sql12","classification":"DESIGN","comment":"this is weird - if i don't set this the column header doesn't line up with the column contents."}
{"projectname":"sql12","classification":"DESIGN","comment":"required otherwise it gets too wide."}
{"projectname":"sql12","classification":"DESIGN","comment":"this refactoring depends on the following dialect api methods: getupdatesql"}
{"projectname":"sql12","classification":"DESIGN","comment":"for pointbase, if type maps to pointbase \"blob\", and the size isn't valid (pb requires size for blobs) then set it to something reasonably large, like 16mb. 1 is the default size if no size is specified. that's practically useless :)"}
{"projectname":"sql12","classification":"DESIGN","comment":"should the data be first cloned so that the sorting doesn't take place on the array that is used in getvalue() todo: this is a must if sorting is done in a thread! ??"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: when 1.4 is the earliest version supported, add the following line: setsurrendersfocusonkeystroke(true); this should help handle some problems with navigation using tab & return to move through cells."}
{"projectname":"sql12","classification":"DESIGN","comment":"drop fk constraints before dropping any tables. otherwise, we may drop the child table prior to dropping it's fks, which would be an error. todo: this should be done in the dialect's gettabledropsql method for a database specific handling(or ignoring) of this problem."}
{"projectname":"sql12","classification":"DESIGN","comment":"silently ignore, what could we do anyway?"}
{"projectname":"sql12","classification":"DESIGN","comment":"this is a bit hard coded but if we use _scale here some number displays go crazy."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: figure out why the selection of the root node in the object tree is undone if we don't delay. it seems like some other thread racing to set the selected node to none. when this happens, the detail pane for the root node disappears when a session is first opened, or when an objecttree frame is created. this is a really crappy and unreliable way to fix this problem, but it hides the problem for now. a better understanding of the architecture of session creation is required before a proper solution can be attempted. rmm 20051217"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: temporary until we sort out a better way to do guido's fix assertequals(second_stmt_sep, qt2.getsqlstatementseparator());"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo maybe we should have a checkbox to allow the user to toggle default value on\/off. some dbs (like db2) treat empty string \"\" as a different default value than null."}
{"projectname":"sql12","classification":"DESIGN","comment":"check the error stream for a problem this is a bit questionable since it is possible for processes to output something on stderr but continue processing. but without this, some problems are not seen (e.g. \"bad argument\" type messages from the process)."}
{"projectname":"sql12","classification":"DESIGN","comment":"ok, this is a hack. currently, when precision == scale, i have no way to determine if this is valid for the actual data. the problem comes when the source db's precision\/scale are greater - or reported to be greater - than the precision\/scale of the destination db. in this case, it maximimizes both for the destination, causing a definition that allows 0 digits to the left of the decimal. trouble is, without looking at the actual data, there is no way to tell if this is valid - in some cases it will be ok (0.0000000789) in others it will not be ok (100.123). so for now, make the scale be approx. one-half of the precision to accomodate the most digits to the left and right of the decimal and hopefully that covers the majority of cases."}
{"projectname":"sql12","classification":"DESIGN","comment":"????? if desired, get fancy and use icons in buttons instead of text ?????????"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: when jdk1.4 is the earliest jdk supported by squirrel then remove the hardcoding of the boolean data type."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: this should be handled with an iterator"}
{"projectname":"sql12","classification":"DESIGN","comment":"work around some utc and daylight saving offsets"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: these 2 should be handled with an iterator."}
{"projectname":"sql12","classification":"DESIGN","comment":"this is (a logically not sufficent) try to cope with the problem that there are the following contradictory rules in the jdbc api doc: statement.getresultset(): this method should be called only once per result. statement.getupdatecount(): this method should be called only once per result. statement.getmoreresults(): there are no more results when the following is true: (!getmoreresults() && (getupdatecount() == -1) if getmoreresults() returns false, we don't know if we have more results, we only know that it isn't a result set. since we called getupdatecount() before getmoreresults() because we would like to know the update count of the first result, we might not be allowed to call getupdatecount() again. the intersystems cache driver for example always returns the same updatecount on simple insert, update, delete statements not matter if getmoreresults() was called. so updatecount never gets -1 and this will loop forever. when i discussed the issue with the intersystems people they just told me not to call getupdatecount() twice. that simple. my hope is that this will cure problems with dbs that just don't care for multiple result sets."}
{"projectname":"sql12","classification":"DESIGN","comment":"the call here is the result of a desperate fight to find a place where the components in the split had not height = 0. if someone knows a better way please tell me i'll apreciate any advice. gerdwagner@users.sourceforge.net"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: spring-inject when this class is a spring bean"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: what i really want to do here is get the sql script and replace \"create procedure\" with \"alter procedure\", then put that in the sql pane and *not* execute it."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: should i be adding quotes if user wants identifiers quoted??"}
{"projectname":"sql12","classification":"DESIGN","comment":"the following ugly conversion from text to byte is necessary because the byte class is inconsistant. when asked to output as hex, it does so as an unsigned byte, but when asked to read back the same thing using the hex radix, it insists that the input must be signed. to get around this, we up-size the conversion to integer, then truncate that to a byte, and finally convert the byte to a byte. yech."}
{"projectname":"sql12","classification":"DESIGN","comment":"this should just bring back one table, i hope."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: temporary until we sort out a better way to do guido's fix iquerytokenizer qt2 = sessionundertest.getquerytokenizer();"}
{"projectname":"sql12","classification":"DESIGN","comment":"hack to deal with firebird's rdb meta tables."}
{"projectname":"sql12","classification":"DESIGN","comment":"hack to deal with axion axion_* tables."}
{"projectname":"sql12","classification":"DESIGN","comment":"handle mouse events for double-click creation of popup dialog. this happens only in the jtextfield, not the jtextarea, so we can make this an inner class within this method rather than a separate inner class as is done with the keytexthandler class."}
{"projectname":"sql12","classification":"DESIGN","comment":"don't use tinyint for now, even though mckoi \"supports\" it. it's notion of tinyint is 7-bit (not 8-bit) so it is not compatible with other dbs and leads to overflow (resulting in negative values which are a corruption of the actual value inserted\/updated). this is not a great work-around. i filed a bug report on the mailing list; hopefully it will get fixed soon."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: need to define a better approach to getting dialects. that is, we don't really want to ever prompt the user in this case. it's always oracle. yet, we may have a new oracledialect at some point."}
{"projectname":"sql12","classification":"DESIGN","comment":"no appropriate datatype for this column, so do the best we can with what we know. this may not be the best behavior here!!!!!!!"}
{"projectname":"sql12","classification":"DESIGN","comment":"evil hack to split the vacuum output a little."}
{"projectname":"sql12","classification":"DESIGN","comment":"this <code>icommand<\/code> displays a dialog box that allows the user to enter a 'where' clause or an 'order by' clause used when getting data via the 'contents' tab. @author <a href=\"mailto:mjhammel@users.sourceforge.net\">maury hammel<\/a> todo: change name to contentstabfiltercommand"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: - col - add method to databasemetadata that returns array of objects for getbestrowidentifier. for postgresql put this kludge in the new function. this way all the kludges are kept in one place. kludge!!!!!! for some dbs (e.g. postgresql) there is actually a pseudo-column providing the rowid, but the getbestrowidentifier function is not implemented. this kludge hardcodes the knowledge that specific dbs use a specific pseudo-column. additionally, as of pg 8.1, you must create the table using \"with oid\" appended to the create statement. otherwise, oid column is not available by default."}
{"projectname":"sql12","classification":"DESIGN","comment":"this is a work-around for what looks like a bug to me - it is a syntax error to qualify with the schema the new table name, but not the old as in: alter table \"public\".\"tablerenametest\" rename to \"public\".\"tablewasrenamed\" the second \"public\". is apparently not (currently) a valid thing to do."}
{"projectname":"sql12","classification":"DESIGN","comment":"skip formatting for stored procedures - they can have comments embedded in them, and i'm presently not sure how the formatter handles this."}
{"projectname":"sql12","classification":"DESIGN","comment":"??need to tell object to display itself in a panel."}
{"projectname":"sql12","classification":"DESIGN","comment":"all of the following have been converted to use the datatype objects so, why not just have case types.null and default??? (this seems pointless) rmm 20070726"}
{"projectname":"sql12","classification":"DESIGN","comment":"?? need to associate a panel with an object type somehow."}
{"projectname":"sql12","classification":"DESIGN","comment":"implement idatasetupdateablemodel interface and idatasetupdateabletablemodel interface todo: this code was copied from contentstab. it should probably be put into a common location and shared by both this class and contentstab."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: how to let the user customize this??"}
{"projectname":"sql12","classification":"DESIGN","comment":"cse: moved this code down here to fix repaint problems on first display - bounds should be set before install uninstall the old popup from root pane and install the new one. even in case they are the same objects it's necessary to cover the workspace switches etc."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: rename to datasetviewerpropertydestination"}
{"projectname":"sql12","classification":"DESIGN","comment":"discovered that the loginame field can be null - in that case, how to know we have the correct view?"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: this shouldn't be public. its only been done for the jcomplete plugin. at some stage this method will be returned to package visibility."}
{"projectname":"sql12","classification":"DESIGN","comment":"some dbs (like mckoi) make -1 the default for scale. apply the same hack as above."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: move to ioutilities @see net.sourceforge.squirrel_sql.client.update.updateutil#createzipfile(filewrapper, filewrapper[])"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: work out why kludge: for some reason, i am not able to get the sheet to size correctly. it always displays with a size that causes the sub-panels to have their scrollbars showing. add a bit of an increase in the size of the panel so the scrollbars are not displayed."}
{"projectname":"sql12","classification":"DESIGN","comment":"if sql executing produced warnings then write them out to the session message handler. todo: this is a pain. postgresql sends \"raise notice\" messages to the connection, not to the statment so they will be mixed up with warnings from other statements."}
{"projectname":"sql12","classification":"DESIGN","comment":"?? best guess: read object? ?? this is probably the wrong thing to do here, but ?? i don't know what else to try."}
{"projectname":"sql12","classification":"DESIGN","comment":"hack to deal with ingres iie* meta tables."}
{"projectname":"sql12","classification":"DESIGN","comment":"this is a bit hard coded but if we use _scale here some number displays go crazy. _numberformat.setmaximumfractiondigits(_scale);"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: spatial and fulltext indexes require a myisam engine for the table. is there a way to tell what engine is being used for a table? it may not be necessary, since the following doens't hurt if already a myisam engine: alter table my_table engine = myisam; still, this is not the kind of thing we would want to do automatically, since myisam engine is non-transactional. we will probably need to tell the user - somehow - that they need this otherwise the create index statement will fail. maybe a comment in the script and if they happen to read it they could uncomment the conversion of the engine? maybe a custom dialog?"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: delete me copyright (c) 2002-2003 johan compagner jcompagner@j-com.nl this library is free software; you can redistribute it and\/or modify it under the terms of the gnu lesser general public license as published by the free software foundation; either version 2.1 of the license, or (at your option) any later version. this library is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. see the gnu lesser general public license for more details. you should have received a copy of the gnu lesser general public license along with this library; if not, write to the free software foundation, inc., 59 temple place, suite 330, boston, ma 02111-1307 usa"}
{"projectname":"sql12","classification":"DESIGN","comment":"jason: make menu smarter. when second window for the same session is added create a hierarchical menu for all windows for the session."}
{"projectname":"sql12","classification":"DESIGN","comment":"for some reason, when the oracle plugin adds details tabs for triggers, the _tabpnl's first tab ends up being the trigger details tab and not the generic database object info tab. this causes the _tabs length to be 1 tab greater than the tabs that are actually in the _tabpnl. this throws off the selection such that the tab selected in the tab panel doesn't get rendered until the tab to the right of the selected tab is selected. this is a work-around for this problem until i can determine why the databaseobjectinfotab never makes it into the _tabpnl in the first place."}
{"projectname":"sql12","classification":"DESIGN","comment":"the following is a work-around for the problem on mac os x where the apple laf delegates to the swing popup factory but then tries to set a 90% alpha on the underlying cocoa window, which will always be null if you're using jgoodies l&f see http: www.caimito.net\/pebble\/2005\/07\/26\/1122392314480.html#comment1127522262179 this has no effect on linux\/windows"}
{"projectname":"sql12","classification":"DESIGN","comment":"coldefs not in same order as db, so search for matching coldef entry note: linear search here will normally be not too bad because most tables do not have huge numbers of columns."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: what about these viewport.font, colorchooser.font, internalframe.font, optionpane.font, \"panel.font\", scrollpane.font, desktopicon.font"}
{"projectname":"sql12","classification":"DESIGN","comment":"don't use \"real\" type. axion sets the column size to 12 by default, yet it can handle more precision. so data being copied from the real column can potentially be larger than what the column claims to support. this will be a problem for other databases that pay attention to the column size. todo: perhaps re-introduce the real type, but use the new getprecisiondigits to max out the precision."}
{"projectname":"sql12","classification":"DESIGN","comment":"this info is merely a placeholder in the tree that we can use to get index name and parent name more easily. we probably should create a indexcolumninfo that has this extra info in it."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: should the constraint name simply be the column name or something more like a constraint name?"}
{"projectname":"sql12","classification":"DESIGN","comment":"some tables have pseudo column primary keys and others do not. jdbc on some dbmss does not handle pseudo columns 'correctly'. also, gettables returns 'views' as well as tables, so the thing we are looking at might not be a table. (jdbc does not give a simple way to determine what we are looking at since the type of object is described in a dbms-specific encoding.) for these reasons, rather than testing for all these conditions, we just try using the pseudo column info to get the table data, and if that fails, we try to get the table data without using the pseudo column. todo: should we change the mode from editable to non-editable?"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: maybe instead of throwing an exception, we could ask the user if they would like us to adjust their preference for them."}
{"projectname":"sql12","classification":"DESIGN","comment":"hack: some dbs (like frontbase) don't support boolean types. i've tried tinyint, bit and boolean as the column type, and setboolean fails for all three. it's a mystery at this point what column the getboolean\/setboolean methods actually work on iin frontbase."}
{"projectname":"sql12","classification":"DESIGN","comment":"work-around for this driver, which must have \"dbo\" for schema. the jconnect family of drivers appears to not be affected and can accept a null schema, which is necessary to find tables in other schemas, within the same catalog. similarly, jtds 1.2.2 doesn't require this, yet it doesn't return non-dbo schema tables, unfortunately."}
{"projectname":"sql12","classification":"DESIGN","comment":"a dialect delegate for the progress database. todo: progress specification says that the sum of all column lengths of a table row may not exceed 31960. need to add an interface method to the hibernatedialect interface that takes an array of lengths and and checks the sum of columns for a row. this maximum number may be different across databases so this check method needs to be implemented by each dialect. @author manningr"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: decide whether this should be a bound property or not. getpropertychangereporter().firepropertychange(isqldriver.ipropertynames.name, _name, _name);"}
{"projectname":"sql12","classification":"DESIGN","comment":"hack to deal with sybase's sys tables"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: move all code other than for window creation up to aliaswindowmanager factory to handle creation of maintenance sheets for sql alias objects. @author <a href=\"mailto:colbell@users.sourceforge.net\">colin bell<\/a>"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: why shouldn't we call registersqldriver here? rmm 20070401"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: should have session listeners instead of these calls."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: just noticed that mysql 5.0 supports a multi-bit bit column by using the getobject\/setobject methods with a byte[]. so it would be valuable at some point to make this code a bit more dbms-specific"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: move all code other than for window creation up to aliaswindowmanager factory to handle creation of maintenance sheets for sql driver objects. @author <a href=\"mailto:colbell@users.sourceforge.net\">colin bell<\/a>"}
{"projectname":"sql12","classification":"DESIGN","comment":"on win 2000 & xp mnemonics are normally hidden. to make them visible you press the alt key. under the windows l&f pressing alt may not work. this code is a workaround. see bug report 4736093 for more information."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: once we're happy that jfcutilities is no longer required"}
{"projectname":"sql12","classification":"DESIGN","comment":"work-around for bug which means we must use \"dbo\" for schema"}
{"projectname":"sql12","classification":"DESIGN","comment":"unfortunately we need to remove the exising tree table component and create a new one due to limitations with replacing models in the existing sun implementation. why on earth they couldnt formalise the tree table example on jfc (which we use) a bit more is anyones guess."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: figure out why bind variables aren't working"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: make properties file application.properties so we can use class name to generate properties file name."}
{"projectname":"sql12","classification":"DESIGN","comment":"hack!!! hopefully the fk name will always be the last token!"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo need to have a generic hibernate dialect extend this to provide the types."}
{"projectname":"sql12","classification":"DESIGN","comment":"this could (perhaps more elegantly) be done by recursion"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: get rid of this class. this combobox contains all the columns in an sql table. @author <a href=\"mailto:colbell@users.sourceforge.net\">colin bell<\/a>"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: make parameter implement sqlitem interface which has a getstring method which can also be implemented by sqlstring, or sqlfragment or some such. we can then eliminate the use of instanceof below and clean up the code a bit, by making itemsinsql look like: arraylist<sqlitem> itemsinsql = new arraylist<sqlitem>();"}
{"projectname":"sql12","classification":"DESIGN","comment":"h2 uses java classes that implement the \"trigger\" interface to operate on database tables rows when an action triggers them. therefore, there is currently no way to access the source for a trigger. hopefully this will change at some point in the future. _treeapi.adddetailtab(databaseobjecttype.trigger, new triggersourcetab(\"the source of the trigger\"));"}
{"projectname":"sql12","classification":"DESIGN","comment":"arrays of strings are a special case. in xmlbeanwriter method processproperty an array of strings is turned into a list of stringwrapper objects in the xml (presumably so that when reading them back we have a class that we can call setters on). thus, when reading back an array of strings we actually read an array of stringwrappers, which gives a type mis-match in the following arraycopy. therefore we need to convert the data that is currently in the stringwrapper objects into actual strings."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: move this to ioutilities extracts the specified zip file to the specified output directory. @param zipfile @param outputdirectory @throws ioexception"}
{"projectname":"sql12","classification":"DESIGN","comment":"set the password for this alias. @param password the new password. @throws validationexception todo: what conditions?"}
{"projectname":"sql12","classification":"DESIGN","comment":"tell caller that the underlying data was not updated ?? is this always true, or could the data be updated with a warning?"}
{"projectname":"sql12","classification":"DESIGN","comment":"empty string ('') seems to be represented as null in some drivers. not sure if this is the best thing to do here, but it fixes an issue where sql returns is set default to '', when it is already null."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: pass in a message handler so user gets error msgs."}
{"projectname":"sql12","classification":"DESIGN","comment":"facade methods for imessagehandler. we don't want to allow code to directly access an internal imessagehandler, now that the imessagehandler interface requires an exceptionformatter to be injected for methods that accept exceptions."}
{"projectname":"sql12","classification":"DESIGN","comment":"jason: mow that multiple object trees exist storing the edit where by objectinfo within session won't work. it needs to be objectinfo within something else. private final map _editwherecolssheets = new hashmap();"}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: put in all the property accessors"}
{"projectname":"sql12","classification":"DESIGN","comment":"db delete worked correctly, so now delete from table important: the user and the creator both work through the sortabletablemodel, not the actual model. thus the row indexes to delete are given in the sortabletablemodel row numbers, so we must work through that model model to actually do the delete."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: figure out a more reliable way to handle other type which indicates a database-specific type."}
{"projectname":"sql12","classification":"DESIGN","comment":"todo: is giving a fk constraint a name universally supported and done the same way on every database?"}
{"projectname":"sql12","classification":"DOCUMENTATION","comment":"todo: javadoc @author colin bell"}
{"projectname":"sql12","classification":"DOCUMENTATION","comment":"this class manages the windows for the application. todo: correct these notes <p>when a session closes the window manager will ensure that all of the windows for that sesion are closed. <p>similarily when a window is closed the windows manager will ensure that references to the window are removed for the session. jason: prior to this patch there was some code movement from this class to sessionmanager. the idea being that sessionmanager was the controller. do we still want to do this? remember in the future there will probably be an sdi as well as mdi version of the windows. @author <a href=\"mailto:colbell@users.sourceforge.net\">colin bell<\/a> @author <a href=\"mailto:jmheight@users.sourceforge.net\">jason height<\/a>"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: sort the list."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"?? remember which column is the rowid (if any) so we can ?? prevent editing on it"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo plugin supports only the main session window"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"called when app shutdown. todo: put throws clause back in"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo i18n"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: tooltips"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: fillfactor, on [primary], etc."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: allow the user to specify ignore case or preserve case."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: when message are can have some text in red (error) and some normal then put out errors in red."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: tell the user that the selected destination schema is the same as the source schema. monitor.showmessagedialog(...)"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: on [primary]"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: maybe prompt the user to ask to append the records, ignoring errors for constraint violations?"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: refresh"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: maybe someday we could inform the user that the imported key can't be created because the list of tables they've selected, doesn't include the table that this foreign key depends upon. for now, just log a warning and skip it."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: i18n"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: hookup with interbase spec and adjust these as necessary."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: figure out how to get then name of the table that the trigger is on. \"and tables.name = ? \" +"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: should also make sure that each of the columns is made \"not null\""}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"not implemented"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"sorts the specified destinfos array based on the order of the sourceinfos array. not a very efficient algorthim, but it gets the job done. todo: rewrite this using collections sorting capability. @param sourceinfos @param destinfos @param sourcetablename @param desttablename @return a re-ordered version of the specified destinfos array @throws mappingexception if the arrays differ in length or column names."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: perhaps we can tell the user when they click \"copy table\" if the source session is axion and they want primary keys that it's not possible."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: use the destination database type to derive a format that is acceptable."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: if the use checks \"export entire table\" and doesn't select all, then the selected indices are not set, and this check doesn't properly detect missing data. if export entire table is selected, we need to set the selected indexes below correctly."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: create the child index st"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"we just copied the last table. now it is safe to copy the constraints.(well, that is, if all fk dependencies are met in the group of tables being copied. todo: new feature could be to examine table list for fk's in tables not in the list then prompt the user to add those missing tables to the list."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"a dialect delegate for the axion database. todo: this dialect is not yet complete. need to provide implementations wherever \"not yet implemented\" appears."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: allow the user to specify the sequence name for dialects that don't natively support auto-increment columns without using sequence\/trigger combo."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: finish i18n"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: need to enhance the index dialog to allow specifying storage option. for now just accept the default for the index access method. valuesmap.put(\"indextype\", \"using btree\");"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: put throws clause back in empty method."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo?? columndisplaydefinition should also have the type (string, date, double,integer,boolean)"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: need to add storageoptions to the add index dialog valuesmap.put(st_storage_option_key, );"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"move any i18n files that are located in the core downloads dir to the i18n downloads dir. the spring application context will not load properly (for some unknown reason) when there are i18n jars in the classpath. so as a work-around, we simply ensure that they are where they should be anyway. previously we were not as careful about this, so it is possible that i18n jars were copied into the core downloads directory."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: implement this better"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo need to implement or change the message"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: need to allow user to specify this"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"a dialect delegate for the timesten database. todo: this dialect is not yet complete. need to provide implementations wherever \"not yet implemented\" appears."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"a dialect delegate for the sun microsystems hadb (high-availability) database. todo: this dialect is not yet complete. need to provide implementations wherever \"not yet implemented\" appears. @author manningr"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"not yet ready dataimportglobalpreferencestab tab = new dataimportglobalpreferencestab(); return new iglobalpreferencespanel[] { tab };"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: set the total for the progress bar."}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"?? future: may want to create tablepopupmenu to allow cut\/copy\/paste operations"}
{"projectname":"sql12","classification":"IMPLEMENTATION","comment":"todo: ask the user if they want to \"undo\" the changes that the paste made. alternatively show them the specific problem and let them fix it. then allow them to retry the operation, starting from the point at which the previous operation failed."}
{"projectname":"sql12","classification":"TEST","comment":"need better test for windows"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"flag for whether we have already loaded the properties or not"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"history file not found for user - first time user ran pgm."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default is 12 point, so define font relative to that"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getting java.sql.driver to run shutdown command"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"to change body of implemented methods use file | settings | file templates."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiescontroller.hint=set session colors for this alias]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove trailing \",\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"}"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"??"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"version this is optional. if you don't want to give out this info, please enter \"n\/a\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expanders - trigger and index expanders are added inside the table expander _treeapi.addexpander(databaseobjecttype.schema, new schemaexpander());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the code bellow is only for embedded derby driver"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register custom datatypecomponent factory for derby clob type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle null, which is shown as the special string \"<null>\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"lazily create the event:"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.retrievingdefaultvalues=error retrieving default column values]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_treeapi.adddetailtab(databaseobjecttype.sequence, new databaseobjectinfotab()); _treeapi.adddetailtab(databaseobjecttype.sequence, new sequencedetailstab());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no default in db. if nullable, use null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there was an error in the conversion"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"about to delete last thing in field, so replace with null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.filewillbecreated={0} not found - will be created]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"to make the shortcut visible in the popup"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.fileexistsreplace={0}\\nalready exists. do you want to replace it?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\/ ibm db 2 specific code to read procedure definitions."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"it is handy to have the cannonical path name to show user in error messages. since getting that name might involve an ioexception, we need to put it inside a try statement. however, since the file does exist there is no good reason for getting an ioexception at this point, but if we get one there is something seriously wrong and we want to abort. therefore it make sense to get that name here and save it for later use."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load plugin preferences."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"currently, as of milestone 3, axion doesn't support \"schemas\" like other databases. so, set the schema to emtpy string if we detect an axion session."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the dataobject returns a string to put into the popup which can later be converted to the appropriate object type."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"have the datatype object fill in the appropriate kind of value into the appropriate variable position in the prepared stmt"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"bad export - do not proceed with command the exportdata() method has already put up a message to the user saying the export failed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"datatypes may limit the initial data read from the db, e.g. to minimize the time needed for the initial load of the table. to edit the contents of a cell, we require that the entire contents of the data element be present in the cell before editing. therefore we ask the datatype if we need to re-read the data contents without limiting it, and do that read if needed. if there is a problem during the read (e.g. we cannot identify exactly one row in the db matching the current row in the table), then the cell is not editable. the reverse is not true - if we succeed in reading the data, there may still be other reasons why we cannot edit it, so we need to check for it being editable after the read"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displaysessionstatistics=display database session statistics]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the parse did not find xml, or it was mal-formed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test make many paths"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"it's error to have '8' and '9' in octal number"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table doesn't exist in source db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"in case it already exists"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"gwg xml format check code"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the indexes are in ascending order, but we want to delete in descending order (see previous comment), so run through the list backwards."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.databasedrivers=database drivers]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[favs.namemustnotbeblank=name cannot be blank.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private string getfilename(file dir, string name) { return getfilename(new file(dir, name)); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"users."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final static ilogger s_log = loggercontroller.createlogger(altertabledialog.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no end bracket, params might follow"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these files contain images etc. we try to filter out these props."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"re-registering driver is necessary for embedded derby"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.unknownerrorupdate=unknown problem during update.\\nno count of inserted rows was returned.\\ndatabase may be corrupted!]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"typename"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#gethelpfilename()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"method tests"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"resultset rs = con.getmetadata().gettables(\"dbcopysrc\", null, \"bigint_type_table\", new string[]{ \"table\" });"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this might be because an table alias is used maybe with an as before it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"empty method."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ignore any sqlexceptions. this would only if we could not get column info from the sql database meta data."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"open file output stream"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the ps to read from the file we just created."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see if there was a problem during parsing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"increases component width by 40 pixels"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"increases component width by 20 pixels"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"allow the user to set \"0\" for the fetch size to indicate that this should not be called. jdbc-odbc bridge driver fails to execute sql once you have set the fetch size to *any* value."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"impossible."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not too many old files"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first time through, skip the double spacing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.alterdlgalter=alter]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[pastetableaction.error.destdbobj=the destination database doesn't support copying tables into '{0}' objects.\\n please select a schema to paste into.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if no columns defined, return a generic class to avoid anything throwing an exception."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sort the indexes into ascending order (because that is the only function easilly available from the arrays class)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"read the entire row, since some drivers complain if columns are read out of sequence"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the second time that catalogs are asked for, return two"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.wrotefixedfile=wrote file {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ss: now select\/reorder columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"done before actually reading the data from the resultset. if done after reading the data from the resultset oracle throws a nullpointerexception when processing resultsetmetadata methods for the resultset returned for databasemetadata.getexportedkeys."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"as the jcc driver code is obfuscated, we do not check the full class name, but resort to checking a prefix and suffix instead. in my version, the full class name is \"com.ibm.db2.jcc.c.sqlexception\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"prefix for the jcc sqlexception class name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"class name for the jcc sqlexception class"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setup the applications look and feel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the return type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"adding 10 000 000 milliseconds from the orgtime of file f1"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cannot pass byte array to class.forname"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"supports session main window only"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"here the max line length == original line size - so it doesn't get trimmed of white space."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.nosql=no sql selected for execution.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"settings gap sizes"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"qname l_qn = new qname( \"http: sqlvalidator.mimer.com\/v1\", \"sessiondata\" );"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expected"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"empty body."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[firebird.showtrigger=show trigger source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"filling columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user has cancelled the query execution."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"appending labels with optional components"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"adding titles"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the user chooses neither fixed value nor auto-increment, then clear the \"fixed value\" field if it has a value."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[firebird.showproceduresource=show procedure source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removed for duplicate line"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no i18n, developers should write english props."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the jtextcomponent that is being used for editing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the first time that schemas are asked for, return just one"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the connection technology used, could be odbc, jdbc, ado this is optional. if you don't want to give out this info, please enter \"n\/a\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.outputstatus=building output...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to be sure we get only one schema"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use the session key you got from the opensession call here"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[firebird.seqdetails=display sequence details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the target server and name space"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.nosourcedir=please choose a source directory.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"execute the sql command in the sql tab and then display the sql tab."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save the pointer needed to enable editing of data on-demand"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if doesnt exist prompt to create it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if we hit the end of the file without processing the current record"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copy the header data from the column array to the header string array"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"logger for this class"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since the letter wasn't a special letter, this will be the first letter of our current column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only check once per session"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setting color"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"need to return a clone, and can't use clone because values.length might be greater than columnscount"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this will be a text qualified column, so we need to set startedwithqualifier to make it enter the seperate branch to handle text qualified columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the jtable used for displaying all db resultset info."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test make a long path"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since user is now using popup, stop editing using the in-cell editor, if any"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"rob: removed replacement via regexp because it needed several regexp escapes in val."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there was a problem with the read it would be nice to report this to the user, but if we try we get in trouble in some cases where the data is continually re-read after the dialog goes away (because the cell is being re-painted). cell is not editable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these are all more or less global loop variables to keep from needing to pass them all into various methods during parsing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first we have the methods for in-cell and text-table operations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"delete the row from the table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for convenience, cast the value object to its type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have the whole contents of the clob"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the suffix is \".tmp\" then send it to the array"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlreformatter.xmlwarning2=xml warning]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the following pointer is needed to allow the \"make editable button to tell the application to set up an editable display panel"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not a uri - assume it is a string filename."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mapdataset.value=value]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these objects do not depend on catalogs or schemas. it is enough if we load them once."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.createplantablemsg=the oracle plan table '{0}' doesnt exist in the current schema. do you want to create it?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i have seen the reference to the outer class being null when this method is called. i have seen it only with the runtime jars and on linux. i could not reproduce in my ide."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.usesyntaxplugin=code completion will work better if you use the syntax plugin. get it from squirrelsql.org, it's free!]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cut table image and draw on the page"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column not in model"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"result of checking for jaybird driver with major version >= 2"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"delete the old file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dataholder res = conn.runclassmethod(\"%library.cmutilities\", \"getexecutionplan\", argv, database.ret_object);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.allobjects=all objects]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data is a string, so we need to convert to real object"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[firebird.trigdetails=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"noi18n"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private int _lastsessionidx = 1;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make sure there is an instance"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"line should look like : this is a line with an <span>embedded key<\/span> in it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"double headerwidth = tableheader.getwidth() * scale;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"might also be a catalog or a schema name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tab button"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the user input"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"just in case table is editable, call creator to set up cell editors"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some actions dont have accelerators"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[taskthreadpool.errorduringtaskexecmsg=error ocured during task execution:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the field is binary and not in the format expected by the datatype default to hex"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"creating a filter that catches \"*.tst\" files."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"process the listeners last to first, notifying those that are interested in this event."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"inserts are not properly separated. we give up."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"call the underlying model to get the whole data, if possible"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"better safe than sorry!"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tables that have at least one child table and have a least one parent table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add controls for file handling, but only if datatype can do file operations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we want to delete rows from the end of the table towards the beginning of the table. if we delete from the front to the back, that throws off the indexes of the rows after each delete and we would have to compensate for that. example: if we want to delete rows 2 and 4 and do it in that order, then after deleteing row 2 the row that used to be row 4 is now actually row 3, so we would have to subtract 1 from the index to get the row to delete. on the other hand, if we delete row 4 first, then the indexes of all rows prior to that one have not been affected, so we can then delete row 2 without any complications."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private void appendprivelegetobuffer(stringbuffer pbuffer, string psprivilege)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the default values from the db for the table columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.translators=translators]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make the button looks the same for all laf's"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"childs"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"in case the connection won't be able to tell its auto commit state, this is the best default we have."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the values from the \"not use\" list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check for informix - it has very \"special\" qualified names"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"shift the image for pressed buttons"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the list of rows may be empty, in which case we just return."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"end of mouse listener"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.missingtarnslation=missing translations]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"making nice rollover effect we use the same listener for all buttons"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add a panel containing binary data editing options, if needed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.alterdlgclose=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do the conversion into the object in a safe manner"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create new object to hold the different value, but use the same internal clob pointer as the original"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for convenience, cast the existing object"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"deactivate indexes during restore\" \"restore without creating shadows\" \"do not reserve space for record versions\" \"restores one table at a time\" \"do not restore database validity conditions\" \"replace database from backup file\" \"override old page size\" \"new page size\" \"restore\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the line is a comment (as per the rfc 2483)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"unknown\" types are treated as strings internally in squirrel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"######################################################################## ########## events ########################################################################"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"malformed uri"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getroot() doesn't appear to return the deepest window, but the first one. if you have a dialog owned by a window you get the dialog, not the window."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the uri is not a valid 'file:' uri"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no existing clob to re-use"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tests"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now, check to be sure we get both catalogs."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the original object is not null, then it contains a clob object that we need to re-use, since that is the dbs reference to the clob data area. otherwise, we set the original clob to null, and the write method needs to know to set the field to null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"a subclass of foo with the same values as the original"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"different only by type - same name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create an empty set for the \"not use\" list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"failure tests"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"internal class for handling key events during editing of both jtextfield and jtextarea."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now the functions for the popup-related operations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expectations that are specific to this test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private tablecolumnsdataset iut = null;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check reference equality to be sure that it isn't the exact same object."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the following can cause and exception if the text is not formatted correctly"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle special case of delete with <null> contents"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add buttons to button panel"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is acceptable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"common mock objects"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test constants"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the target dbms, could be mimer sql engine, oracle, ... this is optional. if you don't want to give out this info, please enter \"n\/a\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"labels"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expect getfile for updated files that were downloaded"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expected fileoperationinfos for files that will be installed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if new data is same as old data, in which case we do not update the underlying data. this is not an optimization (though it does speed things up). we need to do this to avoid an error when we check for rows being changed in the db. if the new value and old value are the same, when we look to see if any rows already exist with the new value, it will find the existing row and claim that the update will make one row identical to the changed row (i.e. that there will be two identical rows in the db) which is not true. so we avoid the problem by not updating the db if the data has not been changed. this can happen if user changes the cell contents, then changes them back before exiting the cell."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"artifactxmlbean"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"visible (gui)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"row 3"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save various information which is needed to do update & cancel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"call the function in the app code that saves the data in the persistant storage (e.g. a database). the success or failure of that function (as indicated by the absance or presence of a result errpor\/warning message) determines the result of this call. (since the table is supposed to be editable, we should have an idatasetupdateabletablemodel object set in our super class.)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user checks"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create an empty set for the \"use\" list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"non-delete when null => clear field and add text"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if there was a problem with converting, then just fall through and continue as if there was no default given in the db. otherwise, use the converted object"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"try to use the db default value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mm-mysql driver doesnt support null for column name."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user enters something when field is null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.parsingfinish=parsing finished]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the values from the \"use\" list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now, create an array large enough to hold the original and the new"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"just send the text to the output file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the values from the \"not use\" list and convert to sorted set"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.info=info]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check that the text is a valid representation"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"helper methods"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"field is not nullable, so create a reasonable default value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.developers=developers]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setup dest mock file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i cannot think of any reason for doing anything at all here"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"downloads directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check for user deletes last thing in field"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use factory to get the appropriate editor"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"inject mocks"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the data is not binary, then there is no need for conversion. if the data is hex with ascii not shown as chars, then no conversion needed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return the expected format for this data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"case session_bean_grant_and_revoke: return firebirdmanagergrantpreferencebean.class.getclassloader();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setup source mock file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we reach here we could not calculate a place to add the new table frame. now it will automatically be added at (0,0)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell the user that they won't be able to show the explain plan"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public int getpixelwidth() { int pixelbycm = (int) (toolkit.getdefaulttoolkit().getscreenresolution() * cm_by_inch + 0.5); return (int)(_format.getwidth() * pixelbycm + 0.5); } public int getpixelheight() { int pixelbycm = (int) (toolkit.getdefaulttoolkit().getscreenresolution() * cm_by_inch + 0.5); return (int)(_format.getheight() * pixelbycm + 0.5); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cannot mock urls, they are final and so they cannot be subclassed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.reformatxml=reformat xml]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert number conversion issue into io issue for consistancy"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"double zoom = _desktopcontroller.getzoomer().getzoom();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"g.filloval((int)(zoom*fp.x + 0.5) - rad, (int)(zoom*fp.y+0.5) - rad, 2 * rad, 2 * rad);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"clob cannot be used in where clause"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the old view is preserved to eventually preserve folding points"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no need for conversion"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"database-related functions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pktable_name pkcolumn_name fkcolumn_name fk_name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"delete when null => original value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for convenience cast the object to clobdescriptor"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test that the string is valid by converting it into an object of this data type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"file io related functions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default to hex if unknown base passed in"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setting the starting position is ugly. i just picked a point."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell user that there was a problem"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no problems, so indicate a successful update of the underlying data. in case we are editing an sql result that contains the edited colum more than once, we need to tell the caller to update all columns. otherwise generation of where clauses for further editing will fail."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression for harmony-46"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.sourcedir=source directory]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"downloads\/plugin directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.nonativetoasciioutdir=cannot convert files without a native2ascii output dir.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"overriding superclass behavior"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql disallows quoted column identifiers when adding a primary key."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cleanup resources used"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if either of the values is null and the other is not, then the data has changed and we fall-through to the change process. otherwise, check the object contents."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"downloads\/core directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"adding rows"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there are many of these \"tables\", that postgresql throws sqlexceptions for whenever a table-like operation is attempted."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we reach this point, the value has been changed, so fall through to next section"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fail(\"not yet implemented\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no update done to underlying data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.formatxls=export ms excel (xls) file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"show all tooltips for ten seconds before hiding"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell the underlying data model to make itself editable, which includes telling the gui to rebuild itself"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mmsql.sqlscripts=sql scripts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"postgresql (at least 7.3.2) returns false for supportsstoredprocedures() even though it does support them."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.columncommentlabel={0} does not support column comments]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"non-empty set of rows to delete. make sure user wants to delete"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"end of combined export and execute operations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.translationsgenerationcount=generated {0} templates to {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this was originaly done every time. and the count of instantiated objects was amazing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we look forward"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[postgresplugin.showproceduresource=show procedure source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcontroller.replacefile=the export file already exisits. would you like to replace it?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"menues that are also shown in the main window session menu might be in this popup. if we don't remove them, the session won't be garbage collected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"look for illegal chars"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcontroller.nofile=you must provide a export file name.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if our separator is the regular expression special char '|', then quote it before formatting."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first attempt to add data to underlying table model"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcommand.writefilesuccess=export to file \"{0}\" is complete.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[procedurecolumnstab.title=columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pick a tableinfo to remove and replace"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql disallows quoted constraint names"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.noworkdirspecified=no working directory specified.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return the text from the file since it does represent a valid data value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.date=date]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mock objects"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if this isn't instanceof org.hibernate.type.collectiontype a nosuchmethodexception will be thrown"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"hand file input stream to datatype object for import also, handle file io errors here so that datatype objects do not have to."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"command returned non-standard value. ask user before proceeding."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"iobjecttreeapi api = _session.getobjecttreeapi(_plugin);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell creator to delete from db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setup expectations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolspanel.usecolumns=use columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[bookmarksaccessor.bookmarkspluginneeded=running bookmarks is only available with the bookmarks plugin.\\nget the plugin from www.squirrelsql.org. it's free.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"'8' and '9' already handled"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select viewtext from informix.systables as t1, informix.sysviews as t2 where tabname = 'a_view' and t2.tabid = t1.tabid"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we don't yet have the need to discriminate by version."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tablepopupmenu.export=export csv \/ ms excel ...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check for possibly bad return from child"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"deletes the last \", \""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[procedurecolumnstab.hint=show columns for the selected procedure]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the imput stream (so that datatype objects don't have to)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"code completion has been done within code completion. now just replace what all candidates have in common."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see actionlistener#actionperformed(actionevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mocksqlconnection"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigcontroller.noprovidermsg=missing sessionfactoryimplprovider .\\nchanges cannot be applied.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockthreadpool"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.nofilesopened=no file found.\\nsee message panel for details.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateattribuitedataset.identifier=identifier]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we need this buffer because this method may be called asynchronously to the event dispatch thread what could happen is, that _currentaliasinfos ist changed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"unfortunately we cannot simply call getcolumntypealtersql since \"serial\" type is 4 (which is the same as java.sql.types.integer, so we would get back an integer column, not a serial column). so we piece it together ourselves: alter table dbcopydest:\"informix\".serialtest modify myid integer"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make a few calls"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"example for this code: completion should from kv k inner join fetch k.positionen as posses where posses.artnr = 'sdfsdf'"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can't work with isessionaction because if a result window is on top the session in a isessionaction is null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"should at least bind the tablename to a bind var in the sql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 doesn't support cascade, set default, or set null for fk constraint update action"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 doesn't support set default for fk constraint delete action"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockconnection"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select seqschema,seqname,definer,definertype,owner,ownertype,seqid,seqtype,increment,start,maxvalue,minvalue, nextcachefirstvalue,cycle,cache,order,datatypeid,sourcetypeid,create_time,alter_time,precision,origin, remarks from syscat.sequences where seqname = ? and seqschema = <schema>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private static final string perf_key_obj_tab_div_loc = \"squirrel.hibernateplugin.objtabdivlocasint\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclepluginpreferencespanel.sessiontimezonett=set the session timezone to view 'with local timezone' data types]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mocksqldriver"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cancel any current cell editing operations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"light blue colors"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jason: messages height should be stored with this."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.openioneditor=open in editor]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mappingroot.user=jdbc user (hibernate)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace \"2011\" with types.nclob when java6 is the minimum supported version"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\/ now check length of strings in splitpieces1 again"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this should override the default tokenizer"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"import the data back from the same file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"58, 110, 165); 189, 220, 251); 153, 179, 205);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace \"-15\" with types.nchar when java6 is the minimum supported version"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"simulate the user switching the statement separator for the session"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 spec says max=2147483647, but the driver throws an exception"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"to change body of overridden methods use file | settings | file templates."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"wait for command to complete"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.rows=rows]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some cols are not to be used"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the problem with this is data is longvarbinary and there are no mckoi sql functions to convert it to a character string which is executing the sql produced by this method is supposed to return. return \"select data from sys_info.susrview where name = '\" + viewname + \"'\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.workdirisnotadirectory=working directory {0} is not a directory]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"<drop_index_statement> ::= drop index <index_name> [on <table_name>]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we don't stub return because we want to verify that the object filter was actually used."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table of which we are part (needed for creating popup dialog)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if all cols are in the \"to use\" side, delete from editwherecols"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create all of the gui objects now"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"determine the position to place the new internal frame. ensure that the right end of the internal frame doesn't exend past the right end the parent frame. use a fudge factor as the dim.width doesn't appear to get the final width of the internal frame (e.g. where pt.x + dim.width == parentbounds.width, the new internal frame still extends past the right end of the parent frame)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the registrations below are made in support for new types introduced in java6"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do not try to be fancy and insert the data where the user is looking, just stuff it into the actual model and re-paint the table when the 'table changed' event is fired."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"((imainframe)comp).addinternalframe(rdif, false); rdif.setlayer(jlayeredpane.popup_layer);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.tablecontents=table contents:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.buffergets=buffer gets]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user is ok with overwriting file we do not need to do anything special to overwrite (as opposed to appending) since the outputstring starts at the beginning of the file by default."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[allbluesboldmetaltheme.name=all blues - bold]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql 4.x and below mysql 5.x and above"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"export object to osx_file, execute program on it, import it back"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockapplication"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"export data to file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.parsesuccess=added {0} new and {1} replaced properties to {2}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that the proper type of object is selected in the object tree."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.loadsqlhistory=unable to load sql history from persistant storage.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cannot execute a null command"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can be done as follows in ms sqlserver insert into mytable(id,name) select 1, 'pizza' union select 2, 'donuts' union select 3, 'milk';"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only oracle supports materialized views directly."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since the above did not throw an exception, we now have a good new data object, so change the text area to reflect that new object."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"export object to osx_file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we see that the replacement was already done before so we can count this as replaced"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if user did anything other than default, then save their options"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the data to the existing tables"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[errorstream.multipleerrors={0} errors detected]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[informixplugin.showproceduresource=show procedure source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.savesqlhistory=unable to write sql queries to persistant storage.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the treetablenode interface."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table test3 alter column nullvc varchar(30)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load resources."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expanders - trigger and index expanders are added inside the table expander"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some people put new line characters in their sql to have nice debug output. remove these new line characters too."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since we depend upon the informix-specific ifmxconnection class, we need to keep a reference to the isession we are associated with. however, this session could be closed, at which time we want to give up our reference so that it can be garbage collected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"qname l_qn = new qname( \"http: sqlvalidator.mimer.com\/v1\", \"validatorresult\" );"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[pleasewaitdialog.queryexecuting=query is executing]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new converttostringbuffercommand(_session.getsqlpanelapi(_plugin)).execute();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we could tell user here that export was canceled, but i don't think its necessary, and that avoids forcing user to do yet another annoying mouse click."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"execute command"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new inquotescommand(_session.getsqlpanelapi(_plugin)).execute();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"non-null return tells caller there was a problem"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"by default null == types we return only cached types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"keys that can be embedded in templates for replacement later."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i tried 8000 for the max length of varchar and ingres gives an exception (cannot assign a value of type long varchar to a varchar field). so i limit this field to 4000 for now - the ingres product documentation indicated that 32k was acceptable. i've tested 4k and it seems to work fine."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"create view $viewname$ \" + \"as $selectstatement$ $with$ $checkoptiontype$ $checkoption$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first time user has run pgm."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"axion doesn't allow column alterations of the nullable attribute. fortunately, it doesn't require this to add a primary key."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the next top level ket is the counterpart to bra"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.tableheader.tables=tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_leftdata.add(row[0]); _rightdata.add(row[1]);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"whether nulls are allowed or not"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"adding labels and separators"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"rows"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"drop index $indexname$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needed to resize completion panle appropriately see initializationof _curcompletionpanelsize"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.splash.showmainwindow=showing main window...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"create $unique$ $storageoption$ index $indexname$ \" + \"on $tablename$ ( $columnname; separator=\\\",\\\"$ )\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setters and getters for each field."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"create view $viewname$ \" + \"as $selectstatement$ $withcheckoption$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"schema dependent data. are changed only in this class"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no flaten. we would turn statement parts to comment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"without this the completion panel's size will be weird"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateattribuitedataset.attrname=attribute name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"null == schemaloadinfos[0].schemaname is the case when there are no _schemas specified schemaloadinfos.length will then be 1."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is what the spec says: create sequence [schema_name.]sequence_name [increment by value], [start with value], [maxvalue value | nomaxvalue], [minvalue value | nominvalue], [cylce | nocylce]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.chooseplantabletitle=available plan_tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"folder to contain extra lafs supplied by the user."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"special handling of operations while editing this data type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"initial load of prefs."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"abort the export"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add a default value \"alter table $tablename$ \" + \"alter $columnname$ set default $defaultvalue$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the sql statement to be validated against the standard"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setup preferences to make jgoodies laf look better. uimanager.put(options.use_system_fonts_app_key, boolean.true); uimanager.put(options.use_narrow_buttons_key, boolean.true);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add combo box for command to execute"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter table $tablename$ alter column $columnname$ set $nullable$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.staticfonteanbled=enabled]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"initialize all the laf controllers."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"directory containing the standard laf jar files."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load info about the standard lafs that come with this plugin."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_prefs = plugin.getlafpreferences();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set object tree color panel"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exportedtofile=data successfully exported to file {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add each of the panels created by the datatype objects for editing their own properties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.chooseplantablemsg=choose a plan_table to store the result in]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cannot use a sequence for the default value of a column. however, we could always reference the ssequence in a trigger:"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"in oracle, no action is implied when the on delete clause is omitted"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.jars=l & f jars:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"force the laf to be set even if tonic is the current one. this allows changes to take affect."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"folder to store user settings."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this should be a default tokenizer which uses \";\" as statement sep"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table tablename alter column columnname set default nextval('tablename_columnname_seq'); alter sequence tablename_columnname_seq owned by tablename.columnname;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select last_value, max_value, min_value, cache_value, increment_by, is_cycled from sequencename;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"folder that stores themepacks for this laf."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to ensure that we allow sessions that are ending to be gc'd."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sql.append(dialectutils.shapequalifiableidentifier(newtablename, qualifier, prefs, this));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiespanel.synccomponentbackgroundcolorchklabel=use toolbar background color for all components]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mocksessionproperties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put all available \"look and feel\" objects into collections keyed by laf name and by the class name."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table oldtablename rename to newtablename;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"postgresql 8.0 reports length as -1 sometimes. why??"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockfontinfo"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get each table's info"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[whereclausepanel.whereclauselabel=where clause]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this datatype does not limit the data read during the initial load of the table, so there is no need to re-read the complete data later"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the pw. if user name is anonymous this can be anything. but it has to be supplied anyway."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.cannotopenfile=cannot open file {0}.\\nerror was:{1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql disallows quoted column identifiers when dropping a column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql disallows quoted column identifiers."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"file exists, is normal and is writable, so see if user wants to overwrite contents of file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.printcachefilelocation=print cache file path to message panel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle mouse events for double-click creation of popup dialog. this happens only in the jtextfield, not the jtextarea, so we can make this an inner class within this method rather than a separate inner class as is done with the keytexthandler class."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"in oracle, matchfull modifier is not supported"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove all instances of the offending char"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the following is used in both cell and popup operations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return a jtextarea usable in the cellpopupdialog and fill in the value."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolspanel.cannotremoveallcols=you cannot remove all of the fields from the 'use columns' list.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user wants field to be true"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dist"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"property panels for squirrel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user wants field to be false"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1646886: if we've already seen the parameter, don't create another instance as this will force the user to enter the same value twice. add the previous instance to itemsinsql though so that the parameters value gets propagated to the right spot(s) in the sql statement."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"let user enter t, t, y, y, or 1 for true, and f, f, n, n, or 0 for false"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user has not entered anything or has reset to defaults, so make sure there is no entry for this column in the saved info"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mappingroot.tostring=mapping]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create trigger sql for column that is to be auto-incremented"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sqlexecutertask task = new sqlexecutertask(_session, sql, new defaultsqlexecuterhandler(_session)); jmh to run async_session.getapplication().getthreadpool().addtask(task); jmhtask.run(); set the ? to the statement identifier"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"registercolumntype(types.clob, 31982, \"varchar($l)\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see if file exists"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"rename view has that same syntax as that of tables."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"in postgresql we need to add a sequence to support auto-increment (name: tablename_colname_seq)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create [force] view [if not exists] newviewname [(columnname [,..])] as select \"create view $viewname$ \" + \"as $selectstatement$ $with$ $checkoptiontype$ $checkoption$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"select view_definition \" + \"from information_schema.views \" + \"where table_schema = ? \" + \"and table_name = ? \";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"prepare to have a lot of documentevent.eventtype.change"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"display the result set."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the constructor above sets this from resources, but we'll override it with the name of the index."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"why null??"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1.5 \"@ident\" annotation noi18n"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expand all of the rows in the tree if the root is non null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create add sequence sql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we must iterate through this in descending order to avoid removing, say, item #2, making item #4 into item #3, inadvertently removing item #5."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"throw new unsupportedoperationexception(\"oracle doesn't support using sequences for column defaults\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update table set <columnname>_2 = <columnname>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle won't allow in-place conversion between clob and varchar"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.generatedependend=generate scripts for all dependent objects]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.executedlabel=executed:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop <columnname>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[postgresplugin.showindexsource=show index source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now, check to be sure we get both schemas."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sybase adaptive server enterprise"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[createtablescriptcommand.error.getprimarykey=unable to get primary key info for table {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"serveral dbs automatically create an index for primary key fields and return this index in getindexinfo(). we remove this index from the script because it would break the script with an index already exists error."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle doesn't allow unique bitmap indexes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"view tab"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tabs and newlines get put into the text before this check, so remove them this only applies to popup editing since these chars are not passed to this level by the in-cell editor."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"when field is not null delete means set to null, so do it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"final resources rsrc = _session.getapplication().getresources();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":":new.id := seq_name@nextval;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scriptfulltext=script full-text indexes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-----------------------------------------------------------------"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"append nothing - standard says this is equivalent to no action and some dbs (e.g. oracle don't accept ... no action)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert file text into a string special case: some systems tack a newline at the end of the text read. assume that if last char is a newline that we want everything else in the line."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"--- table scripting panel ----------------------------------------------"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this works because all the idatabaseobjectinfo objects come from the same source, so their references are equal."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setrenderer(new cellrenderer());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"field is not nullable or input was not a delete we have already handled all legal input, so just tell user this is being ignored"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"chop off \"check on column \";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"note: there are two rows. note: mssqlconstraint holds the columns in the table participating in the key. note: foreignkeyconstraint holds the columns in the referenced table in the same order."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.elapsedtimelabel=elapsed time (seconds):]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since dialect doesn't support altering sequences, drop then re-create."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now tableandcolumns[0] contains the table name and tableandcolumns[1] contains the bracketed list of columns."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if it's primary, just write it without the filegroup prefix."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop sequence sequencename cascade;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mainframe.savesize=save size]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table tablename add constraint constraintname unique (column1, column2);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dialectutils.columndropunsupported={0} doesn''t support dropping a column]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"owner object grantee grantor protecttype action column ---------------------- ------------------ ------- ----------- ------ dbo billing_bak public dbo grant delete . dbo billing_bak public dbo grant insert . dbo billing_bak public dbo grant select (all+new) dbo billing_bak public dbo grant update (all+new) dbo billing_bak usbilling dbo deny insert ."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the parameter names and types use the session id you got from the opensession call here"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mainframe.restoresize=restore saved size]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"name owner type created_datetime billing dbo user table 2004-03-08 10:41:05.030"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"drop sequence $sequencename$ $cascade$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user must have supplied a file name."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"create sequence $sequencename$ $startwith$ $increment$ $minimum$ $maximum$ $cache$ $cycle$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"<create_sequence_statement> ::= create sequence [<schema_name>.]<sequence_name> [increment by <integer>] [start with <integer>] [maxvalue <integer> | nomaxvalue] [minvalue <integer> | nominvalue] [cycle | nocycle] [cache <unsigned_integer> | nocache] [order | noorder]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"file name verification operations are the same for both export and execute, so do that work here for both. if file name is null or empty, do not proceed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there is a reason that we don't want to use databaseobjecttype.session here. the \"session\" nodes that this expander is creating should not be confused with the squirrel session. these session nodes are oracle sessions that an administrator has the privileges to see. so we must not use databaseobjecttype.session, or else these nodes get expanded with the database defaultdatabasexpander."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now check to see if the original contents were <null> and we have actually added the input char to the end of it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"subtracting 10 000 000 milliseconds from the orgtime of file f1"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user wants us to create a temp file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverpropertiescontroller.loadingdriverfailed=loading jdbc driver \"{0}\" failed.\\ncan not load driver properties tab.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"show users in the object tee."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.schematableupdateapply=apply]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tabs to add to the catalog nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the file to open"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the sqlhistorycomboboxmodel has a static member that prevents garbage collection. therefore we need to remove the model."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert each string into classname, prop, & value and fill it into the data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"always add spaces at end for consistancy"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[firebird.gendetails=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private sqldriverpropertycollection _props = new sqldriverpropertycollection();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"guaranteed to return a non-null array"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[cancelstatementthread.cancelfailed=failed to cancel statement. perhaps the driver\/rddbms does not support cancelling statements. see logs for further details ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final static ilogger s_log = loggercontroller.createlogger(copytablecommand.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we assume that classes and attributes won't be in the same completion list. classes will be completed fully qualified when the user works with fully qualified class names ..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"loaddriverproperties();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data converted ok, so update the table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if file name default and cmd is null or empty, make sure this entry is not being held in cellimportexportinfosaver"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the real name for use later"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[cancelstatementthread.cancelsucceeded=the database has been asked to cancel the statment.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if this panel is called before any instances of the class have been created, we need to load the properties from the dtproperties."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the values from the controls and set them in the static properties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"used by editing operations to set textfield value without changing the original text saved in the class"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"field is not nullable, so create a reasonable default value cannot create default value for unknown data type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypeunknown.readcontentsonload=read contents when table is first loaded and display as string]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add mouse listener for displaying popup menu."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace the null with just the char"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sessions."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"more space below"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter table $tablename$ rename column $oldcolumnname$ to $newcolumnname$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateprefstab.title=hibernate]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mappedobjectpanel.qualifiednames=show qualified names]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the cellrenderer used for this data type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check that we did not just add a char to a <null>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"backup directories"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"end of constructor for inner class"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"class that displays the various formats available for dates"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use the default settings for the conversion"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverpropertiescontroller.gettingdriverpropetiesfailed=loading the properties from the jdbc driver failed.\\ncan not load driver properties tab.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put a description of the field in the following rows"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypepreferencespanel.propspanel.hint=set options for specific data types]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"figure out which column the user clicked on so we can pass in the right column description"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"file does not already exist, so try to create it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add begin"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolspanel.limitcolsincellhint=limit columns used in where clause when editing table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some drivers will give null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use the standard sql type code to get the right handler for this data type."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string catalog, string schema, string simplename, string tabletype, string remarks,"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is the list of names of classes that: - support standard sql type codes and thus do not need to be registered - provide the getcontrolpanel method to allow manipulation of properties these classes should all be named net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.datatypexxxx because they are part of the standard delivery of the product, and thus should be local to this directory."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the sql results page puts text into the table cells rather than objects of the appropriate type, so we need to convert befor proceeding"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.diskreadsperrow=disk reads per row]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have an appropriate data type object"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private map _alltabs = new hashmap();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there was no data type object, so this data type is unknown to squirrel and thus cannot be edited."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_app.getdatacache().addaliaseslistener(new myaliaseslistener(this));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use a cyan background to indicate that the cell is editable in the popup"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"currently, openedge only supports the pub schema for sequences."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypepreferencespanel.propspanel.title=data type controls]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_listeners.remove(isqlexecutionlistener.class, lis);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert the char into its numeric value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"registercolumntype(types.boolean, \"bit\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if are more columns left, part page"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean _showheadings;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"reset width to normal"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user has entered some non-default info, so save it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add note to user about including file name in command"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"guaranteed to be non-null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first convert internal data into the string array"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get name of file, which must exist"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if you add this method to one of the standard datatypes in the fw\/datasetviewer\/cellcomponent directory, you must also add the name of that datatype class to the list in cellcomponentfactory, method getcontrolpanels, variable named initialclassnamelist. if the class is being registered with the factory using registerdatatype, then you should not include the class name in the list (it will be found automatically), but if the datatype is part of the case statement in the factory method getdatatypeobject, then it does need to be explicitly listed in the getcontrolpanels method also."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"misc functions - based on oracle dialect"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"instances."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.dropprimarykeytitle=drop primary key]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we need to table column model to be able to add celleditors to the individual columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"abort first.."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set focus to password control if default user name has been setup."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fall through to normal processing of this key stroke"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for attempting to call listfiles on a non-existent directory."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add all panels to the tabbed pane."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we are limiting all columns, then we need to re-read because we do not know if we have all the data or not"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this method makes the web service call if you want to you can create a web service proxy from the wsdl file, 9 times out of 10, that's what you really want to do."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwhercolssheet.output=output]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getters and setters"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"restore the contents to the original value."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"both have actual data, so compare the strings note that if one has read all of the data and the other has read only part of the data that we will say that they are not equal."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle ascii chars irrespective of the radix, the second byte will always be a space when the data is displayed as a single ascii character."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle cases of null the processing is different when nulls are allowed and when they are not."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetviewereditabletablepanel.warning=warning]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"while"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace \"2009\" with types.sqlxml when java6 is the minimum supported version"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save data passed in to us"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fall through to default"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"value is a simple string representation of the data, the same one used in the text and in-cell operations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sticky is turned off. just remove sticky and return."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove old sticky tab"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"field is not nullable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check for whitespace"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return the text converted from the file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"truncate string"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final jmenu _editmenu;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert bytes to bytes"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the numberformat object to use for all locale-dependent formatting."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.toobtainsessionfact=to obtain a hibernate sessionfactoryimpl instance squirrel should:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the text to be converted"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.removeconfig=remove]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace \"-16\" with types.longnvarchar when java6 is the minimum supported version"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"call the datatype object for this column and have it check the current value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the panel and add the gui items to it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"file object for doing io"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copyonwritearraylist has snapshot iterators that don't support iterator.remove()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add button panel to main panel"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no entry selected"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert signed to unsigned"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some formats (e.g. hex & octal) extend a negative number to multiple places (e.g. fc becomes fffc), so chop off extra stuff in front"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checking to make sure the correct files were are listed in the array."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"standard sql92 functions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the hashmap for this type, or create it if this is a new property"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get each datatype's info"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put the property into the hashmap"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"conversion constants"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalpropertiespanel.rows=rows]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new line"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert each byte and put into string buffer"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oddly enough, progress will let you add pks to existing tables, but not drop them."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if user wants to see ascii chars as characters, see if this is one that should be displayed that way"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle cross-connection between fields"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter table $childtablename$ \" + \"add $constraint$ $constraintname$ foreign key ( $childcolumn; separator=\\\",\\\"$ ) \" + \"references $parenttablename$ ( $parentcolumn; separator=\\\",\\\"$ )\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"underlaying data cannot be changed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the buttons for input done and cancel"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <tablename> add [constraint <constraintname>] unique (<column list>);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop index index [if exists];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"menu for right-mouse-click when in cell editors"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not allowed - must have existing file for import"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"guard against something really stupid"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"time functions mapped to ansi extract"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do not do import"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"import and external processing can only be done if panel is editable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"front pad with zeros and add to output"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load filename and command with previously entered info if not the default"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter table $tablename$ \" + \"add constraint $constraintname$ unique ($columnname; separator=\\\",\\\"$)\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"how to use timestamp in where clauses default to sql standard"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"value is a simple string representation of the data, the same one used in text and in-cell operations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"close it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"squirrelaction descriptions already contain the accelerator"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pre-requisites are that column needs to be primary key and it must be integer type. alter table identitytest2 alter column myid identity"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"super.setvisible(value);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"as in java.sql.types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <tablename> add [constraint <constraintname>] primary key (<column list>);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter sequence <sequencename> restart with <value>;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we always get the clob, even when we are not reading the contents. since the clob is just a pointer to the clob data rather than the data itself, this operation should not take much time (as opposed to getting all of the data in the clob)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tblresult.setautocreaterowsorter(true);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"reset each time we start a new print"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.bundle=bundle]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"position window to where it was when last closed. if this is not on the screen, move it back on to the screen."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ignore - unused."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the table containing the user's input"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cannot insert row into read-only table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add some space"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cannot delete rows in read-only table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return (string)_renderer.renderobject(value);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since we cannot do exact matches on floating point numbers, we cannot use this field in the where clause."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.withcommand=with command:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the number of decimal digits allowed in the number"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"several number formats use '.' as decimal separator, others use ','"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle cases of null the only legal input in this case is a delete"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user asked to see binary data in a different format default to hex"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return the expected format for this data default to hex"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the caller does not need to know that nothing happened"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the list of rows may be empty, in which case we tell user they should select something first"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there was a problem inserting into the db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell user it is editable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[whereclausepanel.columnlabel=columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"begin code related to printing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data is an object - assume already validated"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"generally for key_typed this means add the typed char to the end of the text, but there are some things (e.g. control chars) that are ignored, so let the normal processing do its thing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we want to allow editing of read-only tables on-demand, but it would be confusing to include the \"make editable\" option when we are already in edit mode, so only allow that option when the background model is updateable and we are not already editing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we know that it's not interesting to show any code above where we get involved in event dispatch, so we stop printing the stack trace when we get as far back as our code."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"binary data viewing option: which radix to use this object is only non-null when the data is binary data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateprefstab.hint=hibernate configurations]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"matt dahlman: this causes problems with the jdbc driver delivered with teradata v2r05.00.00.11"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the file was a temp file, delete it now. we assume that export-only operations want to leave the file in place, but execute operations just want a temp space to work with and do not want it lying around afterwards."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this may be called either when the table is editable or when it is read-only. when it is read-only, there is no command to be saved, but when it is editable, there may be a command."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"white space"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add external processing command field and button"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"actions.get(executesqlaction.class).setenabled(false);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"send a tree expansion event to the object tree"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"provide the actual integer value, as well as it's meaning"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since data is editable, we need to add control panel to manage user requests for db update, file io, etc."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the scroll pane that holds the text area"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"used as the value of startedlasteventdispatchat when we're not in the middle of event dispatch."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- ejbql tokens"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final static ilogger s_log = loggercontroller.createlogger(opentablestab.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"props.forcetablecontentsoutputclassnamechange();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.modifytitle=select column to modify]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression test for harmony-3656"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"5. is it the same as the local copy, which was placed either by the installer or the last update?"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is a tool window."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"will be called asynchronously to the event dispatch thread"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.mode=mode]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needed to prevent an infinite loop"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"whether number is signed or unsigned"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"name of file to do export\/import\/process on"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fix the case according to what the database tells us."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatetabpanel.configuration=configuration]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"unfortunately, conversion to uppercase does not work properly for the georgian alphabet, which has strange rules about case conversion. so we need to make one last check before exiting."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.variables=mysql variables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 stores all names in upper case. postgresql stores table names in lower case. that's why we may not find table as it was written in the create statement. so we try out the upper and lower case names too."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private static final string perf_key_hql_tab_divider_location = \"squirrel.hibernateplugin.hqltabdivloc\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ignore."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"chooser.setdialogtitle(\"select???\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"warning"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the hashmap of names to use and put it in editwherecols"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final static ilogger s_log = loggercontroller.createlogger(showmasterlogstab.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getinternalname()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getversion()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return sqltokencontext.incomplete_string_literal;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the second row contains a multi-line description, so make that row high enough to display it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"groups"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.applicationsettings=application settings]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.databasealiases=database aliases]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.errorreslovingfilename=error resolving file name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getauthor()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final int table_col_datatype = 3; not used"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"selects the values from the existing table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the directory exists, add one to the directory number (making it a new directory name.)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql allows statement separators in procedure blocks. the process of tokenizing above renders these procedure blocks as separate statements, which are not valid to be executed separately. here, we re-assemble any create procedure\/function\/trigger statements that we find using the beginning procedure block pattern and the procedure separator."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.info.setjdbcdebuglog=attempting to set jdbc debug log to output stream]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"to get the tableinfo for the selected object in the tree"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"blobs are different from normal data types in that what is actually read from the db is a descriptor pointing to the data rather than the data itself. during the initial load of the table, the values read from the descriptor may have been limited, but the descriptor itself has been completely read, therefore we do not need to re-read the datum from the database because we know that we have the entire descriptor. if the contents of the blob have been limited during the initial table load, that will be discovered when we check if the cell is editable and the full data will be read at that time using this descriptor."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get all the data types available"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"text field for how many bytes of blob to read"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"?? what to do with this error? ?? error message = \"could not read the complete data. error was: \"+ex.getmessage());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user said not to read any of the data from the blob"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_mainsplitpane.add(getdesktoppane(), jsplitpane.right);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"stray sep - or we failed to find pattern"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for each element in the \"not use\" set, if selected then add to \"use\", otherwise add to new \"not use\" set"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save the input for use later"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"delimiter sets the separator that tells us when a procedure. this is mysql-specific"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to make sure that only the 3 files that were created are listed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"move over leading whitespaces"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check for max size reached (only works when db provides non-zero scale info"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalpropertiespanel.bottom=bottom]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save the original value for re-use by clob\/blob types in conversion"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the dateformat object to use for all locale-dependent formatting. this is reset each time the user changes the previous settings."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sequence tabs"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"more than one selection is allowed - check to see if we should change the selection"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"plugin supports session main window only"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclealiasprefspanel.all=allow all schemas]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can use an empty clob for editing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the nullability information and pass it into the resultset unfortunately, not all dbmss provide the column number in object 17 as stated in the sql documentation, so we have to guess that the result set is in column order"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the entire clob data is read in. return true if it has been read successfully, and false if not."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if this is not a hibernate error we write a log entry"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[primarykeytab.hint=show primary key for the selected table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"analyze checkbox"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[errorstream.unexpectedsymbol=this symbol not expected in]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"old version return session.getobjecttreeapi(sqlscriptplugin);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add context menu items to the object tree's session node. as popup menu"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"just add the tab"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"uifactory.getinstance().createtabbedpane();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracleplugin.title=oracle]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"throws an exception claiming that 2007 isn't a valid type - go figure. pstmt.setnull(position, _coldef.getsqltype());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expanders."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this fixes the issue where the tree is getting constructed prior to the oracle plugin expanders being registered.(users, sessions, instances nodes have no children until the tree is refreshed). even though this is a hack, it doesn't seem to negatively impact performance even when loading all schemas."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get osx_file for export & external processing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not all oracle's, just 10g and above."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"value is a simple string representation of the data, but not the same one used in the text and in-cell operations. the in-cell version may replace newline chars with \"\\n\" while this version does not. in other respects it is the same as the in-cell version because both use the _renderer object to do the rendering."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register custom datatypecomponent factory for oracles xmltype"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.util.ioptionpanel#gettitle()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"merge columns in a new column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernate.hqltosqllong=hql to sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.util.ioptionpanel#applychanges()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"transparent"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displayoptions=display database options]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"questions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"gui components - need to be here because they need to be accessible from the event handlers to alter each other's state."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sheet types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"schema"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"reload complete schemainfo"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check box for whether to read contents during table load or not i18n[datatypebigdecimal.readcontentsonfirstload=read contents when table is first loaded;]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check box for whether to show newlines as \"\\n\" for in-cell display"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.refreshsecons=(seconds)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.infotitle=oracle session info for: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_driverslist = new driverslist(app);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.sgatitle=oracle sga trace for: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needs to be done in both cases because if the window goes back to the default layer it goes back behind all other windows too."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.options=options]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nil out the timer so that it can be gc'd"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create spinner for update period"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only resize once."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jmh remove the current sql text. create a tabbed pane for session details (including sql text)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we don't invokelater here no short-cut-key is sent to the internal frame seen under java version \"1.4.1_01\" and linux"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displaysessiondetails=display session details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle allows statement separators in pl\/sql blocks. the process of tokenizing above renders these procedure blocks as separate statements, which is invalid for oracle. since \"\/\" is the way in sql-plus to denote the end of a procedure or function, we re-assemble any create procedure\/function\/trigger statements that we find. this should be done before expanding file includes. otherwise, any create sql found in files will already be joined, causing this to find create sql without matching \"\/\". the process of expanding 'file includes' already joins the sql fragments that it finds."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"at the moment, no default value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jmh: for additional performance we could utilise the fixed_table_sequence column from the session, to investigate which rows need to be updated on a refresh see v$session doco for more info."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this seems to work for both oracle 9i and 10g"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since it is likely to have \"\/\" on it's own line, and it is key to letting us know that proceeding statements form a multi-statement procedure or function, it deserves it's own place in the _queries arraylist. if it is followed by other procedure or function creation blocks, we may fail to detect that, so this just goes through the list and breaks apart statements on newline so that this cannot happen."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"line separator for easy using ;-)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for oracle 10g we could say something like : \"where xmlserialize(content \" + _coldef.getlabel() +\") like '<value>'\" this doesn't appear to work on oracle 9i at the moment, so we will avoid using this column in any where clause if the value is non-null, which is what the superclass implementation does. todo: find a way to do this for both versions or split this behavior so that it works on 10g and is disabled on 9i."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"variables ======================================================================== non visible ------------------------------------------------------------------------ logger for this class"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"below is equivalent to the following: stringvalueresult = xmltype.getstringval();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now bind the string.."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"both of these throw an exception claiming that it got a clob and expected a number (inconsistent data types): pstmt.setclob(position, null); pstmt.setnull(position, java.sql.types.clob);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"need to adjust param which is 1-based(jdbc) to a 0-based number for array access"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"trigger tabs"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"plugin supports only the main session window"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"index tab"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"object tree expanders schema expanders - sequence"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"extractors"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"super.sqlexecutionwarning(warn);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table expanders - trigger and index expander"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"detail tabs procedure tab"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"lock tab"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"popup menus"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"s_log.info(\"not all selected objects where tables.\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"catalog"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"merge columns in an existing column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this causes locks own by other pids to be excluded from the result. + \" pgl.pid = pg_stat_get_backend_pid(svrid) and \""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we don't know if this type can be used in where clauses so always exclude it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"options: full checkbox"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"controlling"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do the conversion into the object in a safe manner special case: the input is exactly the output"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"stored procedures can have comments embedded in them, so don't line-wrap them."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"view type dbo (doesn't exist yet)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"view"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sequence type dbo"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sequence"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"it is important to process the name change first - so that we can use the new name instead of the old in subsequent alterations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"index"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"here we use index inside of column names so that we don't have to alias the columns in the dialect. different dialects call these sequence information columns by different names. just make sure to preserve the order in the dialect. last_value max_value min_value cache_value increment_by is_cycled"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table type dbo"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create new columns in table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"skip comments"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update <destinationtable> s set destcolumn = ( select f.desc_t1 from <fromtable> f where f.myid = s.myid)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"implemented in all originally supported dialects"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"deletes the \", \""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"selects the values from the merge table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"selects the values for the where part"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"maybe with inner join better performance"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add column if neeeded"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getcolumnaddsql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't show indexes dialog if only one index exists to be modified"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"execute the sql synchronously"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"show the user a dialog with a list of columns and ask them to select one or more columns to drop"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"arraylist<string> result = new arraylist<string>();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the table has only one column, it cannot be dropped"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set a default primary key name based on the name of the table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"adds a foreign key constraint to the source table."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only gives the sql without the cascade\/restrict constraint"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"show the user a dialog with a list of columns and ask them to select"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if there is only one column in the table,"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copys the distinct values from the source column into the lookup table."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"creates the lookup table with it's columns (depenting on the mode)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getaddforeignkeyconstraintsql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getinsertintosql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getcolumnnamealtersql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getupdatesql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getcolumnnullablealtersql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getcolumndropsql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add column name to the list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no point to ordering less than 2 tables"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the analysis dialog using the edt, and wait for it to finish."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"a map for quick lookup later - we want to pass tablecolumninfos to the dialect, not merely column names."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new name of the table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there are more dependancies then just fks (like views, etc.), therefore cascadeconstraints is used as a parameter for the tabledropsql."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"local constraint"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now, get the drop order (same as delete) and update the dialog status while doing so."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't show foreignkeys dialog if only one index exists to be modified"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the check gets till here we have all the need information"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mode"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop conflicts"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"fki_\" is default startname"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add to the button group"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"adding all colums together"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pre-selection"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add to jpanel pane"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add to the panel - update"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_columntab = new mergecolumndialog.columnstab();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private columnstab _columntab;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"increment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"maximum"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"last value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"start"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"minimum"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use default sequential layout"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"foreign key"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"view list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"break;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column 0 row 0"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"labels should stay put, while user-input fields are allowed to grow as the user desires."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some databases cannot order by long\/lob columns."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cascade constraints checkbox"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"all rules passed, so activate the button"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the check gets till here we have all the needed information"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"all tables except the merge into table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"all local and columns for the other tables.."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.nodeleteselection=please select the bookmark to delete]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"errors"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionscript.startupscripts=startup scripts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"folder within plugins folder that belongs to this plugin."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this should never happen as we check above for the duplicate."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"iapplication application = getapplication(); application.addtomenu(imenuids.plugins_menu, getsmarttoolsmenu(getapplication(), null, false));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"just plain data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"------------------------------------------------------------------------ thread searching"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"------------------------------------------------------------------------ table classes"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlparam.inputparametervalues=please input the parameter values]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"old version before multible sesssion windows return session.getsqlpanelapi(plugin);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private static final string prefs_file_name = \"sqlparamprefs.xml\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"types.char, types.varchar, types.longvarchar, types.binary, types.varbinary types.longvarbinary types.null types.java_object types.distinct types.array types.blob types.clob types.ref types.datalink"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"postgresql uses literal values true\/false instead of 1\/0."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the format of the result. this must be \"text\" or \"html\". hopefully some type of xml format will be available as well"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"supply the user name. if you use anonymous you will be logged in and the pw will be ignored"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"and the version of the calling program. this is optional. if you don't want to give out this info, please enter \"n\/a\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the version of the target dbms this is optional. if you don't want to give out this info, please enter \"n\/a\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set this to 1 if your application is interactive where the user enters queries and then runs them set it to 2 if it is non interactive, such as for instance a jdbc bridge driver that intercepts sql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add context menu items to the object tree's view and procedure nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"otapi.adddetailtab(databaseobjecttype.index, new indexdetailstab());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"trigger source \"select text \" + \"from dbo.sysobjects \" + \"inner join syscomments on syscomments.id = sysobjects.id \" + \"where loginame = ? \" + \"and name = ? \" + \"and type = 'tr' \";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"refresh the currently selected tab."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"final textareadefaults dfts = textareadefaults.getdefaults(); _columnstyle = dfts.styles[token.column]; _commentstyle = dfts.styles[token.comment1]; _keyword1style = dfts.styles[token.keyword]; _keyword2style = dfts.styles[token.data_type]; _keyword3style = dfts.styles[token.function]; _labelstyle = dfts.styles[token.label]; _literalstyle = dfts.styles[token.literal1]; _operatorstyle = dfts.styles[token.operator]; _otherstyle = dfts.styles[token.null]; _tablestyle = dfts.styles[token.table];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"below is equivalent to the following: xmltype = xmltype.createxml(o);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string line_number_color = \"linenumbercolor\"; string selection_color = \"selectioncolor\"; string show_line_nbrs = \"showlinenumbers\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private int _caretrgb = color.red.getrgb(); private int _selectionrgb = 0xccccff; private int _linehighlightrgb = color.lightgray.getrgb(); private int _eolmarkerrgb = 0x009999; private int _brackethighlightrgb = color.black.getrgb(); private int _linenumberrgb = color.black.getrgb();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string eol_markers = \"eolmarkers\"; string eol_marker_color = \"eolmarkercolor\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"one may ask why we don't register the key strokes permanently. when we did so with two internal frames open, the key stroke event sometimes went to the wrong frame. this doesn't happen if we procede like we do. the question is, why?"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we don't support switching the entry control during a session because serveral things, that are attached to the entry control from outside this plugin would need to reinitialze too. for example code completion and edit extras. synchronized (_session) { isqlentrypanelfactory factory = _plugin.getsqlentryareafactory(); isqlentrypanel pnl = factory.createsqlentrypanel(_session); _session.getsqlpanelapi(_plugin).installsqlentrypanel(pnl); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new multikeybinding(keystroke.getkeystroke(keyevent.vk_open_bracket, menu_mask), extkit.matchbraceaction), new multikeybinding(keystroke.getkeystroke(keyevent.vk_open_bracket, menu_mask | inputevent.shift_mask), extkit.selectionmatchbraceaction), new multikeybinding(keystroke.getkeystroke(keyevent.vk_f10, inputevent.shift_mask), extkit.showpopupmenuaction),"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the second time that schemas are asked for, return two"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the ctrl enter short cut in the netbeans editor is set in org.netbeans.editor.ext.basekit to the org.netbeans.editor.ext.basekit.splitlineaction. since the ctrl enter shorcut is a basic squirrel short cut and is defined via the main menu action we must remove this binding here."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the sqlsettingsinitializer added above holds a reference to the syntaxpreferences of the current session which itself holds a reference to the session. we remove the sqlsettingsinitializer to give the session the chance to get garbage collected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"internal states inside white space inside line comment inside block comment \/* ... *\/ inside string constant inside string constant after backslash inside char constant inside char constant after backslash inside identifier slash char after '=' after '>' after '>>' after '>>>' after '<' after '<<' after '+' after '-' after '*' after '*' after '|' after '%' after '&' after '^' after '!' after '0' integer number octal number double number double number hex number after '.'"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowcounttab.title=row count]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the buttons to it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this didn't work final int pos = getcaretposition(); final document doc = _textarea.getstyleddocument(); final element docelem = doc.getdefaultrootelement(); final element lineelem = docelem.getelement(getcaretlinenumber()); return lineelem.getelementindex(pos);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tooltips and questions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"operator numeric-ids = < > << >> >>> + - * \/ & | ^ % ! ~ == <= >= <<= >>= >>>= += -= *= \/= &= |= ^= %= != . , : ; ? ( ) [ ] { } ++ -- && ||"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"start the thread that does the coloring"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put the initial text into the text pane and set it's initial coloring style."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we just finish, we can't go to sleep until we ensure there is nothing else for us to do. use try again to keep track of this."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[stringfunctionstab.hint=show all the string functions available in dbms]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the history into an array."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up the list of column names and the data for the rows"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sequencedetailstab.title=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"global misc"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.squirrelmarksinpopup=show squirrel bookmarks in ctrl+j popup]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"as a coding convenience, create a reference to the text component that is typecast to jtextcomponent. this is not essential, as we could typecast every reference, but this makes the code cleaner"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"to change body of created methods use file | settings | file templates."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"scriptenvironment env = new scriptenvironment(m_session.getsqlpanelapi(m_plugin), ownerframe);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add panels for core squirrel functionality."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set column heading set data in first row"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for some reason, frontbase doesn't find tables that have been previously created."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string path = \"\/release\/snapshot\/\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 cannot alter a column's null attribute directly (only through constraints). not only that, but it's apparently not a valid thing to do to create a primary key using a column that has been made \"not null\" via a check constraint. therefore, the only columns that qualify to be made pks are those that were declared not null at the time of table creation."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.closeall=close all]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test whether or not the dialect correctly converts nullable columns to not-null before applying the primary key - if necessary"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"misc"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"viewdefsql is the sql that can be used to query the data dictionary for the body of a view. this should exclude the \"create view <viewname> as\" prefix and just return the query."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace any instance of flag in command with file name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"utility methods"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"threadsearching"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needed to make the panel set the divider location from preferences"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"todo"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"attempt to use dialect sql from \" + referencedialect.getdisplayname() + \" failed: \" + e2.getmessage());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"short scale"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"warning: this depends on entries in buttongroup being in the same order as the values for whereclauseusage"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"max size reached"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getwebsite()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getnewsessionpropertiespanels()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[favs.newfolder=new folder] ?? i18n"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowcounttab.hint=number of rows in the selected table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getpluginusersettingsfolder()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#load(net.sourceforge.squirrel_sql.client.iapplication)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only a single selection can be made at a time."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[contentstab.title=content]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.idatabaseobjectinfo#getcatalogname()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we only show row counts for tables and views. other objects won't be affected by changing row counts."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create update\/cancel controls using default layout"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checkbox for java default\/non-default format"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select the one just added."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.idatabaseobjectinfo#getschemaname()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"((imainframe) comp).addinternalframe(taif, false); taif.setlayer(jlayeredpane.popup_layer);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.noadd=no text to be added.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"empty."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check for \"malformed\" xml, or text that happens to contain a \"<\" with no corresponding \">\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add listener to listen for items added\/removed from list."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.closefileviewers=unable to close all file viewers]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"required on linux."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add actions to the popup menu."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fudge for larger inset windows"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"go thru all loaded plugins asking for panels."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tooltips"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"infos"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create a new bookmark manager"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"!!! return sqltokencontext.incomplete_char_literal;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mocksquirrelresources"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register tabs to display in the details panel for udt nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this gets called before initialize()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"querytokenizer tests"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to ensure that the tokenizer received is not the default one that should have been overridden."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[createdriveraction.error.loaddefaultdrivers]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to see that table(100) matches table(0). it should since only the row count is different."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to see if we can fool matchkeyprefix into assuming that there will be '(' on the end of the path since row count is enabled. yet we'll send in a string that doesn't have this characteristic."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"size to set child windows to."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for the serialization test in superclass - cannot use mockhelper because the replay needs to be done here."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expect getfile for updated files that will be removed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not necessarily the case - i'm just curious if we have any components that need to be re-read"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't forget to set this to the number of statements in result"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setup one column in multiple rows"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"try to create a file in a directory that does not exist"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sybase 15 fully supports quotation marks for identifiers, and reports \" as the identifier quote string - yeah, they got it right!"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression test for harmony-21"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"canread only returns if the file exists so cannot be fully tested."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for creating a file that already exists."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to see if correct suffix was used to create the tempfile."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to make sure that the tempfile was saved in the correct location and with the correct prefix\/suffix."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"parse hy.test.vmargs if was given"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the \"short file name\" doesn't exist, then assume that the 8.3 file name compatibility is disabled."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"finding a non-existent directory for tests 3 and 4 this is necessary because getcanonicalpath is case sensitive and could cause a failure in the test if the directory exists but with different case letters (e.g \"temp\" and \"temp\")"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"rebuild the bookmark menu."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to make sure that listfiles can read hidden files."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"old test left behind \"garbage files\" so this time it creates a directory that is guaranteed not to already exist (and deletes it afterward.)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_usedriverpropschk.setselected(_sqlalias.getusedriverproperties());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to see if the directory was saved with the correct name."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"subtracting 100 000 milliseconds from the orgtime of file f1"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"trying to set time to a large exact number"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"similarly, trying to delete a read-only directory should succeed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression test for harmony-4493"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"assert is flawed because canwrite does not work. asserttrue(\"file f1 is set to readonly.\" , f1.canwrite());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tests to see if the correct number of files were returned."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"assert is flawed because canwrite does not work. asserttrue(\"file f2 is set to readonly.\" , f2.canwrite());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"testbooleancoltype(sourcename, destname); testcharcoltype(sourcename, destname);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is for brute force detection of columns whose column size is 0"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"verify that changing the clone didn't affect the original"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we cannot mock dtproperties because it is designed to be accessed statically. :( simulate missing property."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we still have to bind a value, or else the ps will throw an exception."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.loadcellselections=unable to load cell import\/export selections from persistant storage.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"final map map = getalleditwherecolssheets(tree); return (editwherecolssheet)map.get(objectinfo.getqualifiedname());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we are in the closing event of the session main window. we don't want to send this event again therefore we pass withevents = false."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ok button at bottom of dialog. jpanel btnspnl = new jpanel(); jbutton okbtn = new jbutton(\"ok\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get list of all plugin developers names. allow for multiple developers for a plugin in the form \"john smith, james brown\"."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"easymock class extension helpers. since classextension and interface easymock methods cannot be used on the same mocks, this provides convenience to not have to specify the package name for classextension mocks."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sql reference guide says 32k, but i get: the specified row size exceeded the maximum allowable row width., sql state: 50002, error code: 2045 when i go above 8000."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private static final class cellrenderer extends basiccomboboxrenderer { public component getlistcellrenderercomponent(jlist list, object value, int index, boolean isselected, boolean cellhasfocus) { settext(((tablecolumninfo)value).getcolumnname()); return this; } }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jinternalframe[] frames = guiutils.getopennontoolwindows(getdesktoppane().getallframes()); _app.getactioncollection().internalframeopenedorclosed(frames.length);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"is done in dispose itself because listeners must be fired even in do_nothing_on_close mode tabhandle.fireclosed(e);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"under jdk1.4 the first item in a jcombobox is no longer automatically selected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this seems to be necessary to get background colours correct. without it labels added to the content pane have a dark background while those added to a jpanel in the content pane have a light background under the java look and feel. similar effects occur for other look and feels."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"done this late so that plugins have time to register expanders with the object tree prior to it being built. getsession().getobjecttreeapi(_app.getdummyappplugin()).refreshtree();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we need this method to satisfy one of the interfaces we implement, but since we have moved all operations to the datatype sub-panels which initialize their own data during creation, there is nothing for us to do here"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we need this in order to allow the user to see this plugin - which isn't loaded - in the plugin summary dialog, so that they can enable it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no tokenizer has been set by any installed plugin. go ahead and give the default tokenizer. it is important to not cache this object so that session property changes to the current session are reflected in this default tokenizer."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checks if the former message should be highlighted in a 'history' color."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the user selected editable table in the session properties, then the display will be an editable table; otherwise the display is read-only"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"it is possible for a table to contain only columns of types that we cannot process or do selects on, so check for that. since this check is on the structure of the table rather than the contents, we only need to do it once (ie: it is not needed in getwarningonprojectedupdate)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public sqlfilterclauses getsqlfilterclauses() { return _sqlfilterclauses; }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get where clause the -1 says to ignore the last arg and use the contents of the values array for the column that we care about. however, since the data in that column has been limited, when getwhereclause calls that datatype with that value, the datatype will see that the data has been limited and therefore cannnot be used in the where clause. in some cases it may be possible for the datatype to use the partial data, such as \"matches <data>*\", but that may not be standard accross all databases and thus may be risky."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"template bodies"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the rows do not match 1-for-1 to db, ask user if they really want to do delete"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for each row in table, count how many rows match where clause if not exactly one, generate message describing situation"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the list of column names we will be inserting into - be sure to skip the rowid column and any auto increment columns."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this can happen if an impl of isqlexecutionlistener returns null from the statementexecuting api method, to indicate that the sql shouldn't be executed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"implementataion of idatasetupdateabletablemodel: delegation to _datasetupdateabletablemodel"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there is no good way using jdbc metadata to tell if the table is a materialized view. so, we need to query the data dictionary to find that out. get all table names whose comment indicates that they are a materialized view."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check option not supported"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if a driver says it supports schemas\/catalogs but doesn't provide schema\/catalog nodes, try to get other nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create data structure containing contents of rows to be deleted we cannot use the getrow() method because that uses myjtable whereas the indexes that we have are indexes in the sortabletablemodel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"go through each child of the parent and see if it was previously expanded. if it was recursively call this method in order to expand the child."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"to allow the fw to save and reload user options related to specific columns, we construct a unique name for the table so the column can be associcated with only that table. some drivers do not provide the catalog or schema info, so those parts of the name will end up as null. that's ok since this string is never viewed by the user and is just used to distinguish this table from other tables in the db. we also include the url used to connect to the db so that the same table\/db on different machines is treated differently."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlparam.valuefor=value for {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"reload all matching procedure types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 stores all names in upper case. postgresql stores all names in lower case. that's why we may not find proc as it was written in the create statement. so we try out the upper and lower case names too."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"int progress = loadschemas(1); load tables with catalog = null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the release version doesn't change, we won't be pulling down core artifacts. so, we just need to make sure that all core files have been copied from their installed locations into the corresponding directory in download, which is in the classpath of the updater. this covers the case where the update is being run for the first time after install, and no new version is available, but the user wants to install\/remove plugins and\/or translations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop the existing default value. \"alter table $tablename$ \" + \"alter $columnname$ drop default\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"notify table that rows have changed the deleted rows may not be contiguous in the actual data model because the gui may be showing a version of the data sorted in some other order, so we cannot use firerowsdeleted."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"detect whether or not the object tree needs refreshing by comparing old value to new and see if they changed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"override the functions that need to be changed to tell the table mechanisms how to do editing."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"columndisplaydefinition[] coldefs = createcolumndefinitions(md, columnindices, computewidths); _datasetdefinition = new datasetdefinition(coldefs);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we should never get here because the areequal function is only called when we are trying to update the database, so we know that we have a datatype object for this column (or we would have been stopped from editing by the iseditablexxx methods), but we need a return here to keep the compiler happy."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if text cannot be edited in the cell but can be edited in the popup, show that by changing the text colors."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the list of specific column names is in comma-separated format with a comma in front of the first entry as well empty the map of old values"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"when changing the backgroud color, it helps to set the inner component's border to zero. otherwise, the border can obscure the text and make it hard to see. this is especially seen when using the kunstoff l&f."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <tablename> add constraint null_field check (<field> is not null)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default behavior if no appropriate data type found is to create a simple jtextarea with no special handling. in theory, this cannot happen because if there is no data type object for this column's data type, then iseditableinpopup returns false, so we should not get here. if there is a data type object, and iseditableinpopup returns true, then we would have executed the return statement above. assume that the value can be represented as a string."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table localtablename add constraint constraintname foreign key (localcolumn1, localcolumn2) references referencedtablename (referencedcolumn1, referencedcolumn2) match full on update restrict on delete no action deferrable initially deferred;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table tablename drop constraint constraintname"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <tablename> add [constraint <constraintname>] foreign key (<column list>) references <exptablename> (<column list>) [on {delete | update} {cascade | set default | set null}];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert all columns in key to not null - this doesn't hurt if they are already null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i tried the following for values under 8000 but i get encountered unexpected exception - line 1, you cannot assign a value of type 'long byte' to a column of type 'byte varying'. explicitly convert the value to the required type. registercolumntype(types.varbinary, 8000, \"byte varying($l)\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"myid myid stringtemplate st = new stringtemplate(templatestr);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create [unique|fulltext|spatial] index index_name [index_type] on tbl_name (index_col_name,...) index_col_name: col_name [(length)] [asc | desc] index_type: using {btree | hash} note; indextype is unused at the moment because the index dialog doesn't accept this. see below."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"int featureid = dialectutils.column_type_alter_type; string msg = dialectutils.getunsupportedmessage(this, featureid); throw new unsupportedoperationexception(msg);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"instantdb (at least version 3.13) only returns \"tables\" for gettabletypes(). if you try to use this in a call to databasemetadata.gettables() no tables will be found. for the moment hard code the types for instantdb."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table_cat table_schem table_name column_name data_type type_name column_size decimal_digits num_prec_radix nullable remarks column_def char_octet_length ordinal_position is_nullable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"compute available height above the cursor"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.rowsupdated={0} row(s) inserted]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removed for comment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatecontrollerimpl.changesrecordedmsg=requested changes will be made when squirrel is restarted]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save options selected for datatype-specific properties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"just a helper to make the fromresultset ? ... below look nicer."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionstartuptimehintdlg.dontshowagain=don't show this message again]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data is editable in popup"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"double pagebottom = pagetop + clipheight + headerheight;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"options"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"page number message (in smaller type)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"4. get the release.xml file as a channelxmlbean from the server or filesystem."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"2. load the local release.xml file as a channelxmlbean."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"at least 1 more row left"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"variables used in printing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"stay in line-comment state"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load resources such as menu items, etc..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"object that called us and that we want to return data to when done"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private columndisplaydefinition[] _hdgs = new columndisplaydefinition[0];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationaction.titlesuccess=dump successful]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do if object tree is opened."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.execstatus=executing sql...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"track the time in aggregate for the script."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"log.info(\"sql executed: \" + sql);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.togglesticky=toggle sticky]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private sqldriverpropertycollection _sqldriverprops;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set layout"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"draw the header on every page"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tricky alias and chaining completion examples au to auftr in from kv auftr where au au to auftr in from kv.positionen.kv auftr where au positionen. to fields of kv aggregate positionen in from kv auftr where auftr.positionen. positionen. to fields of kv aggregate positionen in from kv where positionen."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since we depend upon the connection class associated with the isession, we need to keep a reference to the isession we are associated with. however, this session could be closed, at which time we want to give up our reference so that it can be garbage collected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public columnscombobox(sqlconnection conn, itableinfo ti) throws sqlexception { super(conn.getsqlmetadata().getcolumninfo(ti)); setrenderer(new cellrenderer()); } \/** * this renderer uses the unqualified column name as the text to display * in the combo. *\/ private static final class cellrenderer extends basiccomboboxrenderer { cellrenderer() { super(); setopaque(true); } public component getlistcellrenderercomponent(jlist list, object value, int index, boolean isselected, boolean cellhasfocus) { settext(((tablecolumninfo)value).getcolumnname()); return this; } }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final static ilogger s_log = loggercontroller.createlogger(createmysqltablescriptcommand.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"flag indicates changing in textarea"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only the first row (containing data) is editable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for entries past the first one, use the default renderer"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the name of the calling client program. this is optional. if you don't want to give out this info, please enter \"n\/a\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dec 31 23:59:59 est 2107 is overflow on fat file systems, and the call fails"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there are a lot of goodies in the extsettingsinitializer that might be interesting in th future. unfortunately some conflicts with some of squirrels shortcuts are in extsettingsinitializer settings.removeinitializer(extsettingsinitializer.name); settings.addinitializer(new extsettingsinitializer(), settings.core_level);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"end of code related to printing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"log.info(\"sql starting to execute: \" + sql);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do a simple check to see if the string might contain xml or not"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"keylistener to indicate changing of text"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"inner class for the data display pane"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"here we do the replacement"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[deletealiasaction.error.selectingwindow=error selecting window]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"determine size of grid to tile into. e.g 3x3 for 9 cells."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the insert worked, so make this input form go away"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"stay in block-comment state"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fixes classcastexception, see below."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to see if the correct number of directories are returned."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create column model"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for now, ignore popup request rowdatajtable.this.displaypopupmenu(evt);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up cell editors on first row"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"display the result set metadata."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do not recognize this button request"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the jtable for input and put in the top of window"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"try to convert the text in the popup into a valid instance of type of data object being held in the table cell"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add row headers to help user understand what the second row is"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return _mainframe;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string current_line_highlighting = \"currentlinehighlighting\"; string current_line_highlight_color = \"currentlinehighlightcolor\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if to is a directory and convert tofile to be the name of the file in that directory."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this frame should really go away when done"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't change the case of the identifier if database allows mixed case."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"persists the change list to the update directory."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"?? }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data_type column of result set. int data = _rs.getint(idx);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add mouse listener for popup"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is a binary field, so allow for multiple viewing options"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionstartuptimehintdlg.showaliasprops=open alias schema properties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"description needed to handle conversion of data to\/from object"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"define filter to select only names using the filebase"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"layout"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the following is only useable for a root type of internalframe. if the root type is dialog or frame, then other code must be used."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"when we started dispatching the current event, in milliseconds."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.cancelbuttonlabel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user said to insert, so collect all the data from the jtable and send it to the datasetviewer for insertion into db and on-screen tables"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test to see if the correct number of files are returned."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"display the frame"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"number of chars used to represent byte the base radix"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"delete last ','"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter table $oldobjectname$ rename to $newobjectname$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"temporary events need to be included in case a modla dialog opens."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private static ilogger s_log = loggercontroller.createlogger(databaseexpander.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"searchable column of result set."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace \"-9\" with types.nvarchar when java6 is the minimum supported version"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"more space above"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"under jdk1.4 an empty jcombobox has an almost zero width."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not in scroll pane"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put the data and header names into the model"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"frontbase describes it's tables as \"base table\"."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do one or two passes"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[indexestab.title=indexes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can't fit -> hide"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert to layered pane's coordinates"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update the bounds of the popup"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionobjecttreepropetiespanel.filters=filters]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"creating a filter that catches directories."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not successful"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"yes it can, so add controls"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"light yellow"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[databasemetadata.searchabletypepredbasic=supports all except 'where...like']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[firebird.details=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.reformatfailed=reformat failed, normalized strings differ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-1 is stored if the checksum operation failed. this will ensure that comparison with any other file's checksum will be different - even if they happen to be the same file."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since this thread is not a ui thread, it is ok to run the task synchronously."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cannot use '-' when unsigned"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ss: modified to auto-compute column widths if <computewidths> is true"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we do not expect a lot of files in this directory, so just do things linearly"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for testing on the local machine url l_url = new url(\"http: localhost:8081\/services\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"hold the state"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data objects"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load the info into the text fields"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[objecttreesearch.error.objectnotfound=could not locate the database object ''{0}'' in object tree]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for testing on the live server url l_url = new url(\"http: sqlvalidator.mimer.com\/beta2\/services\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[connecttoaliascommand.error.closeconnection=error occured closing connection]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"common expectations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sort the list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"repaint the page for printing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.rowsdeleted={0} row(s) deleted]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"execute validator and return results."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"close existing session."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get parameters previously set by user, or set default values set to use the java default"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"synchronize on the outer class, because that's where all the state lives."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"import object from osx_file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"finding a non-existent directory to create."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jason: what are its valid values?"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"allow the user to enter just the hour or just hour and minute and assume the un-entered values are 0"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.writecellselections=unable to write cell import\/export options to persistant storage.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sort it and store in a new copyonwritearraylist"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle table source"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"filefilter"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter sequence $sequencename$ $startwith$ $increment$ $minimum$ $maximum$ $cache$ $cycle$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[deletedriveraction.error.selectingwindow=error selecting window]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.title.status=application status bean]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"property change control panel"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create self and"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"prompt the user to add a website url for this driver"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_sqlentryfactoryproxy = new ostersqlentryareafactory(this, originalfactory);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add a new formatter for sybase-errors\/warnings"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"spring-injected"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"maximum time we won't warn about."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.path=path:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sybasease specific code to read procedure definitions."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"context instance declaration"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"----------------------------------- public api"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"--------------------------- spring=injected dependencies"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put the 'and' or the 'or' in front of the clause if there are already values in the text area."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cell import\/export file not found for user - first time user ran pgm."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"incomplete and error token-ids"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"btnsetpermissions.setenabled(false);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"at this stage there's no more text in the scanned buffer, but this buffer is not the last so the scan will continue on another buffer. the scanner tries to minimize the amount of characters that will be prescanned in the next buffer by returning the token where possible."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.prefok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jradiobuttonroles.setselected(true);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sql-server doesn't support a cascade clause."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"need to remove the existing jar in the plugins directory and all of the files beneath the plugin-named directory."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the user wants to select for right mouse clicks then change the selection before popup appears"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set default colors"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the total number of decimal digits allowed in the number"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"internal class for handling key events during editing of both jtextfield and jtextarea. since neither cell nor popup are allowed to edit, just ignore anything seen here."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have a core or translation file that is not already installed - add it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"strange that release xml file wasn't found; but not a problem at this point - just log it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean _brackethighlighting = true;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make this the same size as the filenamefield"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqltab.title=sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"gui widgets"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"?? there does not seem to be any standard way to represent ?? binary data in a where clause... tell caller we cannot use this in where clause"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"skip files that are not installed - new files"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"false);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not the textcontrol itself changed but some other of the syntax preferences, for example a color. so we tell the current control to update the preferences."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"install the factory for creating sql entry text controls."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some dbs give a negative number when they do not have a value for the scale. assume that if the _scale is 0 or positive that the db really means for that to be the scale, but if it is negative then we do not check."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check the total number of digits in the number. since the string version of the number is therepresentation of the digits in that number and including possibly a plus or minus and a decimal, start by counting the number of digits in the string."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the actual panel that will be displayed in dialog."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.title.drivers=drivers]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nothing needed here??"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"artifact name for plugins is <plugin internal name>.zip"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get grant target"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"assume that all start tags are \"<...>\" or include a space after the tag name (e.g. as in \"<sometag args>\" and all end tags are \"<\/...>\". remove the syntactic markers, then remove any spaces, and convert to upper case for comparison"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"procedures"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db cols are in same order as coldefs"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"translations are most likely to be found in core lib dir."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.error.dumpingdrivers=error dumping drivers]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"download directories"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\" with admin option\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump aliases."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setting value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public static final string duplicatelineaction = \"duplicate-line-action\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"once and again the netbeans editor calls createsyntax() after sessionending() was called. then sess is null and the code below would break."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"install directories"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"root"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"session preferences"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- backup"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.title.sessiondump=session dump: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make sure no duplicates are kept in history."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"&& node != _tree.getlastselectedpathcomponent())"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dialogsupport.setdialogfactory(new nbdialogsupport());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"list of the additional colorings"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update java colorings"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"suppress warnings for issues that are present in this old release of netbeans editor libraries we are using."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"extcaret highlighting colorings"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"standard expanders."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register tabs to display in the details panel for database nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"navy."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new multikeybinding( keystroke.getkeystroke(keyevent.vk_d, inputevent.ctrl_mask), sqlkit.duplicatelineaction),"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the whole column definition"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"formatting settings"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nullable column of result set."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removed for the sqlbookmark plugin"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.error.sessiondump=error dumping sessions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"operators"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump sessions."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"redirect the esc key to cancel button"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"start with illegal number of rows matching query"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"reasons for this code mailed to rob by gerd on 9\/20\/2008. the problem are methods like basesqlentrypanel.getboundsofsqltobeexecuted() basesqlentrypanel.movecarettoprevioussqlbegin() they rely on the line break being a single char. also i suppose some of our code generation (scripting) functions do the same. at least i'm pretty sure if \\r\\n would be preserved they could produce a mixture of \\n and \\r\\n."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i thought this prevented gc. it doesn't but if two sessions are open and one is closed the one left open looses key bindings. for example the arrow navigation keys. getkeymap().removebindings();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"info"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.error.combiningtempfiles=error combining temp files into dump file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"find the entry in coldefs matching this column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"example: alter table kvpos add constraint kv_kvpos foreign key (kvid) kv(kvid) -------------------------------------------------------------^ (\"references\" expected) kv will not be marked with the condition above, because errinf.endpos <= absoluteposition + len is never true."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"preferences from the last session"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register tabs to display in the details panel for table nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load properties and fill missing entries with the global preferences"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"global preferences"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"with an hanging sessionlistener a session nvere gets garbage collected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.idatabaseobjectinfo#getqualifiedname()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"protected action[] createactions() { action[] javaactions = new action[] { new netbeansduplicatelineaction(), }; return textaction.augmentlist(super.createactions(), javaactions); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[stringfunctionstab.title=string functions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"end else"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ialiaseslist al = getaliaseslistinternalframe().getaliaseslist();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"backup file\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add <columnname>_2 null as clob"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockdatabasemetadata"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression for harmony-3869"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression for harmony-53"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"token-ids"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get 10 lines at a time."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"messages"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression for harmony-829"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"determine the number of lines to draw in the foreground."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for strings, a \"blank\" field is allowed, so only switch to null when there is nothing left in the field and user does delete"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"properties settable by the user"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nothing found"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"gridlayout makes equal cells"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"isessionlistener interface methods"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"note: temporary events need to be included in case a modla dialog opens."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data type keyword numeric-ids"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.invalidwidth=invalid width]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"combo box for read-all\/read-part of blob"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression for harmony-444"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"artifactname type installed? install\/update\/remove"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the only thing that would prevent us from editing a string in the popup is if that string has been truncated when read from the db. thus, being able to edit the string is the same as not needing to re-read the data."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"paint the background"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register the default button, if available"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update sizes when number of digits in the line number changes"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[keywordstab.title=keywords]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionstartuptimehintdlg.close=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"listen on windowclosing and redirect it to cancel button"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"note: tabs and newlines are allowed in string fields, even though they are unusual."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this column is limited, so truncate the data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"other keywords numeric-ids"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"names of the columns."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"token category-ids"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we cannot use this data in the where clause if it has been truncated. since being truncated is the same as needing to re-read, only use this in the where clause if we do not need to re-read"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register the cancel button helpers, if available"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.script=script:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"rest of the keywords"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"void type keyword numeric-id"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see sqlsettingsinitializer to find out how fonts are handled in the netbeans editor. _textarea.setfont(font);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the type of artifact"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"incomplete tokens"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ask the datatype object if the two values are the same"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"void type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"numeric-ids for token-ids"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlpreferencespanel.largescriptstmtcount=large script statement count: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"read map with users"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.sequencedetails=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expected;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"token-categories"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jdk1.5 vararg's \"...\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final isession _session;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checkbox for limit\/no-limit on data read during initial table load"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"at this point the user input has been validated and both the new and old values are objects of the appropriate data type. either or both of newvalue and oldvalue may be null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no updateable model, then we cannot update anything (should never happen - just being safe here)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypestring.typechar=char, varchar, longvarchar (sql types 1, 12, -1)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cannot edit the rowid column, if present"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"case sqltokencontext.annotation_id: jdk 1.5 annotations return new coloring(null, new color(0, 111, 0), null);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_session = session;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"iobjecttreeapi api = session.getobjecttreeapi(this);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle sql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"find the next name in the text"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first look to see if they are identical objects, e.g. both null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.procedureseparatorlabel=procedure\/function separator]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"hashtable autocorrects = plugin.getautocorrectproviderimpl().getautocorrects(); javaabbrevmap.putall(autocorrects);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this stops the text control from line wrapping."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"display mode"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"printing set"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isqlentrypanel#setundomanager(javax.swing.undo.undomanager)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"global references"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the dialog with given content"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see isqlentrypanel#getcaretlinenumber()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"print fore color will be gray"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we do abrevs ourselfs in the documentlistener in netbeanssqlentrypanel. we don't use the netbeans implementation mainly because it is case sensitive. if we come across a performance problem one day we can still try to use this."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the current jtable that we are working with. this is used only to see when the user moves to a different jtable so we know when to clear the hashmap of datatypeobjects."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for convenience cast the object to blobdescriptor"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"imainpaneltab[] getmaintabbedpanepanels(isession session);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dialog is shown only when it is written to."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"variables for this linenumber component"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"label panel containing the versions for the update at top of dialog."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"map of existing datatype objects for each column. the key is the columndisplaydefinition object, and the value is the datatypeobject for that column's data type."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"linenumber height (abends when i use max_value)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.loadchangelogfile=error retrieving change log file url for {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"blob cannot be used in where clause"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"options for global popup menu."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_session.getsqlpanelapi(_plugin)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"init user list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table data objects"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"options column increased"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is the actual command that colors the stuff. color stuff with the description of the style matched to the hash table that has been set up ahead of time."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle of connected server"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"usermanager of jaybird"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"forever"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"after the lexer has been set up, scroll the reader so that it is in the correct spot as well."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only if the text did really changed (null != re.change) intervals must be adjusted. if the text did not change there is nothing to adjust."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"color.maroon"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[windowmanager.errorselectingwindow=error selecting window]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"logger for this class private final static ilogger log = loggercontroller.createlogger(preferencespanel.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since the previous entry might have changed the color, we need to reset the color back to default value for table cells, taking into account whether the cell is selected or not."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the interval is involved even if pos lied one point before or after the interval. this way for example we get -- select ... out of comment coloring when the first \"-\" is removed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"record the colorstartpos of the last bit of text that we colored"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we will highlight tokens until we reach a good stopping place. the first obvious stopping place is the end of the document. the lexer will return null at the end of the document and wee need to stop there."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"synchronized (doclock) {"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"iobjecttreeapi api = m_session.getobjecttreeapi(m_plugin);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the new document."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since we did something, we should check that there is nothing else to do before going back to sleep."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"though in api-doc they say setcharacterattributes() is thread save we received observed java.lang.errors from swing as well as dead locks. that's why we do changes synchron now."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"todo: columns, tables"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"internationalized strings for this class."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"targettype == target_type_sql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string catalog, string schema, string simplename"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove the core items since they are the most recent, and the user is not allowed to remove them"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"todo: setfont(style.createstyledfont(getfont()));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not something we can read"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removed for reformatting"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setting the model initializes columns. we want to initialize the columns ourselves below."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can use an empty blob for editing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no rows selected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"folder to store the user settings in"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"label containing the location of the plugins at top of dialog."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table of loaded plugins in centre of dialog."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column 1 is internal name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private jlabel lbltitle = new jlabel();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column 3 is loaded status"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"other\" types are treated as strings internally in squirrel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"total number of threads."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"start the threads"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"join with the threads"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is expected"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first parse the sql string"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"bean for the global preferences"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now sequences should go."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the plugin"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we try to cascade"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"printing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"utilundertest = null;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now that we have run the view definition query, and retrieved the sql that is the body of the view (that is, it's query part minus the \"create view as\" prefix), we can drop the view."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"updateutil util = new updateutilimpl();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tablename"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is the column on which the constraint to be dropped is defined"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"printbtnprefsize.width -=10;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mocks for generic dialect test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no paper edges. we print the graph as it is to a single image."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 requires primary keys to also be declared \"not null\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.dina5=din a 5]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"need a directory that exists"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"btncopytoclipprefsize.width -=10;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql spatial index requires a not null column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#initialize()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alterations fail for some reason unless you do this..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"todo move to new standard location and rewrite test to be less static"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we need to add a second column to have a unique constraint so that we can drop that one. progress doesn't allow the very first index to ever be dropped."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is what we expect"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"gui"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we always get the blob, even when we are not reading the contents. since the blob is just a pointer to the blob data rather than the data itself, this operation should not take much time (as opposed to getting all of the data in the blob)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needs to be done at this moment. that's why we can't call updatefrompreferences() here."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see if plugin has any jars in lib dir."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert nullint into a varchar(100)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new removequotescommand(_session.getsqlpanelapi(_plugin)).execute();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"postgres has some special indexes that only work on certain columns. skip tests for those"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"selects the distinct values from the source column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getselectedcontroller() == null means: create a new graph"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is what we expect."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since it is likely to have the procedure separator on it's own line, and it is key to letting us know that proceeding statements form a multi-statement procedure or function, it deserves it's own place in the _queries arraylist. if it is followed by other procedure or function creation blocks, we may fail to detect that, so this just goes through the list and breaks apart statements on newline so that this cannot happen."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove menu item from windows menu that relates to this internal frame."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop the table so that we can test our create statement"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"action performed for the combo box private void cbfieldnameactionperformed(java.awt.event.actionevent evt) { selectedindex = cbfieldname.getselectedindex(); defaultcomboboxmodel combomodel = (defaultcomboboxmodel) cbfieldname.getmodel(); fielddetails fd = (fielddetails) combomodel.getelementat(selectedindex); cbfieldname.setselecteditem(fd.getfieldname()); cbfieldtype.setselecteditem(fd.getfieldtype()); tffieldlength.settext(fd.getfieldlength()); tffielddefault.settext(fd.getdefault()); chautoincrement.setselected(fd.isautoincrement()); chnotnull.setselected(fd.isnotnull()); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"build the sql statement(s) to create the table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we try to find a completely free space for the new table frame."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register so that we can display different tooltips depending which entry in list mouse is over."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"quiet"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create a table with a default value to use as the model"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"defines the size of the arrow"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't need tooltips any more."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no need to this in background when schemainfo is not reloaded."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if node hasn't already been expanded."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.inch=inch]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make it grow when added"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"enable\/disable actions that require open session frames."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public folder getsubfolder(int idx) throws indexoutofboundsexception { \/ return (folder)_folders.get(idx); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create a unique index on myuniquechar"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"empty body, purely to shorten the interface name for convienience."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"progress throws an exception if you try to drop the first index that was created"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"skip this table, try the next."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"renames the source column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"[i18n[orderbyclausepanel.hint=order by clause for the selected table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create a non-unique index on mychar"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"serialized attributes"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"axion cannot handle ts escape sequence - so skip this test for now."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private static final db2400dialect db2400dialect = new db2400dialect();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalpreferencespanel.squirrelhomepath=home directory: -home {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now drop the second."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if the column index is within the bounds of our header array"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"unused methods - this is not a real dialog, just a fake."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"+ 6;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"grab the current letter as a char"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"center text vertically."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"databaseobjecttype.udf_type_dbo=udf type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.btncreatenewgraph=create new graph]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column is in both table 1 and 2"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save the pointer needed for insert and delete operations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create a test view that we will get view def for then drop and re-create"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private class dbcopypluginresources extends pluginresources { dbcopypluginresources(string rsrcbundlebasename, iplugin plugin) { super(rsrcbundlebasename, plugin); } }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"verify insert worked only if the dialect supports sub-second timestamp values"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see if all selected nodes are of the same type."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"blob exists, so try to read the data from it based on the user's directions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no exceptions during logging"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"variables ======================================================================== non visible logger for this class"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlfiltersheet.error.columnlist=unable to get list of columns {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"shutdown embedded derby db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update tablename set setcolumn1 = setvalue1, setcolumn2 = setvalue2 from fromtable1, fromtable2 where wherecolumn1 = wherevalue1 and wherecolumn2 = wherevalue2;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1. find the local release.xml file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these must not be internationalized since sql tokens must be in english no i18n no i18n"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"channel that provides snapshot release updates - more frequent and less stable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table was deleted from db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter sequence $sequencename$ \" + \"$restartwith$ $startvalue$ \" + \"$incrementby$ $incrementvalue$ \";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we've loop through one time for each character in the string, then something must be wrong. get out!"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"when all updates are retrieved, tell the user that the updates will be installed upon the next startup."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.orderyname=order by name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"transferable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"features"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"<rename_view_statement> ::= rename view <old_table_name> to <new_table_name> <old_table_name> ::= <table_name> <new_table_name> ::= <table_name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.save=save]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check once a day check once a week check every time the app launches"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_constraintgraph.movelasthitfoldingpointto(point);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"<create_index_statement> ::= create [unique] index <index_name> on <table_name> (<index_spec>) <index_spec> ::= <index_column_name>,... | <dbfunction_name> (<column_name>,...) [asc|desc] <index_column_name> ::= <column_name> [asc|desc]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table fktestchildtable add constraint foo_const unique (myid)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"channel that provides stable release updates"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"hit is on folding point"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public static final int no_action = 0; public static final int cascade_delete = 1; public static final int set_default = 2; public static final int set_null = 3;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[downloadstatuseventhandler.downloadingupdatesmsg=downloading files]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"boolean isuptodate() throws exception;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some databases store a time component in date columns (oracle) the user can set a preference for dates that allows them to be read as timestamp columns instead. this doesn't appear to have ill effects for databases that are standards compliant (such as mysql or postgresql). if the user prefers it, use the timestamp data type instead of date."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test the create statement"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"build ui"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we should never not have an object here because we only get here when a datatype object has claimed that the column is editable. if there is no datatype for the column, then the default in the iseditablexxx() methods in this class is to say that the column is not editable, and therefore we should never have this method called in that case."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the update dir, is actually a file, log an error."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since the user only wants to be notified of updates at startup, return here, thereby freeing up the thread."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the first argument is a jtable, which is only used by instances of jtextfield to convert coordinates on a double-click. since that cannot happen with the jtextarea, do not bother passing the table."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert to string special case: some systems tack a newline at the end of the text read. assume that if last char is a newline that we want everything else in the line."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user doesn't wish for us to try to auto-detect the dest db."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ms sqlserver yields \"conversion failed when converting datetime from character string\" for {ts '2008-02-21 21:26:23.966123'}"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"kick off a thread to go and fetch the files one-by-one and register callback class - downloadstatuseventhandler"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"catalog schema tablename columnname datatype typename columnsize decimaldigits radix isnullallowed remarks defaultvalue octet length ordinal position isnullable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"build data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the driver throws an exception for varchar with length > 3924"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"3. determine the channel that the user wants (stable or snapshot)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tablename, columns, pkcolumns, prefs, qualifier"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"2. when the user clicks ok, then display update dialog again."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1. wait for user to click ok\/close"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"symbol used by user in command field to indicate \"put the file name here\" when the command is executed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"based on defaults from db, get the default object instance for each column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"current schema says don't load"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.enableautocorr=enable auto correct \/ abreviation]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first time through this method in program, so go cleanup old log files"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"helpers"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"lazily create the event."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.util.ioptionpanel#gethint()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"always wrap on word boundaries"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1. find the local release.xml file. bail with exception if we cannot find it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the downloads dir doesn't already exist, just create it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needes to be done via event queque because method is not called from the event disptach thread."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"actions.get(sqlfilteraction.class).setenabled(false);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"note: if we are here _cacheschemaindependentmetadata must be false"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"clear"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"root.setdefaultbutton(_okbtn);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is a funny functionality anyway and leads to problems with the docktabstyle. e.g. when sessionproperties is closed first tab gets selected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.refreshalltables=refresh all tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwhercolssheet.close=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dualprogressbardialog.error.getdialog=getdialog: unable to invokeandwait for dialog]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.objecttabs=object tabs:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- restore"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.server=server:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbcopyglobalpreferencestab.title=db copy]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"3. & 3a. get the release.xml file as a channelxmlbean from the server or filesystem."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcontroller.filechooserbutton=choose]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefs.table.spwithparams=sp with params]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.usedefaultformating=use default formating]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypetime.medium=medium ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.add=add >>]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.diplayscriptdetails=display script details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemainfo.loadingdatatypes=loading data types]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.diskreadsperexec=disk reads per exec]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatemanagerdialog.checkbuttonlabel=check]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypebigdecimal.scaleeceeded=scale exceeded: number of digits to right of decimal place ({0})\\nis greater than allowed in column ({1}).]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tabletypestab.hint=show all the table types available in dbms]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"record now as the last time we checked for updates."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since this timer must be started when squirrel is launched, wait a couple of minutes for squirrel to get done initializing the ui."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlreformatter.no=no]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"3a. for server, determine the channel that the user has (stable or snapshot)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"hsqldb 1.7.1 throws error."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.alldefaults=all defaults]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't prevent the user from overriding the laf is they choose to use swing's default laf prop"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle jdbc driver doesn't properly identify this column in resultsetmetadata as read-only. for now, just use isautoincrement flag to simulate this setting."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[indexestab.hint=show indexes for the selected table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.italic=italic]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.savegraph=save graph]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.hintgrants=(mysql) grants]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scriptdatabase=script database]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"getter\/setter"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.ok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.elapsedtime=total: {0}, sql query: {1}, building output: {2}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sequencedetailstab.hint=display sequence details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.loadlicencefile=error retrieving licence file url for {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.errorwritingprefs=error occured writing to preferences file: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[firebird.triggerdetails=display trigger details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.truncatetable=truncate table before inserting data]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.selscripttodel=please select the script to delete]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.abrevclose=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isqlpanelapi#fileappend()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getlicencefilename()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"flag for whether to use the default java format (true) or the locale-dependent format (false)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getglobalpreferencepanels()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatesqlpanel.execute=execute sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[copytablescommand.loadingprefix=analyzing table:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[javabeandataset.name=property name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.errorgettingpath=error getting full path name for selected file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.name=name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.version=version:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"throws pluginexception"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.zoomprint=zoom\/print]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add table types to list."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if value contains \"-\" it probably has a date component"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add udt parent node."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.columns=columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no existing blob to re-use"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getpluginappsettingsfolder()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[catalogstab.title=catalogs]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencespanel.deleterefactiontooltip=append on delete ...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.alludfs=all user-defined functions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.spwithoutparams=stored procedure without parameter info: {call mysp()}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.genereatecreate=generate the create <object> command for each object]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isqlpanelapi#filesaveas()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datetypetimestamp.stringversion=use string version of timestamp ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isqlpanelapi#fileclose()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isqlpanelapi#fileopen()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarytable.no=no]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[excelsettingspanel.xlssettings=excel import settings]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatemanagerdialog.closelabel=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiespanel.statusbarbackgroundcolorbtnlabel=choose status bar color]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"empty bbody"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[splashscreen.info.loadingfile=loading file - ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.exporttitlenew=csv \/ ms excel export]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[copyprogressmonitor.analyzingtablemessage=analyzing table ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.weeklylabel=weekly]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatecontrollerimpl.exceptionmsg=exception was: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#unload()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[csvfileimporter.invaliddateformat=invalid date format given]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.tabstatus=mysql table status]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set to default"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[databaseobjectinfotab.title=info]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isession#getschemainfo()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[databaseobjectinfotab.hint=basic information]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <tablename> drop column <columnname>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.cannotcreatetempfile=cannot create temp file..\\nerror was:\\n{0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checkbox for whether to interpret input leniently or not i18n[datatypedate.allowinexact=allow inexact format on input]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#nullsaresortedhigh()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[basesourcetab.title=source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"whether or not to read date type columns with rs.gettimestamp() i18n[datatypedate.readdateastimestamp=interpret date columns as timestamp]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"readddateastimestamp checkbox"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"adds the new column (type: integer)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"lenient is set next"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.scriptdd=script ddl]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression test for harmony-1497"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.idatabaseobjectinfo#getdatabaseobjecttype()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"registercolumntype(types.longvarchar, 31982, \"varchar($l)\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"frontbase requires cascade or restrict keywords."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"anticipate the same issue for blobs as for binary and longvarbinary. registercolumntype(types.blob, 2147000000, \"bit varying($l)\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert each column that will be a member key to non-null - this doesn't hurt if they are already null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check box for whether to read contents during table load or not"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"derby is real close to db2. only difference i've found so far is 48 instead of 53 for float length llimit."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copy the app module jar to core downloads directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"throws pluginexception;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user does not want to overwrite the file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select v.viewdefinition from sys.sysviews v, sys.systables t, sys.sysschemas s where v.tableid = t.tableid and s.schemaid = t.schemaid and upper(t.tablename) = 'viewname' and upper(s.schemaname) = 'schemaname'"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"is it installed?"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"'*\/' outside comment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the number of files to keep is arbitrarilly set here"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypestab.title=data types]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the event dispatch thread, for the purpose of getting stack traces."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"additional index creation"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"everything is ok"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.nosql=no sql specified]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.year=year]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set to the default"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the text area displaying the object contents"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aboutboxdialog.error.creditsfile=error reading credits file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dont enable the session drop down if it is empty"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create unique index indexname on tablename using btree (column1, column2) tablespace where constraints;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.btnok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <tablename> add constraint unique (<columnlist>) constraint <constraintname>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.channel=channel:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save application level sql history."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save options selected for edit where columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save options selected for cell import export operations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.month=month]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"aliasmaintsheetfactory.initialize(this); drivermaintsheetfactory.initialize(this);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypeother.sqlothertype=sql other (sql type 1111)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for faster printing, turn off double buffering"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorydlg.filtercbostartswith=starts with]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datacache.msg.driverregisteredsucessfully=driver class {0} sucessfully registered for driver definition: {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[createtablescriptcommand.jdbcodbcmessage=jdbc-odbc bridge doesn't provide all of the necessary metadata. the script may be incomplete.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no special treatment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.new=new]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.errorreadingfile=there was an error while reading file {0}.\\nthe error was:\\n{1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.tablenamelabel=table name: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarydialog.close=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isqlpanelapi#filenew()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.dlgtabscriptsexecute=execute]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[downloadstatuseventhandler.updatedownloadfailedtitle=update download failed]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[db2plugin.showviewsource=show view source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.warning=note: changes may not take effect until the application is restarted.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[abstractrefactoringdialog.executebuttonlabel=execute]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetviewereditabletablepanel.error2=error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[abstractrefactoringdialog.tablenamelabel=table name: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.windows=windows text (ansi)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exporterror6=export error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.scriptplugneeded=scripting is only available with the sql scripts plugin.\\nget the plugin from www.squirrelsql.org. it's free.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.parsecalla=parse calls]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[derbydialect.typemessage=derby doesn't allow the column type to be altered]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[droptabledialog.cataloglabel=catalog:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.xmlerrorwritingto=xml error writing to\\n{0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exporterror2=export error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.configyourmultitablescriptconstr=include constraints to tables not in selection]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.logon=sql validation logon]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[pastetableaction.error.multischemapaste=the paste operation may only be applied to one schema at a time]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.triggerdetails=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.splash.loaddatatypeprops=loading data type properties...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.cancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.showzoompaper=show\/zoom paper edges]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarytable.alltranslationslabel=all translations]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"determine whether we read all there was in the blob or not"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.showddl=show ddl]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatetabcontroller.noconfigselected=please select a hibernate configuration to connect to.\\nhibernate configurations can be defined in the global preferences window.\\nwould you like to open the window now?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private isession _session;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypedate.medium=medium ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.selectimportdatafile=you must select an existing file to import data from.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[createtableofcurrentsqlcommand.noquery=no query found to create the script from.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorydlg.filtercboendswith=ends with]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarytable.allpluginslabel=all plugins]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.dropifexists=drop table if exists]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.cm=cm]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we successfully read the whole thing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"valid bounds"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create checkbox for enabling auto refresh i18n[oracle.auotrefresh2=enable auto refresh]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aboutboxdialog.creditspanelcreatetime=creditspanel created in ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.dlgtabscriptsedit=edit...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.cols=columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqltab.hint=execute sql statements]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[downloadstatuseventhandler.changesrecordedtitle=changes recorded]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importdataintotableexecutor.ioexception=an error occured while reading the input file.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isession#getmetadata()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.connectionfailuredialogmsg=unable to download release.xml from the specified location]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.enterdbname=enter database name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.printgraph=print graph]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.closeallbutthis=close all but this]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[baselistinternalframe.error.execdoubleclick=error occured executing doubleclick event]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlreformatter.xmlwarning5=xml warning]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.importerror2=import error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.dbmsversion=dbms version:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.loadfaqfile=error retrieving faq from url = {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiespanel.statusbarbackgroundcolorchooserdialogtitle=select background color for status bar]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aboutboxdialog.aboutpanelcreatetime=aboutpanel created in ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[csvsettingspanel.usetab=tab seperated]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.delgraph=do you really wish to delete this graph?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[csvsettingspanel.inputfileencoding=input file encoding]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.columnnamelabel=column: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[refactoringpreferencespanel.quotetooltip=identifiers appear in quotes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dualprogressbardialog.cancelbuttonlabel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.removemultilinecommentlabeltiptext=]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data was not fully read in before, so try to do that now"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[session.drivercompliancetitle=jre\/jdbc version mismatch]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiespanel.toolbarbackgroundcolorchooserdialogtitle=select background color for toolbar]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcontroller.nocommand=you must provide a command string or uncheck \"execute command\".]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.successcreate=successfully created table {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.dina4=din a 4]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.importwarning=import warning]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.removegraph=remove graph]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.commentlabel=comment: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.addcolumntitle=add column]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlfiltersheet.okbuttonlabel=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.showbuttonlabel=show sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[triggerdetailstab.hint=display trigger details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntaxplugin.duplicateline=duplicateline]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.executing=executing script...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.error.firebirdcommit=firebird requires commit table create before inserting records. please adjust your preferences.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_driverslistwindow.nowvisible(false);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.faq=faq]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.selclasspathtodel=please select the classpath entry to delete]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"binary data viewing option: view ascii as char rather than as numeric value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter sequence sequencename increment by increment minvalue minimum maxvalue maxvalue restart with restart cache cache cycle;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefstabtitle=code completion]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.linecommentlabel=start of line comment]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.selgraphtoadd=select the graph to add the selected tables to]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dataimportglobalpreferencestab.hint=preferences for data import]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.width=width]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.cachefilepath=cache file path for alias \"{0}\": {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ignore"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[memorypanel.rungc=run garbage collection]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.dborder=db order]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypetimestamp.medium=medium ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dualprogressbardialog.copyingtableslabel=copying table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcommand.missingclobdatamsg=found clob placeholder ({0}) amongst data to be exported. continue exporting cell data?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorydlg.close=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.fileoptions=file options]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.invalidheight=invalid height]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aboutboxdialog.error.creditsfileurl=couldn't retrieve credits file url]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"insert into tablename (column1, column2) query;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"24 chars"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.day=day]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.autocheckfrequency=how often to check for updates:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.splash.loadcellselections=loading cell import\/export selections...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string templatestr = null;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.ok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[droptabledialog.tablelabel=table(s):]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemainfo.loadingcatalogs=loading catalogs]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.info.jdbcwriter=attempting to set jdbc debug log to writer]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.loadpluginhelp=error generating help entry for plugin {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[copydriveraction.error.selectingwindow=error selecting window]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"label for type combo - used to enable\/disable text associated with the combo i18n[datatypebigdecimal.read2=read]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[viewsourcetab.display=show view source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.function.mustendwith=function must end with ',']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hashtabledataset.key=key]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[postgresqlxmltypedatatypecomponent.cellerrormsg=<error: see log file>]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.copycancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_driverslistwindow.nowvisible(true);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.autocorrapply=apply]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.tables=tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.newname=please enter a new name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[actioncollection.createactionerror=error occured creating action: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypetime.full=full ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetviewertablepanel.conversionerror=conversion error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.clientlogon=client:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[htmlviewerpanel.error.displayurl=error displaying url]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.failedtoparse=failed to parse {0}\\n{1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.function.needstwoargs=function needs at least two arguments]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.literals=literals]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[logpanel.loginfolabel=logs: errors {0}, warnings {1}, infos {2}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"here we've hit the second line of a multi-line i18n stanza just skip it, we're not that sophisticated."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"and the query info."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this file is a zip; it needs to be extracted into the install directory. all zips are packaged in such a way that the extraction beneath install directory is all that is required."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarytable.installoptionslabel=install options]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.mnudelete=delete]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.metadatatabtitle=metadata]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.defaultvaluelabel=default value: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[factoryproviderdialog.cancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[supportedrefactoringstab.hint=show refactorings that are supported by the plugin]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the conentpane into a variable for convenience"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.editbuttonlabel=edit sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getdescriptivename()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.codetemplate=script code template]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the whole blob has been previously read in"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclepluginpreferencespanel.readclobsfullycheckboxtt=read all clob data when the contents tab is displayed]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysqlplugin.showproceduresource=show procedure source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarydialog.currentversionprefix=current version:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.notgeneratedinworkdir=file {0} has not been generated. cannot continue.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.execution=executions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigcontroller.reallyremoveconfig=are you sure you want to delete configuration \"{0}\".]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatesqlpanel.alwaysformat=always format]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"read succeeded, so reset the blobdescriptor to match"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[validatorglobalpreferencestab.hint=preferences for sql validation]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclepluginpreferencespanel.sessiontimezonelabel=initialize session timezone]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[abstractrefactoringdialog.showbuttonlabel=show sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mappingroot.drivername=jdbc driver name (hibernate)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.sqlresults=sql results:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[derbyplugin.prefstitle=derby]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[artifactstatus.corelabel=core]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatemanagerdialog.settingslabel=settings]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlfilteraction.singleobjectmessage=you must have a single table or view selected to activate the sql filter]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.dlgtabscripts=scripts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.droppingdbs=dropping database(s)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[lockdetailstab.hint=display locks]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistoryitemwrapper.sql=sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.errorresolvingfile=error resolving file name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[indexdetailstab.hint=display index details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"other tests"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistoryitemwrapper.lastused=last used]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copy i18n files to i18n downloads directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.title=results]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.errorcreatingfile=error occured reading from preferences file: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sybaseaseplugin.triggerhint=show trigger source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"one synchron call for first completion"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.toobtainsessionfactpersunit=persitence-unit name:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"must not qualify column name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dialectutils.error.getprimarykey=unable to get primary key info for table {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.cancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[timedatefunctionstab.title=time\/date functions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencespanel.deleterefactioncheckboxlabel=add delete referential action to the fk definition]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcontroller.filechoosertitel=choose export file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[memorypanel.sessioninfo.tostring3=session: id={0}, alias={1}: created at {2}, closed at {3}, finalized at {4}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"end of inner class"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarytable.yes=yes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[supportedrefactoringstab.title=supported refactorings]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displaydetails=display index details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.tableheader.schema=schema]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.editfactoryprovider=edit]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"desc_t1"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclealiasprefspanel.applynow=apply now]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[refactoringpreferencespanel.bordertitle=refactoring preferences]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcommand.failedtoexecutecommand=failed to execute\\n{0}\\nerror message\\n{1}\\nsee last log entry for details.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"rename <columnname>_2 to <columnname>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[artifactstatus.pluginlabel=plugin]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.logonclose=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importdataintotableexecutor.importingdatainto=importing data into {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.columnseparator=column separator:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.savegraphimagestofile=copy graph to clipboard]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.fieldprops=field properties:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiespanel.objecttreebackgroundcolorchooserdialogtitle=select background color for object tree]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.cancelerequested=query execution cancel requested by user.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.desc=description:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copy core files minus any i18n jars to core downloads directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mapdataset.unsupported=<unsupported>]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.showqualifiedtablenames=show qualified table names]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[csvsettingspanel.usechar=seperated by character:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.prefuseplain=use plain editor]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.loadcolsinfo=unable to load edit 'where' columns selections.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlfiltersheet.closebuttonlabel=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create new object to hold the different value, but use the same internal blob pointer as the original"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.scriptclass=script class]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell user that there was a problem i18n[basedatasetviewerdestination.error=error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.refreshtable=refresh table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displaysnstancedetails=display instance details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[actioncollection.actionnotfound=action {0} not found in actioncollection.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.user=user:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mmsql.textfiles=text files]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the original object is not null, then it contains a blob object that we need to re-use, since that is the dbs reference to the blob data area. otherwise, we set the original blob to null, and the write method needs to know to set the field to null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[specialcolumnmapping.fixed_value=fixed value]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.executingcommand=executing command: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.confirmremove=do you want to remove script {0} from the list?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.savedatatypeprops=unable to write datatype properties to persistant storage.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.errorprocessingformat=error processing format sql command: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.monitor=monitor]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[indexdetailstab.title=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[modifydriveraction.error.selectingwindow=error selecting window]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.displaydocument=error displaying document]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we need the try\/catch just to keep the compiler happy"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hashtabledataset.value=value]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.copytable=copy table...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default is no reference"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatemanagerdialog.channellabel=channel:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.fileerror=file name error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is another way to do this. modifying the column type to serial is much easier. thanks to doug lawry for setting me straight!!"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 requires that columns be not-null before applying a unique constraint"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.infotabtitle=info]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[cancelstatementthread.cancelsucceededlate=canceling statement succeeded now. but took longer than one second.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.general=general]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.nonstickypanel=cannot make a cancel panel sticky]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.header=squirrel sql client application dump {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigcontroller.noconfigtoremove=no configuration selected to remove.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.errabrev=error \/ abreviation]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[databasemetadata.nullabletypenullableunknown=unknown]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.noeditorcommand=can not open files withou an editor command.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorydlg.filtercboregex=regular exp]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exporterror5=export error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.prefsyntax=syntax]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datetypetimestamp.defaultformat=use default format ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[refactoringpreferencestab.title=refactoring]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"null tests"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.btremove=remove]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"strip quotes from the column name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dualprogressbardialog.copyingrecordslabel=copying records]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.error.maptype=couldn't map type for table='{0}' column='{1}']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[objecttreetab.title=objects]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter table $tablename$ alter column $columnname$ identity\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"mockapplication.getmainframe: stub not yet implemented\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sessionpanel = new sessionpanel(this);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntaxplugin.tolowercase=tolowercase]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_treeapi.adddetailtab(databaseobjecttype.procedure, new proceduresourcetab(i18n.show_procedure_source));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[memorypanel.sessioninfo.tostring2=session: id={0}, alias={1}: created at {2}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockconnection2 mockcon = getmockconnection();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add package node to contain standalone procedures."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[createdriveraction.error.selectingwindow=error selecting window]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"global errors"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[factoryproviderdialog.title=name of sessionfactorimpl provider]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorydlg.applyfilter=apply]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.executingcommandfailed=execution failed with error: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowdatainputframe.data=data]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.sorts=sorts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.nosel=no selection]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.pageloaded=page loaded.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.cachefilepathnotexists=cache file for alias \"{0}\" does not exist. if it existed the path would be: {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.withheaders=include column headers]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[progresscallbackdialog.initialloadingprefix=loading...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.currentactivity=current activity]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcontroller.commandchoosertitel=choose command executable]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exporterror=export error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter table $tablename$ \" + \"add $constraint$ $constraintname$ unique $index$ $indexname$ $indextype$ ( $indexcolumnname$ )\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[actioncollection.createactioninfo=attempting to load action class - {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlrefomatter.xmlwarning=xml warning]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemainfo.loadingkeywords=loading keywords]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.general=general]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.nullablelabel=nullable: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mocksession"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"build the table types returned by postgresql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"clone the test bean and change every bean property"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.removerows=remove selected rows]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get list of files using that base name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.objectson=objects on {0}:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefs.table.spwithoutparams=sp without params]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"squirrel installed lib dir"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetviewereditabletablepanel.deleterosquestion=do you wish to delete {0} rows from this table?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"trying to set time to an exact number"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add button to execute external command i18n[popupeditableiopanel.execute34=execute]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we need to convert to a different format default to hex"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarydialog.title=update summary]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernate.hibernatetabpanel.openconfigs=open hibernate configurations]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dataimportglobalpreferencestab.title=data import]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntaxplugin.replace=replace]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graphtofile.imagefilespec=jpg image format]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.sessiondetails=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some dialects support adding columns, but the logic has not been added yet to the dialect. if that is the case the message is \"not yet implemented\" - fail for all other messages."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.reswords=reserved words]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolsaction.singleobjectmessage=you must have a single table selected to limit the colums used in the edit where clause]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.selcolor=select color]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.logonok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.filedoesnotexist=file {0} does not exist,\\nor is not a readable, normal file.\\nplease enter a valid file name or use browse to select a file.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[metadatatab.hint=show database metadata]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"print the i18n comment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.enternameoftable=enter name of table:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigcontroller.classpathentrydesc=jars, zips or directories]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.prefusenetbeans=use netbeans editor (recommended)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hqlentrypanelmanager.quotehqlsb=quote hql as stingbuffer]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.showinstandardmenues=show in standard menues]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.sourcedirisnotadirectory=source directory {0} is not a directory.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can be done as follows in postgres insert into mytable(id,name) select 1, 'pizza' union select 2, 'donuts' union select 3, 'milk';"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mappingroot.url=jdbc url (hibernate)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatemanagerdialog.title=update manager]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.datatypes=data types]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[session.drivercompliance=the driver being used for alias ''{0}'' is not jdbc 2.1 compliant.\\nyou should consider getting a more recent version of this driver]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"all currently installed artifacts will be marked with install action."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[celldatapopup.valueofcolumn=value of column {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"entries"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[csvsettingspanel.dateformat=date format]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop index indexname cascade;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[informixexceptionformatter.positionlabel=position: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.urllabel=url:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.editbookmark=edit bookmark]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.btntextedit=edit]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.bufferperexec=buffer gets per exec]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i don't know of any api for getting the event dispatch thread, but we can assume that it's the current thread if we're in the middle of dispatching an awt event..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.copytonewtable=copy to new table:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check null argument is handled"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.allviews=all views]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schematableupdatewhatitem.procedures=procedures]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[db2plugin.showtriggersource=show trigger source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencestab.title=sql scripts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.modifybuttonlabel=modify column]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.functions=functions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[pleasewaitdialog.cancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.localpathlabel=local path:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"making sure that the directory does not exist."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclepluginpreferencespanel.showerroroffsetlabel=show syntax error offset in sql editor]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column name sqltype"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"construct mock objects"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.propsdlgcancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"file handling controls i18n[popupeditableiopanel.usefile=use file: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatemanagerdialog.repositorytablabel=repository]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"execute test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.showconstr=show constraint names]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpsessionaction.error=error occured dumping session: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.diskreads=disk reads]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see comparator#compare(object, object)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see java.awt.datatransfer.transferable#isdataflavorsupported(java.awt.datatransfer.dataflavor)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getdatabaseproductname()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getcascadeclause()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportsschemasintabledefinitions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsmixedcaseidentifiers()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportsresultsettype(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getschematerm()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportscatalogs()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportscatalogsinprocedurecalls()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#gettypeinfo() @deprecated replaced by getdatatypes"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getprocedures(java.lang.string, java.lang.string, java.lang.string, net.sourceforge.squirrel_sql.fw.sql.progresscallback)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.options=options]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getimportedkeysinfo(net.sourceforge.squirrel_sql.fw.sql.itableinfo)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add classpath string"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getprimarykeys(net.sourceforge.squirrel_sql.fw.sql.itableinfo) @deprecated use getprimarykey instead"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[objecttreetab.hint=show database objects]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getprocedurecolumns(net.sourceforge.squirrel_sql.fw.sql.iprocedureinfo) @deprecated use getprocedurecolumnsdataset instead"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getprimarykey(net.sourceforge.squirrel_sql.fw.sql.itableinfo)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getcolumninfo(net.sourceforge.squirrel_sql.fw.sql.itableinfo)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.metadatadataset#next(net.sourceforge.squirrel_sql.fw.util.imessagehandler)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.preferences.iglobalpreferencespanel#uninitialize(net.sourceforge.squirrel_sql.client.iapplication)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.abstracttablemodel#getcolumnname(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.ifileimporter#close()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.ifileimporter#getpreview(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndiffdialog.sessionlabelprefix=session]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.ifileimporter#getint(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.tablemodel#getrowcount()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.ifileimporter#getrows()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.ifileimporter#getconfigurationpanel()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#statementexecuted(net.sourceforge.squirrel_sql.plugins.dbcopy.event.statementevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#recordcopied(net.sourceforge.squirrel_sql.plugins.dbcopy.event.recordevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#handleerror(net.sourceforge.squirrel_sql.plugins.dbcopy.event.errorevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#analyzingtable(net.sourceforge.squirrel_sql.plugins.dbcopy.event.tableevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#tablecopystarted(net.sourceforge.squirrel_sql.plugins.dbcopy.event.tableevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.util.ioptionpanel#getpanelcomponent()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.sessioninfoprovider#getdestselecteddatabaseobject()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getversioncolumns(net.sourceforge.squirrel_sql.fw.sql.itableinfo) @deprecated use getversioncolumnsdataset instead"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.sessioninfoprovider#setcopysourcesession(net.sourceforge.squirrel_sql.client.session.isession)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.defaulttablemodel#getcolumncount()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.defaulttablemodel#iscelleditable(int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[udfdetailstab.title=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"idatatypecomponent interface methods @see net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.idatatypecomponent#candofileio()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.smarttools.gui.ismarttoolframe#setfocustofirstemptyinputfield()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.event.isqlexecutionlistener#statementexecuted(java.lang.string)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalpropertiespanel.left=left]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.sqldatabasemetadata#getimportedkeysinfo(net.sourceforge.squirrel_sql.fw.sql.itableinfo)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.itableinfo#setimportedkeys(net.sourceforge.squirrel_sql.fw.sql.foreignkeyinfo[])"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#getdatabaseproductname()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#deletesaredetected(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#isreadonly()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#nullsaresortedatstart()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#othersinsertsarevisible(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#owndeletesarevisible(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#ownupdatesarevisible(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#storeslowercasequotedidentifiers()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#storesuppercasequotedidentifiers()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsansi92fullsql()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportscatalogsinindexdefinitions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportscolumnaliasing()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportscorrelatedsubqueries()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsdifferenttablecorrelationnames()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsgetgeneratedkeys()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsgroupby()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsintegrityenhancementfacility()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsmultipletransactions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsopencursorsacrosscommit()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsorderbyunrelated()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsresultsetconcurrency(int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsschemasinindexdefinitions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsschemasintabledefinitions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsselectforupdate()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsstoredprocedures()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportssubqueriesinins()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportstransactions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#useslocalfilepertable()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.mainpanel.basemainpaneltab#refreshcomponent()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[memorypanel.sessioninfo.tostring1=session: id={0}, alias={1}: created at {2}, closed at {3}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.toobtainsessionfactconfiguration=call \"new org.hibernate.cfg.configuration().configure().buildsessionfactory();\"]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.addchildtables=add child tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.plantableunavailabletitle= plan_table not found]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.dlgtabscriptsremove=remove]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[refactoringpreferencespanel.prefstooltip=table names appear in scripts as schema.table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.prefname=name:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"scope"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[triggerdetailstab.title=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.dlgcreattableofsql=create table of sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemainfo.loadingtables=loading tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dialectutils.columndefaultunsupported={0} doesn''t support altering a column''s default value]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.classnotfoundin=class {0} found in\\n{1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistoryitemwrapper.index=index]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[threadcheckingrepaintmanager.workinwrongthread=gui work done in wrong thread]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.statementseparatorlabel=statement separator]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importfiledialog.tablecolumn=table column]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.dbms=dbms]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.loadpluginsettings=error retrieving app settings folder for plugin {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.findnetbeansonly=find is only available when the netbeans editor is used.\\nsee menu file --> new session properties --> tab syntax]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[htmlviewerpanel.error.processhyperlink=error processing hyperlink]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displaytriggercolumns=display trigger column information]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlreformatter.seeothererrs={0}\\ndo you wish to see other errors?\"]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.newfactoryclasspathborder=additional classpath entries to create a sessionfactoryimpl]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigcontroller.nocfgnamemsg=not a valid configuration name\\nchanges cannot be applied.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.executeerror2=execute error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schematableupdatewhatitem.views=views]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[droptabledialog.title=drop table(s)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.addparenttables=add parent tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.descriptivename=sql validator plugin]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.anonymous=anonymous]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.specifyschemas=specify schema loading and caching]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.graphsaved=graph \"{0}\" saved to \"{1}\"]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[javabeandataset.value=value]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[derbyplugin.showproceduresource=show procedure source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resultsetmentadataset.propname=property name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.executebuttonlabel=execute]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.shoevariables=(mysql) show variables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.codetemplatesave=save]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mappingroot.connectionerr=error getting sql connection data from hibernate:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.atstartuplabel=at startup]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatemanagerdialog.hostlabel=host:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.selscripttoexec=please select the script to execute]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.classpathadd=add classpath entry]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[abstractrefactoringdialog.cancelbuttonlabel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.time=time]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.technology=technology:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.performace=performance counters]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mapdataset.key=key]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scriptprimary=script primary keys, foreign keys, defaults, and check constraints]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.lf=l & f]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.delay={0}s delay]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[pleasewaitdialog.pleasewait=please wait while the query is executed]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[numericfunctionstab.hint=show all the numeric functions available in dbms]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.applicableto=scripts applicable to objects of type {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.whitespace=white space]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exporterror3=export error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.textlimitlinevisible=show text limit line]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.chkislandscape=landscape]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"trying to set time to a negative number"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclealiasprefspanel.accessiblebutsys=allow accessible schemas excluding sys]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.nonativetoasciioutdirnodir=native2ascii output dir is not a directory. native2ascii will not be executed.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateattribuitedataset.dbtablename=database table name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.configmultitablescript=configuration of multi table scripts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlfiltersheet.clearbuttonlabel=clear {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[progressbardialog.cancelbuttonlabel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[catalogstab.hint=show all the catalogs]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.infoborder=info]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[formattersourcetab.nosourceavailable=no object source code is available]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionpropertiespanel.loadschemascatalogs=load schemas\/catalogs into object tree]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverpropertiespanel.usedriverproperties=use driver properties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatecontrollerimpl.releasefiledownloadfailedmsg=release file couldn't be downloaded. please check your settings.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.disconnected=disconnected from the sql validation web service]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displaysnapshotdetails=display materialized view details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolssheet.unabletoedit=unable to get list of columns, {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclealiasprefspanel.accessibleandsys=allow accessible schemas and sys]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.showsqlbuttonlabel=show sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.nosqlselected=no sql selected for execution.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracleplugin.hint=preferences for oracle]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aboutboxdialog.info.endmemtimer=ending memory timer (aboutbox)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.error.nocolumns=table '{0}' in schema '{1}' has no columns to copy]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isqlpanelapi#fileprint()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.nonativetoasciicommand=cannot convert files without a native2ascii command.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwhercolssheet.reset=reset]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.prefclose=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.errorsavingalials=error saving aliases]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorydlg.sqlpref=sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.tablescriptcancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add button for brows i18n[popupeditableiopanel.browse=browse]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracleprefspanelcontroller.hint=oracle plugin preferences]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.scriptonly=generate script only]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.appearance=appearance]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclealiasprefspanel.header=configure oracle schema loading properties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.errors=errors]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.addtablerefby=add table referenced by {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.error.dumpingstatus=error dumping application status bean]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.entersql=please enter a bookmark sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.factoryprovider=sessionfactoryimpl provider]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.hour=hour]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[droptabledialog.schemalabel=schema:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.minute=minute]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefsexplain=when completing functions squirrel doesn't know if a function is a stored procedure or a user defined function. to make code completion of these two kinds of functions convenient squirrel offers to configure which way completion should work.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolssheet.limitsizeofwhereclause=limit the size of the where clause used behind the scenes when editing cell contents.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.autoborderlabel=automatic updates]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarydialog.installedversionprefix=installed version:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.identifiers=identifiers]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlreformatter.yes=yes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[errorstream.expected=expected]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.cannotaccessfile=cannot access file name {0}\\naborting export.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some kind of problem - tell user i18n[datasetupdateabletablemodelimpl.error.deletefailed=one of the delete operations failed with exception:\\n{0}\\ndatabase is in an unknown state and may be corrupted.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tablepriviligestab.title=privileges]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.savecolsinfo=unable to write edit where cols options to persistant storage.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetviewertablepanel.makeeditable=make editable]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.fileexistsbutreadonly={0}\\nexists and you cannot write to it.\\nplease use a different name.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnstab.hint=show columns for the selected table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.transferoptionsborderlabel=transfer options]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypestab.hint=show all the data types available in dbms]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.renamegraph=rename graph]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[postgresplugin.showviewsource=show view source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetviewereditabletablepanel.error=error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.charset=charset:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlfiltersheet.contentsmsg=you must have the contents tab selected to activate the sql filter]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.loadpluginlicence=error generating licence entry for plugin {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.limitmessage=limited to <font color='red'> {0} <\/font> rows]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sybaseaseplugin.title=sybasease]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalpreferencespanel.paths=squirrel paths]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.details=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.broderlaf=look and feel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.monitorasof=monitor (as of {0,date,full})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.landscape=landscape]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.comments=comments]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.configautocorr=configure auto correct \/abreviation]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnpriviligestab.title=column privileges]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.prefsyntaxhint=syntax highlighting]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatesqlpanel.appendsql=append]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.switchingnotsupported=switching the editor of a runninig session is not supported.\\nyou may switch the entry area in the new session properties dialog]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.otmfiles=otm files]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.btncancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[prelaunchhelperimpl.backupfailedmessage=backup of existing files failed. installation cannot proceed]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.orderpksconstr=order pks\/constraints on top]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resultframe.stayontop=stay on top]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[databasemetadata.searchabletypesearchable=supports all where]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefs.table.udfwithparams=udf with params]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.anonymous2=anonymous]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.defaultvalue=default value]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[systemfunctionstab.title=system functions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scriptusers=script database users and database roles]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schematableupdatewhatitem.allobjects=all objects]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mappingroot.cfgname=configuration]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[deletetablescommand.progressdialogtitle=analyzing tables to delete]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.exportcompletetable=export complete table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[viewlogssheet.error.clearlogcontents=error clearing the log contents]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.notwriteable=file is not writeable.\\nchange file permissions or select a differnt file for export.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.cachedeletefailed=could not delete {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mocks"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.propsdlgok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.enterscriptclass=please enter a script class]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencespanel.prefstooltip=table names appear in scripts as schema.table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.lineseparatorlabel=line separator:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.newconfig=new]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.viewtableinobjecttree=view table in object tree]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.querystatistics=query {0} of {1} elapsed time (seconds) - total: {2}, sql query: {3}, building output: {4}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalpropertiespanel.top=top]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.export44=export]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.selgraph=select graph]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntaxplugin.uncomment=uncomment]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.licences=licences]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.includeheaders=include descriptive headers in the script files]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mappingroot.classpath=classpath]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbcopyglobalpreferencestab.hint=preferences for db copy]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.filestogenerate=files to generate]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[refactoringpreferencespanel.quotecheckboxlabel=quote identifiers in scripts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.dbmsname=dbms name:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.fileoverwrite=file {0} already exists.\\n\\ndo you wish to overwrite this file?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatetabcontroller.title=hibernate]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnstab.title=columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add stored proc parent node."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.menufonteanbled=enabled]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.dailylabel=daily]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.fileopenerror=there was an error opening file {0}.\\nthe error was:\\n{1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.propsdlgcheck=check]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[proceduresourcetab.clanguageprocmsg=this is a c-language routine. the source code is unavailable.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[errorstream.oneerror=1 error detected]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.cachedeleted=deleted {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.removefoldingpoint=remove folding point]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.dlgtabscriptsadd2=add...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolssheet.editwherecolumns=edit 'where' columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[connectionstatustab.hint=connection status]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypestring.limitreadonly=limit read only on columns with these names:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.replacefile=(in command, the string {0} is replaced by the file name when executed.)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypedate.usedefaultformat=use default format ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.selectsingletable=must select a single table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.qureyparams=query parameters]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.tablecolname=name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aliaseslistinternalframe.error.ctrlf4key=probably closed by the ctrl f4 key. see basicdesktoppaneui.closeaction]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.sortsperexec=sorts per row]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[firebird.domaindetails=display domain details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.exec=executing sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcontroller.invalidseparator=you must provide a single separator character or check \"use tab\" to use the tab character.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rownumbertablecolumn.rownumber=row number]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntaxplugin.find=find]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.sepeartortab=use tab character]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[defaultdatabaseexpander.error.retrieveschemaprivs=unable to retrieve schema privileges]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.showascii=show ascii as chars]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"label for the date format combo, used to enable\/disable text i18n[datatypetime.usedefaultformat2= or locale-dependent format:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatesqlpanel.sql=sql:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.rowcountlabel=row count:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[keywordstab.hint=show all the non-standard keywords available in dbms]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndiffdialog.missinglabel=missing]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypeother.readcontentswhenloaded=read contents when table is first loaded and display as string]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatesummarydialog.applylabel=apply changes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add button for applying file & cmd info without doing anything else i18n[popupeditableiopanel.applyfile=apply file & cmd]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.schematableupdatelable1=set]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[specialcolumnmapping.null=null]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntaxplugin.autocorr=autocorr]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hashtabledataset.unsupported=<unsupported>]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypetime.usedefaultformat=use default format ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatecontrollerimpl.changesrecordedtitle=changes recorded]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[progresscallbackdialog.defaultloadingprefix=loading:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.toobtainsessionfactfactoryprovider=invoke the user defined provider method below:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.triggercolumns=columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[excelsettingspanel.sheetname=sheet name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.extprops=include extended properties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[session.drivercompliance3.0=the driver being used for alias ''{0}'' is not jdbc 3.0 compliant.\\nyou should consider getting a more recent version of this driver]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.noexportfile=no file name given for export.\\nplease enter a file name or use browse before clicking export.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverslist.tooltiptext=list of database drivers that can be used to configure an alias]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.precisionlabel=precision: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schematablecboitem.schemaid.dontload=don't load]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[logpanel.viewlastlog=press to view last log entry]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatemanagerdialog.portlabel=port:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.classnotfound=class {0} not found]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.onefile=create one file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.operators=operators]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlpanel.copylastbutton.hint=copy current sql history to entry area]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.dlgtabscriptsadd=add...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.structure=structure]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionpropertiespanel.schemaprefix=limit schema objects using these comma-delimited prefixes:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcommand.failedtowritefile=failed to write file\\n{0}\\nerror message\\n{1}\\nsee last log entry for details.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[pluginsummarydialog.unload=unload]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.unit=unit]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolssheet.shouldincludepks=the 'use' window should include at least the primary keys for the table.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.connected=connected to the sql validation web service]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.cancelbuttonlabel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencespanel.bordertitle=sql script preferences]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.udfwithoutparams=user defined function without parameter info: myfunct()]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.escapedate=escape date]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[abstractrefactoringdialog.editbuttonlabel=edit sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.formatcsv=export csv file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up cancel button i18n[celldatapopup.cancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencespanel.updaterefactioncheckboxlabel=add update referential action to the fk definition]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalpropertiespanel.right=right]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlpanel.opensqlhistory.hint=open sql history]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.title=schemas]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.welcome=welcome]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.entername=please enter a bookmark name with no blanks]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatecontrollerimpl.updatecheckfailedtitle=update check failed]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.invalidnumberformat=invalid number format. can not calculate new unit.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.sessionstatistics=session statistics]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[systemfunctionstab.hint=show all the system functions available in dbms]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlrefomatter.noxml=the data does not contain any xml tags. no reformatting done.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.rowsselected={0} row(s) selected]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace \"-8\" with types.rowid when java6 is the minimum supported version"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.congen=error generating contents file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[prelaunchhelperimpl.installupdatesmessage=updates are ready to be installed. install them now?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.info.setjdbcdebuglogsuccess=jdbc debug log set to output stream successfully]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.nodeusermarks=user bookmarks]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorydlg.filtered=filtered]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.scripttable=script table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.formats=formats]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.firstloadtime=first load time]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.convertstringbuferr=error executing convert to stringbuffer command: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[showdriverwebsitecommand.comfirm=no website url for the specified driver. would you like to add one?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.graphremoved=removed graph file \"{0}\"]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.cancelbuttonlabel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.showhelpwindow=error showing help window]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.scriptcompleted=script completed]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.grants=mysql grants]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.activity=displays the current activity on the sql server.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.hidescrollbars=hide scrollbars]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[connectionstatustab.title=status]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.rightclicktable=right click table in object tree to add to graph]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string null = \"<null>\"; i18n[resultsetmentadataset.val=value]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"defaultvalue octetlength ordinalposition isnullable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[logpanel.openlogs=press to open logs]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.rowsperexec=rows per exec]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.nodesquirrelmarks=squirrel bookmarks]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scriptpermission=script object-level permissions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.lengthlabel=length: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.dialectlabel=dialect: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[timedatefunctionstab.hint=show all the time\/date functions available in dbms]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverslistinternalframe.error.ctrlf4key=probably closed by the ctrl f4 key. see basicdesktoppaneui.closeaction]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.btntextview=view]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.msdos=ms-dos text (oem)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[derbyplugin.prefshint=set preferences for derby plugin]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graphtofile.filechoosertitle=save image file(s)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[logpanel.titleerror=last log entry (entry type: error)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.ioerrorwritingto=io error writing to\\n{0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencespanel.deleteactionlabel=action to take on delete:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.config=configuration]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.error.dumpingsystemprops=error dumping metadata]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.info.bindclobmem=bindclobvarinmemory: binding '{0}' bytes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypedate.full=full ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclepluginpreferencespanel.hiderecyclebincheckboxtooltip=recycle bin tables are a flashback database option in oracle 10g]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.primarykeytitle=choose column(s) for primary key]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importtabledatacommand.cancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[databasemetadata.nullabletypenonulls=false]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclepluginpreferencespanel.hiderecyclebincheckboxlabel=remove recycle bin tables from the object tree]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[factoryproviderdialog.ok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.addtablerefbynohit=add table referenced by (no hit on fk)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.parseschema=parse schema]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.setlaf=error setting laf]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlparam.quotevalues=quote values]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.statuslablesuccessmsg=connected successfully]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.enterdescription=please enter a bookmark description]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.useglobalprefsformatingexcel=use formating as configured in global prefs (recommended for ms excel)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.enableautoupdate=enable automatic updates]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.scriptpropsname=name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[derbypluginpreferencespanel.readclobsfullycheckboxlabel=enable extended derby clob support]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.tablenamelbl=table name:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove table with name table10"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowdatainputframe.insert=insert]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.loadallandcachenone=load all schemas, cache none]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[favs.savedqueries=saved queries]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.pwdpref=password:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.remove=<< remove]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[firebird.showview=show view source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.text=text]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclexmltypedatatypecomponent.cellerrormsg=<error: see log file>]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.selcolor2=select color]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletionpreferencespanel.numberoftables=number of tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.settingsanon=anonymous]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.nofile=no file selected]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"a.put(\"built-by\", \"manningr\"); argmap.get(built_by_key)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.udfwithparams=user defined function with parameter info: myfunct(<in integer tid>)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.primarykeynamelabel=primary key name: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[factoryprovidercontroller.filecreated=file {0} has been successfully created.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.dina3=din a 3]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tabletypestab.title=table types]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[specialcolumnmapping.skip=skip]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create a classloader for all the laf jars. install all look and feels into the uimanager."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlrefomatter.unexpectedproblem=unexpected problem during formatting.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get look and feel class object."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.error.tablenotfound=couldn't locate table '{0}' in schema '(1)']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[downloadstatuseventhandler.changesrecordedmsg=requested changes will be made when squirrel is restarted]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.sitetypelabel=site type:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.menus=menus]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.unicode=international text (unicode)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.invalidname=invalid name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[whereclausepanel.operatorslabel=operators]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.addrow=add row]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"from mysql 5.0 manual:"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.hinttabstatus=(mysql) table status]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[informixexceptionformatter.notavailablemsg=not available]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.height=height]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.createplantabletitle=create plan table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.plantableunavailable=explain plans will be unavailable for this session]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.dlgtabecp=extra class path]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolspanel.nopk=the table ''{0}'' doesn't have a primary key.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.processes=mysql processes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get where clause for the selected row the -1 says to just use the contents of the values without any substitutions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlrefomatter.malformedxml=possible mal-formed xml:\\n starting tag was: {0}\\nending tag was: {1}\\ncontinuing with reformatting xml.\"]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displayssequencedetails=display sequence details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.corext=correction \/ extension]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.refreshnow=refresh now]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[memorypanel.statusdialogtitle=session garbage collection status]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"read the db metadata info and fill in the value, if any note that the resultset info and the coldefs should be in the same order, but we cannot guarantee that."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.allsps=all stored procedures]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorydlg.title=sql history for {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemastab.title=schemas]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now that we have the file, do the import. note: the sequence of operations is divided into two sections at this point. the preceeding code ensures that we have a readable file, and the code in the following method call does the import. the reason for splitting at this point is that the execute operation needs to do an import, and it will already have the file to do the import from (which is the same as the file it exported into)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"command to use when processing data with an external program"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graphtoclipboard.closebutton=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set on update action to no action as oracle doesn't currently support this. no action causes the update clause to be omitted."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"final jscrollpane sp = new jscrollpane(); sp.setborder(borderfactory.createemptyborder()); sp.setviewportview(_tree); sp.setpreferredsize(new dimension(200, 200));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"option to select default catalog only applies to sessions that support catalogs."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.deleteconfirm=do you really wish to delete the selected bookmark?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if this session doesn't share sql history with other sessions then disable the controls that relate to sql history."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[contentstab.hint=view the contents of the selected table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some dbms's (eg think sql) throw an exception on a call to getbestrowidentifier."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add together the standard expanders for this node type and any individual expanders that there are for the node and process them."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user cannot be allowed to drop all columns from a table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"any errors here result in an un-editable table, which should be no problem"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if a driver says it supports schemas but doesn't provide schema nodes, try to get other nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.opentables=mysql open tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no need to be focusable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"hadb reports \"10\" for column size of blob\/clob 2gb (2^32)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for example: case 0: s = \"invalid character\"; break; perhaps insert application specific error messages here"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pseudocolumn query failed, so reset it. otherwise, we'll mistake the last column for a pseudocolumn and make it uneditable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dont need to close the resultset as databasetypesdataset will do so when its finished with it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data, random accessible current token current input character (original) current input character (for token) last input character position of current character line number of current character start position of current line"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we are through with parsing. now we store the outcome in _lastrun... and tell the listeners."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"special case: the input is exactly the output"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.title=squirrel sql client help]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"it causes a lot of pain in serveral places to cope with nulls or emptys here."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use just the columns listed in the table, and set the not-used cols to the ones that are not mentioned in the table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for each element in the \"use\" set, if selected then add to \"not use\", otherwise add to new \"use\" set"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"call the function in the app code that checks for unexpected conditions in the db as it will be after doing the update"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"int progress = loadcatalogs(1); load tables with schema = null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create a hashmap containing the column names. by convention, the value and key is the same for each column name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"reload all matching table types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if called here it is called far to often and restoring selection in the object tree doesn't work. fireschemainfoupdate();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"belong together"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if characters don't match but case may be ignored, try converting both characters to uppercase. if the results match, then the comparison scan should continue."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sybaseaseplugin.hint=preferences for sybasease]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create view name [(view_col [, view_col \u2026])] as <select> [with check option];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the following strings are sql tokens and should therefore *not* be internationalized no i18n no i18n no i18n no i18n no i18n no i18n"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.schematabletitle=schema table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolspanel.notusecolumns=not use columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.typelabel=type: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatesqlpanel.result=sql result]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.info.jdbcwritersuccess=jdbc debug log set to writer successfully]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.loonas=log on as]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use lenient input or force user to enter exact format set to allow less stringent input"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get which locale-dependent format to use set to use the java default"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatecontrollerimpl.prompttodownloadavailableupdatesmsg=there are updates available. do you want to download them now?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.enumeration=#]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"an error here may mean that the file cannot be reached or has moved or some such. in any case, the file cannot be used for export."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[errorstream.noerrors=no errors detected]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this method is called from the super class's constructor therfore _titlelbl is null for that call."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needs to be done later because when reinitlist is called, the text componetes model is not yet up to date. e.g. the last character is missing."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select 'create view fooview as ' || viewtext from sysprogress.sysviews where viewname = 'fooview' and owner = 'manningr'"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"builder.addgridded(new jbutton(\"alter\")); builder.addrelatedgap();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since the base name file exists, we need to skip it and bump up the endindex"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysqltriggerdetailstab.title=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.themepacloc=theme pack directory:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the operator is 'in' and there are no parenthesis around the value, put them there."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell scrollpane to use table size with the height adjusted to leave room for the scrollbar at the bottom if needed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"text put in file name field to indicate that we should create a temp file for export"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[errorstream.error.semantic=semantic error {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"should not happen since the file that was selected was just being shown in the chooser dialog, but just to be safe..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.operation=operation]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"at this point we have an actual file that we can output to, so create the output stream (so that data type objects do not have to)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create [unique] index <index> on <table> (<column> [desc] [, ...]) [desc];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.tabtitle=fonts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the table+column already has a data object in the map, then remove it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.executecommand=execute command (%file will be replaced by export file name)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntaxplugin.touppercase=touppercase]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatesqlpanel.format=format]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.sqllabel=sql:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.clientborder=client]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the names of all laf objects to control. by doing thru the map these will be sorted."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[validatorglobalpreferencestab.title=sql validator]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"[i18n[orderbyclausepanel.orderbyclauselabel=order by clause]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"retrieve urls of all the look and feel jars and store in lafurls."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if this was done when the header was clicked it prevents ms excel like adopition of column sizes by double click. see class buttontableheader."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.tabfonts=fonts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"[i18n[orderbyclausepanel.addlabel=add]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this method is called from a thread. in case listeners update swing controls we invoke later here."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create view <viewname>[(<viewcolumn>,..) as select ... from ... [where expression] [order by orderexpression [, ...]] [limit <limit> [offset <offset>]];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.cost=cost]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.execon=execute script on {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.overwritewarning=file overwrite warning]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[xmlreformatter.malformedxmlat=malformed xml. no ending tag seen for text starting at:\\n{0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save the user options - we know that it is not the default because we do not allow importing from \"temp file\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"split the first two matching toplevel brakets here"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check box for whether to use java default or a locale-dependent format"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.fileopenerrorheader=file open error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if all of the data has been read, then the blob can be edited in the popup, otherwise it cannot"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create table tablename ( column1 int, column2 varchar(20) not null default 'hello world' constraint tablename_pkey primary key(column1,column2) );"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"place to save reference to datatype object needed for calling the appropriate renderer on the object value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"where clause usage group"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datetypetimestamp.generatewhereclause=for internally generated where clauses:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if all of the data has been read, then the clob can be edited in the popup, otherwise it cannot"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up the controls"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.other=other]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"important: put the buttons into the array in same order as their associated values defined for whereclauseusage."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"[i18n[orderbyclausepanel.orderdirectionlabel=order direction]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.title.systemprops=system properties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"lenient checkbox"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[errorstream.notexpected=not expected]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.statusfonteanbled=enabled]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"objects needed to handle radio buttons"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.testlabel=test connection]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.statusbars=status bars]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add label for the radio button group"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[errorstream.invalid=invalid]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[errorstream.error.syntax=syntax error {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have read data, so that is not the same state odd-ball case: assume if neither has read data that they are equal"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aboutboxdialog.info.startmemtime=starting memory timer (aboutbox)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnpriviligestab.hint=show access rights for columns in the selected table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have not already created a datatype object for this column so do that now and save it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.onefileperobject=create one file per object]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jason: sqlfilterclauses getsqlfilterclauses();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if this column is being limited, then truncate the data if needed (start with a quick check for the data being shorter than the limit, in which case we don't need to worry about it)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"loop while we either have a resultset to process or rows have been updated\/inserted\/deleted."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graphtoclipboard.title=copy graph image pages to clipboard]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"menus"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create sequence <sequencename> [as {integer | bigint}] [start with <startvalue>] [increment by <incrementvalue>];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[metadatatab.title=metadata]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exporterror100=export error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n [memorypanel.gcstatustooltip={0} sessions waiting for garbage collection]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatetabpanel.mappedobjects=mapped objects]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.configyourmultitablescriptixatend=constraints and indexes at end of script]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"deletes the last \", \" deletes the last \", \""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.numberbase=number base:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.structureanddata=structure and data]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.loadchangelog=error generating change log entry for plugin {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.maintabs=main tabs:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"foreign key (columnname [,...]) references [reftablename] [(refcolumnname[,...])] [on delete {cascade | restrict | no action | set default | set null}] [on update {cascade | set default | set null}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create view viewname as definition;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"create sequence $sequencename$ start with $startvalue$ \" + \"increment by $incrementvalue$ $cache$ $cachevalue$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see if its a one-table statement"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create {[unique [hash]] index [[if not exists] newindexname] | primary key [hash]} on (columnname [,...])"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ingres requires that columns that are to become not null must have a default value."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"select current_value, 'none', 'none', cache, increment, 0 \" + \"from information_schema.sequences \" + \"where sequence_schema = ? \" + \"and sequence_name = ? \";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table ti.getsimplename() add foreign key (fktablecol) references pktablename(pktablecol);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get parameters previously set by user, or set default values set to the default"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatetabcontroller.hint=support for hibernate]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <table> add constraint <constraint> foreign key(<column>) references <table>(<column>) on delete set null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.technologyversion=technology version:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.add_menmonic=\"]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"create sequence $sequencename$ $startwith$ \" + \"$increment$ $minimum$ $maximum$ $cache$ $cycle$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.scriptalltables=script all tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.configyourmultitablescript=configure your multi table script:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"float(54) produces an exception: invalid column format 'float' on column 'float_column'., sql state: 42000, error code: 2014"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencestab.title=update]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.settings=look and feel settings]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypetimestamp.full=full ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.styles=syntax styles]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check if this completion request is outside the original definition point"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernate.hqltosqlshort=convert hql to sql (ctrl + enter)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"alter table $tablename$ \" + \"alter $columnname$ set data type $datatype$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.wraplines=wrap lines on\/off]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowidtab.hint=show columns that uniquely identify a row]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracleprefspanelcontroller.title=oracle]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump alias information."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aliaspropertiesinternalframe.title=properties for alias: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.enterscriptname=please enter a script name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make sure that the session menu is enabled."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"postgresql follows the standard for sql bit. it's a string of bits. so bit(10) is a string of 10 bits. jdbc treats sql bit as if it were only a single bit. it specifies that bit is equivalent to boolean. it claims that the preparedstatement set method that should be used with bit is setboolean and getboolean. this is not compliant with the standard. so sql bit type support is broken in java, there is nothing we can do about that. best thing to do for now, is try to convert the bit type to a boolean like the jdbc spec says and hope for the best. hope that the source database isn't using the bit column as a sequence of multiple bits."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateattribuitedataset.attrclassname=attribute class name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.exportcsvfile=export to file:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"all the data from the clob has been read. make sure there are no newlines in it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.configyourmultitablescriptok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.cancelmsg=press cancel to stop]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"popup does not fit with the orig placement"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.errorsavingaliases=error saving aliases]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.resultstabtitle=results]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysqlplugin.showtriggersource=show trigger source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.withallfields=with all fields]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importfiledialog.suggestcolumnsignorecase=ignore case]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.loadwelcomefile=error retrieving welcome file url for {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.separators=separators]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"double and float have no scale - that is decimal_digits is null. assume that is because it's variable - \"floating\" point."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table test alter mychar set default 'foo' alter table test alter mychar drop default"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefixconfig=configure function completion for function name prefixes:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"create sequence $sequencename$ \" + \"$increment$ $startwith$ $minimum$ $maximum$ $cache$ $cycle$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"create sequence $sequencename$ \" + \"$increment$ $minimum$ $maximum$ $startwith$ $cache$ $cycle$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"genericdialect must be last, since it will claim that it supports any product\/version. that is also why there is no isgenericdialect - it would always return true if there was one, making it useless."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.addfoldingpoint=add folding point]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.unknowntable=unknown table {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schematableupdatewhatitem.tables=tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fine, don't add any data files. throw new wrappedsqlexception(ex);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sort the rows by the property name. collections.sort(_data, new datasorter());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"firebird doesn't natively support altering a columns nullable property. will have to simulate in a future release."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create generator empno_gen; commit; set term !! ; create trigger create_empno for employees before insert position 0 as begin new.empno = gen_id(empno_gen, 1); end"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatetabpanel.hql=hql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dimension dim = getpreferredsize(); dim.width = preferred_width; setpreferredsize(dim); setrows(3);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't bother the user with details about where the result fetch failed if they cancelled the query."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fapplication.addapplicationlistener(applicationadapter); fapplication.addpreferencesmenuitem(); fapplication.setenabledpreferencesmenu(true);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fine, don't show any indexes. throw new wrappedsqlexception(ex);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetviewereditabletablepanel.norowsdeleted={0}\\nno rows deleted from database.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there's a dbname specified, so make sure it matches the current catalog."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the \"none\" place-holder is in the list in the first position, remove it. it is not possible to select the \"none\" place-holder upon startup, because it is already selected in the list if it is present."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select text_segment from iiviews where table_name = <viewname> and table_owner = <schemaname>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"drop view $viewname$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[databasemetadata.searchabletypepredchar=only supports 'where...like']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the mode_decode routine may or may not be there. we don't care if it is not there, but log an info if we failed to drop it for some other reason."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.showtriggersource=show trigger source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some drivers for both ms sql and sybase don't return guest as a schema name."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"select 'create view ' || viewname || ' as ' || viewdefinition \" + \"from pointbase.sysviews v, pointbase.sysschemata s \" + \"where v.schemaid = s.schemaid \" + \"and v.viewname = 'testview' \" + \"and s.schemaname = 'dbcopy' \";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.addreltables=add all related tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is a udf, not a stored procedure."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemainfocacheserializer.endstore=finished writing schema cache for alias{0}. file: {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we use vectors because a messagehandler might be called from different threads."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datetypetimestamp.typetimestamp=timestamp (sql type 93)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"number of errors detected"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[prelaunchhelperimpl.restorefrombackuptitle=confirm restore from backup"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.filesavedto={0} saved to {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up update button i18n[celldatapopup.updatedata=update data]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table name column name column size column size"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since .execute() returned true, the first result is a resultset."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.executebuttonlabel=execute]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[refactoringpreferencespanel.qualifycheckboxlabel=qualify table names in scripts with schema]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"clear session info from all actions."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the other obj is null, so see if this non-null obj contains a null value, which is equivilent. assume that if we have read some of the data and we still have _data == null, then the value in the db is actually null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if a different laf to the current one has been requested then change to the requested laf."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the colums of the last completed table\/view that match the tablenamepat will be returned on top of the collection"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"uh-oh! we shouldn't have more than one plugin registering a custom exception handler for a given session. the first one wins and all others get an error message."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.modifycolumntitle=modify column]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't log an error message here. it is possible that the user interrupted the query because it was taking too long. just throw the exception, and let the caller decide whether or not the exception should be logged."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.instancedetails=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if value was null, we do not need to do anything else with this column. also assume that a value of \"\" is equivilent to null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if source column is type 1111 (other), try to use the column type name to find a type that isn't 1111."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only close the statement if sqlexception - otherwise it has to remain open until the resultset is read through by the caller."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[lockdetailstab.title=locks]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[refactoringpreferencestab.hint=settings for the refactoring plugin]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new line to the begining so that sb.append( will be removed new line to the end so that a semi colon at the end will be removed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for char or date types this is the maximum number of characters, for numeric or decimal types this is precision."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.sortsperexec=sorts per exec]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't bother changing the delay, but stop it if it's running."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"view name schema name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"span across two columns c.ipadx = 40;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this doesn't appear to work for progress rdbms result[i] = dbutil.gettablecount(con, ti.getsimplename());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.toscript=objects to script:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the names of all the selected tables in a comma separated list,"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"note: a procedure may also be a udf!"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"todo: tell the user that the selected destination schema is the same as the source schema. monitor.showmessagedialog(...)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column is in table 2, but not table 1 - how else would we get here??"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add help, licence and change log nodes to the tree. i18n[helpviewerwindow.help=help]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exporterror8=export error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.alluserdef=all user-defined data types]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since we do not have all of the data from the clob, we cannot allow editing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.statementlabel=sql:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.norunselection=please select the bookmark to run]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"server\" \"port\" \"database file\" \"backup file\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if there are parameters in the sql string, then we need to prompt for some answers."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for reasons that i cannot exmplain, this is out by two, probably due to the border or insets around a cell??"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"change the delay, and start it if it was stopped."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the timer, but do not start it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.foematting=formatting]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.remove_mnemonic=r]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.scriptstmtcounts=row update counts: {0} inserts, {1} selects, {2} updates, {3} deletes"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.scalelabel=scale: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string used as error indicator and description of problems seen when checking for 0 or mulitple matches in db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.objectstobescripted=objects to be scripted]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"double space since this is a new version of the stored procedure (overloading name with different parameters)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"... while attributes used in qualified expressions will not be completed qualified. that means for pack.foo. the completion popup will be placed behind the last dot."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.title.aliases=aliases]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.graphrenamed=renamed \"{0}\" to \"{1}\"]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.close=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exporterror7=export error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"force the laf to be set even if skin is the current one. this allows a change in theme to take affect."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_lafregister.updateallframes();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"empty block"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_treeapi.addtopopup(databaseobjecttype.session, coll.get(createtableaction.class)); _treeapi.addtopopup(databaseobjecttype.catalog, coll.get(createtableaction.class));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"in an effort to avoid non jdbc standard out parameter types ie oracle specific ones, the dbms_output.get_line is used rather than the dbms_output.getlines. the disadvantage is there are more trips to the server to return multiple lines."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.selscripttoedit=please select the script to edit]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"allocate the current session to the actions."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.port=port:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump system properties."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.info.executequery=executequery: running sql:\\n '{0}']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pane.addtab(mergecolumndialog.i18n.tabbedpane_columns_label, _columntab);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there used to be a frame.pack() here but it resized the frame to be very wide if text output was used."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"action performed for the update button private void buttonupdateactionperformed(java.awt.event.actionevent evt) { string query = getquery(); dbutils.execute(query); _dlog.setvisible(false); _dlog.dispose(); joptionpane.showmessagedialog(null, \"field updated\"); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private iapplication _app;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.prefuseoster=use ostermiller editor]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private static final ilogger s_log = loggercontroller.createlogger(userparentexpander.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for the column that is being changed, use the value passed in by the caller (which may be either the current value or the new replacement value)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the treemodel interface"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sets constraints like not null for the new column, depending on the constraints for the old column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't increment i if you're removing something; otherwise, you'd skip the next item."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jdk1.5 \"@ident\" annotation \"@keyword\" gets returned as two tokens \"@\" and \"keyword\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[parserthread.undefinedtable=undefined table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"when we get to the last statement, if the script is large, show the user the total execution time."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the tables."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no tags, so cannot be xml"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the procedures."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.generatedrop=generate the drop <object> command for each object]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the views."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"firebird gives weird exception: unsuccessful metadata update object fktestparenttable is in use; squelch it and continue."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"autoinc_gen_<column>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we don't add a listener to a button twice because the finddialogsupport class will call this method with the same button instances whenever the replace dialog is opened. if we add the listener again and again replace will be done as often as the dialog is opened. this is especially nasty if the text to replace is part of the replacement text."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql requires myisam storage engine for spatial and fulltext indexes. don't test them for now. see the todo in the mysqldialect for getcreateindexsql."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these should be different since we are providing two different statement separators in sessionproperties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create [unique] [asc[ending] | desc[ending]] index index on table (col [, col \u2026]);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set generator name to int;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"iprocedureinfo[] procs = metadata.getprocedures(catalog,null,null);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.updatesiteborderlabel=update site]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[db2plugin.showproceduresource=show procedure source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this test disabled for now until we figure out a better way to do concurrent modifications to the schemainfocache. @test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the udts."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scripttemplate=script template]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these tell the dialect test runner where tables that is creates can be found."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private resultset mockresultset = null; private static int[] columnindices = new int[] { 4, 6, 18, 9, 7, 13, 12, 5, 8, 10, 11, 14, 15, 16, 17 };"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"catalog schema tablename columnname datatype; 1 == char typename columnsize decimaldigits radix isnullallowed defaultvalue isnullable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the user has restricted the set of columns to use. if this name is not in the list, then skip it; otherwise we fall through and use the column in the where clause"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"has to be done directly on the main frame because of racing condition at start up."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"find the internal frame in the list of internal frames and remove it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"have the datatype object fill in the appropriate kind of value into the first (and only) variable position in the prepared stmt"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"span across two columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test connection button panel (both the button and the status label"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"site type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update server name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"separator"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update server port"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"path to release.xml"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"local update directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"channnel combo-box"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"url text field"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.couldnotcreateworkdir=could not create working directory {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"instance creation"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.executenativetoascii=execute nativetoascii]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"viewer.removeinternalframelistener(_lis);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"all rules passed, so enable the buttons."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"primary key name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"empty block."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.includetimestamp=include timestamp in modified properties file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see also loadschemanames()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"it would be nice to tell the user what happened, but if we try to put up a dialog box at this point, we run into trouble in some cases where the field continually tries to re-read after the dialog closes (because it is being re-painted)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do not let user remove everything from the list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.failedtoopenzip=failed to open zip\/jar {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.tranlationsgenerationmessage=\\n#\\n#missing translation generated by i18n plugin on {0}\\n#]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.workdirdoesnotexistquestioncreate=working directory {0} does not exist.\\ndo you want to create it?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the cell is editable, we really must have a valid datatype object, so the 'else' clause should never be used. it is just there as defensive programming."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.workingdir=working directory]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.propscopymsg=copied existing translations from {0} to {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"whether to force user to enter dates in exact format or use heuristics to guess it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"which locale-dependent format to use; short, medium, long, or full"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"startparts[1] contains our i18n string key followed by <\/span>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.bundles=bundles]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell the ui that this _workingbuffer is through"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select last_number, max_value, min_value, cache_size, increment_by, cycle_flag from user_sequences where sequence_name = ?;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we don't care if these throw an sqlexception. just squelch them and report to the user what the outcome of the previous statements were."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.nativetoasciioutdir=native2ascii output dir]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.noworkdir=working directory doesn't exist.\\ndo you want to create it?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.loadbundles=load bundles]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.workdirisnodir=the working directory is not a directory.\\nno bundles will be loaded from {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.changeapplicationdefaultlocalenote=example vm parameters to change locale used by squirrel: -duser.language=en -duser.country=us]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.locales=locales]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.noworkdir=please choose a work dir to store your translations.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-1 because column starts with 1 put pos with 0"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump table types."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"basemdiparentframe"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no problems found, so do not return a warning message. nothing for user to worry about"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ignored"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use the java default date-to-string"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use a date formatter"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverpropertiescontroller.nodriverselected=no driver available in this alias.\\ncan not load driver properties tab.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"on errors we restart the parser behind the error"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user just entered the hour, so append min & sec"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"either are at teh beginning ..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use the dateformat to parse"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_tree.addtreeselectionlistener(new objecttreeselectionlistener()); _objtreesellis = new objecttreeselectionlistener(); _tree.addtreeselectionlistener(_objtreesellis);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"error attention: do not use background colors here. color blind people cannot read black writing on red background."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user entered hour an min. see if they also entered secs"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user did not enter seconds"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if this happens then this is a programming error as we said in the above call to ingore these errors."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needed to guarantee other components a focus lost and to allow to enter the tabs components via tab key in a well defined way (the user can see where the focus is)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"void sessioninternalframeopened(sessioninternalframe sessioninternalframe, isession sess);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"metrics of the component used in the constructor"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"break when first braket found"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since 1.4 implements interfaces that became available in jdbc 3.0, let's warn the user if the driver doesn't support databasemetadata methods that were added in jdbc 2.1 and jdbc 3.0 specifications."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string edit = \"edit\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"activate another session since the current active session has closed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public sqlexecutioninfo() { this(1, \"\"); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we only want the index sql which is the second statement in the array. informix requires the constraint stuck onto the end of the statement."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there should not be more than one row in the db that matches the table, and if there is we cannot determine which one to read, so check that there are no more"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we need to keep track of the bind var index separately, since the number of column defs may not be the number of bind vars (for example: auto-increment columns are excluded)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"means load all schemas from database."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"thread safe support for every call to this method:"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private simpleattributeset _saseterrorhistory;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get an array since we dont want trouble with the sessionslist when we remove the sessions from it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we could not identify which table to edit, tell user"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sort the rows by the property name."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for each row in table, do delete and add to number of rows deleted from db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mouse listener used to display popup menu."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"give the resultsetreader some time to realize that the user requested cancel and stop fetching results. this allows us to stop the query processing gracefully."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the file using the base name with no extention exists, it is first. the other files are in order from oldest to newest. the set of files to delete is slightly different depending on whether the base name file exists or not."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there should be one row in the data, so try to move to it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverinternalframe.error.illegalvalue=illegal value of {0} passed for maintenance type]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return the whole contents of this column in the db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_app = app;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have at least one row, so try to retrieve the object do not limit the read of this data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"go on to the next item"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create sequence testautoincrementtable_myid_seq increment by 1 minvalue 1 nomaxvalue start with 1 nocycle; create function nextautoval () returning integer; return testautoincrementtable_myid_seq.nextval; end function; i finally did get a trigger to work, but i had to use a function: create trigger myid_trigger insert on testautoincrementtable for each row (execute function nextautoval() into myid);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"title label at top."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aliasinternalframe.illegalvalue=illegal value of {0} passed for maintenance type]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no support for undo"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the old preference file exists and is newer than the newuserpreference file, then use it for reading preferences"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select 'create view <newviewname> as ' || substr(text , locate('as', text)+2, length(text)) from syscat.views where viewschema = '<schema>' and viewname = '<oldviewname>';"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the largest width and height"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if blocked that means that it doesn't help anymore or an error dialog is shown or the connection is made and the sessionframe is being constructed\/shown."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"look for places to break the string"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the user checked auto logon but gave wrong username\/password in the alias definition. he will be asked to enter username\/password again in an extra dialog. here for convenience we transfer these data back into the alias. note: don't do this when auto logon is false."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"touppercase replaces the german \u00df by ss. this will kill reformating later. since upperin is just for building pieces it is ok to place \u00df here."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"message"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nextch already done"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"each call to _stmt.getmoreresults() places the to the next output. as long as it is a resultset, we process it ..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"object obj = action.getvalue(baseaction.ibaseactionpropertynames.rollover_icon);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private jlabel _executionlogfilenamelbl = new outputlabel(\" \"); must have at least 1 blank otherwise width gets set to zero. private jlabel _logconfigfilenamelbl = new outputlabel(\" \"); must have at least 1 blank otherwise width gets set to zero."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private aliaseslistinternalframe _aliaseslistwindow; private driverslistinternalframe _driverslistwindow;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockpreferences"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"done this late so that plugins have time to register expanders with the object tree prior to it being built."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"separated by a line."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"reset the background to the colour that the current look and feel uses for internal frames."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mocksqlmetadata"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needes to be done via event queque because adding the session to the drop down happens via the event queue too."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_javaclasspathlist.addlistselectionlistener(new javaclasspathlistboxlistener());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.statictext=static text]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cut and paste need to be worked on, so for now do not include them also, the copy operations do not seem to work right - we may need special versions for the celleditor menu. add(_cut); add(_copy); add(_copyhtml); add(_paste); addseparator();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the menu items to the menu"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no more automatic restarts because key events will restart the parser from now on."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_listeners.add(isqlexecutionlistener.class, lis);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private integeridentifierfactory _idfactory = new integeridentifierfactory();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypetime.typetime=time (sql type 92)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"assume dbms doesn't support catalogs."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the node to be expanded."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sql contains columns from multiple tables, so we cannot use all of the columns in a where clause and it becomes difficult to know which table (or tables!) an edited column belongs to. therefore limit the output to be read-only"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register tabs to display in the details panel for procedure nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"back-off a bit after a hundred updates to allow the ui to update"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sticky tab was closed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register tabs to display in the details panel for catalog nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"must *not* be done in the gui thread"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell the datasetviewer to delete the rows note: rows are indexes in the sortable model, not the actual model"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since we are reading meta-data about the db, we should never see a clob. however, if we do we assume that it is printable text and that the user wants to see it, so read in the entire thing."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"--- security panel ----------------------------------------------"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"gettable().dolayout();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"parentrect = new rectangle(toolkit.getdefaulttoolkit().getscreensize());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n.lbl_title_used_tables);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.only70compatible=only script 7.0 compatible features]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private string _sqloutputmetadataclassname = idatasetdestinations.read_only_table;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scriptlogins=script sql server logins (windows and sql server logins)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"note: a caseinsensitivestring can be a mutable string. in fact it is a mutable string here because this is usually called from within syntax coloring which uses a mutable string."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we are starting clean"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load all table types with catalog = doi.getcatalog() and schema = doi.getschema()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private transient string[] availabletypesindatabase;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save the current ui defaults."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"invokelater to make the call synchronto the event queue"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do not do new hashmap() here."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"columns have not yet been loaded"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[filemanager.error.cannotwritefile=file {0} \\ncannot be written to.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"scrollbars are \"shown always\" to stop sheet resizing when they are shown\/hidden."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table test drop constraint u_test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this can take a long time for big jars - so it is not done on the edt."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"editable text"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removed for uncomment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the following is used by both in-cell and popup operations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scriptindexses=script indexes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"static text"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the number of decimal digits allowed to the right of the decimal point in the number"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return a jtextarea usable in the cellpopupdialog."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[filemanager.savedfile=saved to {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now define the popup-related operations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first we have the cell-related and text-table operations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"int modelcol = gettable().convertcolumnindextomodel(col);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return ((string)obj1).equals(obj2);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select 'unknown' as last_value, t1.max_val as max_value, t1.min_val as min_value, t1.cache as cache_size, t1.inc_val as increment_by, case t1.cycle as is_cycled from informix.syssequences as t1, informix.systables as t2 where t2.tabid = t1.tabid and t2.owner = '<schema>' and t2.tabname = '<sequencename>'"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverwindowfactory.error.copyingdriver=error occured copying the driver]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"special handling of operations while editing strings"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[windowmanager.registersessionsheet=registering {0} in windowmanager]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checkbox for read\/not-read on table load"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ss: update dynamic column widths"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"next the buttons."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.fileformat=file format]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is not the column that the mouse has been pressed in."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"store ptr to newly open window in list of windows per session."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"added by patch 2856103 for apple\/mac"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if this is the column that the table is currently is currently sorted by then display the sort icon."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"rendering the column that the mouse has been pressed in."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that this is a plastic theme."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set of characters to be ignored by the scanner"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"error messages"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default is to do nothing. derived classes must override this to accomplish anything."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save for possible future use"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importfiledialog.fileimport=import file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register tabs to display in the details panel for schema nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some drivers (e.g. oracle) give precision as 0 in some cases. when precision is 0, we cannot check the length, so do not try."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now remove the non-digit chars, if any"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return method.getparametertypes().length == 1 && method.getparametertypes()[0] == int.class && method.getreturntype() != void.type;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user entered '+' or '-' at a bad place"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update font used for status bars."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"double tablewidth =_table.getcolumnmodel().gettotalcolumnwidth() * scale;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"listen for gui components being created."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dimension dim = sp.getpreferredsize(); dim.width = preferred_width; sp.setpreferredsize(new dimension(sp.getpreferredsize().width, 200));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sql float requires support for 15 digits of mantissa."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get binary stream from rs"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"any other components are on the right."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the message area is on the right of the statusbar and takes up all available space."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ss: display complete column header as tooltip if the column isn't wide enough to display it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[messagepanel.clearlabel=clear]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return the text from the file since it does represent a valid value of this data type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return boolean.class; don't show checkbox for output only field."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use valueof when min supported jdk is 1.4 return boolean.valueof(_props[row].required);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_inwidgetsetvisible was introduced to allow movetofront to be called from within setvisible. see editwherecolssheet or sqlfiltersheet"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"a light yellow"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mocksessionmanager"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the new look and feel object."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockschemainfo"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"keep scanning until we're either eol or find a different filegroup."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the columns in the referenced table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"j is the index of the first file in the next filegroup."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we're still in this function, just add it at the end."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not so simple -- we want to keep the filegroups together."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"simulate the user changing the session properties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowidtab.title=row ids]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alias.setusedriverproperties(_usedriverpropschk.isselected()); alias.setdriverproperties(_sqldriverprops);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if no columns are selected, and we're not dropping the pk, then there is nothing to do."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"property file not found for user - first time user ran pgm."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"chop off \"default on column \";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only concerned about order when more than one table."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"parent.addinternalframe(viewer, true, null); guiutils.centerwithindesktop(viewer);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if auto logon is true in connecttoaliascommand user name\/password of the alias definiton may have changed. here we transfere this information back into the controls."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add the message handler to the session"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.dlgtabscriptsremove2=remove]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[splashscreen.error.updatingprogressbar=error occured updating progress bar]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1 < buf.size()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"done after the set of the selected item above so that we control when the initial build is done. we want to make sure that under all versions of the jdk that the window is shown before the (possibly lengthy) refresh starts."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copys the gathered values into the lookup table."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverpropertiescontroller.invalidurl=according to the driver \"{0}\", the url \"{1}\" is invalid.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"void reload();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the cell width to the width of the header"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"constraintkeys looks like this --> `references pubs.dbo.foo (fooid, quuxid)' chop off \"references \""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we can have more than one file in the string so tokenize on whitespace. let the user know if we find multiple tokens that they cannot place drop than one file at a time"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create checkbox for enabling auto refresh i18n[oracle.dboutputenableautorefer=enable auto refresh]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypebigdecimal.precisioneceeded=precision exceeded: number of digits in number ({0})\\nis greater than allowed in column ({1})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.second=second]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[db2plugin.showudfsource=show udf source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.splash.loadsqlhistory=loading sql history...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.unknownerror=unknown error during check on db. update is probably not safe.\\ndo you wish to proceed?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypeunknown.unknowntypes=unknown datatypes (non-standard sql type codes)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.hint=here you may pecify which schemas to be loaded and displayed in a session's object tree. code completion and syntax highlighting will work only for loaded schemas. if schemas take a long time to load you may cache them on your hard disk. then loading will take long only when you open a session for the first time. you can always refesh the cache either by using the session's 'refresh all' toolbar button or by using the 'refresh item' right mouse menu on an object tree node.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"point pt = jfcutilities.computepopuplocation(evt, evt.getcomponent(), this);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.tablescriptok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypebigdecimal.newlinesasbackslashn=show newlines as \\\\n within cells]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checkbox for whether to interpret input leniently or not i18n[datetypetimestamp.allowinexact=allow inexact format on input]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[udfdetailstab.hint=display udf details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some kind of problem - tell user i18n[datasetupdateabletablemodelimpl.error.preparingdelete=while preparing for delete, saw exception:\\n{0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.metadata=meta data:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datetypetimestamp.jdbcescape=use jdbc standard escape format ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.background=select background color]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.staleupdaterow=this row in the database has been changed since you refreshed the data.\\nno rows will be updated by this operation.\\ndo you wish to proceed?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[downloadstatuseventhandler.filelabel=file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextrasaccessor.editextraspluginneeded=quoting is only available with the edit extras plugin.\\nget the plugin from www.squirrelsql.org. it's free.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolspanel.usepklabel=use pk]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.classpathremove=remove selected entries]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.showtoolbar=show toolbar]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.exceptionduringcheck=exception seen during check on db. exception was:\\n{0}\\nupdate is probably not safe to do.\\ndo you wish to proceed?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[factoryproviderdialog.desc=please enter the fully qualified class name of a sessionfactorimpl provider class. the compiled class file must be in one of your additional classpath entries.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencespanel.updateactionlabel=action to take on update:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencespanel.updaterefactiontooltip=append on update ...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[derbydialect.varcharmessage=derby only allows varchar columns to be altered]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[resulttab.cannotedit=this sql can not be edited.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add import control i18n[popupeditableiopanel.import44=import]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefstabtitlehint=configure code completion]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"label for the date format combo, used to enable\/disable text i18n[datatypedate.orlocaleindependent= or locale-dependent format:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvcontroller.commandchooserbutton=choose]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.lafperformancewarning=also note: some look and feels may cause performance problems. if you think your selected look and feel slows down squirrel switch to a metal or plastic look and feel.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowdatainputframe.coldescription=\\ncolumn\\ndescription\\n]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.format=format ...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.bold=bold]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.scriptprops=script properties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.error.bindclobfailure=bindblobvar: failed to bind blob using filesystem - attempting to bind blob using memory]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpsessionaction.warning=<html><body><b>warning:<\/b> plain<br>text passwords<br>may be saved<br>in this file.<\/body><\/html>]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntaxplugin.comment=comment]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.multimatchingrows=muliple rows in db match current row in table - cannot re-read data.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[databasemetadata.searchabletypeprednone=no support]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.execontargets=execute script on selected targets]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[downloadstatuseventhandler.updatedownloadfailedmsg=please consult the log for details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[csvsettingspanel.seperatorchartooltip=specify the character that is used to seperate the columns in this file (e.g. ',' or ';')]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.scriptwritten=script was written to the sql editor of the main session window.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.execoutput=script execution output]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.osterwarning=you are using the oster editor. please consider using the netbeans editor. see menu file --> new session properties --> syntax]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.info.norowsupdated=no rows updated.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.showinstandardmenues1=show in standard menues]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencespanel.qualifycheckboxlabel=qualify table names in scripts with schema]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.sqlexectabs=sql execution tabs:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aboutboxdialog.error.systemprops=error occured displaying system properties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[artifactstatus.translationlabel=translation]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[defaultdatabaseexpander.error.retrieveuserroles=unable to retrieve user roles]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.removemultilinecommentlabel=remove multi-line comments (\/*...*\/) from sql before executing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionstartuptimehintdlg.title=session startup time hint]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"label for type combo - used to enable\/disable text associated with the combo i18n[datatypeblob.read=read]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.procedureseparatortooltip=multiple statements within a procedure or function can be terminated with this.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.scriptadminerr=err msg]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dialectutils.dropprimarykeyunsupported={0} doesn''t support dropping primary keys]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[copytablescommand.progressdialogtitle=analyzing fks in tables to copy]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatecontrollerimpl.updatechecktitle=update check]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefs.table.col.prefix=prefix]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.info.updateidenticalrows=this operation will update {0} identical rows.\\ndo you wish to proceed?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hqlentrypanelmanager.unquotehql=unquote hql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.replacenetbeansonly=replace is only available when the netbeans editor is used.\\nsee menu file --> new session properties --> tab syntax]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.configyourmultitablescriptixaftereach=constraints and indexes after each table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schematablecboitem.schemaid.loadbutdontcache=load but don't cache]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.tableheader.procedures=procedures]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.scriptcompletederr=script completed with errors]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dialectutils.addprimarykeyunsupported={0} doesn''t support adding primary keys]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowdatainputframe.cancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.osterexplain=note: the preferable editor is the netbeans editor. the netbeans editor\\n - is less memory consuming,\\n - its highlightning is more exact,\\n - can handle many lines well.\\n the oster editor is still there because it can handle very long lines better than the netbeans editor. this is due to a known bug in the netbeans editor (issue #41241). as soon as this bug is fixed the oster editor will be removed.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[exportconfig.errorsavingdrivers=error saving drivers]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorycontroller.mnuappendselectiontoeditor=append selected statements to sql editor]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemainfo.loadingstoredprocedures=loading stored procedures]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.cannotfindfile=cannot find file {0}\\ncheck file name and re-try export.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[factoryproviderdialog.example=save example code for a sessionfactorimpl provider class to ...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.listtruncated=completion list truncated. narrow by typing to get missing entries.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernatesqlpanel.code=sql code]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.linecommenttooltip=sequence of characters at the beginning of a line to indicate that whole line is a comment]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.rereadingdb=there was a problem reported while re-reading the db. the db message was:\\n{0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[scriptwriter.error.nouserhome=the system property <user.home> is null. cannot determine where to write dbcopy sql scripts. disabling writing sql scripts for dbcopy operations.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.editsqlbuttonlabel=edit sql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigcontroller.nopersistenceunitname=missing persitence-unit name .\\nchanges cannot be applied.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.createfileerror=failed to create file {0}.\\nchange file name or select a differnt file for export.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[derbyplugin.showviewsource=show view source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.toobtainsessionfactjpa=call \"javax.persistence.persistence.createentitymanagerfactory(\"<persitence-unit name>\");\"]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysqlplugin.hint=preferences for mysql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[prelaunchhelperimpl.installfailedmessage=unexpected error while attempting to install updates]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypejavaobject.readcontentswhenloaded=read contents when table is first loaded and display as string]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.sqlresulttabs=sql results tabs:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.dboutputstayontop=stay on top]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiespanel.objecttreebackgroundcolorbuttonlabel=choose object tree color]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[installdefaultdriversaction.error.selectingwindow=error selecting window]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[removecolumncommand.singlecolumnmessage=the table's only column cannot be removed - a table must have a least one column.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exporterror4=export error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.errorremovequotes=error processing remove quotes sql command: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.droperrormessage=can't drop all columns - a table must have at least one column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscriptpreferencestab.hint=settings for the sql script plugin]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datacache.msg.driverclassnotfound=could not find class {0} in neither the java class path nor the extra class path of the {1} driver definition:\\n{2}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiespanel.instructions=these settings control the background colors...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dialectutils.columnnullunsupported={0} doesn''t support altering a column's nullable attribute]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.storesqlintablefailed=an error occured during storing sql result in table {0}. see messages for details.\\ni will create the copy script. you may correct errors and run it again.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[prelaunchhelperimpl.installupdatestitle=updates available]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.splash.loadeditselections=loading edit 'where' columns selections...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[whereclausepanel.addlabel=add]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[copyexecutor.tablecolmismatch=column count for table {0} in source database is {1}, but column count for table {2} in destination database is {3}"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.confirmupdateallrows=the table has no columns that can be selected on.\\nall rows will be updated.\\ndo you wish to proceed?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[prelaunchhelperimpl.restorefrombackupmessage=restore squirrel to previous version before last update?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[celldatapopup.conversionerror=conversion error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.notanormalfile=file is not a normal file.\\n cannot do export to a directory or system file.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefs.table.col.config=configuration]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.font=select font color]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[favs.deletelfolder=are you sure to want to delete the folder \\\"{0}\\\" and all of its contents?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[toolspopupcontroller.toolspopupmsg=please try out the tools popup by hitting ctrl+t in the sql editor. do it three times to stop this message.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importdataintotableexecutor.success={0,choice,0#no records|1#one record|1<{0} records} successfully inserted.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scriptingoptionsdlg=scripting options allow you to specify how an object will be scripted.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checkbox for whether to interpret input leniently or not i18n[datatypetime.inexact=allow inexact format on input]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.refreshschemas=connect database to refresh schema table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.errorremovenewlines=error processing remove newlines sql command: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[fileeditordroptargetlistener.internalerrormessage=internal error occurred. see log for details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[databasemetadata.nullabletypenullable=true]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlscript.configyourmultitablescriptcancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tableexportcsvdlg.exportselection=export selection]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.statementseparatortooltip=when multiple statements are selected, use this to separate them into single statements.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.configname=configuration name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.lafwarning=note: controls may not be drawn correctly after changes in this panel until the application is restarted.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up dialog to ask user if it is ok to proceed important: this dialog is synchronous (ie. we do not proceed until user gives a response). this is critical since this function provides a return value to its caller that depends on the user input. i18n[basedatasetviewerdestination.warning=warning]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.logs=mysql logs]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionsqlpropertiespanel.removemultilinecomment=remove multi line comment (\/*...*\/) from sql before sending to database]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datetypetimestamp.timestampinwhere=do not use timestamp in where clause]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n [memorypanel.gcstatus={0}\\n\\n sessions waiting for garbage collection:\\n ==================================================\\n {1}\\n sessions open:\\n ==================================================\\n {2}\\n sessions garbage collected:\\n ==================================================\\n {3}\\n]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[droptabledialog.cascadelabel=cascade constraints:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletionpreferencespanel.maxlastselectedcompletionnames=if you call code completion without being in the scope of a table, for which number of tables the parser last found would you like to see colums on top of the completion list?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatecontrollerimpl.softwareversioncurrentmsg=this software's version is the most recent]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.errwhileexecutin=error while executing command.\\nthe command was:\\n {0}\\nthe error was:\\n{1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displaycolumns=display index column information]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.nosqlpanel=to run a bookmark you must open this window\\nusing the \"edit bookmarks\" toolbar button of a session window.\\nthe bookmars sql code will then be written to the session's sql editor.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetviewereditabletablepanel.selectionneeded=you must select something in the table to delete.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.generalsettings=general settings for the current session]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oraclepluginpreferencespanel.showerroroffsettt=creates and uses a user-defined function that is used to determine the syntax error token]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.applyconfigchanges=apply changes to this configuration]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[cancelstatementthread.canceltimedout=failed to cancel statement within one second. perhaps your driver\/database does not support cancelling statements. if cancelling succeeds later you'll get a further messages.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateconfigpanel.configuirationdef=configuration definition]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.info.identicalrows=this operation will result in {0} identical rows.\\ndo you wish to proceed?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[derbydialect.columnlengthmessage=derby only allows varchar column length to be increased]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[reconnectaction.confirmreconnect=close the current connection to the database and open a new one?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"label for the date format combo, used to enable\/disable text i18n[datetypetimestamp.orlocaledependend= or locale-dependent format:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[factoryprovidercontroller.filecreatefailed=file {0} could not be created: {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[createdatascriptofcurrentsqlcommand.noquery=no query found to create the script from.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.buffer.getsperrow=buffer gets per row]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.tabhint=fonts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemainfocacheserializer.beginstore=starting to write schema cache for alias {0}. file: {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displaytriggerdetails=display trigger details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.newgraph=new table graph]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlhistorydlg.filtercbocontains=contains]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypeblob.readonfirstload=read contents when table is first loaded:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.displayprocesses=(mysql) display database processes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.table=table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracleprefspanel.description= \"interactions with schema alias properties (see 'schemas' tab):\\n \\n 1. 'load all schemas, cache none': oracle alias properties will take effect immediately.\\n \\n 2. 'load and cache all schemas': oracle alias properties will take effect on next 'refresh all' inside a session.\\n \\n 3. 'specify schema loading and caching': oracle alias properties will take effect when the schemas table on the 'schemas' tab is refreshed.\\n \\n note: if schema alias properties are set to load all cache none and oracle alias properties is set to 'allow all schemas' this may result in very long session startup time.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.usecustomqttooltip=gives enhanced capabilities over the default query tokenizer for handling {0} scripts]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graphtoclipboard.copybutton=copy image from selected tab]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.commandreturnnot0=the convention for command returns is that 0 means success, but this command returned {0}.\\ndo you wish to import the file contents anyway?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypejavaobject.sqljavaobjecttype=sql javaobject (sql type 2000)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.info.bindbloblength=bindblobvarinfile: writing '{0}' bytes.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionstartuptimehintdlg.text=this session seems to take considerable time to load. you may configure alias schema properties to improve startup performance.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.schematableupdatelable2=in all schemas to]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.hasbeenautocorr={0} has been auto corrected \/ extended to {1}. to configure auto correct \/ abreviations see menu session --> syntax --> configure auto correct \/ abreviation]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dialectutils.columncommentunsupported={0} doesn''t support column comments]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalpreferencespanel.squirreluserpath=user directory: -userdir {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[myurlclassloader.noassigncheck=failed to load {0} in {1} to check if it is assignable to {2}. reason: {3}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importtabledatacommand.sqlerroroccured=an error occured while reading database data.] i18n[importtabledatacommand.error=error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.executeerror=execute error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importdataintotableexecutor.sqlexception=a database error occured while inserting data] i18n[importdataintotableexecutor.error=error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetviewertablepanel.textcantbeconverted=the given text cannot be converted into the internal object.\\nthe database has not been changed.\\nthe conversion error was:\\n{0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[cancelstatementthread.closefailed=failed to close statement. propably the driver\/rddbms does not support canceling statements. see logs for further details ({0})]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dialectutils.columntypeunsupported={0} doesn''t support altering a column's type attribute]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowdatainputframe.propname=input new row data]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.columntypetoottip={0} does not support altering column type]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.unknownupdateerror=unknown problem during update.\\nno count of updated rows was returned.\\ndatabase may be corrupted!]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.coltypemappingborderlabel=column type mapping]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hqlentrypanelmanager.quotehql=quote hql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.droptitle=select column(s) to drop]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.datatype1=properties for the individual data types may be set in the]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.generatesqlscript=generate sql script]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.scriptquerystatistics=executed {0} queries; elapsed time (seconds) - total: {1}, sql query: {2}, building output: {3}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowinputdataframe.conversiontointernerr=the given text cannot be converted into the internal object.\\nthe database has not been changed.\\nthe conversion error was:\\n{0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.dlgtabscriptsgentempl=generate script template...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatemanagerdialog.pathlabel=path:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.duringinsert=exception seen during check on db. exception was:\\n{0}\\ninsert was probably not completed correctly. db may be corrupted!]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.timestamp=time stamp]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernate.hibernatetabpanel.connect=connect\/disconnect configuration selected configuration]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no first row, so we cannot retrieve the data i18n[datasetupdateabletablemodelimpl.error.nomatchingrow=could not find any row in db matching current row in table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.cannotexec=cannot execute a null command.\\nplease enter a command in the command field before clicking on execute.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.columnnulllabel={0} does not support altering column nullability]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.showlogs=(mysql) show logs]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[numericfunctionstab.title=numeric functions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dialectutils.columnnameunsupported={0} doesn''t support altering a column''s name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aboutboxdialog.systempanelcreatetime=systempanel created in ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatecontrollerimpl.prompttodownloadavailableupdatestitle=updates available]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.wrapword=wrap on word on\/off]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sybaseaseplugin.showviewsource=show view source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.newcolumnvalue=newcolumn]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columnlistdialog.droperrortitle=too many columns selected]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.filechoosererror=file chooser error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript.applicabletotarget=scripts applicable to selected targets]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracleplugin.timestampwarning=the setting to use string literals for timestamps may result in the inability to edit tables containing these columns. if this problem occurs, open global preferences -> data type controls and set timestamps to use \"jdbc standard escape format\"]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mappingroot.driverversion=jdbc driver version (hibernate)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up dialog to ask user if it is ok to proceed important: this dialog is synchronous (ie. we do not proceed until user gives a response). this is critical since this function provides a return value to its caller that depends on the user input. i18n[basedatasetviewerdestination.warning2=warning]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[userscript1.scriptclass=script class]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.findexplain=press f3 to go to next result. press ctrl+shift+f7 to toggle highlight search.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hibernateattribuitedataset.tablecols=table columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencespanel.statuslablefailuremsg=connection failed. see log for error.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[celldatapopup.cannnotbgeconverted=the given text cannot be converted into the internal object.\\n please change the data or cancel editing.\\n the conversion error was:\\n{0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.error.missingtable=getforeignkeysql: table '{0}' has a column '{1}' that references table '{2}' column '{3}'. however, that table is not being copied. skipping this foreign key.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[csvsettingspanel.csvsettings=csv settings]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[syntax.textlimitlinewidth=text limit line width]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"required with the first beta of jdk1.4.1 to stop this scrollpane from being too tall."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.nativetoascii=path to native to unicode converter (jdk's native2ascii)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.appendi18nstringsprops=create\/append i18nstring.properties files]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.generatetemplatecomments=generate template comments for missing translations]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add more space between the label and the button"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we don't destroy the timer when there's nothing happening because it would mean a lot more work on every single awt event that gets dispatched."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the object representing the actual data (i.e. this object) can be edited by the user, then the fw objects need to have a reference to it. updateable objects must implement an interface derived from idatasetupdateablecomponent in the net.sourceforge.squirrel_sql.fw.datasetviewer package. if the component does not implement that interface, then we just keep going, but if it does implement it, then we need to tell the datasetscrollingpanel that the object that fw needs to call is this one."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there are some fields that cannot be used in a where clause, either because there cannot be an exact match (e.g. real, float), or because we may not have the actual data in hand (blob\/clob), or because the data cannot be expressed in a string form (e.g. binary). an update to one of those fields will look like we are replacing one row with an identical row (because we can only \"see\" the fields that we know how to do wheres on). therefore, when we are updating them, there should be exactly one row that matches all of our other fields, and when we are not updating one of these special types of fields, there should be no rows that exactly match our criteria (we hope). we determine whether this field is one that cannot be used in the where clause by checking the value returned for that field to use in the where clause. any field that can be used there will return something of the form \"<fieldname> = <value>\", and a field that cannot be used will return a null or zero-length string."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add more space to the top of the component"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the user has cancelled the query, don't bother logging an error message. it is likely that the cancel request interfered with the attempt to fetch results from the resultset, which is to be expected when the statement is closed. so, let's not bug the user with obvious error messages that we can do nothing about."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jason: removed as part of patch void removesessionlistener(isessionlistener lis);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there is no need to close result sets if we call _stmt.getmoreresults() because it implicitly closes any current resultset. on db2 version 7.1 it is even harmful to close a resultset explicitly. _stmt.getmoreresults() will never return true anymore if you do."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.tranlations=translations]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"iapplication app = getapplication(); cursorchanger cursorchg = new cursorchanger(app.getmainframe()); cursorchg.show(); try { new shownativesqlcommand(_session).execute(); } finally { cursorchg.restore(); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do not change the values of this constants. these constants where introduced to make the parser code more readable. care was taken. still it can not be guaranteed that changing a value will not be harmful."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copyonwritearraylist is unfortunately not sort-able as a list. so this will throw an unsupportedoperationexception: collections.sort(_itableinfos, new tableinfosimplenamecomparator()); the following is the best approach according to concurrency master doug lea, in this post: http: osdir.com\/ml\/java.jsr.166-concurrency\/2004-06\/msg00001.html here we copy the existing internal array into a new array that is large enough to hold the original and new elements. then sort it. and finally, create a new copyonwritearraylist with the sorted array."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use all of the columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"when user leaves a cell after editing it, the contents of that cell need to be converted from a string into an object of the appropriate type before updating the table. however, when the call comes from the popup window, the data has already been converted and validated. we assume that a string being passed in here is a value from a text field that needs to be converted to an object, and a non-string object has already been validated and converted."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save various info about the column for use in user input validation when editing table contents. note that the columndisplaysize is included two times, where the first entry may be adjusted for actual display while the second entry is the size expected by the db. the isnullable() method returns three values that we convert into two by saying that if it is not known whether or not a column allows nulls, we will allow the user to enter nulls and any problems will be caught when they try to save the data to the db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"implement the idatasettablecontrols interface, functions needed to support table operations these functions are called from within myjtable and mytable to tell those classes how to operate. the code in these functions will be different depending on whether the table is read-only or editable. the definitions below are for read-only operation. the editable table panel overrides these functions with the versions that tell the tables how to set up for editing operations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if use is not looking for ascii chars, or if this one is one that is not printable, then convert it into numeric form"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if both objs are null, then they matched in the previous test, so at this point we know that at least one of them (or both) is not null. however, one of them may still be null, and we cannot call equals() on the null object, so make sure that the one we call it on is not null. the equals() method handles the other one being null, if it is."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"clobs are different from normal data types in that what is actually read from the db is a descriptor pointing to the data rather than the data itself. during the initial load of the table, the values read from the descriptor may have been limited, but the descriptor itself has been completely read, therefore we do not need to re-read the datum from the database because we know that we have the entire descriptor. if the contents of the clob have been limited during the initial table load, that will be discovered when we check if the cell is editable and the full data will be read at that time using this descriptor."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[rowinputdataframe.conversionerr=conversion error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- basic infrastructure --"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save pointer to object needed to render value for use in the inner class delegate"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we want to detect two empty text values in a row before we decide to restore the original value. since 'text' contains the new value, we want to allow the first empty 'text' so that the user can clear the field, and on the second one we will set it to the original value."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tables that are netiher children nor parents - utility tables"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"when the table initiates editing and sets this field, remember the value as the original value of the field"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now the popup-related methods. these are not quite symmetric with the in-cell calls because the conversion of the object into the text to display in the popup is handled internally to the datatype object inside getjtextarea(), so we do not need a \"renderobjectinpopup\" function visible to the rest of the world."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <table_name> add foreign key [<referential_constraint_name>] (<referencing_column>,...) references <referenced_table> [(<referenced_column>,...)] [<delete_rule>]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create sequence sequencename increment by increment minvalue minimum maxvalue maxvalue restart with restart cache cache cycle;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since we can use a correlated sub-query to update all rows in one statement, we don't care about the set values, unless fromtables is null, in which case we go with a normal update. using the set values would require an update statement for each row in the merged table for each column that was merged in, which is incredibly inefficient. however, the api is intended to support database dialects that can't handle correlated sub-queries."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"from postgresql 8.2 documentation: create [ unique ] index [ concurrently ] name on table [ using method ] ( { column | ( expression ) } [ opclass ] [, ...] ) [ with ( storage_parameter = value [, ... ] ) ] [ tablespace tablespace ] [ where predicate ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the index is needed in case this method is called with schema = null, catalog = null and two tables with the same name in different schemas\/catalogs. without the index the same ordinal position could only occur once."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tables might have triggers that depend on sequences, so drop tables next."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"timesten reference claims this is a supported operation, but it yields an exception for me: alter table test modify nodefaultvarcharcol default 'default value' exception in thread \"main\" java.sql.sqlexception: [timesten][timesten 6.0.1 odbc driver][timesten]tt1001: syntax error in sql statement before or at: \"nodefaultvarcharcol\", character position: 26 -- file \"ptsqly.y\", lineno 1940, procedure \"sbptparsesql()\" string alterclause = dialectutils.modify_clause; string defaultclause = dialectutils.default_clause; return dialectutils.getcolumndefaultaltersql(this, info, alterclause, false, defaultclause); so, for now, just throw an exception:"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"styleconstants.setbackground(_saseterror, color.red);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"styleconstants.setbackground(saseterrorhistory, color.pink);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[metadatadecoratordataset.nojarfiles=no files specified in 'extra classpath' tab for driver]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the source column is distinct and the session is postgresql, try to get the underlying type."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_treeapi.adddetailtab(databaseobjecttype.index, new databaseobjectinfotab()); _treeapi.adddetailtab(databaseobjecttype.index, new indexdetailstab());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"date\/time types never declare a length. just return something larger than 0 so we bypass other checks above."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2pkcol is used to create a pk when using db2. db2 doesn't allow you to add a pk to a table after it has been constructed unless the column(s) that comprise the pk were originally there when created *and* created not null."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle declares the column size to be 4000, regardless of the maximum length of the clob field. so if the oracle blob\/clob column contains values that exceed 4000 chars and we use colinfo.getcolumnsize() we might create a destination column that is too small for the data that will be copied from oracle. we specify a default value of 4000 in case the table has no records or if the blob\/clob column contains only null values."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"reads the value from the specified resultset at column index index, and based on the type, calls the appropriate setxxx method on ps with the value obtained. @param ps @param sourcecoltype @param destcoltype @param index @param rs @return a string representation of the value that was bound. @throws sqlexception"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"it is always thrown as said in embedded derby api. so it is not error it is info"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we are limiting some things. if the string we have is less than the limit, then we are ok and do not need to re-read (because we already have the whole thing)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this theme was presented to squirrel by karsten lentzsch of jgoodies.com. it is squirrel's default theme if the laf plugin is not used. here we make the allbluesboldmetaltheme also available within the laf plugin. thanks a lot karsten."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"grant { all [ privileges ] | permission [ ,...n ] } { [ ( column [ ,...n ] ) ] on { table | view } | on { table | view } [ ( column [ ,...n ] ) ] | on { stored_procedure | extended_procedure } | on { user_defined_function } } to security_account [ ,...n ] [ with grant option ] [ as { group | role } ] revoke [ grant option for ] { all [ privileges ] | permission [ ,...n ] } { [ ( column [ ,...n ] ) ] on { table | view } | on { table | view } [ ( column [ ,...n ] ) ] | on { stored_procedure | extended_procedure } | on { user_defined_function } } { to | from } security_account [ ,...n ] [ cascade ] [ as { group | role } ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if logging has changed."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert the data into an ascii representation using the standard convention"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this one does not, so they are not equal"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the other obj has not read the data yet."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the other object has real data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"close any previous logging."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the contents of the component without resetting the original value."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see if there is a plugin-registered datatypecomponent that can handle this column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have the whole contents of the blob tell user the data is truncated"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create empty required files in user settings directory."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle's 'timestamp with time zone' == -101 oracle's 'timestamp with local time zone' == -102"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[primarykeytab.title=primary key]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we have seen a property for this datatype before, then the hashmap already exists. otherwise, we need to create it now."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"comparable c1 = (comparable)data1; return c1.compareto(data2) * _iascending;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do not return null when trying to use list(filename filter) on a file rather than a directory. all other \"list\" methods return null for this test case."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is set here as sessionpanel.dispose() will attempt to close the session."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"testlongvarbinarycoltype(sourcename, destname); testnumericcoltype(sourcename, destname); testrealcoltype(sourcename, destname); testsmallintcoltype(sourcename, destname); testtimestampcoltype(sourcename, destname); testtimecoltype(sourcename, destname); testtinyintcoltype(sourcename, destname);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"isession mocksession = mockhelper.createmock(isession.class); iapplication mockapplication = mockhelper.createmock(iapplication.class); expect(mocksession.getapplication()).andstubreturn(mockapplication); taskthreadpool mockthreadpool = mockhelper.createmock(taskthreadpool.class); mockthreadpool.addtask(easymock.isa(runnable.class)); expectlastcall().anytimes(); expect(mockapplication.getthreadpool()).andstubreturn(mockthreadpool); string[] tabletypes = new string[] { \"table\" }; isqlconnection mocksqlconnection = mockhelper.createmock(isqlconnection.class); expect(mocksession.getsqlconnection()).andstubreturn(mocksqlconnection); sqldatabasemetadata mocksqldatabasemetadata = mockhelper.createmock(sqldatabasemetadata.class); expect(mocksqlconnection.getsqlmetadata()).andstubreturn(mocksqldatabasemetadata); expect(mocksqldatabasemetadata.gettabletypes()).andstubreturn(tabletypes); mockhelper.replayall(); classundertest = new defaultdatabaseexpander(mocksession); mockhelper.verifyall(); mockhelper.resetall();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is a reasonable default and makes initialization code run well"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add it back"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell user the data is truncated"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pane to add window content to."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put toolbar at top of window."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first convert the string representation into the binary bytes it is describing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the main list for window."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"list in the centre of the window."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"probably just no results -- return it empty."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.noeditselection=please select the bookmark to edit]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[versioncolumnstab.hint=show columns that are automatically updated when the row is updated]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the look and feel register."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"at this point we know that we have a 1.4 or higher java runtime"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"call the function in the app code that checks for unexpected conditions in the current db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"coldefs[i].getsqltypename() + \"\\n\" + ((coldefs[i].isnullable()) ? \"nullable\" : \"not nullable\") + \"\\n\" + \"precision=\"+ coldefs[i].getprecision() + \"\\n\" + \"scale=\" + coldefs[i].getscale();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private mainframe _mainframe;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"display error message and do not update the table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1i8n[metadatadecoratordataset.classpathlabel=jdbc driver classpath]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"2. display global preferences"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle throws this ex on blob data types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return empty list if source string is empty."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"else"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"final string columnclassname = _rsmd.getcolumnclassname(idx);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1i8n[metadatadecoratordataset.classnamelabel=jdbc driver classname]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we are not limiting anything, return false"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the value is null, then it was read ok"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"prevent editing if text contains newlines"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no indexes, i guess."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"init progressbar"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"binary types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"guiutils.setjbuttonsizesthesame(new jbutton[] {_okbtn, _closebtn, new jbutton(i18n.cancel)});"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add end"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final static ilogger s_log = loggercontroller.createlogger(resultsetcolumnreader.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the active window isn't for the currently selected session then select the main window for the session."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add(_okbtn); add(_closebtn);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the number of characters allowed in this field"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column is limited and length == limit, so need to re-read column is not limited, so we have the whole thing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"progress claims to support catalogs in data manip - but it actually doesn't honor that claim."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check for the case where we are limiting some columns but not limiting this particular column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the data is longer than the limit, then we have previously re-read the contents and we do not need to re-read it again"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the flag for whether or not to limit only on specific fields"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first do special check to see if we should use longvarchar in the where clause. (oracle does not allow this.)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"what follows comes from the squirrel firebird dialect extension."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"databaseobjecttype.sequence_type_dbo=sequence type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.createtablebtn=create table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"databaseobjecttype.proc_type_dbo=stored procedure type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"databaseobjecttype.index_type_dbo=index type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"databaseobjecttype.database_type_dbo=database type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"databaseobjecttype.table_type_dbo=table type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no permissions, i guess."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.isession#confirmclosewithunsavededits()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_mainframe = new mainframe(this);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"databaseobjecttype.trigger_type_dbo=trigger type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"databaseobjecttype.udt_type_dbo=udt type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removed for cut sql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if value contains \":\" it probably has a time component"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"internal class for handling key events during editing of both jtextfield and jtextarea. since the unknown data type is not editable either in the cell or in the popup, we should never get here, but we have provided appropriate code just in case."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tables that have at least one parent table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"t1 depends on t2"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"close the resultset's statement if it is non-null. this frees open cursors."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"avoid the hit next time"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"close the resultset"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"leave a blank line just to make it look a bit nicer"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"build up datastructure. final cache."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"t2 depends on t1"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tables that have at least one child table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"value is truncated, so do not use in where clause"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data is longer than the limit, so we need to do more checking"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"in sybase, default keyword must appear prior to null\/not null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.tablenotfound=cannot edit table because table cannot be found\\nor table name is not unique in db.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no triggers, i guess."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_thread = new thread(new memorytimer()); _thread.start();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"typename columnsize decimaldigits radix isnullallowable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"finally, try to set the catalog, which appears to be a no-op in the informix driver."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"from mysql 5.0 reference: alter table tbl_name add [constraint symbol] foreign key [id] (index_col_name, ...) references tbl_name (index_col_name, ...) [on delete {restrict | cascade | set null | no action}] [on update {restrict | cascade | set null | no action}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"from mysql 5.0 reference manual alter [ignore] table tbl_name alter_specification [, alter_specification] ... alter_specification: | add [constraint [symbol]] unique [index|key] [index_name] [index_type] (index_col_name,...)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"in oracle, on update actions are not supported"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"just eat the exception"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"classes.add(((cacheentry)it.next())._objclass);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"during assignable checks many classes can't be loaded but don't cause problems either. so we just issue an info."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for string, just send the text to the output file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do not use axion's bigint data type. i get the following exception in my test: org.axiondb.axionexception: invalid value \"3074478078827346\" for column (bigint_type_table).bigint_column, expected numeric(20,10) : data exception: numeric value out of range can someone please tell me why axion expects big integers to be limited to 20 precision and 10 scale?(integers should have scale == 0, right?) so an axion bigint is limited to just 20 digits to the left of the decimal point. todo: consider filing a bug report against axion build m3. 38 is the maximum precision for axion's numeric type."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 needs to reorg table after changing nullabolity"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"update t set a = (select a from t2 where t.b = t2.b); string templatestr = \"update $desttablename$ set $columnname$ = \" + \"(select $columnname$ from $sourcetablename$ \" + \"where $sourcetablename$.$wherecolumnname$ = $desttablename$.$wherecolumnvalue$\"; stringtemplate st = new stringtemplate(templatestr);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data must fit into the column's max size"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return get().getproperty(\"mrj.version\") != null;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we look backwards"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private static final stringmanager s_stringmgr = stringmanagerfactory.getstringmanager(tablecopycommand.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this will skip blank lines"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"right"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"at least one version of postgresql through the jdbc\/odbc bridge returns an empty result set for the list of table types. another version of postgresql returns 6 entries of \"system table\" (which we have already filtered back to one)."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pointbase doesn't follow the spec with regard to column 11 of getcolumns (should return a type constant, but instead returns a boolean."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"catalog schema tablename columnname keysequence pkname"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- path operations --"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypestring.limitsize=limit size of strings read during initial table load to max of:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"a deadlock chain is circular and does not have a defined beginning pid. in order to make the string representation of a deadlock chain unique we put the smallest pid at the beginning of the chain."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"re-calculate fulltablename the next time it's requested."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypestring.allowlongvarchar=allow longvarchar type to be used in where clause]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_session.getproperties().forcetablecontentsoutputclassnamechange();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"forced edit mode ended because user changed the session properties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"row 1"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add session ended listener -- needs for embedded derby db"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- constructors --"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"collation"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"encountered a comment character at the beginning of the line so just ignore the rest of the line"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypestring.newlines=show newlines as \\\\n within cells]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"length"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check box for whether to do any limiting of the data read during initial table load"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there can be only one default in truth, but the model allows more than one."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this slash stuff is a ..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"there can be only one pk in truth, but the model allows more than one."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check box for whether to use longvarchar in where clause (oracle does not allow that type in where clause)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register as a listener for mouse events"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"all sheets and cells added. now write out the workbook"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"should there me a max number of threads?"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- attribute accessors --"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"save off selections so that selection\/focus can be restored later."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- path-component accessors --"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"idatatypecomponent interface methods"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- file operations --"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- filesystem interface --"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copytablelistener interface methods"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\/ <summary> \/ how much usable data has been read into the stream, \/ which will not always be as long as buffer.length. \/ <\/summary>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this flag is used as a loop exit condition during parsing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only for restoring from xml etc."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dbnamedialectmap.put(\"db2\/390\", db2390dialect); dbnamedialectmap.put(\"db2\/400\", db2400dialect);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell the underlying data model to stop forcing edit mode and return to the mode specified in the session parameters, which includes telling the gui to rebuild itself"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tablemodel tm new defaulttablemodel(new string [] { \"table\", \"column\" }, 4) { private static final long serialversionuid = -8826914717673025881l; public boolean iscelleditable(int rowindex, int columnindex) { return false; } };"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"yes"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string sql = \"a'''' sss ; go ;; go'\"; string sql = \"a\\n--x\\n--y\\n\/*\\nb\"; string sql = \"go go\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tabs to add to the database node."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this column cannot be used in a where clause"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.scriptingoptions=table scripting options]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"defines the opening angle of the arrow (not rad or so but something fancy)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_msgsplit.setdividerlocation(0.9d); _msgsplit.setresizeweight(1.0);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysqlplugin.title=mysql]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysqlplugin.showviewsource=show view source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"must not quote column names"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"stored procedures and functions have that dangling ;version thing."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add users to the role."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removed for copy sql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"trim the column name in case of hadb"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public boolean iscelleditable(int rowindex, int columnindex) { return (columnindex == 0); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"coll.add(new createtableaction(app, _resources, this));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"final iobjecttreeapi api = compat.getiobjecttreeapi(session, this);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tab to add to view nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.columnnamelabel=column name: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"restore the paths"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now drop the first"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"trim the table name in case of hadb"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tabs to add to the user nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ibm db 2 specific code to read view definitions."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"options in popup menu."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public sqlexecutioninfo(int idx) { this(idx, \"\"); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string check_table = \"checktable\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"generic sql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tabs to add to the table nodes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"show triggers for tables"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"visible (gui) ------------------------------------------------------------------------ -- main"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_resources.addtomenu(coll.get(createtableaction.class), mysqlmenu);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handling of comments"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fill in list of column names to check against"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is responsible that comments are not in curquery"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fill in the current limit length"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checkbox for displaying newlines as \\n in-cell"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"empty"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"skip ahead so the cursor is now immediately after the begin comment string"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"checkbox for using long in where clause"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see isqlentrypanel#hasownundoablemanager()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i do believe the getsimplename() will end in ;1 if it's a procedure and ;0 if it's a udf."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add custom args given as parameter"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these arrays are parallel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"lbltitle.setbackground(new color(204,204,204)); lbltitle.setname(\"lbltitle\"); lbltitle.setopaque(true); lbltitle.settext(\"default values\"); etchedborder etchedborder1 = new etchedborder(etchedborder.raised,null,null); lbltitle.setborder(etchedborder1); jpanel1.add(lbltitle,cc.xywh(2,2,9,1));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"one or the other should be absolute on windows or ce"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"should work for unix\/windows."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"visible (gui) ------------------------------------------------------------------------ -- misc"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for long file names on windows"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drops the original column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we assume here that if the pseudocolumn was used in the query, then it was likely to have caused the sqlexception. if not, (length == 0), then retrying the query won't help - just throw the exception."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"newindentdepth == indentdepth"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"case session_bean_grant_and_revoke: return new firebirdmanagergrantpreferencebean();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these classes have no package see swingsetthemes.jar"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"call sp_help on the stored procedure, then look at the second resultset for the parameter information."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up array to return for public access to cmd line args"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean _bstopexecution = false;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"assume unix or linux"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"die 200 braucht nur sql server 7.0, sql server 2000 nicht mehr sagt san"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_bstopexecution = false;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tabs for triggers"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_resources.addtomenu(coll.get(dropdatabaseaction.class), mysqlmenu);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for windows, the file is being set hidden by the attrib command."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"end ok"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"[i18n[orderbyclausepanel.columnslabel=columns]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.copyok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"isession[] getactivesessions();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"current alias schema properties dont want cache. so we don't cache."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"treating sequences as tables interferes with the operation of the postgresql plugin"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some drivers for db2 don't return sysfun as a schema name. a number of system stored procs are kept in this schema."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use a set rather than a list as some combinations of ms sql and the jdbc\/odbc return multiple copies of each table type."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"treating indexes as tables interferes with the operation of the postgresql plugin"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ctor. wraps this exception around another. @param wrapee the exception that this one is wrapped around."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"inserts all keys into the new column depending on the content in the old column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set dir to a non-existent directory inside the temporary directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for creating a tempfile in a directory that does not exist."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we are blocked by a member of a deadlock chain but do not belong to the deadlock chain ourselves this prevents a forever loop."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert data from stringwrappers to strings"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"testing two files, one with suffix \".tmp\" and one with null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"top"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this should throw an exception - should not allow multiple custom tokenizers to be installed for a single session."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlcatalogscombobox.nonelabel=none]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see if this is the same statement"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pointer to the viewer this is needed for insert and delete operations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jdbc:cache: cachensw-and:1972\/shdtest"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"couldn't locate the table - just try to fake it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add entries for insert and delete rows only if table is updateable and already editable (ie. allowediting is false)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"read succeeded, so reset the clobdescriptor to match"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"plugin supports only session main window"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user.home\/.squirrel-sql\/plugins\/dbcopy"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n ? what is this used for?"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"error protection against using a suffix without a \".\"?"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't care if it's not there"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private int _lastx;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"case isa_slash: state = init; return sqltokencontext.minus;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the parser didn't get triggered on shift+insert. we do it here by hand"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tests for creating a tempfile with a filename shorter than 3 characters."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check for identifier"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"formatting"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"good - converting a url to a file this way is fine when the file path contains spaces"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for trying to create a file in a directory that does not exist."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this column is created in the create script abd unused unless testing db2"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first check aliases"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"coll.add(new scriptprocedureaction(app, _resources, this, _usersettingsfolder)); coll.add(new refreshrepositoryaction(app, _resources, this, _usersettingsfolder));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"completioninfos are still loading"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for example postgres returns table names as datatypes. in those cases this prevents to have the table names twice."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cascade constraint clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_table.requestfocus();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expect(backupfile.getabsolutepath()).andreturn(\"mockbackupframeworkjarfile\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockresultset = mockhelper.createmock(resultset.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"a valid file uri"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table $tablename$ drop constraint $constraintname$"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"java6 types rowid nvarchar nchar longnvarchar nclob sqlxml"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"local expectations"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"makes sure that the last name is always in top of the list."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"invalid file uris not hierarchical not file scheme not absolute non empty authority non empty query non empty fragment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression test for harmony-382"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this function returns the resulting process from the exec"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tests to see if the correct prefix was used to create the tempfiles."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove old name list from map"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private databasemetadata mockgenericdialectdbmetadata = mockhelper.createmock(databasemetadata.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle list of column names"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"code completion has been done within code completion. and relaunch completion popup."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cleanup and standardize the name, and add it to the map"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"extract column names from text area"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression for harmony-2674"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"imessagehandler messagehandler = geteasymockmessagehandler();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can't happen"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test create an illegal file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only remove the frame if the entire session is not closing"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"canwrite only returns if the file exists so cannot be fully tested."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add an item to the windows menu for this window and store the menu item back in the internal frame."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.tablenamelabel=table name: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"adds a foreign key constraint to the source table for the new column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we get here, then everything worked correctly, so tell user that data was put into file. this is different from the import strategy because the user may not know the name of the file that was used if they selected the automatic temp file operation, or they may not know what directory the file was actually put into, so this tells them the full file path."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add(new dropselectedtablesaction(_app));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.createtablecomm=create table...]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"clear public column values for current line"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove the function name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new testcompletionfunction(),"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"has to be done directly on the main frame because of racing condition at start up. _aliaseslistwindow.nowvisible(true);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"needed for example on postgresql"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private jcheckbox[] chfields;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the list disabled if allfields of table are to be copied"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.squirrel=squirrel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"two columns to represent a primary key in the pktest table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.suredropping=are you sure?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"views will depend on tables, so drop them first"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for when long directory\/file names in windows"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the boolean value when the user selects b\/w structure and data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"defaultlistmodel listmodel = (defaultlistmodel) listfields.getmodel();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"chfields = new jcheckbox[colnames.length];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string path = \"\/downloads\/\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop index indexname [ cascade ] [ on <tablename> ];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"just a test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefixconfig.deleteselrows=delete selected rows]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefs.table.udfwithoutparams=udf without params]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see mousemotionlistener#mousedragged(mouseevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.globalfunctcompltion=if there is no matching prefix configuration functions should complete like:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these are not used"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dialect list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.prefixconfig.newrow=add new row]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this will be our working buffer to hold data chunks read in from the data file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this holds all the values for switches that the user is allowed to set"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"map of dbms-specific registered data handlers. the key is a string of the form: <sql type as a string>:<sql type name> and the value is a factory that can create instances of dbms-specific datatypecomponets."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"utilundertest = ;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"logging mechanism for errors"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"by default, it is not running."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"int precision"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"delete all old temporary files"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this should just produce an error message."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[graph.zoom=zoom]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[columndetailsdialog.columnnametoottip={0} does not support altering column name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"type list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\" a read \""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"scale"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"precision"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"loop over the data stream until the end of data is found or the end of the record is found"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if we've already found the end of data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nullable"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"comment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"appending internationalized labels with optional components"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use headersholder.length here in case headers is null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"informix: when no database is given in the connect url, then no table types are returned. the catalog can be changed which will select a database, but by that time it is too late."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create a mapping of names if we have supertable info, since we need to find the itableinfo again for re-ordering."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"keep track of the last letter because we need it for several key decisions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can only happen for escape_mode_backslash"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"read qualified"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"return the processed header data for this column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test data used in a few places below"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.lengtset=length\/set]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if we have read the header record yet"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.createadd=add]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the following gives java.sql.sqlexception: conversion to character stream failed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we encountered a column with no data, so just send the end column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if there are duplicate header names, we will save the last one"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, this will trim leading whitespace for both text qualified columns and non"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if no more data could be found, set flag stating that the end of the data was found"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for hasmoredata to ever be false, all data would have had to have been copied to the raw buffer"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.msgtablecreated=table {0} created]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"must be called before setting startedcolumn = false"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"holder array needs to grow to be able to hold another column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"name of the preferences files"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create column list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default behavior if no datatype object is to use the defaultcolumnrenderer with no modification."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private dbutils dbutils;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default behavior: tostring"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"operations for text and in-cell work"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default - if we do not know the data type, then we cannot re-read it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see basedatasetviewerdestination#allrowsadded()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see idatasetviewer#getrowcount()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put the data into the db and the on-screen jtable. if there was a failure, do not make this form go away since the user may be able to fix the problem by changing the data."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"appending separators"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldriver#setwebsiteurl(java.lang.string)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fa_xxx"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getdrivername()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have done everything we can prior to this point to ensure that the the file is accessible, but it is still possible that an existing file was removed at a bad moment. also, the compiler insists that we put this in a try statement"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these are static instead of final so they can be changed in unit test isn't visible outside this class and is only accessed once during csvreader construction"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ascii\/ansi escape"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setpreferredsize(new dimension(400, 400));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"having these as publicly accessible members will prevent the overhead of the method call that exists on properties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make sure to clear the flag for next run of the loop"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[application.error.loaddatatypeprops=unable to load datatype properties selections from persistant storage.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importtabledatacommand.settingsdialogtitle=import file settings]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see basedatasetviewerdestination#getrow(row)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create the threads"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see basedatasetviewerdestination#addrow(object[])"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"display the field attributes when selected in the list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"has to be done directly on the main frame because of racing condition at start up. _aliaseslistwindow.nowvisible(false);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importdataintotableexecutor.wrongformat=imported column has not the required format.\\nline is: {0}, column is: {1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"execute java process"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"show a warning dialog and let the user confirm it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"try it as a long in case the database driver didn't correctly identify an unsigned field"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the attributes for the fields in the class fielddetails"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.btcancel=cancel]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"operations for popup work."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove the fields added to the list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"reset the checkbox selected index false when fieldname gains focus"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importtabledatacommand.ioerroroccured=an error occured while reading import file data.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"default operation"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"always use \"to\" column name since name changes happen first"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"wait for errthread to start"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no object, so do not assume binary editing will work"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first make sure that user's last input has been included (it is too easy for user to enter data and forget to click on another field to force it to be set.)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importfiledialog.suggestcolumns=suggest columns (find matching columns)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\/** logger for this class. *\/ private final static ilogger s_log = loggercontroller.createlogger(altertablecommand.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add packages."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getdatabaseproductversion()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make sure a deselect is followed by a select when a new selected tab exists."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypeblob.blobtype=blob (sql type 2004)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set look and feel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.borderlabel={0} script settings]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importfiledialog.headersincluded=headers in first line]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"initcomponents();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importfiledialog.datapreview=data preview]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"informix doesn't allow quoting column names."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the user picks auto-increment, auto-fill the \"fixed value\" column with 0 for the start value if it is currently empty."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see mouselistener#mousepressed(mouseevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.hibernatedialect#supportsschemasintabledefinition()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see mousemotionlistener#mousemoved(mouseevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getusername()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.hibernatedialect#getlengthfunction()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.hibernatedialect#getcolumnlength(int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.hibernatedialect#getmaxprecision(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the entire blob data is read in. return true if it has been read successfully, and false if not."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.hibernatedialect#getmaxscale(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if no object for this data type, then cannot use value in where clause"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"let datatype object speak for itself"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if no datatype object, then there is nothing to handle file io, so cannot do it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see mouselistener#mousereleased(mouseevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.otherfonteanbled=enabled]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see tablecellrenderer#gettablecellrenderercomponent(jtable, object, boolean, boolean, int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.iquerytokenizer#getsqlstatementseparator()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"rename table <tablename> to <newtablename>;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see tablemodel#getcolumnclass(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see tablemodel#getcolumnname(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionpropertiespanel.catalogprefix=limit catalog objects using these comma-delimited prefixes:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see java.awt.datatransfer.transferable#gettransferdata(java.awt.datatransfer.dataflavor)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see java.awt.datatransfer.transferable#gettransferdataflavors()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for all windows (other than the first one opened) for a session add a number on the end of the title to differentiate them in menus etc."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importfiledialog.column=column]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove from toplevel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"place popup according to caret position and placement"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getsystemfunctions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportscatalogsintabledefinitions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not cached. (non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getcatalogs()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make a single list of all class names that we need to check. start with the names of known, standard classes that provide control panels"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.exportsuccess=export success]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportsschemasindatamanipulation()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"<create_view_statement> ::= create [or replace] view <table_name> [(<alias_name>,...)] as <query_expression> [with check option]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportsschemas()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getjdbcversion()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportsstoredprocedures()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the user has selected a non-cannonical binary format, we need to convert the text appropriately"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get control panels to let user adjust properties on datatype classes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"re-order nodes if the tables are stored hierachically"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiescontroller.title=color properties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now go through the list in the given order to get the panels"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importfiledialog.fixedvalue=fixed value]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getcatalogterm()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#geturl()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"store all plain table info we have."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"internal method used for both cell and popup work."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"should never happen"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getcatalogseparator()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getprocedureterm()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"keep a hash table of the column objects so we can reuse them."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"new table - clear hash map"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"see if we have a custom data-type registered."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#gettypesdataset()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add node for each object."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getjdbcmetadata()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportscatalogsindatamanipulation()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getnumericfunctions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create a test bean to clone"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[importfiledialog.importfilecolumn=import file column]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[progressbardialog.insertingrecordslabel=copying records]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getmetadataset()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getudts(java.lang.string, java.lang.string, java.lang.string, int[])"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up for string types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getdatatypes()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up for integers"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remember this datatype object so we can reuse it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-8 is rowid in oracle. it's a string, but it's auto-assigned"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no need to check column name validity when source and dest are of the same type of database."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only do this if the object tree (and hence this contents tab) is visible."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up for binary types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#gettables(java.lang.string, java.lang.string, java.lang.string, java.lang.string[], net.sourceforge.squirrel_sql.fw.sql.progresscallback)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the singleton instance of the saver class to be the instance just created by the xmlbeanreader"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#gettabletypes()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.close=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldriver#getwebsiteurl()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get where clause using original value"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only single dot"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.tableheader.views=views]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if all columns in a table have empty strings as the headings then the row height of the label row is zero. we dont want this."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[specialcolumnmapping.auto_increment=auto increment]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#gettableprivileges(net.sourceforge.squirrel_sql.fw.sql.itableinfo) @deprecated use gettableprivilegesdataset instead"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#gettimedatefunctions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getsqlkeywords()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.skinthemepackdir=theme pack directory:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.dboutputtitle=oracle db output for: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"token kind token position in the source text (starting at 0) token column (starting at 0) token line (starting at 1) exact string value token string value (uppercase if ignorecase)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getprimarykey(java.lang.string, java.lang.string, java.lang.string)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data type is unknown to us. it may be an unusual type like \"java object\" or \"array\", or it may be a dbms-specific type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"bottom"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionpropertiespanel.objecttree=object tree]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getcolumninfo(java.lang.string, java.lang.string, java.lang.string)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.skinthempack=theme pack:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[logpanel.titleinfo=last log entry (entry type: info)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"helper code"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"an interface"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[tablepriviligestab.hint=show access rights for the selected table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no problem in conversion - proceed with update ((datasetviewertablepanel.myjtable)_table).setconvertedvalueat( newvalue, _row, _col);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"whether or not to read date type columns with rs.gettimestamp()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"original object another object that has the same values as the original another object with different values"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"input scanner last recognized token lookahead token"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_mainframe.setvisible(true); _mainframe.tofront(); required on linux"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final aliaswindowfactory _aliaswinfactory;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"or a white space must be in front of the keyword."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"wait for pending chars to be processed post new characters"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[logpanel.titlewarn=last log entry (entry type: warning)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.metadatadataset#get(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"resolve largest and *preferred placements if possible"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#copystarted(net.sourceforge.squirrel_sql.plugins.dbcopy.event.copyevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[logpanel.logmsg=logged by {0} at {1}:\\n\\n {2}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ignore that"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.preferences.iglobalpreferencespanel#initialize(net.sourceforge.squirrel_sql.client.iapplication)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.itableinfo#getimportedkeys()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.itableinfo#getexportedkeys()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.ifileimporter#next()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"construct the name of executable file"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.ifileimporter#reset()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.abstracttablemodel#setvalueat(java.lang.object, int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.tablemodel#getcolumncount()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.tablemodel#getvalueat(int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.abstracttablemodel#iscelleditable(int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.ifileimporter#open()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.jarzip=jar\/zip files]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fail ??"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#tableanalysisstarted(net.sourceforge.squirrel_sql.plugins.dbcopy.event.analysisevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <tablename> modify <columnname> mediumint not null auto_increment primary key"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.ifileimporter#getdate(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the edited column is in the resultset twice (example: select myname,* from mytable). we won't add the this col to the where clause."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"a class"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check filename is preserved correctly"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#copystarted()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#copyfinished(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.cachetodelnotexists=cache file for alias \"{0}\" does not exist. no file was deleted]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiescontroller.hint=schemas (loading and caching)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aliaspropertiesinternalframe.ok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.copytablelistener#tablecopyfinished(net.sourceforge.squirrel_sql.plugins.dbcopy.event.tableevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.copypreference#deletetabledata(java.lang.string)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see java.awt.event.actionlistener#actionperformed(java.awt.event.actionevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register custom datatypecomponent factory for db2 xml"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see java.util.comparator#compare(java.lang.object, java.lang.object)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"int sqlcode = sqlca.getsqlcode();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"schema should be identical to the statement. ignore"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.sessioninfoprovider#setdestselecteddatabaseobject(net.sourceforge.squirrel_sql.fw.sql.idatabaseobjectinfo)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tableexpander.settableindexextractor(extractor);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see java.lang.runnable#run()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiespanel.backgroundcolorlabel=background color]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aliaspropertiesinternalframe.close=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"toolbar"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"object tree"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"status bar"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since catalog, schema and table are all identifiers, they all need to be quoted."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert user representation of null into an actual null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do different things depending on data type"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"insert the \"where\" at the front if there is anything in the clause"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the sql session"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string msg = sqlca.getmessage();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"call class under test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.iplugin#getexternalservice()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.isessionplugin#sessionstarted(net.sourceforge.squirrel_sql.client.session.isession)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2sqlca sqlca = ((db2diagnosable) t).getsqlca();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[colorpropertiespanel.toolbarbackgroundcolorbtnlabel=choose toolbar color]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"instructions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.sessioninfoprovider#getcopydestsession()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"toolbar color checkbox"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"object tree color checkbox"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.sessioninfoprovider#getcopysourcesession()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set object tree color button"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.plugin.defaultplugin#getcontributors()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set toolbar color button"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.sessioninfoprovider#getselecteddatabaseobjects()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set toolbar color panel"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.loadandcacheall=load all and cache all schemas]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"common mocks"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.sessioninfoprovider#setdestcopysession(net.sourceforge.squirrel_sql.client.session.isession)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"count how many rows this where matches"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do the delete and add the number of rows deleted to the count"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"int sqlstate = sqlca.getsqlstate();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"treat it like a time - no date component"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"look up the table in the editwherecols list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"names of the various methods we need to invoke"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"treat it like a timestamp"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set right\/left margin"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.defaulttablemodel#getcolumnname(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"either resulttabtoreplace or _stickytab must be not null here"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.cacheschemaindependentmetadata=cache schema independent meta data (catalogs, keywords, data types, global functions)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle stores time information in java.sql.types.date columns this tells oracle that we are only talking about the date part."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.defaulttablemodel#getvalueat(int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemapropertiespanel.deletecache=delete cache file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set up the hash table that contains the styles."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.table.defaulttablemodel#getrowcount()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we may have more than one statement in sql at this point"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"map of jar file urls containing lafs keyed by the laf class name."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private lafpreferences _prefs;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"accessible query"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypedate.typedate=date (sql type 91)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load info about any extra lafs supplied by the user."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user said not to read any of the data from the clob"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user said to read at least some of the data from the clob"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"clob exists, so try to read the data from it based on the user's directions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add name to comma-separated string for saving in properties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[preferencespanel.usecustomqtlabel=use custom query tokenizer]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have read in all properties."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"determine whether we read all there was in the clob or not"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see isqlentrypanel#addcaretlistener(caretlistener)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"skip blank lines"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"end while"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user said to read at least some of the data from the blob"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.lookandfeel=look and feel:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"skybluer"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"used by editing operations to reset the field to its original value."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the original value set in this cell by the table"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.tabledbmismatch=there may be a mismatch between the table and the db:\\n{0}\\ndo you wish to proceed with the deletes anyway?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cell related methods come next."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"plugin knows only how to script views and stored procedures on db2. so if it's not a db2 session we tell squirrel the plugin should not be used."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setbounds(new rectangle(600, 400));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportspositionedupdate()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.owner=owner]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"yes to all"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsdatadefinitionanddatamanipulationtransactions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"another object with different values"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"turn off auto refresh when we are shutting down."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[logpanel.titleunknown=last log entry (entry type: unknown)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"in case superclass modifies them."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[updatepreferencestab.hint=software update settings]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"adding 100 000 milliseconds to the orgtime of file f1"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mockdatabaseobjectinfo"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"install db2jccexceptionformatter iff we're using the jcc driver"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sga query"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"viewer.addinternalframelistener(_lis);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"since we are reading meta-data about the db, we should never see a blob. if we do, the contents are not interpretable by squirrel, so just tell the user that it is a blob and that it has data."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.util.ioptionpanel#getpanelcomponent() return the panel that will contain the prefernces ui. @return panel containing preferences."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"folder that stores look and feel jars."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"expect(session.getmessagehandler()).andreturn(messagehandler).anytimes();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jscrollpane sp = new jscrollpane(createdatatypespanel()); sp.setpreferredsize(new dimension(600, 450)); add(sp, gbc);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sunny day"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"try to save the selection. do not dispose of this panel if there is a problem"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"try to delete"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cache"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.event.isqlexecutionlistener#statementexecuting(java.lang.string)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cycled"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"name of directory to store extra lafs in for the user."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sybase 12.5 doesn't support quotation marks for identifiers, yet reports \" as the identifier quote string - go figure!"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.editabletable=editable table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add right-click menu to cell editor"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[generalsessionpropertiespanel.datatype2='general preferences' window under the 'data type controls' tab.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we return something valid even if there is a db error"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we could not identify which table to edit, just return"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the whole clob has been previously read in"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"init class under test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no underlying data, so cannot be changed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"causes npe in jdk 1.3.1 _contentstxt.settext(\"\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[versioncolumnstab.title=versions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverpropertiescontroller.hint=driverproperties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create mocks to be injected"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[driverpropertiescontroller.title=driverproperties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not a real database, but no driver should match this."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"creating a filter that catches files."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cannot edit something that we do not know anything about"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.progresscallback#currentlyloading(java.lang.string)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#owninsertsarevisible(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"class under test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"cancel"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[laf.themepack=theme pack:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle an error in conversion of text to object"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"item.seticon(null);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[viewlogssheet.error.setcaret=error positioning caret in log text component]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"now match the columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"hand the current text to the datatype object. datatype object is responsible for validating that the text makes sense for this type of object and converting it to the proper form for output. all errors are handled as ioexceptions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"hand file output stream to datatype object for export also, handle file io errors here so that datatype objects do not have to."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[popupeditableiopanel.errorwritingfile=there was an error while writing file {0}.\\nthe error was:\\n{1}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"count of available or free threads."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datatypeclob.typeclob=clob (sql type 2005)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schematablecboitem.schemaid.loadandcache=load and cache]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't use bit(1) for boolean as frontbase then reports it as binary type instead of bit."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"anticipate the same issue for varbinary as for binary and longvarbinary. registercolumntype(types.varbinary, 2147000000, \"bit varying($l)\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"field for size of text to read"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add listener to buttons"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"instance under test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no need to return if completion is identical"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"original object"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"short pseudocolumn"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"assuming that the columns in table match coldefs, bump the index to point to the next coldef entry"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"start the string for use in the prepared statment"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add a variable position for each of the columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test case for 1742033 (skipping quoting escape in table dropping)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace the last \",\" with \")\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[filemanager.confirm.filereplace={0} \\nalready exists. do you want to replace it?]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public string getdropindexsql(string tablename, string indexname, boolean cascade, databaseobjectqualifier qualifier, sqlgenerationpreferences prefs) { return null; }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setup values.length columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"another object that has the same values as the original"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"try as an alias"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.sqldatabasemetadata#getexportedkeysinfo(net.sourceforge.squirrel_sql.fw.sql.itableinfo)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see java.lang.comparable#compareto(java.lang.object)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[memorypanel.memsize={0} of {1} mb];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.itableinfo#setexportedkeys(net.sourceforge.squirrel_sql.fw.sql.foreignkeyinfo[])"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#othersupdatesarevisible(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#iscatalogatstart()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportscatalogsindatamanipulation()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_coldefs = hdgs;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.util.imessagehandler#showwarningmessage(java.lang.string)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#nullsaresortedlow()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"could also be a table name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsschemasindatamanipulation()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#allproceduresarecallable()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#locatorsupdatecopy()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#gettabletypes()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setup one row"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#insertsaredetected(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#doesmaxrowsizeincludeblobs()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"constructor tests"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#alltablesareselectable()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#nullsaresortedatend()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"paintnumwaitinggc(g);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#nullplusnonnullisnull()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#othersdeletesarevisible(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportscoresqlgrammar()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#storesuppercaseidentifiers()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#storeslowercaseidentifiers()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsbatchupdates()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"es mach nichts, wenn es die pid nicht g\ufffdbe. sie wird dann einfach oben nicht zugeordnet."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#setupdrivername(java.lang.string)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"properties set-able by the user"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ctor. @param msg message describing the error."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"insert succeeded"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#storesmixedcaseidentifiers()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#storesmixedcasequotedidentifiers()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"derby requires that columns be not-null before applying a unique constraint"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[windowmanager.error.bringtofront=error bringing internal frame to the front]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsaltertablewithaddcolumn()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"core artifacts are not displayed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(allows_editing_false == ret)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsansi92intermediatesql()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsaltertablewithdropcolumn()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsansi92entrylevelsql()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"= new querytree();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportscatalogsintabledefinitions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.alltables=all tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsconvert(int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jason: removed as part of patch void addsessionlistener(isessionlistener lis);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"process each individual query."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportscatalogsinprocedurecalls()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"some driver don't correctly support setmaxrows. in these cases use setmaxrows only if this is a select."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no decimal digits strongly suggests an integer of some type. since it's not real easy to tell what kind of int (int2, int4, int8) just make it an int8 (i.e. bigint)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportscatalogsinprivilegedefinitions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"numbers and such."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.spwithparams=stored procedure with parameter info: {call mysp(<in integer tid>)}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsconvert()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"start loading table\/column info about the current database."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"driver returns 8 for \"long byte\", yet it can store 2gb of data."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"values for how to use timestamps in where clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"data is not editable in popup"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"override the jtable method so that whenever something asks for the celleditor, we save a reference to that cell editor. our assumption is that the cell editor is only requested when it is about to be activated."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsextendedsqlgrammar()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsdatamanipulationtransactionsonly()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"display any warnings generated by the sql execution."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no sqlpanelapi (e.g. the object tree find editor) we assume no parser is necessary and thus provide a dummy impl."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportspositioneddelete()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportslikeescapeclause()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mssql.allrules=all rules]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.objectname=object name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"... now we have reached an output that is not a result. we now have to aks for this outputs update count."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the values from the \"use\" list and convert to sorted set"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string st_create_index_style_two = \"create $unique$ $storageoption$ index $indexname$ \" + \"on $tablename$ ( $columnname; separator=\\\",\\\"$ )\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removed for close session"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.objecttype=object type]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"define whether or not to use timestamp in internally generated where clauses, and if so what format to use."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"as a last resort, get the length of the longest value in the specified column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"yes || yes to all"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionpropertiespanel.limitrowscontents=contents - limit rows]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"loop through source records..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"use clone here to prevent the outside code from setting values on the array directly, which would throw off the index lookup based on header name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't fool around with manual commit later."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"isession[] activesessions = _plugin.getapplication().getsessionmanager().getactivesessions();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.invalidtitle=oracle invalid objects for: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsexpressionsinorderby()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"init mocks"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql driver gets unhappy when we use the same preparedstatement to bind null and non-null lob variables without clearing the parameters first."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracleexceptionformatter.positionlabel=position: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionpropertiespanel.showrowcount=show row count for tables (can slow application)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"icommand interface implementation"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsgroupbyunrelated()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if our current holder array for column chunks is still big enough to handle another column chunk"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\/ <summary> \/ the position of the cursor in the buffer when the \/ current column was started or the last time data \/ was moved out to the column buffer. \/ <\/summary>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter column clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"rename view $oldobjectname$ to $newobjectname$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter name clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter default clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"rename table $oldobjectname$ to $newobjectname$\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.sourcedirdoesnotexist=source directory {0} does not exist.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not needed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1968807: unsigned int problem with import file functionality if we are working with a signed integer, then it should be ok to store in a java integer which is always signed. however, if we are working with an unsigned integer type, java doesn't have this so use a long instead."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsgroupbybeyondselect()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsfullouterjoins()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do for an sql internal frame"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"paste action object tree types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can't paste from a session that is no longer around."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"md = new memorydiagnostics();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.help=help]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"copy action object tree types"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"row 2"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"creating a filter that catches \"*.tmp\" files."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.changelogs=change logs]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"filter the list of all db objects looking for things with the given name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[helpviewerwindow.error.loadwelcomefile=error retrieving help file url for {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add squirrel licence to the licence node."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter type clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sequence clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"strip local part of url."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop column clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"renderer for tree."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop index indexname [ cascade ];"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add squirrel help to the help node."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"first put the welcome to squirrel node."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setmodel(_model);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"when the user pastes on a table label which is located under a schema\/catalog, build the schema databaseobjectinfo."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ok, that didn't work - let's see if the table looks fully qualified. if so, we'll split the name from the schema\/catalog and try that."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionpropertiessheet.sessionproperties=- session properties]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"calculate the average time \/ item"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsnamedparameters()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"addtreeexpansionlistener(new myexpansionlistener());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"register so that we can display different tooltips depending which entry in tree mouse is over."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsmixedcasequotedidentifiers()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"filewrapper mockdownloadsdirectory = mockhelper.createmock(\"mockdownloadsdirectory\", filewrapper.class); expect(mockdownloadsdirectory.isdirectory()).andstubreturn(true); expect(mockfilewrapperfactory.create(mockupdatedirectory, updateutil.downloads_dir_name)); expectlastcall().andreturn(mockdownloadsdirectory);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"isession sourcesession = sessioninfoprov.getcopysourcesession(); isession destsession = sessioninfoprov.getcopydestsession();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_exportdriverschk.addactionlistener(_mediator); _exportaliaseschk.addactionlistener(_mediator); _exportprefsbtn.addactionlistener(new browsebuttonlistener(_exportprefstext)); _exportdriversbtn.addactionlistener(new browsebuttonlistener( _exportdriverstext)); _exportaliasesbtn.addactionlistener(new browsebuttonlistener(_exportaliasestext)); _exportprefschk.setselected(prefs.getexportpreferences()); _exportdriverschk.setselected(prefs.getexportdrivers()); _exportaliaseschk.setselected(prefs.getexportaliases()); _includeusernameschk.setselected(prefs.getincludeusernames()); _includepasswordschk.setselected(prefs.getincludepasswords()); _exportprefstext.settext(prefs.getpreferencesfilename()); _exportdriverstext.settext(prefs.getdriversfilename()); _exportaliasestext.settext(prefs.getaliasesfilename());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we could make this expectation more restrictive currently. however, we might have impls that have wildly different queries in the future. we don't want to sacrifice flexibility to use this test for a \"perceived\" benefit of mirroring the current implementations."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"final formlayout layout = new formlayout( \"3dlu, 75dlu:grow(1.0), 3dlu\", \"center:pref:grow(1.0), 8dlu, bottom:pref\"); final defaultformbuilder builder = new defaultformbuilder(layout); builder.setdefaultdialogborder(); builder.setleadingcolumnoffset(1); builder.append(buildmainpanel(session, ti)); builder.nextline(); builder.appendseparator(); builder.nextline(); builder.append(buildtoolbar()); return builder.getpanel();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"boolean isselected = _exportprefschk.isselected(); _exportprefstext.seteditable(isselected); _exportprefsbtn.setenabled(isselected); isselected = _exportdriverschk.isselected(); _exportdriverstext.seteditable(isselected); _exportdriversbtn.setenabled(isselected); isselected = _exportaliaseschk.isselected(); _exportaliasestext.seteditable(isselected); _exportaliasesbtn.setenabled(isselected); _includeusernameschk.setenabled(isselected); _includepasswordschk.setenabled(isselected);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"server\" \"port\" \"database file\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private javax.swing.jcombobox cbfieldtype; private javax.swing.jcheckbox chautoincrement; private javax.swing.jcheckbox chbinary; private javax.swing.jcheckbox chnotnull; private javax.swing.jcheckbox chunsigned; private javax.swing.jlabel lbattributes; private javax.swing.jlabel lbdefault; private javax.swing.jlabel lbfieldlength; private javax.swing.jlabel lbfieldname; private javax.swing.jlabel lbfieldtype; private javax.swing.jlabel lbfields; private javax.swing.jtextfield tffielddefault; private javax.swing.jtextfield tffieldlength; private javax.swing.jcombobox cbfieldname; private javax.swing.jbutton buttonupdate; private javax.swing.jbutton buttoncancel; private jdialog _dlog; private fielddetails fd; private int selectedindex; private dbutils dbutils; protected string sqlcommandroot = \"alter table \"; protected string sqlcommand = \"\"; end of variables declaration"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportslimitedouterjoins()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"ignore bad checksums\" \"ignore transaction in limbo\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"\"backup metadata only\" \"inhibit garbage collection\" \"save old style metadata descriptions\" \"transportable format\" \"backup external files as tables\" \"start backup\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"drop view viewname cascade;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setuptabbedpane((objecttreetabbedpane)it.next());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"db2 doesn't support adding an auto-increment column once the table has already been created. so this can simulate one using trigger on the table to access a sequence. found this idea at wikibooks: http: en.wikibooks.org\/wiki\/sql_dialects_reference\/data_structure_definition\/auto-increment_column create sequence sequence_name; create table table_name ( column_name int ); create trigger insert_trigger no cascade before insert on table_name referencing new as n for each row set n.column_name = nextval for sequence_name;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tell the rest of the world that the table has changed. the 'fire' method used here is very course - it says that the whole table has been changed when really only one row has been added. however, finer-grained methods did not seem to cause the right effect, so i'm using this one untill someone reports a problem with it. also, if either of these notifications (the actual model and the sortable model) are eliminated, it either throws an exception or does not update the gui. go figure. finally, the 'fire' on the _acutalmodel is triggered from this method rather than from inside the myjtable code because the add() method used to add a row is also used when loading the table with lots of rows, and in that case we do not want to generate events until all of the rows have been added, so the 'fire' cannot happen there."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we get here, then no data type object was found for this column. (should not get here because switch default returns null.)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i tried to use the length from the source database (postgresql) which yielded 8192 for this test. so the column def in fb was binary_column bit varying(8192). yet it gave me an exception that indicated truncation (string data right truncation???) so for now, go back to hard-coded maximal length. registercolumntype(types.binary, 2147000000,\"bit varying($l)\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.idatabaseobjectinfo#getsimplename()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsminimumsqlgrammar()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ok, maybe catalog was really a schema instead."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[i18n.editorcommand=editor command]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"must not qualify the new table name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.error.deletetempfile=couldn't delete temporary dumpsession file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[codecompletion.beingloaded=code competion infomation is still being loaded.\\ntry again later.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"has to be done here e.g. when \"close all sessions\" menu was used."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.updateproblem=there was a problem reported during the update. the db message was:\\n{0}\\nthis may or may not be serious depending on the above message.\\nthe data was probably not changed in the database.\\nyou may need to refresh the table to get an accurate view of the current data.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlval.info=this plugin uses version 1.0 of the sql validator web service developed by mimersql http: sqlvalidator.mimer.com. the sql statement is stored anonymously to be used by the iso sql standards committee.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"postgres pg_proc table doesn't appear to have schema. i couldn't locate another table to join with to get this info either."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[progressbardialog.error.getdialog=getdialog: unable to invokeandwait for dialog]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"todo: check to be sure that the source and destination schemas are different. abort if they are the same and inform the user."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter view oldtablename rename to newtablename; rename oldtablename to newtablename;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"how many items left"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column 0 row 1"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removed for the tools popup"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is for brute force detection of blob\/clob lengths if necessary"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean _showlinenumbers = false;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editextras.errorquotesql=error processing quote sql command: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsmultipleresultsets()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsmultipleopenresults()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[hqlpanelcontroller.hqltosqlsuccess=generated {0} sql(s) in {1} milliseconds.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add squirrel change log to the licence node."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"selectfetchsizelabel.sethorizontalalignment(jlabel.left);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"view clauses"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check for digit"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsnonnullablecolumns()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsouterjoins()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't try to find it if we have already created it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for npe in dbutil.getforeignkeysql when the tableinfo returns null for getimportedkeys"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"case shouldn't be changed in this test because the context is the source database."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsopenstatementsacrossrollback()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsopencursorsacrossrollback()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"generate contents file."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add plugin help, licence and change log documents to the tree."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"licence document."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"size non-tool child window."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"help document."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"faq."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"change log."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"final string doctitle = (string)_doctitles.get(i);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsopenstatementsacrosscommit()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"extcaret highlighting options"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"*must* be done in the gui thread"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"probably shutting down."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql shows databases as \"catalogs\" not \"schemas\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no new here, method is called very often."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"spring-injected dependencies"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"assert is flawed because canwrite does not work. asserttrue(\"file f2 is not set to readonly.\" , !f2.canwrite());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"attempt to write to a file that has previously been written to. and is now set to read only."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"assert is flawed because canwrite does not work. asserttrue(\"file f1 is not set to readonly.\" , !f1.canwrite());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression test for harmony-3207 current directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"convert each string into key+hashmap and fill it into the data"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mqts only ever have one sql statement"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"timesten allows a maximum fetch size of 128."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.info.executeupdate=executeupdate: running sql:\\n '{0}']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get ascii stream from rs"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"corresponding to columns"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_knowntables is just a cache to prevent creating a new string each time"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"read rs input stream write to file output stream"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see javax.swing.event.undoableeditlistener#undoableedithappened(javax.swing.event.undoableeditevent)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"using a thread for this gets rid of most of the \"white flash\"."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlpanelapi.untitledlabel=untitled]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump drivers"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"super.iscelleditable(row, column);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing - this can happen when the table doesn't exist"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionpropertiessheet.close=close]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpapplicationcommand.error.dumpingaliases=error dumping aliases]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"mysql uses catalogs and not schemas"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump meta data."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump driver information."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump session properties."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump general connection info."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump data types."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump schemas."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dump catalogs."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"testdecimalcoltype(sourcename, destname); testdoublecoltype(sourcename, destname); testfloatcoltype(sourcename, destname);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add all panels to the tabbed panel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if we failed to bind the blob in a file, try memory."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportssubqueriesincomparisons()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load views with catalog = doi.getcatalog() and schema = doi.getschema()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"go thru all plugins attached to this session asking for panels."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionpropertiessheet.ok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"fallback to the old method, going directly to the database instead of using schemainfo, since schemainfo didn't have it."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_usedriverpropschk.setselected(_alias.getusedriverproperties()); _driverpropsbtn.setenabled(_usedriverpropschk.isselected()); this is mainly for long urls that cannot be fully displayed in the label."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user.home\/.squirrel-sql\/plugins\/dbcopy\/scripts"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.info.bindclobfile=bindclobvarinfile: opening temp file '{0}']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsresultsetholdability(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for tourl with a file."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no invalid columns in this tablemodel implementation"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for tourl when the file is a directory."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"implements actionlistener"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make it transparent"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see iclientsessionaction#setsession(isession)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"roles"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tables and views"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[deletetablescommand.loadingprefix=analyzing table:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"end gwg format check code"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.error.bindblobfailure=bindblobvar: failed to bind blob using filesystem - attempting to bind blob using memory]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get all the selected object names and place in a comma separated list."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsresultsettype(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"remove trailing \", \"."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"stop refresh if it is running."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.error.unknowntype=unknown java sql column type: '{0}']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"can't delete records in snapshots (oracle materialized views)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[viewlogssheet.error.processinglogfile=error occured processing log file]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[viewlogssheet.info.nulllogfile=null log file name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"position to the start of the last line in log."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column_name"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.info.bindblobmem=bindblobvarinmemory: binding '{0}' bytes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsstatementpooling()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.info.bindblobfile=bindblobvarinfile: opening temp file '{0}']"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsschemasinprivilegedefinitions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportssavepoints()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsschemasinprocedurecalls()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"close the proper tab by clicking the button addactionlistener(this);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we don't want to update ui for this button"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"paint the cross"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dbutil.info.bindcloblength=bindclobvarinfile: writing '{0}' bytes.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"group all columns by index"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsunionall()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put this into the data array"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportssubqueriesinexists()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportsunion()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlbookmark.btnok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportstransactionisolationlevel(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportssubqueriesinquantifieds()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"gwg format check code follows..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#supportstablecorrelationnames()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the user wants the primary key copied and the source session isn't axion (axion throws sqlexception for getprimarykeys())"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#useslocalfiles()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see com.mockobjects.sql.mockdatabasemetadata#updatesaredetected(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.mainpanel.imainpaneltab#gettitle()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.mainpanel.imainpaneltab#gethint()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.client.session.mainpanel.imainpaneltab#getcomponent()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"note: sessioninternalframe and sqlinternalframe should never provide a toolspopupaccessor. their tools popup ist configured in the syntaxplugin class with standard actions from actioncollection."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"without this the split moves when the window is resized."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":", ihasname"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"user.home\/.squirrel-sql\/plugins"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we are at the last one in the list"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean _currentlinehighlighting = true;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"append the new tables to the new array, starting at the end of the original"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set dialog"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"handle squirrel-sql.jar and documentation archive carefully - they live at the top"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"treenode interface"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.cardinality=cardinality]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.bytes=bytes]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i8n[syntax.abrevnewlinenote=use \\n in corrections for line break. note: bookmarks are more powerful than abreviations.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_logcontentstxt.seteditable(false);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"only reformat sqlwarning:"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemainfo.loadingschemas=loading schemas]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[dumpsessionaction.success=session successfuly dumped to: {0}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemainfo.loadingfunctions=loading functions]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"process the listeners last to first, notifying those that are interested in this event"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jscrollpane jscrollpane1 = new jscrollpane();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"put the map into the tables db with the table name as the key"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"extra keywords that this dbms supports."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#getstringfunctions()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"types of the columns."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwherecolspanel.limitcolsincell=limit columns in cell edit]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.hibernatedialect#getmaxfunction()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.hibernatedialect#getprecisiondigits(int, int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"replace the next question mark with nextval"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"override common behavior to use drop column style two"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.objectname=object name]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the math.min is for the caret at the end of the text"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.sql.isqldatabasemetadata#supportssavepoints()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"no go through the parse sql and build the final sql replacing parameters with values is goes."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see net.sourceforge.squirrel_sql.fw.datasetviewer.idataset#get(int)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"result = false;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"listener.setshowsqlstatements(true);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean _blockcaretenabled = false;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"sybase ase specific code to read view definitions."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[explainplanexecuter.options=options]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"tree"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":", true, true, true, true);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.explainplan=explain plan]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[whereclausepanel.valuelabel=value]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"skip the artifact if it is identical to the one that is already installed"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"throws ioexception"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.seconds2=(seconds)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"open the session."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean _showendoflinemarkers = false;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"time to wait between checks that the event dispatch thread isn't hung."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the user has said to not use this column, then skip it"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[prelaunchhelperimpl.restorefailedmessage=restore from backup failed. re-installation may be required."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"everything seems to have worked ok"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"f is a module"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the sessionmanager is global to squirrel. if we don't remove the listeners the session won't get garbeage collected."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"open connection to the webservice."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"[exec sql] create view view_name [(column_name {, column_name})] as select_stmt [with check option]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1 = interactive, 0 = batch"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for touri with a file name with illegal chars."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"@see isqlentrypanel#removecaretlistener(caretlistener)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that the proper type of object is selected in the object tree before allowing the sql filter to be activated."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"empty body"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"-- edit"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"select"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load tables with catalog = doi.getcatalog() and schema = doi.getschema()"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load procedures with catalog = null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[informixplugin.showviewsource=show view source]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"attempt to write to a file that is setreadonly."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dbcopyglobalpreferencestab tab = new dbcopyglobalpreferencestab(); return new iglobalpreferencespanel[] { tab };"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"left"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private jtabbedpane _tabbedresultspanel;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private list _availabletabs = new arraylist();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private arraylist _usedtabs = new arraylist();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.rowmatched=\\n row {0} matched {1} rows in db]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.error.rownotmatch=\\n row {0} did not match any row in db]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.sqltext=sql text]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"operation column increased"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"diffsourcesession = null; setpastemenuenabled(false); preferencesmanager.unload();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"uses menu.dbdiff.* in dbdiff.properties"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"interface sessioninfoprovider implementation"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[whereclausepanel.hint=where clause for the selected table]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"connect."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't care to see tons of debug from coltypemapper"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean _blinkcaret = true;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"load procedures with schema = null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.statuslabel=status:]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.currentsqllabel={0} of {1} - {2}]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aliasinternalframe.error.sessioncreation=test button has created a session, this is a programming error]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jdbc:firebirdsql:[ host[:port]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"testbitcoltype(sourcename, destname);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"have we already dumped a stack trace for the current event dispatch?"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column is in table 1, but not table 2"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[datasetupdateabletablemodelimpl.info.deletecancelled=delete canceled at user request.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"assume objs[0] is a schema\/catalog"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[diffexecutor.nodiffsmessage=no differences were detected]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"public file getdebuglogfile() { return new file(_usersettingsdir + file.separator + \"squirrel-sql-debug.log\"); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_tree.expandpath(new treepath(newfolder.getpath()));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"setcolumns error conditions"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"scale the page so the width fits..."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sessionscript.save=save]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"------------------------------------- helper methods"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[fileeditordroptargetlistener.onefiledropmessage=only one file may be dropped onto the editor at a time.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"test for touri when the file is a directory."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final class myinternalframelistener extends internalframeadapter"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this event does not always hit the righr editor !? that's why we can't use _sqlentrypanelidentifier"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"removeviewer((htmlviewersheet)evt.getinternalframe());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_tb.add(actions.get(showloadeddriversonlyaction.class));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"super.internalframeclosed(evt);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table <table> add constraint <constraint>"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aliaswindowfactory.error.copyalias=error occured copying the alias]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"regression for harmony-2146"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"current version of the validator webservice cannot handle anything greater than 30."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create sequence [if not exists] newsequencename [start with long] [increment by long] [cache long]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"write to a file."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if the column is a text column, and there aren't single quotes around the value, put them there."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"table exists in source db but not dest"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"clear any previous plan"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[aliaswindowfactory.schemapropscopiedwarning=warning: your target alias contains database specific schema properties copied from the source alias.\\n schema loading of the target alias may be errorneous. please check your target alias's schema properties.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"alter table foo add constraint foocon unique (myid)"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the header for the scrollable part which presents column differences"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_tabbedresultspanel = uifactory.getinstance().createtabbedpane();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"add menu."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get size of document width in pixels height in pixels height of printer page width of printer page"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"shift graphic to line up with beginning of print-imageable region"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"shift graphic to line up with beginning of next page to print"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"make sure not print empty pages"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.userdetails=details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlpanel.limitrowscheckbox.hint=limit rows: ]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"these two columns will be the only ones in the pktest table. they will start out being nullable, and we will test that the dialect correctly converts them to non-null then applies the pk constraint to them. this test shall not be run against any database dialect that claims not to support changing the nullability of a column."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set focus to the sql entry panel."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string blink_caret = \"blinkcaret\"; string block_caret_enabled = \"blockcaretenabled\"; string bracket_highlighting = \"brackethighlighting\"; string bracket_highlight_color = \"brackethighlightcolor\"; string caret_color = \"caretcolor\";"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"######################################################################## ########## events ######################################################################## ------------------------------------------------------------------------"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"dbstatus -> `status=online, updateability=read_write, useraccess=multi_user, recovery=simple, version=539, collation=sql_latin1_general_cp1_ci_as, sqlsortorder=52, istornpagedetectionenabled, isautocreatestatistic'"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"don't keep reporting the same hang every 100 ms."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"after this it can't be stopped anymore!"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"throw new illegalstateexception(\"wrong constructor\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[schemastab.hint=show all the schemas]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jdbc spec says that bit refers to a boolean column - i.e. a single binary digit with value either \"0\" or \"1\". also the same spec encourages use of getboolean\/setboolean. however, the sql-92 standard clearly states that the bit type is a bit string with length >= 0. so for sql-92 compliant databases (like postgresql) the jdbc spec's support for bit is at best broken and unusable. still, we do what the jdbc spec suggests as that is all that we can do."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string sourceschema = null; mysql uses catalogs instead of schemas"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"oracle can only store decimal type numbers. since regular non-decimal numbers appear as \"decimal\", oracle's decimal numbers can be rather large compared to other databases (precision up to 38). other databases can only handle this large precision in bigint fields, not decimal, so try to figure out if oracle is really storing a bigint and claiming it is a decimal. if so, convert the type to bigint before going any further."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"rows \"12dlu, 6dlu, 12dlu, 6dlu, 80dlu:grow, 6dlu, 12dlu, 6dlu, 80dlu:grow, 6dlu, pref\""}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"pid 25493, lock examples: 5 [\" \/db1\/shd_data_4_3\/\"]user.ygwabvbposkorrd(1) 25493 1d, 25499 x e 5 [\" \/db1\/shd_data_4_3\/\"]user.ygwabvbposkorrd(1) 25493 1d, 25499,25506 x,x e,e 5 [\" \/db1\/shd_data_4_3\/\"]user.ygwabvbposkorrd(1) 25493 1d, 25499,25506,25508 x,x,x e,e,e oder 6 [\" d:\\db\\shd_data_lov\\\"]user.wlagerartikeld(76) 5544 1d, 7 [\" d:\\db\\shd_data_lov\\\"]user.wlagerartikeld(77) 5544 1d, 3804 s e 8 [\" d:\\db\\shd_data_lov\\\"]user.wvorgangd(24) 5544 1d, oder fuer kein lock: 3 [\" f:\\db\\shd_data\\\"]user.ygwatestd(989) 3792 1d, 4 [\" f:\\db\\shd_data\\\"]user.ygwatestd(990) 3792 1d, 5 [\" f:\\db\\shd_data\\\"]user.ygwatestd(991) 3792 1d, 6 [\" f:\\db\\shd_data\\\"]user.ygwatestd(992) 3792 1d, 7 [\" f:\\db\\shd_data\\\"]user.ygwatestd(993) 3792 1d, 8 [\" f:\\db\\shd_data\\\"]user.ygwatestd(994) 3792 1d, 9 [\" f:\\db\\shd_data\\\"]user.ygwatestd(995) 3792 1d,"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if the string is a file uri."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"if truncate was attempted and not supported, then try delete. if on the other hand delete was attempted, just throw the sqlexception that resulted from the delete."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"final applicationfiles appfiles = new applicationfiles(); _exportprefstext.settext(getfilename(here, appfiles.getuserpreferencesfile().getname())); _exportdriverstext.settext(getfilename(here, appfiles.getdatabasedriversfile().getname())); _exportaliasestext.settext(getfilename(here, appfiles.getdatabasealiasesfile().getname()));"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"class to test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"for tables that have a lot of columns, the user may have limited the set of columns to use in the where clause, so see if there is a table of col names"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"on unix hidden files are marked with a \".\" at the beginning of the file name."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[editwhercolssheet.ok=ok]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"result.setautoresizemode(javax.swing.jtable.auto_resize_off);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.displayuserdetails=display user details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"1757076 (date column seen as timestamp, update in editable mode fails) we should always return false for this, when the user hasn't specified"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jscrollpane1.setcorner(jscrollpane.upper_left_corner, corner);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"set the url for subsequent calls this is to allow for load balancing to a server on the other side of the world"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"not required."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create filename filter and attach to directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"corner.createdefaultcolumnsfrommodel();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"jscrollpane1.setrowheaderview(_rowheader);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"_tableheader.adoptallcolwidths(true); _tableheader.initcolwidths();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"(\"+extractor.getclass().getsimplename()+\"):the sql generated by \" + referencedialect.getdisplayname() + \" works !!!\");"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"separators need preferred size in gridbaglayout"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"corner.validate();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we are playing some games with the lexer for efficiency. we could just create a new lexer each time here, but instead, we will just reset it so that it thinks it is starting at the beginning of the document but reporting a funny start colorstartpos. reseting the lexer causes the close() method on the reader to be called but because the close() method has no effect on the documentreader, we can do this."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"m_session.getsqlpanelapi(m_plugin).addtosqlentryareamenu(actsql);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"string sql = m_session.getsqlpanelapi(m_plugin).getsqlscripttobeexecuted();"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this is the constraint that is dropped in drop constraint test"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the first time that catalogs are asked for, return just one"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the ostermiller sqllexer crashes with an arrayindexoutofboundsexception if the char is greater then 255. so we prevent the char from being greater. this is surely not a proper unicode treatment but it doesn't seem to do no harm and it keeps the sqllexer working."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we have to look for the modelindex because of the row number column"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"this formula can be found in the api doc for methode relocate() of class org.netbeans.editor.syntax. see the description of the last parameter 'stopposition'. relocate() is always called before the parsetocken() method of this class."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"get the directory"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"create checkbox for enabling auto refresh i18n[oracle.enableautorefresh=enable auto refresh]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[oracle.secons3=(seconds)]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private static ilogger s_log = loggercontroller.createlogger(sessionexpander.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final static ilogger s_log = loggercontroller.createlogger(altercolumnspanelbuilder.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"selectedindex = cbfieldname.getselectedindex(); defaultcomboboxmodel combomodel = (defaultcomboboxmodel) cbfieldname.getmodel(); fielddetails fd = (fielddetails) combomodel.getelementat(selectedindex); cbfieldname.setselecteditem(fd.getfieldname()); cbfieldtype.setselecteditem(fd.getfieldtype()); tffielddefault.settext(fd.getdefault()); chautoincrement.setselected(fd.isautoincrement()); chnotnull.setselected(fd.isnotnull());"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.displaystatus=(mysql) display database status]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.status=mysql status]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysql.displayopentables=(mysql) display open tables]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private void closedialog(java.awt.event.windowevent evt) { _dlog.setvisible(false); _dlog.dispose(); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final static ilogger s_log = loggercontroller.createlogger(databasestatustab.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mysqltriggerdetailstab.hint=display trigger details]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private final static ilogger s_log = loggercontroller.createlogger(processestab.class);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"we got to the end of the script without finding a proc separator. just add it as if we had."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"action performed for the cancel button private void buttoncancelactionperformed(java.awt.event.actionevent evt) { _dlog.setvisible(false); _dlog.dispose(); }"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private object[] fields;"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"`clustered, unique, primary key located on primary'"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"one column for the object name, another column for the object's owner."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"column_name type computed length prec scale nullable trimtrailingblanks fixedlennullinsource collation location char no 2 yes no yes latin1_general_ci_as totalbilledamnt money no 8 19 4 yes (n\/a) (n\/a) null"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"private utility constructor"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"parameters for call."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"component glue = box.createglue(); c.gridx = 1; c.gridy = 10; gridbag.setconstraints(glue, c); panel.add(glue);"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[sqlresultexecuterpanel.rowsupdated={0} row(s) updated]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"i18n[mmsql.catalogerr=the dbname of the session's url is set to '{0}', but the session's current catalog is set to '{1}'.\\n\\nsql server doesn't support this in most cases. this is a current issue.]"}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"the constructor above sets this from resources, but we'll override it with the name of the database file and its size."}
{"projectname":"sql12","classification":"WITHOUT_CLASSIFICATION","comment":"because of the cross-catalog problem, let's not invoke this if the current catalog isn't equal to the catalog specified in the url."}
