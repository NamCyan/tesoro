{"projectname":"argouml","classification":"DEFECT","comment":"todo: this brute force approach of updating listeners on each and every event, without checking the event type or any other information is going to cause lots of invalidelementexceptions in subclasses implementations of updatelisteners (and they won't have the event information to make their own decisions)"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: the above statement also refreshes when we are not shown (to be verified) - hence not entirely correct."}
{"projectname":"argouml","classification":"DEFECT","comment":"class to display graphics for a uml synchstate in a diagram. <p> todo: if the font increases, the circle should grow, too. @author pepargouml@yahoo.es"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: if this is an ordered list, then you have to add in the right location!"}
{"projectname":"argouml","classification":"DEFECT","comment":"rank the nodes depending on their level (position in hierarchy) and set their weight to achieve a proper node-sequence for the layout. rows exceeding the maximum row width are split, if standalone nodes are available. <p> weight the other nodes to determine their columns. <p> todo: weighting doesn't appear to be working as intended because multiple groups of children\/specializations get intermixed in name order rather than being grouped by their parent\/generalization. - tfm - 20070314"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this is a tagged value name which will never trigger an event"}
{"projectname":"argouml","classification":"DEFECT","comment":"tests copyhelper without using stereotypes. <p> the test is using the tree of objects: <pre> model \/ \\ p1 p2 \/ \\ class_ nestedpackage \\ interface_ \\ attribute <\/pre> todo: this test doesn't match the mdr implementation because it expects the contents of a namespace to be copied. it is disabled until it can be fixed to run with both mdr and euml. - tfm 20070820 @author bogdan"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: correctly implement next function in the model subsystem for issue 1942:"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: the code implementing this method is from 2003 (see issue 2171) mechanically integrated by tfmorris in may 2007. needs to be reviewed\/updated. @author decki,endi,yayan, politechnic of bandung. computer departement method for changing text of message"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: why does the next part not work?"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: we don't really want this to be filled, but if it's not then the user can't double click in the compartment to add a new literal apparently gef thinks unfilled figs are only selectable by border setfilled(false);"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: we can't have a global \"current\" language notationproviderfactory2.setcurrentlanguage(newlanguage);"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: we should warn the user we have removed something - tfm"}
{"projectname":"argouml","classification":"DEFECT","comment":"if we are not visible most likely we're being deleted. todo: this indicates a more fundamental problem that should be investigated - tfm - 20061230"}
{"projectname":"argouml","classification":"DEFECT","comment":"fixme: the following throws: org.argouml.model.invalidelementexception: javax.jmi.reflect.invalidobjectexception: object with mofid 127-0-1-1-(...)000e75 no longer exists. applicabletagdefs = tagdefcbmodel.getapplicabletagdefinitions(aclass); assertnotnull(\"tag definition wasn't found in return value of \" + \"tagdefcbmodel.getapplicabletagdefinitions(aclass), \" + \"after loading the project.\", teststereotypeutility.findmodelelementnamed( profilemother.tag_definition_name_td, applicabletagdefs));"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo i18n: gef needs to pass us back the description of what is being done."}
{"projectname":"argouml","classification":"DEFECT","comment":"make it stretch vertically todo: the curbody must notify modification"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: is this next line safe? what happens if there is just one comment edge or a comment edge and a single message?"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: considering all delete events to be valid like below is going to cause lots of unecessary work and some problems"}
{"projectname":"argouml","classification":"DEFECT","comment":"else if the y coordinate is outside of the classifier role, we fix the y in the max y of the classifier role. fixme: we should increase the height of the classifier role, don't???"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this appears to expect that the uml 1.3 tag name will appear as a property name in an event, but with the uml 1.4 switch to tagdefinitions, this won't work"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: not in uml 2"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: removed from uml2 $non-nls-1$"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: only occurrence of isconcurrent in uml 2.1.1 is in index it's not on the page that is indexed"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this works for 90 degree angles, but is suboptimal for other angles. it should reflect the angle, rather than just using a negative offset along the same vector"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: map uml2 names to uml1.x names $non-nls-1$ $non-nls-1$"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: except this won't work because the names are different which will cause a test in checkumlmodelhelper to fail remap.put(\"core:permission\", \"core:packageimport\");"}
{"projectname":"argouml","classification":"DEFECT","comment":"this doesn't work in uml2: both owner and property needed!"}
{"projectname":"argouml","classification":"DEFECT","comment":"fixme: fails here. the current behavior appears intentional (ie the test is wrong) - tfm assertnull(\"the profile stereotype named \\\"\" + profilemother.stereotype_name_st + \"\\\" shouldn't be found.\", findmodelelementfromnamespace( stereotypeutility.getavailablestereotypes(aclass), profilemother.stereotype_name_st, profilemodel));"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this looks backwards. left over from issue 2034?"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this doesn't work, but should collection elements = model.getfacade().getrootelements(); model.getumlhelper().deletecollection(elements); elements = model.getfacade().getrootelements(); asserttrue(\"failed to create clean environment\", elements.isempty());"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: issue 6144. it is proposed to allow any paclage to return as a potential namespace. commenting out until this is reviewed and clearly accepted by all."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: something might go wrong during processing. we don't really want to create the model element until the user releases the mouse in the place expected."}
{"projectname":"argouml","classification":"DEFECT","comment":"strange, but the link.getconnection() returns a collection, not a list! this is a bug, compared to the uml standard (imho, mvw). hence, the linkend is added to the end instead..."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: synchronized is required here as there can be some concurrent modification problems when drawing a call message and having that automatically draw the reply. maybe fixing the todo below will resolve this and the synch can go."}
{"projectname":"argouml","classification":"DEFECT","comment":"these next lines for the case that the current namespace is not a valid one... which of course should not happen, but it does - see the project attached to issue 3772."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: in uml2.x event has no parameters. todo: treat objectflowstate (this doesn't exist anymore in uml2) and classifier"}
{"projectname":"argouml","classification":"DEFECT","comment":"appears to be gone from uml 2.x"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this does not work - no event arrives."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this is only checking immediate siblings when it needs to be checking all imported elements both here and by our parents and also taking into account visibility"}
{"projectname":"argouml","classification":"DEFECT","comment":"this does not work (anymore\/yet?), since we never have a figtext here:"}
{"projectname":"argouml","classification":"DEFECT","comment":"utility function to localize the given string with help text, and show it in the status bar of the argouml window. this function is used in favour of the inline call to enable later improvements; e.g. it would be possible to show a help-balloon. <p> todo: work this out. one matter to possibly improve: show multiple lines. @param s the given string to be localized and shown"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: monitor is getting dismissed before layout is complete"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: we currently don't support per-fig settings for most stuff, so we can just use the defaults that we were given. settings = new diagramsettings(rendersettings);"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: not yet working for uml2"}
{"projectname":"argouml","classification":"DEFECT","comment":"this triggers some warnings (in logs) because some elements are created without an owner (and eresource is null) todo: fix this the warning log (if we would not add the eobject to a resource) would looks like this: \"...warn [awt-eventqueue-0] encountered deleted object during delete of...\""}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: shouldn't we throw an exception here?!?!"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: algorithm is n^2 in number of nodes"}
{"projectname":"argouml","classification":"DEFECT","comment":"update attached node figures todo: presumably this should only happen on a add or remove event"}
{"projectname":"argouml","classification":"DEFECT","comment":"fixme: depends on internal behavior of xmireaderimpl. needed for solving issue 5017."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: allow adding models to a diagram - issue 4172."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: update the old and new node above this! this is issue 5079. the old and new uml namespaces are in the event, but how do we know which nodes to refresh? and how to refresh? not necessarily the namespaces, depending on the perspective."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this should only be building list up to 'index'"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: the following can be removed if selectall gets fixed"}
{"projectname":"argouml","classification":"DEFECT","comment":"fixme: boundary condition at end of image for non-integral multiples of buffer_height"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: we can't have a global \"current\" language notationproviderfactory2.setcurrentlanguage(oldlanguage);"}
{"projectname":"argouml","classification":"DEFECT","comment":"xxx this seems to be a bug of the parser, it always requires a context"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: use model.getmodelmanagementhelper().getpathlist(modelelement); todo: this will fail with nested models"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: we should have all the information that is required in the notationsettings object"}
{"projectname":"argouml","classification":"DEFECT","comment":"parse a transition description line of the form:<pre> \"event-signature [guard-condition] \/ action-expression\". <\/pre> a \";\" is not interpreted as having any special meaning. <p> the \"event-signature\" may be one of the 4 formats:<ul> <li> changeevent: \"when(condition)\" <li> timeevent: \"after(duration)\" <li> callevent: \"a(parameter-list)\". <li> signalevent: any string without (). <\/ul> remark: the uml standard does not make a distinction between the syntax of a callevent and signalevent: both may have parameters between (). for simplicity and user-friendliness, we chose for this distinction. if a user wants parameters for a signalevent, then he may add them in the properties panels, but not on the diagram. <p> an alternative solution would be to create a callevent by default, and when editing an existing event, do not change the type.<p> todo: this function fails when the event-signature contains a \"[\" or a \"\/\". see issue 5983 for other cases that were a problem in the past. @param trans the transition object to which this string applies @param s the string to be parsed @return the transition object @throws parseexception when no matching [] are found"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this whole block can be deleted when issue 6266 is resolved"}
{"projectname":"argouml","classification":"DEFECT","comment":"dirty fix for issue 1758 (needs to be amended when we start supporting parameters):"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this does not work! (mvw) model.getfacade().setbody(expr,guard); model.getfacade().setexpression(g,expr);"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: in this case, the properties panel is not updated with the changed expression!"}
{"projectname":"argouml","classification":"DEFECT","comment":"warning: the outputstream version of this doesn't work! - tfm"}
{"projectname":"argouml","classification":"DEFECT","comment":"warning: the gef implementation of the outputstream version of this method doesn't work - tfm - 20070531"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo do tests for allinstances (8.5.11), even though it is not yet supported"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: not implemented by euml"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this only works if the item is visible (all its parents are expanded) getexpandeddescendants, makevisible"}
{"projectname":"argouml","classification":"DEFECT","comment":"this will have problems if the smallest possible data segment is smaller than the size of the buffer needed for regex matching"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: why is this throwing a generic runtime exception?!?!"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this exception will be thrown during autoscrolling when the edge of the canvas is reached causing either the width or height to be \"adjusted\" to a negative value"}
{"projectname":"argouml","classification":"DEFECT","comment":"disabled since it gives various problems: e.g. the toolbar icons get too wide. also the default does not give the new java 5.0 looks. component tree = projectbrowser.getinstance(); swingutilities.updatecomponenttreeui(swingutilities.getrootpane(tree));"}
{"projectname":"argouml","classification":"DEFECT","comment":"if this is a feature get the owner of that feature todo: does anything actually make use of this? it can cause unexpected behaviour."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this error needs to be reported!"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: we should be giving the user more direct feedback"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this should be using internalgetallrealizedinterfaces()"}
{"projectname":"argouml","classification":"DEFECT","comment":"many many of these events .. this slows things down:"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this doesn't perform well enough with large models to have it enabled by default. if the performance can't be improved, perhaps we can introduce a manual \"find in explorer tree\" action. selectall(targets);"}
{"projectname":"argouml","classification":"DEFECT","comment":"really ought to have a criticexception to throw here."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this is never executed as ludos di work was never finished."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: when the attribute isn't in the diagram , for exemple: select attribut by explorer then, the refresh isn't auto: we had to click !!"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this is probably an undesirable side effect unless the user confirms it. placing an element on a second diagram is going to potentially change its namespace. - tfm 20061208"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: the below is not strictly correct, but should cover the case we deal with. using a real xml parser would be better. look for xml document has just a single root element"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: assumes public todo: this is probably an undesirable side effect unless the user confirms it. placing an element on a second diagram is going to potentially change its namespace. - tfm 20061208"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: uncomment the following to get the failure. assertloadmodel(issue5946_base_dir + \"zipped-uml14\" + \"\/andromda-profile-datatype\/3.3\/andromda-profile-datatype-3.3.xml.zip\", null, \"testreadcompressedandromdaprofilefileissue5946\");"}
{"projectname":"argouml","classification":"DEFECT","comment":"status as of nov. 2008 - figs created, property panels exist, more work required on explorer and assumptions about models not being nested - tfm"}
{"projectname":"argouml","classification":"DEFECT","comment":"if we have anything or multiple elements selected, we don't do anything todo: we need to support multiple selection. see issue 2552: http: argouml.tigris.org\/issues\/show_bug.cgi?id=2552"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: make setbounds, calcbounds and updatebounds consistent"}
{"projectname":"argouml","classification":"DEFECT","comment":"set the child components to the heights in the array list calculating the height of any proportional component on the fly. fixme - this assumes that the jlabel and the component it labels have been added to the parent component consecutively."}
{"projectname":"argouml","classification":"DEFECT","comment":"a mode to interpret user input while creating a permission edge. the permission can connect any model elements including those represented by edges as well as nodes. <p> todo: in uml 2.x, permission becomes packageimport and the class hierarchy has changed so that it is no longer a subtype of dependency, so this may need to be refactored to work correctly."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: the size of text figs, which is what we care about most, isn't computed correctly by gef. if we got ambitious, we could recompute a proper size ourselves."}
{"projectname":"argouml","classification":"DEFECT","comment":"a critic to detect when a classifier has to many operations). <p> todo: exclude getter and setter operations from count"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: why isn't this calculation for location working?"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this code doesn't look like it will get reached because any abstraction\/realization is going to take the isaabstraction leg of the if before it gets to this more general case. - tfm 20080508"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: this should probably only update the project when the user presses return or focus is lost"}
{"projectname":"argouml","classification":"DEFECT","comment":"the next line does not work:"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: if actioncopy is no longer a singleton, how shall this work?"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: huge side effect. hoist out of parse - tfm let's load the project"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: support navigability. the code below causes and exception in figassociationendannotation."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: we don't really want to do the following, but i'm not sure what depends on it - tfm - 20070725"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: why is this clearing the name?!?! - tfm"}
{"projectname":"argouml","classification":"DEFECT","comment":"offset in x & y for depth perspective lines of cube. todo: this is the same value as the member 'd'in {@link org.tigris.gef.presentation.figcube}, but there is nothing enforcing that correspondence. things will probably break if they don't match."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: the code implementing this method is from 2003 (see issue 2171) mechanically integrated by tfmorris in may 2007. needs to be reviewed\/updated. @author decki,endi,yayan, politechnic of bandung. computer departement method for changing text of message @param newowner @param parameter"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: make the tree refresh and expand really work in all cases!"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: the code implementing this method is from 2003 (see issue 2171) mechanically integrated by tfmorris in may 2007. needs to be reviewed\/updated. @author decki,endi,yayan, politechnic of bandung. computer departement method for changing text of message @param newowner model element which should now be listened to"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: - should save and restore the last positions of the toolbars"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: does anyone use command line? if so, localization is needed - tfm"}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: the following rather than the above is probably the correct way to search stereo = findstereotype(obj, null, name);"}
{"projectname":"argouml","classification":"DEFECT","comment":"there is a possibility that the next step forward takes another path in this wizard. to allow for this we must destroy the path already traveled by. <p> todo: i (linus) would say that this is really a problem with the wizard implementation since i believe it should be possible to explore a path in the wizard and then go back. {@inheritdoc}"}
{"projectname":"argouml","classification":"DEFECT","comment":"builds a message within some interaction related to some assocationrole. the message is added as the last in the interaction sequence. furthermore, the message is added as the last to the list of messages already attached to the role. effectively, the already attached messages become predecessors of this message. todo: this sets the activator as a side effect. however it is impossible to determine the activator at this stage as we don't yet know what the action will be of the message we're creating. see issue 5692. @param inter the interaction. @param role the association role. @return the newly created message."}
{"projectname":"argouml","classification":"DEFECT","comment":"todo: {name} is not expanded for diagram objects"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: mvw: why is this not done in gef?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is a temporary crutch to use until all figs are updated to use the constructor that accepts a diagramsettings object"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: there is a cyclic dependency between selectionrerouteedge and figedgemodelelement"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we need to rethrow this as some other exception type but that is too much change for the moment."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: it's probably worthwhile to abstract and factor this chooser and directory stuff. more file handling is coming, i'm sure."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: complete this implementation - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this will vary based on the type of the tagdefinition"}
{"projectname":"argouml","classification":"DESIGN","comment":"setfontfamily(\"dialog\"); \/* todo: is this needed?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: move this into the toolbar project."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is a temporary method of making sure the model is updated on loss of focus of a combo box. in the long term we should attempt to update the model on each keypress. @see java.awt.event.focuslistener#focuslost(java.awt.event.focusevent)"}
{"projectname":"argouml","classification":"DESIGN","comment":"these methods are based on the graphevents. these need replacing by more specic meaningful requests of the diagram interface model"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: all super constrcutors should take a graphmodel"}
{"projectname":"argouml","classification":"DESIGN","comment":"workaround for missing ability to parse \"*\""}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: needs to be tidied up after stable release. graph model should be created in constructor"}
{"projectname":"argouml","classification":"DESIGN","comment":"this is wrongly called with a null handle, as a workaround we return an empty collection"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: not navigable this direction? - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this doesn't look right - review - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"@return the statemachine todo: if this method is called by any of the figs, it will introduce a dependency cycle. it would be much better if they could just use {@link org.argouml.uml.diagram.argodiagram#getowner()} which does the same thing."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: need to clean up objecttoid (can we do it based on modelelement delete notifications?)"}
{"projectname":"argouml","classification":"DESIGN","comment":"the constructor. todo: why does this method not handle all settings (key_default_shadow_width is missing)?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: performance critical method"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: needs work. must determine which figs enclosed in the pool are within the bounds of this fig and translate those."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: optimize for root model case? - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do we really need to do this? carried over from old behavior"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo elementownership is not in modelsubsys!!"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this seems like a brute force workaround (and a very indirect one at that). it appears to be needed though until we fix the problem properly. - tfm 20070904"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is this really needed?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: uml 1.4 spec requires both client and supplier to be in the same model - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: unused?"}
{"projectname":"argouml","classification":"DESIGN","comment":"these may not actually make any difference at present (the code behind addtrigger needs more work)."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: temporary - let tree expand implicitly - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: split into an inherited attr critic and a local attr critic"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: should throw if the string is not good?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo handle multiple top level packages"}
{"projectname":"argouml","classification":"DESIGN","comment":"a wizard which adjust the threshold for critics. <p> todo: make the treshold setting adjustable without using the wizard, and make it persistent. maybe by using the \"configure\" button on the browse critics dialog. @see org.argouml.uml.cognitive.critics.abstractcrtoomany @author mkl"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: better if we wrap in a profileexception and throw that"}
{"projectname":"argouml","classification":"DESIGN","comment":"create our bandbuffer which is just a small slice of the image todo: we used a fixed height buffer now, but we could be smarter and compute a height which would fit in some memory budget, allowing us to use taller buffers with narrower images, minimizing the overhead of multiple rendering passes"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo support iterate declarator"}
{"projectname":"argouml","classification":"DESIGN","comment":"@return returns the default stereotype view todo: enumeration here?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: how about figassociationclass?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this shouldn't depend on the current project, but for now just make sure it's defined and that we have an undo manager"}
{"projectname":"argouml","classification":"DESIGN","comment":"remove this diagram from existence. todo: move to gef"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this needs to be managing undo on a per-project basis instead of using gef's global undo manager"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: define constants for magic numbers"}
{"projectname":"argouml","classification":"DESIGN","comment":"this class gives critics access to parts of the uml model of the design. it defines a gen() function that returns the \"children\" of any given part of the uml model. basically, it goes from project, to models, to modelelements. argo's critic agency uses this to apply critics where appropriate. todo: this thinks it knows all the composition associations of the the uml metamodel, but it is a) incomplete and b) not updated for uml 1.4. this should be done using information from the metamodel rather than hardwired code. - tfm - 20070205 @see org.argouml.cognitive.agency @see org.argouml.cognitive.designer @author jrobbins"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: consider inherited associations? todo: self loops are double counted"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: multiple associations between the same pair of elements need to be special cased so that they don't overlap - tfm - 20060228"}
{"projectname":"argouml","classification":"DESIGN","comment":"gets the current threshold. todo: should this be protected? @return the current threshold."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: there is a cyclic dependency between this class and figconcurrentregion"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: move to mmutil or some other common place and merge with umlcomboboxentry::findnamespace()"}
{"projectname":"argouml","classification":"DESIGN","comment":"needs more work: sending and receiving icons"}
{"projectname":"argouml","classification":"DESIGN","comment":"an object tagged as being the owner of a figedgenote. has knowledge about the source and destination of the figedgenote. <p> the source and destination are modelelements. at least one of them is a comment - but they may be both comments. todo: there's tons of special case code scattered around argouml for this one class since it is the only \"owner\" of a figedgemodelelement which is not a uml element. we should find a way to generalize this.<p> todo: issue 3031 requires this class to be replaced by a similar mechanism as the n-ary association class: the node and the edges shall all have the same owner, i.e. the uml comment object. @since jul 17, 2004 @author jaap.branderhorst@xs4all.nl"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: offenders need to be more strongly typed. - tfm 20070630"}
{"projectname":"argouml","classification":"DESIGN","comment":"if \"expression\" implements one of the combobox, select it todo ? do it in euml module project ?"}
{"projectname":"argouml","classification":"DESIGN","comment":"@return the set of offenders todo: the return value needs to be more strongly typed. - tfm - 20070630"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do all these classes need to be in their own files? public?"}
{"projectname":"argouml","classification":"DESIGN","comment":"must be overridden to make sense (i didn't want to make it abstract because it might not be required)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: should fire its own event and projectbrowser should register a listener"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: use default value of appropriate type for td"}
{"projectname":"argouml","classification":"DESIGN","comment":"our superclass no longer has this method, so perhaps this whole thing should be removed? - tfm super.updatelisteners(newowner);"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is actually a hack! some diagram types (like the statechart diagrams) access the current diagram to get some info. this might cause problems if there's another statechart diagram active, so i remove the current project, before loading the new one."}
{"projectname":"argouml","classification":"DESIGN","comment":"the following is specifically for realizations todo: correction in gef, it should use interfacerealization, not abstraction"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: still not used, because in argouml string is \"hardwired\""}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: in uml 2.x a tagdefinition has become a property on a stereotype anything that uses this will probably need to be reviewed\/changed. just return property for now."}
{"projectname":"argouml","classification":"DESIGN","comment":"language must be unique todo: do it in the model (if don't use the dialog, and change the first)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: cyclic dependency between persistancemanager and here"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should not be an instance variable. it should just be created and discarded as needed."}
{"projectname":"argouml","classification":"DESIGN","comment":"check for duplicate name and rename if necessary"}
{"projectname":"argouml","classification":"DESIGN","comment":"creates a new ocl critic @param oclconstraint ocl expression @param headline headline @param description description @param moreinfourl the info url @param knowledgetypes the knowledge types @param supporteddecisions the decisions @param priority the priority @throws invalidoclexception if the ocl is not valid todo: do these need to be lists or can they be simple collections?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: why is this inside a block? forgotten else branch?!? question by euluis @ 2009-08-16."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: maybe separate name"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: a minimal update strategy would be better here to minimize work and events firing, but it may be better to deprecate the method and force calls to manage updates themselves (since they probably usually want to just add or remove a single element) - tfm 20061108"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what progressmgr is to be used here? where does it come from?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: here we should e.g. show the user a message that the loaded project was using a notation that is not currently available and a fall back on the default notation was done. maybe this can be implemented in the persistencemanager?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is the same as in parent - remove? @see org.argouml.uml.diagram.ui.fignodemodelelement#updatebounds()"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: move magic number 10 to descriptive constant"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: should we handle <<access>> and <<import>> here?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: remove when code below in characters() is removed private static final string returnstring = \"\\n \";"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this probably needs more qualification - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this method is obsolete. use getinputmap etc as below"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: check semantics here - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: move to gef"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: find a way to replace this dependency on project"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should be a configurable property"}
{"projectname":"argouml","classification":"DESIGN","comment":"and its stereotypes todo: aren't stereotypes handled elsewhere?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: should fire its own event and projectbrowser should register a listener - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: support more than one body\/language"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: remove this old implementation after 0.22 if it's demonstrated that it's not needed. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: can we find a better way to do this than hard coding colour?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: there's a cyclic dependency between figconcurrentregion and the actions actionaddconcurrentregion"}
{"projectname":"argouml","classification":"DESIGN","comment":"public object getgoalinfo(string goal) { return _goals.getproperty(goal); \/* todo: we need a better representation of goals *\/ }"}
{"projectname":"argouml","classification":"DESIGN","comment":"local variables - what do they do?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: really should be a separate class"}
{"projectname":"argouml","classification":"DESIGN","comment":"a modelelement has been changed. now we give it priority to be checked by the critics asap. todo: why is is synchronised? todo: what about when objects are first created? @param dm the design material @param reason the reason"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we could generalize this to initialize more stuff if needed"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: why is this here? who is calling this? @see java.beans.vetoablechangelistener#vetoablechange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this probably belongs with the diagram subsystem"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: change this to use an undomanager instance per project when gef has been enhanced."}
{"projectname":"argouml","classification":"DESIGN","comment":"hack for to do items only, should check isleaf(node), but that includes empty folders. really i need alwaysleaf(node)."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: why was this next line in the code so long?"}
{"projectname":"argouml","classification":"DESIGN","comment":"this method has insufficient information to call buildextensionpoint. thus we'll need to create one, and pray that whomever called us knows what kind of mess they got."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do we need to set the input encoding here? it was done for todo parsing, but none of the other member types inputsource inputsource = new inputsource( new inputstreamreader(inputstream, argo .getencoding()));"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: why is this not executed? remove if not needed - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"loads a project displaying a nice progressmonitor @param file the project to be opened @param showui whether to show the gui or not todo: this needs to be refactored to be gui independent - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this doesn't belong here, but it's not a good time to move it. find someplace less obtrusive than this inner loop. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo asargument??"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what does the magic number 6000 represent here? put it in an explanatory literal! - tfm - 20071205"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this creates a dependency on the critics subsystem. instead that subsystem should register its desired menus and actions."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: get rid of magic numbers! figure out which represent line widths vs padding vs offsets"}
{"projectname":"argouml","classification":"DESIGN","comment":"references to actions that we need for mac hack"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: convert all to use standard factory registration"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: should define a compoundcritic"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this class is part of a dependency cycle with projectbrowser and"}
{"projectname":"argouml","classification":"DESIGN","comment":"hack in order to be able to compile in java1.3"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: won't our use of pathcomparator take care of uniqueness?"}
{"projectname":"argouml","classification":"DESIGN","comment":"andreas: just temporary for the uml2 pre-alpha versions!"}
{"projectname":"argouml","classification":"DESIGN","comment":"now get all classifiers imported from other packages todo: this should probably happen automatically in getallmodelelementsofkind() - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: add an \"open most recent project\" command so that command state can be decoupled from user settings?"}
{"projectname":"argouml","classification":"DESIGN","comment":"install the trap to \"eat\" securityexceptions. note: this is temporary and will go away in a \"future\" release http: bugs.sun.com\/bugdatabase\/view_bug.do?bug_id=4714232"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what are these magic numbers?"}
{"projectname":"argouml","classification":"DESIGN","comment":"create a taggedvalue with a tag\/type matching our source module filename and a value of the file's last modified timestamp. todo: this functionality needs to be moved someplace useful if it's needed, otherwise it can be deleted. - tfm - 20070217"}
{"projectname":"argouml","classification":"DESIGN","comment":"choose the arrowhead style for each end. <p> todo: this is called from paint(). would it not better be called from renderingchanged()?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: why isn't this stuff managed by the namefig itself?"}
{"projectname":"argouml","classification":"DESIGN","comment":"andreas: just temporary: a warning dialog for uml2..."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this class should be moved to package org.argouml.uml.ui.behavior.common_behavior."}
{"projectname":"argouml","classification":"DESIGN","comment":"if is a classifier role, it must return the sent messages. in other cases, returns an empty list. todo: must be the incoming messages or the sent ones?"}
{"projectname":"argouml","classification":"DESIGN","comment":"initialize the argouml application version, so that {@link applicationversion#getversion()} doesn't return null. @throws exception if something goes wrong... todo: move this to an helper class."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an enumeration. @return object new enumeration @since uml 1.4 todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: lets move this behind the model interface"}
{"projectname":"argouml","classification":"DESIGN","comment":"if is a classifier role, it must return the received messages. in other cases, returns an empty list. todo: must be the outgoing messages or the received ones?"}
{"projectname":"argouml","classification":"DESIGN","comment":"argoeventpump is an event dispatcher which handles events that are global in nature for the entire application. <p> todo: diagramappearance and notation events are not application-wide and will be moved from here to someplace more specific in the future so that they can be managed on a per-project or per-diagram basis."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml node. @return an initialized uml node instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: once we have fixed all subclasses the title will always be localized so this localization can be removed."}
{"projectname":"argouml","classification":"DESIGN","comment":"get the classifier (participant) of an associationend. todo: rename this getparticipant to align with uml spec - tfm - 20070331 @param handle the associationend to get from. @return the classifier of the associationend."}
{"projectname":"argouml","classification":"DESIGN","comment":"determine if the passed parameter has a return direction kind. todo: this is a duplicate of {@link #isreturn(object)} @return true if it is a return direction kind @param handle the parameter"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is it appropriate the templateableelement as the client and a list of templateparametersubstitution as the list of parameters?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: actionstate, callstate, and subactivitystate have been replaced in uml 2.0 by explicitly modeled actions"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: silently ignore instead? return false;"}
{"projectname":"argouml","classification":"DESIGN","comment":"find the icon for a given model element. @return the icon or <code>null<\/code> if there is no icon. @param value the model element. todo: this should not use string matching on classnames to do this since this means that we have knowledge about how the model elements are implemented outside of the model component."}
{"projectname":"argouml","classification":"DESIGN","comment":"initialze gef's version of the loader too todo: we should probably be passing icons that we loaded ourselves but there doesn't seem to be a way to do that with gef - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"return the key (tag) of some tagged value. todo: this does exactly the same as gettag(object). remove one of them. @param handle the tagged value. @return the found value as string."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: lots more types - duration, instance, interval"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: can we get this from the metamodel? $non-nls-1$"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: how do we get the connectors of an association?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: remove? can't be localized"}
{"projectname":"argouml","classification":"DESIGN","comment":"a classifier can only have a single unnamed classifierrole, so todo: this probably belongs in a critic instead of here"}
{"projectname":"argouml","classification":"DESIGN","comment":"the part of the design this issue affects. <p> each member is either a model element, a {@link fig}, or a {@link diagram}. <p> todo: offenders need to be more strongly typed. because there is not a common supertype for these three types, we can't type this list. we should introduce a common supertype\/interface. - tfm 20070630 <p> the list of offenders is set once (e.g. by the constructor) and cannot change. <p>"}
{"projectname":"argouml","classification":"DESIGN","comment":"reply a set of design material's that are the subject of this todoitem. @return the offenders todo: offenders need to be more strongly typed. - tfm 20070630"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this could be a huge collection - find a more efficient way"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: generalize - assumes uml type names are unique without the qualifying package names - true for uml 1.4"}
{"projectname":"argouml","classification":"DESIGN","comment":"models the designers goals in making this design. provides useful control information to the agency so that only critics relevant to the designers goals are ever executed. todo: really this should be part of a domain extension and not the kernel. i have not developed this part of argo very much. @author jason robbins"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do we need to worry about umlclass, umlpackage, etc?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should fetch the stereotype from our profile"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: encountering a deleted object during any part of this traversal will abort the rest of the traversal. we probably should do the whole traversal in a single mdr transaction."}
{"projectname":"argouml","classification":"DESIGN","comment":"return the default type for the return parameter of a method. @return a classifier to use as the default type todo: this belongs in projectsettings. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: hold lock for entire recursive traversal?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: add enumerationliteral someplace"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is well-formedness rule from uml1.4.2 4.5.3.20 [1] a root cannot have any generalizations. self.isroot implies self.generalization->isempty"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: lets build this into a separate buildtoolbar method"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this references the concrete factory we need a factories factory"}
{"projectname":"argouml","classification":"DESIGN","comment":"set the target anew. todo: this method is never used. what is its intention? remove it?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this first loop just to count the items appears redundant to me - tfm 20070630"}
{"projectname":"argouml","classification":"DESIGN","comment":"create a new panel for the given step. for example, when the given step is 1, create the first step of the wizard. <p> todo: it might be convient to make a reusable subclass of wizard that shows all textual steps to guide the user without any automation. such a wizard could be easily authored, stored in an xml file, and efficiently presented by reusing a single panel with a single jtextarea. @param newstep the number of the step to make a panel for. @return a new panel for the given step"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: tabtodo should listen for an event that this fires so that we can decouple from the projectbrowser. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is using internal knowledge of gef. it should handle this itself. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"copy a file from source to destination. todo: perhaps belongs in a utilities class of some sort. @param source the source file to be copied @param dest the destination file @return success status flag"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is using internal knowledge of gef. it should handle this itself. - tfm mvw: move into something like main.initgef()"}
{"projectname":"argouml","classification":"DESIGN","comment":"for locale selection.<p> todo: detect the available locales from the available files. @return locales used in argouml"}
{"projectname":"argouml","classification":"DESIGN","comment":"return the default type for an attribute. @return a classifier to use as the default type todo: this belongs in projectsettings. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"searches for a type\/classifier with name s. if the type is not found, a new type is created and added to the current namespace. <p> todo: move to model subsystem - tfm 20070307 @param s the name of the type\/classifier to be found @return classifier"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what if used elsewhere?"}
{"projectname":"argouml","classification":"DESIGN","comment":"searches for a type\/classifier with name s. if definenew is true, a new type is defined if the type\/classifier is not found. the newly created type is added to the currentnamespace and given the name s. <p> todo: move to model subsystem - tfm 20070307 @param s the name of the type\/classifier to be found @param definenew if true, define a new one @return classifier the found classifier"}
{"projectname":"argouml","classification":"DESIGN","comment":"moves some object to trash, i.e. deletes it completely with all dependent structures. <p> deleting an object involves: <pre> - removing target history - deleting all fig representations for the object - deleting the uml element - deleting all dependent uml modelelements - deleting commentedges (which are not uml elements) - move to trash for enclosed objects, i.e. graphically drawn on top of - move to trash subdiagrams for the object - saveguard that there is always at least 1 diagram left - if the current diagram has been deleted, select a new one to show - trigger the explorer when a diagram is deleted - set the needssave (dirty) flag of the projectmanager <\/pre> @param obj the object to be deleted @see org.argouml.kernel.projectimpl#trashinternal(object) <p> todo: this should just be named delete() or something which better tells what it does (since there really isn't a trash can)."}
{"projectname":"argouml","classification":"DESIGN","comment":"changed in uml 2.1 - component with <<subsystem>> stereotype todo: we should deprecate this?"}
{"projectname":"argouml","classification":"DESIGN","comment":"returns the root package. @return the package which is the root @deprecated for 0.25.4 by tfmorris - use {@link #getroots()} to get packages\/model elements which are at the top level. <p> todo: we probably need a getdefaultnamespace() method or something similar to replace some uses of this."}
{"projectname":"argouml","classification":"DESIGN","comment":"updates the top level modelelements for all projects. in uml2, each model knows it's root elements, so this could make setroots(...) obsolete. e.g., applying a stereotype in uml2 adds a new root. todo: this is redundant with setroots\/getroots. there are already too many ways this stuff is managed without adding an additional one. all current model subsystem implementations know their top level elements. responsibility can be moved to the model subsystem, but let's choose *one* way of managing this."}
{"projectname":"argouml","classification":"DESIGN","comment":"a datastructure for settings for a project. <p> most getters return a string, since they are used by \"argo.tee\". this is also the reason all these attributes are not part of a map or something. <p> todo: the header comment is currently not used - this function is not completely implemented yet. how do we store this in the project? where should the user enter his header comment? see issue 4813. @author michiel"}
{"projectname":"argouml","classification":"DESIGN","comment":"notation settings value object. stores settings which control how text is rendered on diagrams. <p> todo: this needs to go on a diet. it's used everywhere, so is performance sensitive. the current set of settings is the union of all those found in the legacy code, but it's not clear that all of them are actually used. @author tom morris <tfmorris@gmail.com>"}
{"projectname":"argouml","classification":"DESIGN","comment":"this does a calculation of where our \"ext\" directory is. todo: we should eventually make sure that this calculation is only present in one place in the code and not several."}
{"projectname":"argouml","classification":"DESIGN","comment":"in contrast to {@link #getzipname()} returns the member's name without the prepended name of the project (but with the extension). <p> todo: this is not used anywhere - shall we remove it? @author steffen zschaler @return the member's name without any prefix or suffix"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: end up with multiple models here"}
{"projectname":"argouml","classification":"DESIGN","comment":"we're deleting the last diagram so lets create a new one todo: once we go mdi we won't need this."}
{"projectname":"argouml","classification":"DESIGN","comment":"create a notation settings value object with all default values. <p> todo: this class only has partial undo support (basically just those members that had it as part of a previous implementation)."}
{"projectname":"argouml","classification":"DESIGN","comment":"this code was copied from actionbooleantaggedvalue:"}
{"projectname":"argouml","classification":"DESIGN","comment":"this is the temporary solution for issue 1011"}
{"projectname":"argouml","classification":"DESIGN","comment":"parse a message textual description.<p> todo: - this method is too complex, lets break it up. <p> @param umlmessage the uml message object to apply any changes to @param s the string to parse @throws parseexception when it detects an error in the attribute string. see also parseerror.geterroroffset()."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: addonly has been removed in uml 2.x, so we should phase out support of it - tfm - 20070529"}
{"projectname":"argouml","classification":"DESIGN","comment":"save the .argo entry todo: cyclic dependency with persistencemanager move persistencemanager..getprojectbasename() someplace else"}
{"projectname":"argouml","classification":"DESIGN","comment":"if c2 is empty, then we're done (or there is a cycle in the message graph, which would be bad) if c2 has more than one element, then the model is crappy, but we'll just use one of them anyway"}
{"projectname":"argouml","classification":"DESIGN","comment":"utility method to encode a string in a way that allows it to be saved properly in an xml file and regained filtering out any noice that an xml framework might have seen fit to add. todo: why are we doing this ourselves? surely encoding information for xml serialization is a well known task - tfm i have never understood why this is being done. i think we should remove any usage - bob @param str the string to encode. @return the encoded string."}
{"projectname":"argouml","classification":"DESIGN","comment":"hence a less elegant workaround that works:"}
{"projectname":"argouml","classification":"DESIGN","comment":"this should probably be inside xmireader.parse but there is another place in this source where xmireader is used, but it appears to be the nsuml xmireader. when argo xmireader is used consistently, it can be responsible for loading the listener. until then, do it here."}
{"projectname":"argouml","classification":"DESIGN","comment":"a critic to suggest using the facade stereotype. <p> todo: at the moment only a dummy implementation, see issue 3093."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is this needed?"}
{"projectname":"argouml","classification":"DESIGN","comment":"could this be some other type of internal error that we want to handle differently? don't think so. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"create and register diagrams for activity and statemachines in the model(s) of the project. if no other diagrams are created, a default class diagram will be created. argouml currently requires at least one diagram for proper operation. todo: move to xmifilepersister (protected) @param project the project"}
{"projectname":"argouml","classification":"DESIGN","comment":"load .xmi file before any pgml files fixme: the following is loading the model before anything else. due to the zargo containing the profiles, currently we have removed this hack in umlfilepersister and i think it should be removed from here also."}
{"projectname":"argouml","classification":"DESIGN","comment":"a bufferinputstream that is aware of xml structure. it searches for the first occurrence of a named tag and reads only the data (inclusively) from that tag to the matching end tag or it can search for the first occurrence of a named tag and read on the child tags. the tag is not expected to be an empty tag. <p> todo: this is hardwired to assume a fixed single byte character encoding. it needs to be updated to handle different encodings, including multi-byte encodings. - tfm 20070607 @author bob tarling"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: attempt to move the following code to gef"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: use stylesheet to convert or wait till we use fig factories in diagram subsystem. what is the last version that used fignote?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: move to diagram subsystem?"}
{"projectname":"argouml","classification":"DESIGN","comment":"set the fig style attributes. <p> todo: this should move into the render factories as described in issue 859. @param fig the fig to style. @param attributemap a map of name value pairs"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: without this, we fail to draw e.g. a class. but is this a good solution? why is the layer not set in the constructor?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we really want to be able replace the initial content handler which is passed to sax, but we can't do this without cloning a whole bunch of code because it's private in the super class."}
{"projectname":"argouml","classification":"DESIGN","comment":"if no fig was created by the code above then we must go look for the old style constructor that should have fallen into disuse by now. fig(object, rectangle, diagramsettings) all of these constructors should have been deprecated at least and replaced with the new signature. this is here for paranoia only until all figs have been reviewed."}
{"projectname":"argouml","classification":"DESIGN","comment":"a fignodemodelelement with no owner should match here todo: this is a temporary solution due to figpool extending fignodemodelelement when in fact it should not do so."}
{"projectname":"argouml","classification":"DESIGN","comment":"translate the visibility flag of a fig to the pgml \"visibility\" attribute value. the pgml values are 0=hidden and 1=shown. if not specified then 1 is the default so we return null for this to prevent redundent data being written to pgml. todo: remove on gef release after 0.11.9 as it will be provided there. @param f the fig @return \"0\"=hidden, null=shown"}
{"projectname":"argouml","classification":"DESIGN","comment":"the file persister for the uml model. todo: this is empty. what is its purpose? - tfm @author bob tarling"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: not sure we need to do this, but just to be safe for now."}
{"projectname":"argouml","classification":"DESIGN","comment":"open a zipinputstream to the first file found with a given extension. todo: remove since this is a duplicate of zipfilepersister method when we have refactored the persister subsystem. @param url the url of the zip file. @param ext the required extension. @return the zip stream positioned at the required location. @throws ioexception if there is a problem opening the file."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this doesn't need a full profilereference since it uses the reader handed in the constructor. it doesn't make much sense to make its callers init the path to some name which it doesn't need... @author luis sergio oliveira (euluis)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: seems like overkill to load the model just to get the display name, but that's where it's stored currently - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this appears unused. if it's needed, the model api should be enhanced to provide a method that does this directly."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is this (critics embedded in comments) actually used by anyone?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: all this profile loading\/handling needs to move someplace in model subsystem probably"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we need a specific exception type here."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this profile isn't used anymore, see getmodel()"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is an absurdly long method! break it up."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this code is cloned over and over again! - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"settings dialog tab panel for layout options.<p> todo: this class contains a lot of references to org.argouml.uml.ui. it would probably be better to move it there. todo: this class breaks too many dependency limitations. and it is not used anywhere. so i (mvw) disabled its functionality. @author linus tolke"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we could also support other flavors here, e.g. image (then you can drag modelelements directly into your wordprocessor, to be inserted as an image)."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: why isn't this done in save?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the following handling of multiselection is just a local solution for the line color, better find a more general solution: (i don't know if it's undoable this way - thn)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the following handling of multiselection is just a local solution for the fill color, better find a more general solution: (i don't know if it's undoable this way - thn)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we need to get the model\/extent (and package?) associated with the current diagram so that we can create the new element in the right place."}
{"projectname":"argouml","classification":"DESIGN","comment":"the dialog that allows the user to go to any diagram in the project by doubleclicking on it.<p> this dialog is not modal, and can stay open while the user is working on the model. it is even possible to open multiple of these dialogs, although the purpose of such useraction eludes me.<p> todo: this dialog should have multiple tabs named \"help\", \"diagram\", \"classifier\", \"statevertex\", etc. which would allow the user to go to other things than diagrams. @author mvw"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: bob says - tabs that listen for target changes should register themselves not expect detailspane to listen and pass on the event. otherwise these tabs always rely on detailspane. tabtodotarget and tabprops currently listen directly."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: some parts of argouml have preliminary support for multiple details panels, but we currently only support the default south (bottom) panel"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: check that this is correct"}
{"projectname":"argouml","classification":"DESIGN","comment":"flag to indicate if we are the main application or being integrated in another top level application such as eclipse (via the argoeclipse plugin). todo: this is a temporary measure until projectbrowser can be refactored more appropriately. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"try to save the project. @param overwrite if true, then we overwrite without asking @param file the file to save to @param pmw the progressmonitor to be updated; @return true if successful todo: separate this into a swing specific class - tfm @deprecated in 0.29.1 by bob tarling use trysavewithprogressmonitor"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: work in progress here to allow multiple details panes with different contents - bob tarling"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this causes a cyclic depencency with actionsaveproject"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this needs work so that users can set the font size through a gui preference window."}
{"projectname":"argouml","classification":"DESIGN","comment":"loads a project displaying a nice progressmonitor @param overwrite if true, the file is going to be overwritten @param file the target file todo: separate this into a swing specific class - tfm @param exit if true: exit argouml when done"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: bob says - we're looking at focus change to flag the start of an interaction. this is to detect when focus is gained in a prop panel field on the assumption editing of that field is about to start. not a good assumption. we need to see if we can get rid of this."}
{"projectname":"argouml","classification":"DESIGN","comment":"this class represents a pool of swimlanes for activity diagrams. this is exists only to act as the gef style encloser. other nodes in the same must be placed entirely within or outside the boundaries of this fig but cannot intersect with the boundary. <p> todo: there is no actual model element being represented here so we are inheriting a lot of behaviour from fignodemodelelement that we don't want. we require to split fignodemodelelement to separate the code that requires a model element owner. see issue ... <p> remark mvw: why not give it an owner instead? the activitygraph is the obvious candidate, or maybe the top state. @author mkl"}
{"projectname":"argouml","classification":"DESIGN","comment":"manages a progressmonitor dialog. note: users of this class should use the type of the interface {@link org.argouml.taskmgmt.progressmonitor} wherever possible to maintain gui independence. @author andrea_nironi@tigris.org todo: bob says: i don't like the naming of this class. its confusing that its called ...window and yet it is not a window. lets rename once we have it hidden."}
{"projectname":"argouml","classification":"DESIGN","comment":"loads the project file and opens all kinds of error message windows if it doesn't work for some reason. in those cases it preserves the old project. @param file the file to open. @param showui true if an error message may be shown to the user, false if run in commandline mode @param pmw the progressmonitor to be updated; if not needed, use null @return true if the file was successfully opened todo: separate this into a swing specific class - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should listen for file save events - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"loads the project file and opens all kinds of error message windows if it doesn't work for some reason. in those cases it preserves the old project. @param file the file to open. @param showui true if an error message may be shown to the user, false if run in commandline mode @param pmw the progressmonitor to be updated; if not needed, use null @return project the project that was created based on the file that was successfully opened todo: separate this into a swing specific class - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: can we move this knowledge behind model facade rather than have a condition here?"}
{"projectname":"argouml","classification":"DESIGN","comment":"a command to set selected figs to their minimum size. <p> despite its name, really the minimum size is selected here! <p> todo: rename this class. @author markus klink"}
{"projectname":"argouml","classification":"DESIGN","comment":"this fig is never placed on a diagram. it is only used by the call renderer so that pick list items look like diagram figs. todo: this fig does not represent a model element and so it should not extend fignodemodelelement. we should split fignodemodelelement in two, one for base functionality for all nodes and one that is truly for model elements."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: why is this code even getting called for a figgeneralization?"}
{"projectname":"argouml","classification":"DESIGN","comment":"class to manage project related actions which need to be (or historically have been) managed as singletons. todo: it's unclear to me whether all of these actually have to be managed as singletons, but for now i've just moved them from projectbrowser as is. - tfm @author tom morris"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this shouldn't know the internal form of type names, but i'm not sure what gef's predicatetype does, so i'm fixing it here - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: move to different class?"}
{"projectname":"argouml","classification":"DESIGN","comment":"i hate this so much even before i start writing it. re-initialising a global in a place where no-one will see it just feels wrong. oh well, here goes."}
{"projectname":"argouml","classification":"DESIGN","comment":"kludge required by gef's use of hashmap in the api todo: this can be removed if they ever fix gef to use maps"}
{"projectname":"argouml","classification":"DESIGN","comment":"critique menu todo: this dependency should be inverted with the critics subsystem registering its desired shortcuts with us - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"genericargomenubar defines the menu bar for all operating systems which do not explicitly ask for a different kind of menu bar, such as mac os x. <p> menu's and the mnemonics of menu's and the menuitems are separated in the propertyresourcebundle <em>menu.properties<\/em>. <p> menu items are separated in the propertyresourcebundle <em>action.properties<\/em>. <p> the key's in menu.properties have the following structure: <pre> menu: [file].[name of menu] e.g: menu.file mnemonics of menu's: [file].[name of menu].mnemonic e.g: menu.file.mnemonic mnemonics of menuitems: [file].[flag for item].[name of menuitem].mnemonic e.g: menu.item.new.mnemonic <\/pre> todo: add registration for new menu items. @deprecated in 0.29.2 by bob tarling. this class will be moved and made private in future. use menubarfactory.createapplicationmenubar"}
{"projectname":"argouml","classification":"DESIGN","comment":"forwards this event to the tree model. @param element the modelelement to be changed todo: this shouldn't be public. components desiring to inform the explorer of changes should send events."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: delete should be available on any combination of model elements and diagrams. todo: shouldn't be creating a new instance here. we should hold the delete action in some central place."}
{"projectname":"argouml","classification":"DESIGN","comment":"adds the entry to the mru list. @param filename of the project todo: this should listen for file save events rather than being called directly - tfm."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: make sure this shouldn't go into a previous condition -tml"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: shouldn't be creating a new instance here. we should hold the delete action in some central place."}
{"projectname":"argouml","classification":"DESIGN","comment":"the tree structure has changed significantly. inform the associated tree model. todo: this shouldn't be public. components desiring to inform the explorer of changes should send events. @deprecated by mvw in v0.25.4. use events instead."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we really only care about events which affect things that are visible in the current perspective (view). this could be tailored to cut down on event traffic. - tfm 20060410"}
{"projectname":"argouml","classification":"DESIGN","comment":"the singleton instance. todo: why is this a singleton? wouldn't it be better to have exactly one for every explorer?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: rather than specifically ignore some item maybe it would be better to specifically state what items are of interest. otherwise we may still be acting on other events we don't need"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we need a factory pattern for goxxx classes that can determine if they are required"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: can this be made more restrictive? do we care about any attributes other than name? - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"this is carried over from previous implementation not sure why we don't want contents of package - tfm - 20060214"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: any namespace can contain other elements. why don't we allow this? - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: really should be element\/modelelement, but we don't have a type which is portable for this"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this method can be replaced by getclass().getsimplename() when argo drops support for java versions < 1.5"}
{"projectname":"argouml","classification":"DESIGN","comment":"@see org.argouml.cognitive.critic#setheadline(java.lang.string) set up the locale specific text for the critic headline (the one liner that appears in the to-do pane) and the critic description (the detailed explanation that appears in the to-do tab of the details pane). mvw: maybe we can make it part of the constructor cruml()? fixme: why override if nobody uses?"}
{"projectname":"argouml","classification":"DESIGN","comment":"set the threshold. todo: should this be protected? @param threshold the threshold to compare to."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: split into one critic for inherited problems and one for problems directly in this class."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do we need this generalization is not a named element"}
{"projectname":"argouml","classification":"DESIGN","comment":"needed?"}
{"projectname":"argouml","classification":"DESIGN","comment":"find all the figs that visualise the given model element in this layer, or null if there is none. todo: once gef includes this same method in diagram then this can go @see org.tigris.gef.base.diagram#presentationsfor(java.lang.object)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this uses a \"last one wins\" algorithm for registration we should warn if a factory is being overwritten."}
{"projectname":"argouml","classification":"DESIGN","comment":"gets font name. if it doesn't exist in configuration it creates new entries in configuration for appearance. todo: why create in a getter? @return the name of the configured font"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what is this trying to do? it's never going to get called - tfm really dirty hack to remove unwanted listeners"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this shouldn't be referencing the current project. instead the appropriate undomanager should have already been retrieved from the correct project."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we should be given an undo manager to use rather than looking for a global one"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: replace the next deprecated call. this case is complicated by the use of parameters. all other figs work differently."}
{"projectname":"argouml","classification":"DESIGN","comment":"class to display graphics for a uml choice state in a diagram - the circle. todo: this should really be renamed figchoicestate. it's the last vestige of the uml 1.3 name. @author pepargouml"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what is this needed for? - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"the next 4 lines fix the 2nd half of issue 5638. is there no better way?"}
{"projectname":"argouml","classification":"DESIGN","comment":"return a list of gravity points around circle which is enclosed in the bounding box. convenience method for use by figinitialstate and figfinalstate. todo: as this method is not required by all sub classes, it would seem sensible to extend figstatevertex with figcirclevertex and only have the relevant concrete figs extend that and gain this functionality. @return a list of points"}
{"projectname":"argouml","classification":"DESIGN","comment":"to resize only when a new concurrent region is added, changing the height. todo: probably shouldn't exist as this class should be listening for added concurrent regions and call this internally itself. @param h the new height"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: aren't our items always strings? - tfm 20100917"}
{"projectname":"argouml","classification":"DESIGN","comment":"actually instanciate the netnode and fignode objects and set the global next mode to modeplace todo: should call super, reduce code volume! @see org.tigris.gef.graph.graphfactory#makenode()"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this logic may well be worth moving into the model component. provide a similar grid to the connectionsgrid"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo ? if this class listen the model, it will be able to change in live as it is done in the figs (diagram)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo : redo it (curbody should be as long as curlanguage+button)"}
{"projectname":"argouml","classification":"DESIGN","comment":"when we change the type, we need to create a new initial value. and to display the panel todo: if we select the same type that the current, do nothing."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we definitely don't want to react to addition and removal of transitions. can't we be more specific when we register ourselves as a listener."}
{"projectname":"argouml","classification":"DESIGN","comment":"the target model element in uml1.x this is the element that owns the expression. in uml2.x this is the expression itself todo: this makes behaviour different enough that separate subclasses should be considered."}
{"projectname":"argouml","classification":"DESIGN","comment":"field todo: textarea or textfield"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this can be a mess... there are any better solution?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: use it notify set to true to forward events to model. only one of language and body fields should have this set to true."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: if this is an ordered list, then you have to add in the right location!"}
{"projectname":"argouml","classification":"DESIGN","comment":"@see java.beans.propertychangelistener#propertychange(java.beans.propertychangeevent) todo: this should be reviewed to see if it can be improved with a view towards removing some of the overrriding methods used as workarounds for differences between nsuml and mdr - tfm - 20060302"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is a redundant invocation"}
{"projectname":"argouml","classification":"DESIGN","comment":"get all classifiers in our model todo: we need the property panels to have some reference to the project they belong to instead of using deprecated functionality"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: copied from umldiagramrenderer. get the fignode from the given layer that represents the given model element. the fignode portion of an association class is returned in preference to the figedge portion. if no fignode is found then a figedge is searched for and the fignode that acts as its edge port is returned. @param lay the layer containing the fig @param modelelement the model element to find presentation for @return the fignode presentation of the model element"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: build a return parameter"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: getallpossiblesubvertices and getallsubstates are duplicates - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: how to merge multiple inheritance? necessary? this currently copies the common ancestors multiple times"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this can't depend on projectbrowser. alternate below"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is a composite association, so these will get deleted automatically. the only thing we need to do is check for any additional elements that need to be deleted as a result."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is well-formedness rule from uml1.4.2 4.5.3.20 [2] no generalizableelement can have a parent generalization to an element that is a leaf. self.parent->forall(s | not s.isleaf)"}
{"projectname":"argouml","classification":"DESIGN","comment":"check arguments against parameters for type and number todo: perhaps move this to a critic instead? - tfm - 20070326"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: add standard stereotype? set is open ended, but predefined names include: call, create, instantiate, send"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is there anyway we can determine this size at runtime?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: taken from figclassifierboxwithattribute to handle events on an attribute. all this event handling should eventually be moved to the compartment fig for attributes"}
{"projectname":"argouml","classification":"DESIGN","comment":"we are getting events we don't want. filter them out. todo: can we instruct the model event pump not to send these in the first place? see defect 5095. @param event the event"}
{"projectname":"argouml","classification":"DESIGN","comment":"modelimpl.getfacade().getrootelements() gets all root elements in the uml repository, including available profiles that are not part of the current project (degrades performance). projectmanager.getmanager().getcurrentproject().getroots() only returns user model roots, and no profiles. projectmanager.getmanager().getcurrentproject().getmodels() gets all root models, but no root namespaces. todo: which is best? is there any other way?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: as currently coded, this actually returns all behavioralfeatures which are owned by classifiers contained in the given namespace, which is slightly different then what's documented. it will not include any behavioralfeatures which are part of the namespace, but which don't have an owner."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: performance. consider instantiating this just once outside the for loops and clear at this point instead."}
{"projectname":"argouml","classification":"DESIGN","comment":"delete a model element. implements 'cascading delete' to make sure model is still valid after element has been deleted.<p> the actual deletion is delegated to delete methods in the rest of the factories. for example: a method deleteclass exists on corehelper. delete methods as deleteclass should only do those extra actions that are necessary for the deletion of the modelelement itself. i.e. deleteclass should only take care of things specific to umlclass.<p> the delete methods in the uml factories should not be called directly throughout the code! calls should always refer to this method and never call the deletexxx method on xxxfactory directly. the reason that it is possible to call the deletexxx methods directly is a pure implementation detail.<p> the implementation of this method uses a quite complicated if\/then\/else tree. this is done to provide optimal performance and full compliance to the uml 1.4 metamodel. the last remark refers to the fact that the uml 1.4 model uses multiple inheritance in several places. this has to be taken into account.<p> todo: the requirements of the metamodel could probably be better determined by reflection on the metamodel. then each association that a deleted element participates in could be reviewed to make sure that it meets the requirements and, if not, be deleted. - tfm<p> extensions and its children are not taken into account here. they do not require extra cleanup actions. not in the form of a call to the remove method as is normal for all children of mbase and not in the form of other behaviour we want to implement via this operation. @param elem the element to be deleted @see org.argouml.model.umlfactory#delete(java.lang.object)"}
{"projectname":"argouml","classification":"DESIGN","comment":"don't allow connections to be created from a read only model element to any other todo: this should be considered a workaround. it only works because, by default, we place newly created relationships in the namespace of the fromelement. the correct behavior in the presence of read-only elements really depends on the type of connection as well as the writeability of both ends."}
{"projectname":"argouml","classification":"DESIGN","comment":"an array of valid connections, the combination of connecting class and node classes must exist as a row in this list to be considered valid. <ul> <li>the 1st column is the connecting element. <li>the 2nd column is the \"from\" element type. <li>the 3rd column is the \"to\" element type. the 3rd column is optional, if not given then it is assumed to be the same as the \"from\" element. <li>the existence of a 4th column indicates that the connection is valid in one direction only. <\/ul> todo: this encodes not only what is legal in uml, but also what argouml knows how to create, so not all legal connections are included. probably should be split into two pieces: 1) legal uml (here) and 2) supported (in argouml application someplace) - tfm - 20060325<p> see also issue 3863.<p> most of these are subtypes of relationship which includes association, dependency, flow, generalization, extend, and include. dependency includes binding, abstraction, usage, and permission. associationrole and associationclass are associations. the remaining items (link, transition, associationend, message) are non-relationship types which argouml treats as connections\/edges."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: check for duplicates (is this possible???)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we also have code registering for the names of a tagged value like \"derived\""}
{"projectname":"argouml","classification":"DESIGN","comment":"recursive method to get all subtypes. todo: does this have a scalability problem?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: bob says - we should not be listening here for addition and removal of attributes. this should be done in figattributescompartment."}
{"projectname":"argouml","classification":"DESIGN","comment":"don't wait on ourselves, we'll deadlock! todo: we might want to throw an exception here"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: must we calculate the whole list?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: replace this recursive function by a loop like in getroot:"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: because we get called on each and every change event, when the model is in a state of flux, we'll often get an invalidelementexception before we finish this collection. the only saving grace is that we're called so many times that on the last time, things should be stable again and we'll get a good set of elements for the final update. we need a better mechanism."}
{"projectname":"argouml","classification":"DESIGN","comment":"updates a compartment box. called from updatelayout if there is a model event effecting the attributes\/operations and from renderingchanged in all cases. todo: the above statement means that the entire contents of the compartments are being rebuilt whenever an add\/remove of an attribute, operation or a reception is detected. it would be better to have compartments listen for add and remove events and make minimum change rather than entirely rebuild. remark mvw: this is a bit exaggerated, since the populate() method is already heavily optimized."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: reconfigure exception handling to distinguish between errors that are possible due to bad input data and those that represent unexpected processing errors."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: callers will need to be refactored to work around the change in the way multiplicities work - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: some elements such as generalization are no longer named. for a transitional period we'll return a string so debug can continue, but the calling code should probably be fixed. - tfm 20070607 bob says - these are the comments that were in facadeeumlimpl.getname. same trick is needed here for now."}
{"projectname":"argouml","classification":"DESIGN","comment":"map of which resources are read-only. <p> todo: this needs to be managed per editingdomain."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: mvw: would it not be better if this code would go in starttexteditor(), not overruling mouseclicked(). but we made this fig not editable, to stop it from reacting on key-presses. anyhow - this is a hack - abusing a figtext - gef does not really support double-clicking on a fig to trigger some action."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: does corehelper#getextendingclassifiers(object element) means all direct and indirect extending classifiers or only the direct extending classifiers?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this code appears to be designed to jump to the diagram containing the contents of the package that was double clicked but it looks like it's always searching for the name \"main\" instead of the package name. todo: but in any case, it should be delegating this work to to something that knows about the diagrams and they contents -tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what is the behavior of this in the case of nested models?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is this returning extended elements or base classes?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: instancespecification -> classifier association isn't navigable in this direction"}
{"projectname":"argouml","classification":"DESIGN","comment":"a model element has been removed from this packages namespace if the fig representing that model element is on the same diagram as this package then make sure it is not enclosed by this package. todo: in my view the fig representing the model element should be removed from the diagram. yet to be agreed. bob."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: seems to work only with both loops, check why."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this needs to be double checked. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"used by pgml.tee. @return the class name and bounds together with compartment visibility. todo: is this not duplicate with the parent?"}
{"projectname":"argouml","classification":"DESIGN","comment":"this node cannot be dragged and manipulated in the same way as other fignodes in argouml. it is actually an optional child fig (or more precisely a path item) of a figedgemodelelement. this allows the dashed edge of an association class to connect the association edge and allows the dashed edge of a comment edge to attach a comment to some other edge type. gef can only attach edges to nodes, by making this fig both a node and containing it as a child of an edge we push the rules to allow edge to edge connections. todo: we are inheriting a lot of functionality here that we don't really require. we should attempt to make figedgeport extend fignode. @author bob tarling"}
{"projectname":"argouml","classification":"DESIGN","comment":"searches for a stereotype just like the given stereotype in all given models (and their sub-namespaces). the given stereotype can not have its namespace set yet; otherwise it will be returned itself! todo: this function should not take a stereotype object as parameter, but a name and a baseclass. <p> todo: currently only works for stereotypes with only one baseclass. <p> todo: should it only search for stereotypes owned by the model object? @param models a collection of models @param stereo is the given stereotype @return stereotype"}
{"projectname":"argouml","classification":"DESIGN","comment":"finds a stereotype in a given namespace, and all those in any sub-namespace of the given namespace. returns null if no such stereotype is found. <p> todo: what if stereo.getname() or stereo.getbaseclass() is null? then you know immediately that none will be found, but is that the correct answer? currently, null is returned in these cases. <p> todo: this function should not take a stereotype object as parameter, but a name and a baseclass. <p> todo: currently only works for stereotypes with only one baseclass. <p> todo: currently only works for stereotypes where the baseclass is equal to the given one - inheritance does not work. @return the stereotype found or null. @param ns is the namespace. @param stereo is the stereotype."}
{"projectname":"argouml","classification":"DESIGN","comment":"creates a uml model element of the given type. this only works for uml elements. if a diagram contains elements of another type then it is the responsibility of the diagram manage those items and not call this method. it also only works for uml model elements that are represented in diagrams by a node. @param elementtype the type of model element to build @return the model element todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"builds a compositestate as top for some statemachine.<p> todo: confusing name: this method should better be named buildtopstateonstatemachine. @param statemachine the given statemachine @return mcompositestate the newly build top state @see #buildcompositestate(object)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: mvw: this needs rethinking\/rework! i have the following questions: why does it not search for a stereotype in the namespace using properties and only create a new stereotype if it will actually be used? ie, why is there not a getstereotype(string name, string baseclass)? (edited by d00mst)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this functionality is in the worn place. we should be able to call setvisible on the compartment itself and then this class should react to that event. improvements will follow in later releases. hence this method should not be considered stable for module developers. @param compartment the compartment to be changed @param isvisible true if the attribute compartment is visible"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should become private and only called from constructor @see org.argouml.uml.diagram.ui.figcompartment#populate()"}
{"projectname":"argouml","classification":"DESIGN","comment":"remove all items in the group, otherwise the model event listeners remain: todo: why does a figgroup not do this?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: in uml 2.0, classifierrole, associationrole, and associationendrole have been replaced by the internal structure of the collaboration"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the above populate works but seems rather heavy here. i can see something like this is needed though as events won't manage this quick enough. could we make figeditablecompartment.createmodelelement() create the new child fig instance? it may also be useful for it to return the new model element rather than the current void return - bob."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is this needed\/correct? for when all compartments are hidden?"}
{"projectname":"argouml","classification":"DESIGN","comment":"this tag is set on elements that are generated by reference when importing. if it is set, then the critics could ignore those objects if they want. todo: this is really belongs in a higher level utility class that uses the facade's tagged value methods. also, it needs to be updated to use a uml 1.4 tagdefinition instead of a simple string."}
{"projectname":"argouml","classification":"DESIGN","comment":"recognizer for n-ary association. todo: this is not a recognizer for some type. rename to isnaryassociation? @param handle candidate @return true if handle is an association"}
{"projectname":"argouml","classification":"DESIGN","comment":"builds an interface with a given name. @param name is the given name. @return interface todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"builds a default implementation for an interface. the interface is not owned by any model element by default. users should not forget to add ownership. @return interface todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"check if labels etc have been hit apparently gef does require pathitems to be \"annotations\" which ours aren't, so until that is resolved..."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml templateparameter. @return an initialized uml templateparameter instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"builds a default implementation for a class. the class is not owned by any model element by default. users should not forget to add ownership. @return newly created class todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml usage. @return an initialized uml usage instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml permission. @return an initialized uml permission instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created. @deprecated for 0.27.3 by tfmorris. renamed in uml 2.x to packageimport. use {@link #createpackageimport()}."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml permission. @return an initialized uml permission instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"action to add a stereotype to a model element. todo: appears to be unused? @author bob tarling @deprecated for 0.27.2 by tfmorris. use {@link org.argouml.uml.actionaddstereotype}."}
{"projectname":"argouml","classification":"DESIGN","comment":"returns the destination of a relation or link. the destination of a relation is defined as the modelelement that receives this relation. if there are more then 1 destinations, only the first is returned. if there is no destination, null is returned. examples of sources include classifiers that are types to associationends, usecases that are bases to extend and include relations and so on. in the case of an association, the destination is defined as the type of the second element in the connections list.<p> todo: move this method to a generic modelhelper @param relationship is the relation @return object"}
{"projectname":"argouml","classification":"DESIGN","comment":"return the source of a relation or link. the source of a relation is defined as the modelelement that propagates this relation. if there are more then 1 sources, only the first is returned. if there is no source, null is returned. examples of sources include classifiers that are types to associationends, usecases that are bases to extend and include relations and so on. a source is always the start from the arrow in the fig, the destination the end.<p> todo: move this method to a generic modelhelper @param relationship is the relation @return object"}
{"projectname":"argouml","classification":"DESIGN","comment":"sets the language of an expression. todo: this operation is fooling the user in thinking that the body of the object is changed. instead, a new object is created. there is no other way: a mexpression can not be altered, once created! so, this operation returns a newly created object instead. @param handle the expression. @param language the new language. @return the newly created object."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: remove the casting to diagramfactoryinterface2 as soon as diagramfactoryinterface is removed."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: having critics actions here introduces an unnecessary dependency on the critics subsystem. have it register its desired actions using an extension mechanism - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"true if an instance is allowed to be invisible. this is currently only set true by figedgeport. todo: figedgeport should be removed from the fignodemodelelement hierarchy and so the need for this removed."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we really want this class to have package scope however the reflection"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: there are lots and lots of magic numbers used in calculating positions and sizes. any time you see figs being placed at 10,10 use these constants instead. if you can reliably interpret calculations, you can factor them out of there as well. add additional constants as needed to express other common factors - tfm 20081201"}
{"projectname":"argouml","classification":"DESIGN","comment":"name is set to the empty string (yuck!) by default - fix it"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: note copy\/paste code in figexitpoint - where is this code better placed in gef?"}
{"projectname":"argouml","classification":"DESIGN","comment":"find a model element in modelelements which name is equal to name. @param name the name of the model element to find. it can't be null. @param modelelements the {@link collection} of model elements in which to find a model element with name. @return the model element if found or null. todo: maybe should be moved to a helper class that deals with model related stuff."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we should really set up our own profile instead of depending on the default. this depends on the default profile configuration containing the type integer to test properly. otherwise it will get created in the main project, defeating the purpose"}
{"projectname":"argouml","classification":"DESIGN","comment":"called by propertychanged when it detects that a stereotype has been added or removed. on removal the fignode removes its listener to that stereotype. when a new stereotype is detected we add a listener. todo: bob says: in my opinion we shouldn't be doing this here. figstereotype should always be listening to change of its owners name. figstereotypescompartment should always be listening for add or remove of stereotypes to its owner. those classes will need to pass some event to the fignode on the awt thread only if a change results in a change of size that requires a redraw. <p>note: runs at the model (mdr) thread <\/p> @param event the umlchangeevent that caused the change"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do we want the top level package here instead of the immediate parent?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this creates a dependency on the critics subsystem. we need a generic way for modules (including our internal subsystems) to request addition of actions to the popup menu. - tfm 20080430"}
{"projectname":"argouml","classification":"DESIGN","comment":"this is a template method called by the argouml framework as the result of a change to a model element. do not call this method directly yourself. <p>override this in any subclasses in order to change what model elements the fignode is listening to as a result of change to the model. <\/p> <p>this method is guaranteed by the framework to be running on the same thread as the model subsystem.<\/p> todo: lets refactor this at some time to take umlchangeevent argument @param event the umlchangeevent that caused the change"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: generalize extension and remove critic specific code"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is this required? why would the fig already be dashed? @see org.tigris.gef.presentation.figedge#setfig( org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"DESIGN","comment":"prevent underline events if underline does not change. todo: gef should manage this after gef 0.13.4 is included."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: generalize extension and remove critic specific stuff"}
{"projectname":"argouml","classification":"DESIGN","comment":"there shall not be a dependency from ... to ..."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: use the following function to have a dropdown set of tools: toolbarfactory.additemstotoolbar(buttonpanel, actions, true); instead, this temporary solution: @param buttonpanel the toolbar @param actions an array of actions representing the tool layout"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we shouldn't need this reflection any more once we have convinced ourselves that everything with a getitemuid method is implementing iitemuid"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: figure out when this is getting thrown throw new unsupportedoperationexception();"}
{"projectname":"argouml","classification":"DESIGN","comment":"constraint: this code only deals with 1 supplier per dependency! todo: how to support more? @see org.argouml.uml.ui.abstractactionaddmodelelement#doit(java.util.list)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the namespace of created events is currently the model. i think this is wrong, they should be in the namespace of the activitygraph! vec.addall( model.getmodelmanagementhelper().getallmodelelementsofkind( model.getfacade().getnamespace(gettarget()), model.getmetatypes().getevent()));"}
{"projectname":"argouml","classification":"DESIGN","comment":"changes the font for all figs contained in the given figgroup. <p> todo: in fact, there is a design error in this method: e.g. for a class, if the name is italic since the class is abstract, then the classes features should be in plain font. this problem can be fixed by implementing the updatefont() method in all subclasses. @param fg the figgroup to change the font of."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the namespace of enlisted events is currently the model. i think this is wrong, they should be in the namespace of the activitygraph! vec.addall(model.getmodelmanagementhelper().getallmodelelementsofkind( model.getfacade().getnamespace(gettarget()), model.getmetatypes().getevent()));"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: move this in figgroup (in gef). @param scb the suppresscalcbounds to set."}
{"projectname":"argouml","classification":"DESIGN","comment":"update the titlelabel mvw: this overrules the icon set initiallly... why do we need this?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this function attempts to optimize the more generic code in the parent, which also works correctly in this case. is this a good idea?"}
{"projectname":"argouml","classification":"DESIGN","comment":"creates a new checkbox menu item attached to the specified action object and appends it to the end of this menu. todo: this is almost a duplicate of argojmenu.addcheckitem must find a way to merge. @param a the action for the checkbox menu item to be added @return the new checkbox menu item"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: 21\/12\/2008 dthompson mouseclicked(me) above consumes the mouse event internally, so i suspect that this line might not be necessary."}
{"projectname":"argouml","classification":"DESIGN","comment":"actionaddexistingnode enables pasting of an existing node into a diagram. @author eugenio alvarez data access technologies. todo: why do we have this class as well as actionaddexistingnodes?"}
{"projectname":"argouml","classification":"DESIGN","comment":"the constructor. todo: the \"name\" parameter is used for the icon and for the tooltip. this makes i18n of the tooltip impossible. @param modeclass the next global editor mode @param modeargs arguments for the new mode @param name the name of the command that is the tooltip text."}
{"projectname":"argouml","classification":"DESIGN","comment":"fix up bad figs. <p> due to errors in earlier releases of argouml it can happen that there is a generalization without a child or parent. <p> todo: move into xsl. we should not remove from the graph model while we're writing to it or we have a possible cause of concurrent modification exception. @param owner"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the above doesn't work reliably in a constructor. we need a better way of getting default fig settings for the owning project rather than using the project manager singleton. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"defines the methods to generate source code from the model. each class providing code generation functionality must implement this to be recognized by argouml as a code generator. <p> todo: a gui-independent mechanism to pass settings to the code generator is needed similar to what we have for reverse engineering. see {@link org.argouml.uml.reveng.importinterface#getimportsettings()} and {@link org.argouml.uml.reveng.settingstypes} @since 0.20 when it replaced the filegenerator interface."}
{"projectname":"argouml","classification":"DESIGN","comment":"hack: don't show first column, where the model element object is placed."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: it doesn't matter what these get set to because gef can't draw anything except 1 pixel wide lines"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: workaround for gef redraw problem force all child figs into the same layer"}
{"projectname":"argouml","classification":"DESIGN","comment":"this should not be looking for a namedelement, since this is not always about the name of this modelelement alone."}
{"projectname":"argouml","classification":"DESIGN","comment":"<p>determines if the figedge is currently connected to the correct fignodes, if not the edges is the correct fignodes set and the edge rerouted. <p>typically this is used when a user has amended from the property panel a relationship from one model element to another and the graph needs to react to that change. <p>e.g. if the participant of an association end is changed. <p>calls a helper method (layoutthistoself) to avoid this edge disappearing if the new source and dest are the same node. todo: this method is called far too frequently. it should only be called when a specific event is received. it seems to be currently called whenever any event is received from the owner. @return boolean whether or not the update was sucessful"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this class should be moved to package org.argouml.uml.ui.behavior.common_behavior"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: dependency cycle between fignodemodelelement and figedgeme is this needed? if so, introduce a removable interface to decouple"}
{"projectname":"argouml","classification":"DESIGN","comment":"figmycircle is a figcircle with corrected connectionpoint method: this methods calculates where a connected edge ends.<p> todo: once we are at gef version 0.13.1m4, this whole class can be removed, since it was taken over by gef."}
{"projectname":"argouml","classification":"DESIGN","comment":"compute the border point of the ellipse that is on the edge between the stored upper left corner and the given parameter.<p> todo: once we are at gef version 0.13.1m4, this method and in fact the whole class can be removed, since it was taken over by gef in revision 1279. @param anotherpt the remote point to which an edge is drawn. @return the connection point on the boundary of the ellipse."}
{"projectname":"argouml","classification":"DESIGN","comment":"class to display graphics for n-ary association (association node), i.e. the diamond. <p> todo: improve the location of the stereotypes! @author pepargouml@yahoo.es"}
{"projectname":"argouml","classification":"DESIGN","comment":"the constructor. todo: the \"name\" parameter is used for the icon and for the tooltip. this makes i18n of the tooltip impossible. @param modeclass the next global editor mode @param arg the name of a new argument for the new mode @param value the value of a new argument for the new mode @param name the name of the command that is the tooltip text."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: send an event instead of calling explorer directly"}
{"projectname":"argouml","classification":"DESIGN","comment":"sets the target of the property panel. the given target t may either be a diagram or a modelelement. if the target given is a fig, a check is made if the fig has an owning modelelement and occurs on the current diagram. if so, that modelelement is the target. @deprecated as of argouml version 0.13.5, the visibility of this method will change in the future, replaced by {@link org.argouml.ui.targetmanager.targetmanager}. todo: mvw: i think this should not be deprecated. @param target the new target @see org.argouml.ui.tabtarget#settarget(java.lang.object)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this needs to use a different method than that used by the constructor if it wants to allow the method to be overridden"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: can we delegate this to a specialist figname class?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: replace magic numbers with constants"}
{"projectname":"argouml","classification":"DESIGN","comment":"information about a source unit and its content, whether it exists only in memory or it's stored in a file. todo: making this an interface instead of a class would allow more flexibility in dealing with non-file-based resources. - tfm @author aslo"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: without the null check the following throws a npe so many times when it is called from figedgemodelelement.modelchanged(), we need to think about it."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should be managed by the detailspane targetlistener - tfm remove the following line"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this can't depend on projectbrowser. it needs to get the current drawing area from the diagram subsystem or gef"}
{"projectname":"argouml","classification":"DESIGN","comment":"create the main draggable label for the association. this can be overridden in subclasses to change behaviour. todo: consider introducing this to figedgemodelelement and using throughout all edges. @param owner owning uml element @param settings rendering settings"}
{"projectname":"argouml","classification":"DESIGN","comment":"mvw: for this case, i had to move the call to setselecteditem() outside the \"buildingmodel\", otherwise the combo does not update with the new selection. see issue 5418."}
{"projectname":"argouml","classification":"DESIGN","comment":"mvw: for this case, i have to move the call to setselecteditem() outside the \"buildingmodel\", otherwise the combo does not update with the new selection. the same does probably apply to the cases above!"}
{"projectname":"argouml","classification":"DESIGN","comment":"the fig for a permission, which is a form of dependency. <p> todo: in uml 2.x, the import and access permissions have become packageimports with public visibility and non-public visibility respectively. (argouml only supports the <<import>> permission currently). the friend permission has been dropped. also the type hierarchy has been reorganized so that packageimport is not a subtype of dependency. @author markus klink"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: how does the pressed cancel become a java.lang.exception?"}
{"projectname":"argouml","classification":"DESIGN","comment":"action to trigger code generation for one or more classes. <p> in fact, only all named classes and interfaces on the active diagram are generated. or, if this delivers an empty collection, all selected classes, interfaces and the contents of selected packages are generated (independent if they are named or not). <p> todo: implement a more logical behaviour."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: bob says - if the model element is not named we could generate a name. e.g. a generalization becomes \"class a -> class b\""}
{"projectname":"argouml","classification":"DESIGN","comment":"hack to make sure that the right height is applied when no icon is used."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should be more extensible... may be only \"findpanelfor(target)\" if there is a panel why not show it?"}
{"projectname":"argouml","classification":"DESIGN","comment":"utility function to localize the given string with help text, and show it in the status bar of the argouml window. this function is used in favour of the inline call to enable later improvements; e.g. it would be possible to show a help-balloon. <p> todo: this code is also present in other root figs... @param s the given string to be localized and shown"}
{"projectname":"argouml","classification":"DESIGN","comment":"add a concurrent region to a concurrent composite state <p> this action can be executed with either the composite concurrent state selected, or one of its concurrent regions. <p> todo: move all the magic numbers to constants @author pepargouml@yahoo.es"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo improve extensibility of this!"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: make the \"magic numbers\" configurable"}
{"projectname":"argouml","classification":"DESIGN","comment":"helper method for changeconnectednode. todo: this should probably be in superclass. associations can be on several diagram types."}
{"projectname":"argouml","classification":"DESIGN","comment":"returns the current target. @deprecated as of argouml version 0.13.5, the visibility of this method will change in the future, replaced by {@link org.argouml.ui.targetmanager.targetmanager#gettarget() targetmanager.getinstance().gettarget()}. todo: mvw: i think this should not be deprecated. @return the target @see org.argouml.ui.tabtarget#gettarget()"}
{"projectname":"argouml","classification":"DESIGN","comment":"reroutes the connection to the old node to be connected to the new node. delegates to reroutexxx(,,,) for each of the 4 possible edges in a class diagram: association, dependency, generalization, link. todo: this should probably be in superclass. many figs can be on several diagram types. @param newnode this is the new node that one of the ends is dragged to. @param oldnode this is the existing node that is already connected. @param edge this is the edge that is being dragged\/rerouted @param issource tells us which end is being rerouted."}
{"projectname":"argouml","classification":"DESIGN","comment":"prevent bold events if bold does not change. todo: gef should manage this after gef 0.13.4 is included."}
{"projectname":"argouml","classification":"DESIGN","comment":"@see java.awt.event.actionlistener#actionperformed(java.awt.event.actionevent) todo: from combobox javadoc - \"this method is public as an implementation side effect. do not call or override.\" we should find some other way to implement this."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this shouldn't know about the specific type of fig that is being displayed. that couples it too strongly to things it shouldn't need to know about - tfm - 20070924"}
{"projectname":"argouml","classification":"DESIGN","comment":"the model for the table with the tagged values. implementation for uml 1.4 and tagdefinitions. todo: this currently only supports taggedvalues with a tagdefinition which has a type of string."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: use our extension registration mechanism for our internal classes as well, so everything is treated the same"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we should really be passing the default settings to the diagram factory so they get set at creation time"}
{"projectname":"argouml","classification":"DESIGN","comment":"idem, e.g. for a generalization with leaf\/root object todo: but showing the message in the statusbar would help todo: illegalargumentexception should not be used for events we expect to happen. we need a different way of catching well-formedness rules."}
{"projectname":"argouml","classification":"DESIGN","comment":"the connect method specifying a connection type by class is unavailable in the argouml implementation. todo: this should be unsupported. use the 3 object version {@inheritdoc}"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we'd like these to not be filled, but gef won't let us select them if we do that. setfilled(false);"}
{"projectname":"argouml","classification":"DESIGN","comment":"gef methods todo: these should really be picked up automatically from some gef interface that we extend, but there is no such thing. note: we've only added methods used by argouml, so it's possible that external consumers need other methods."}
{"projectname":"argouml","classification":"DESIGN","comment":"abstract class that is the parent of all actions adding diagrams to argouml. the children of this class should implement creatediagram to do any specific actions for creating a diagram and isvalidnamespace that checks if some namespace is valid to add the diagram to. <p> argouml shall never create a diagram for a read-only modelelement.<p> todo: this class should be merged with actionnewdiagram. @author jaap.branderhorst@xs4all.nl"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: mvw: i am not completely sure of the following:<p> the \"namespace\" of the diagram is e.g. used when creating new elements that are shown on the diagram; they will have their namespace set according this. it is not necessarily equal to the \"owner\". @return the namespace for the diagram"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: use default value of appropriate type here"}
{"projectname":"argouml","classification":"DESIGN","comment":"set the fig style according to attributes. <p> todo: this is never used! can we remove? @param fig the fig to style. @param attributemap a map of name value pairs"}
{"projectname":"argouml","classification":"DESIGN","comment":"we hang our heads in shame. there are still bugs in argouml and\/or gef that cause corruptions in the model. before a save takes place we repair the model in order to be as certain as possible that the saved file will reload. todo: split into small inner classes for each fix. @return a text that explains what is repaired."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the reference to the method org.argouml.uml.ui.vetoablepropertychange#getvetomessage(string) was here but the class does exist anymore. where is it? this method is never used! @param propertyname is the name of the property @return a message or null if not applicable."}
{"projectname":"argouml","classification":"DESIGN","comment":"execute this action from the command line. todo: the underlying gef library relies on acme that doesn't allow us to create these files unless there is a window showing. for this reason i have had to split the performing of commands in {@link org.argouml.application.main#main(string[])} so that we can, by not supplying the -batch option, run these commands with the window showing. hopefully this can eventually be fixed. @see org.argouml.application.api.commandlineinterface#docommand(string) @param argument is the file name that we save to. @return true if it is ok."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: make the explorer listen to project member property changes... to eliminate coupling on gui."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: associationclasses fit both of the next 2 cases"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we can probably use this instead of all of the above legacy uml 1.3 code - tfm - 20070915"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: fonts shouldn't be handled any differently than other rendering attributes"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: no one should be sending the deprecated event from outside argouml, but keep responding to it for now just in case"}
{"projectname":"argouml","classification":"DESIGN","comment":"forwards this event to the tree model. @param element the modelelement to be added todo: this shouldn't be public. components desiring to inform the explorer of changes should send events."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should not need to know about projectsettings - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: why can't we use actionaddexistingnodes here? bob."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we'd like to test this in its new guise as packageimport, but we don't have a good way to do it currently"}
{"projectname":"argouml","classification":"DESIGN","comment":"constraint: this code only deals with 1 supplier per dependency! todo: do we need more? @see org.argouml.uml.ui.abstractactionaddmodelelement#doit(java.util.list)"}
{"projectname":"argouml","classification":"DESIGN","comment":"abstract action to trigger creation of a new diagram. <p> argouml shall never create a diagram for a read-only modelelement. <p> todo: bobs says, can we merge actionadddiagram with this class? @author michiel"}
{"projectname":"argouml","classification":"DESIGN","comment":"first of all, let's set up the duplicate hash. this hash contains all the duplicate key for another key. todo: every duplicate.put() is done twice - but how to avoid this?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should get the containing project from the list of targets, not from some global"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: bob says - this is a really nasty horrible hack. shadowfig should not extend fignodemodelelement. instead we require a base class fignode with common behaviour of all nodes in argouml. shadowfig should extend that and fignodemodelelement should extend that same base class adding common functionality for fignode that represent model element. @see org.argouml.uml.diagram.ui.fignodemodelelement#setshadowsize(int)"}
{"projectname":"argouml","classification":"DESIGN","comment":"a window that displays an exception to the user if we can't handle it in any other way. todo: this has been partly converted to be a generic error dialog rather than something specific to exceptions. this should be renamed when that process is complete."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: don't use hardcoded colors here - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"@author jaap.branderhorst@xs4all.nl @since jan 29, 2003 todo: for uml 2.x this needs to be changed to just a toggle which represents readonly (frozen) or not (changeable)."}
{"projectname":"argouml","classification":"DESIGN","comment":"save the project. @param file the file to save to @param pmw the progressmonitor to be updated; @return true if successful todo: separate this into a swing specific class - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"work in progress here to allow multiple details panes with different contents - bob tarling"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the following is mdr specific. we need something generic to all model subsystems - tfm 20070716"}
{"projectname":"argouml","classification":"DESIGN","comment":"this is the \"main\" class for the gui subsystem.<p> users of the gui subsystem, i.e. components that are to place themselves in any of the gui components, register themselves in this class.<p> todo: add the rest of the registers to this. @author linus tolke @since 0.21.3"}
{"projectname":"argouml","classification":"DESIGN","comment":"the constructor.<p> todo: is this constructor used? what is the purpose with it? @param n the name to be localized @param subs the go rules"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we shouldn't need this reflection any more once we have convinced ourselves that everything with a setitemuid method is implementing iitemuid"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo support nested let expressions !"}
{"projectname":"argouml","classification":"DESIGN","comment":"this is needed for a commentedge ... todo: why doesn't commentedge implement iitemuid and be handled with the mechanism above."}
{"projectname":"argouml","classification":"DESIGN","comment":"sets the directory name where the profiles can be found. initially, 'uml14' is used. todo: intermediate solution for uml 2.x support, please implement a better solution. @param dir name of the directory for the profiles"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is in the wrong place. it's not profile specific. it needs to be moved to main xmi reading code. - tfm 20060326"}
{"projectname":"argouml","classification":"DESIGN","comment":"this can be made public to allow others to extend their own persisters"}
{"projectname":"argouml","classification":"DESIGN","comment":"once all edges are connected do a compute route on each to make sure that annotations and the edge port is positioned correctly only do this after all edges are connected as compute route requires all edges to be connected to nodes. todo: it would be nice not to have to do this and restore annotation positions instead."}
{"projectname":"argouml","classification":"DESIGN","comment":"@param project the argouml {@link project} to save in file. @param file the {@link file} in which an argouml {@link project} will be persisted. @return the persister used and usable for file. @throws saveexception if saving the file goes wrong. @throws interruptedexception if an interrupt occurs while saving. todo: move this to an helper class."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this whole class needs to be updated to remove use of deprecated methods and (hopefully) test multi-root and multi-project methods. @since nov 17, 2002 @author jaap.branderhorst@xs4all.nl"}
{"projectname":"argouml","classification":"DESIGN","comment":"method 2: (assign data immediately, see end of file). todo: if we ever want to extend pathitemplacement, we should modify this, so that we also recognise any subclass of pathitemplacement. is the class name a pathitemplacment? todo: use class reference to make this dependency obvious"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: there are cyclic dependencies between actionstereotypeview* and fignodemodelelement. register these actions opaquely since we don't what they are. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do we care?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: break into 3 main member types model, diagram and other"}
{"projectname":"argouml","classification":"DESIGN","comment":"get an {@link abstractfilepersister} for file. @param file the {@link file} in which an argouml {@link project} will be persisted. @return the appropriate persister for file or null if the file's extension doesn't match a supported persister. todo: move this to an helper class."}
{"projectname":"argouml","classification":"DESIGN","comment":"finds a type in a model by name fixme: duplicated from the method with the same name in org.argouml.profile.internal.modelutils. @param s the type name @param model the model @return the type or <code>null<\/code> if the type has not been found."}
{"projectname":"argouml","classification":"DESIGN","comment":"this class manages the projects loaded in argouml, and what the current project is. <p> classes in argouml can ask this class for the current project and set the current project. since we only have one project in argouml at the moment, this class does not manage a list of projects like one would expect. this could be a nice extension for the future of argouml. as soon as the current project is changed, a property changed event is fired. <p> todo: move everything related to the creation of a project into the projectfactory. @since nov 17, 2002 @author jaap.branderhorst@xs4all.nl @stereotype singleton"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is this used in places other than on diagrams? if so, it needs to stay in projectsettings (as well as being a diagramsetting). @return returns <code>true<\/code> if we show stereotypes in the explorer"}
{"projectname":"argouml","classification":"DESIGN","comment":"@throws saxexception when things go wrong with sax @throws ioexception when there's an io error @throws parserconfigurationexception when the parser finds wrong syntax todo: unused?"}
{"projectname":"argouml","classification":"DESIGN","comment":"since this is (hopefully) a temporary solution, and nobody ever looks at the type of notation event, we can simplify from sending every existing event to one event only. but since there is no catch-all event defined, we just make one up. rationale: reduce the number of total refreshes of the drawing."}
{"projectname":"argouml","classification":"DESIGN","comment":"prefix identified as an implementation specific class. todo: this should be generalized so it doesn't have to be changed each time a new implementation is created - tfm 20051109"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is temporary. we need a new list for uml 2.x the following uml 1.4 elements are not in uml 2.x"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is currently just a mechanical merge of the tests in from the generic model test and the nsuml tests. they need to be reviewed & merged. @author euluis @since 0.19.2 @version 0.00"}
{"projectname":"argouml","classification":"DESIGN","comment":"finds a classifier with a certain name.<p> will only return first classifier with the matching name. todo: move to model subsystem - tfm 20070307 @param s is short name. @param ns namespace where we do the search. @return the found classifier (or <code>null<\/code> if not found)."}
{"projectname":"argouml","classification":"DESIGN","comment":"the uml 2.x package structure is *entirely* different, so we have to remap a bunch of stuff. names without embedded colons (:) indicate that the entire package is remapped. e.g. kernel->core as a matter of fact the only package which did not get renamed or moved is usecases. todo: this section is very incomplete. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"set the uri for this project. <p> don't use this directly! use instead: {@link org.argouml.persistence.persistencemanager #setprojecturi(uri, project)} <p> todo: why isn't this deprecated or private if it is not to be used? @param theuri the uri to set."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: projectbrowser doesn't need to mediate this conversation use an event listener in the todopane to communicate instead. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"the project interface encapsulates all information about a designer's project. it contains the list of diagrams and uml models, various project properties such as the author's name, and defaults for various settings. <p> todo: this interface was mechanically refactored from the implementation class {@link projectimpl}. it needs to be reviewed and cleaned up, eliminating methods which should be part of the public api and splitting the interface into smaller function specific (e.g. trashcan) interfaces. @author tom morris <tfmorris@gmail.com>, thomas neustupny @since 0.25.4 when it replaced the concrete class of the same name"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should listen for new target events fired by wizstep.updatetabtodo so that we can decouple it from the projectbrowser."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: should fire its own event and projectbrowser todo: should register a listener"}
{"projectname":"argouml","classification":"DESIGN","comment":"agency manages critics. since classes are not really first class objects in java, a singleton instance of agency is made and passed around as needed. the agency keeps a registry of all critics that should be applied to each type of design material. when a design material instance is critiqued it asks agency to apply all registered critic's. in the current scheme there is a thread that proactively, continuously critiques the design at hand, even if the user is idle! this is simple and it works. the disadvantage is that _all_ active critics related to a given design material are applied, regardless of the reason for the critiquing and a lot of cpu time is basically wasted. <p> todo: i am moving toward a more reactionary scheme in which specific design manipulations in the editor cause critics relevant to those manipulations to be applied. this transition is still half done. triggers are the critiquing requests. the code for triggers is currently dormant (latent?).<p> todo: there is a strong dependency cycle between agency and designer. they either need to be merged into a single class or partitioned differently, perhaps using an interface to break the cycle. the designer singleton gets passed to almost every single part of the critic subsystem, creating strong coupling throughout. - tfm 20070620 @author jason robbins"}
{"projectname":"argouml","classification":"DESIGN","comment":"reply true iff this critic is relevant to the goals that the designer is trying to achieve. by default, all critic's are relevant regardless of the goalmodel. really this is something for a controlmech to compute, but if a subclass of critic encapsulates some information you may need to override this method. <p> todo: i would like a better default action, but goals are typed and their values must be interpreted by critics. they are not as generic as the decisionmodel. @param dsgr the designer @return true if relevant"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is a hack. a much better way of doing this would be not to start the critic in the first place."}
{"projectname":"argouml","classification":"DESIGN","comment":"return true iff the given todoitem is still valid and should be kept in the given designers todolist. critics that are not enabled should always return false so that their todoitems will be removed. subclasses of critic that supply multiple offenders should always override this method. <p> by default this method basically asks the critic to again critique the offending object and then it checks if the resulting todoitem is the same as the one already posted. this is simple and it works fine for light-weight critics. critics that expend a lot of computational effort in making feedback that can be easily check to see if it still holds, should override this method. <p> todo: maybe todoitem should carry some data to make this method more efficient. {@inheritdoc}"}
{"projectname":"argouml","classification":"DESIGN","comment":"the decisionmodel is part of the state of the designer. it describes what types of decisions, or design issues, the designer is thinking about at the current time. critics that are relevant to those decisions are made active, critics that are not relevant are made inactive. todo: there is some notion that each decision has a certain importanance at a certain time, but i have not followed through on that because i don't have good examples of how to quantify the importance of a decision. todo: right now the individual decisions are just strings, maybe they should have some non-atomic structure? @author jason robbins"}
{"projectname":"argouml","classification":"DESIGN","comment":"how much control should critics have over when they are relavant? does doing that in code instead of declaratively limit reasoning? how does using more semantically rich method calls impact componentization?"}
{"projectname":"argouml","classification":"DESIGN","comment":"this class models the designer who is building a complex design in some application domain and needs continuous feedback to aid in the making of good design decisions.<p> <strong>this area needs work, especially as it is a central idea of argo.<\/strong><p> currently (almost) everything is hardcoded. what can be configurable??<p> the todolist is dependent on this class, i.e. each designer has its todolist.<p> each designer has his own agency, which is the only class that knows all the critics.<p> this class listens to property changes from ...?<p> a designer can create todo items, just like the critics. hence the designer implements the poster interface.<p> todo: there is a strong dependency cycle between agency and designer. they either need to be merged into a single class or partitioned differently, perhaps using an interface to break the cycle. the designer singleton gets passed to almost every single part of the critic subsystem, creating strong coupling throughout. - tfm 20070620 @author jason robbins"}
{"projectname":"argouml","classification":"DESIGN","comment":"return the default type for a parameter. @return a classifier to use as the default type todo: this belongs in projectsettings. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: at the moment setselectedcomponent doesn't take into account the rather complex tab selection mechanism of detailspane. the tab selection mechanism must be refactored."}
{"projectname":"argouml","classification":"DESIGN","comment":"todoitems that the designer has explicitly indicated that (s)he considers resolved. <p> todo: generalize into a design rationale logging facility."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: settext in gef should call setbounds instead of directly changing x, y, w, h - then we will have an event generated correctly in gef"}
{"projectname":"argouml","classification":"DESIGN","comment":"handle firing a notation event. <p> todo: this needs to be managed on a per-diagram or per-project basis. @param event the event to be fired. @param listener the listener."}
{"projectname":"argouml","classification":"DESIGN","comment":"indicates the end of the range for notation events.<p> todo: remove this - not used anyway. @return the last id reserved for events."}
{"projectname":"argouml","classification":"DESIGN","comment":"handle firing a diagram appearance event. <p> todo: this needs to be managed on a per-diagram or per-project basis. @param event the event to be fired. @param listener the listener."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is currently duplicated from metadatacache - must find a common place in model facade"}
{"projectname":"argouml","classification":"DESIGN","comment":"andreas: this is just temporary for the uml2 pre-alpha versions."}
{"projectname":"argouml","classification":"DESIGN","comment":"sets the body of an expression. todo: this operation is fooling the user in thinking that the body of the object is changed. instead, a new object is created. there is no other way: a mexpression can not be altered, once created! so, this operation returns a newly created object instead. @param handle the expression to modify. @param body the body to set. @return the newly created expression."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should happen in gef"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: remove listeners for add\/remove events"}
{"projectname":"argouml","classification":"DESIGN","comment":"prevent italic events if italic does not change. todo: gef should manage this after gef 0.13.4 is included."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: move an empty implementation to figgroup in gef"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: note copy\/paste code in figentrypoint - where is this code better placed in gef?"}
{"projectname":"argouml","classification":"DESIGN","comment":"!! todo: all code below here is duplicated in figbasenode. the reason is the gef defect - http: gef.tigris.org\/issues\/show_bug.cgi?id=358 once we have taken a release of gef with that fix we can remove this code."}
{"projectname":"argouml","classification":"DESIGN","comment":"mode to create a link between two figclassifierroles. todo: provide a modefactory and then this class can become package scope. @author penyaskito"}
{"projectname":"argouml","classification":"DESIGN","comment":"mark the contain figpoly as complete. todo: i think more work is needed in gef to either do this automatically when both ends are set or at the very least give a setcomplete method on figpolyedge that calls its contained poly"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this shouldn't be hardcoded 20 is the height of the spline 50 is the default activation height"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: move the magic number 4 to a descriptive constant"}
{"projectname":"argouml","classification":"DESIGN","comment":"brooms all the message which y coordinate is upper than the position of the broom. todo: provide a modefactory and then this class can become package scope. @author penyaskito"}
{"projectname":"argouml","classification":"DESIGN","comment":"this is a temporary hack until the notation provider for a sd message will be able to parse successfully when the sequence number is missing. remove this method completely then."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: calcbounds is called by selectionmanager when the fig is dragged. this code is needed to reposition any self message as they are become detached from their classifier role (see issue 5562). the cause of the detachment is not yet understood. unfortunately calcbounds is called from several other places so the code here is not optimal but is the best workaround until argouml can provide its own replacement selectionmanager for sequence diagram requirements see - http: gef.tigris.org\/issues\/show_bug.cgi?id=344"}
{"projectname":"argouml","classification":"DESIGN","comment":"the default behaviour from figedgemodelelement is not correct here. see issue 5005. todo: we must determine what to do here but for now doing nothing is better. i'm not sure why the super method would not work as i would expect that to do nothing if the ends are already correct. @return true at all times for now"}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml parameter. @return an initialized uml parameter instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"convert to bounding box very screwy! gef sometimes uses center and sometimes upper left todo: gef also positions text at the nominal baseline which is well inside the bounding box and gives the overall size incorrectly"}
{"projectname":"argouml","classification":"DESIGN","comment":"this is the interface for registering interest in events sent from the model component.<p> neither the registration or unregistration, nor the events themselves contain any reference to the model implementation. instead they use the {@link java.beans.propertychangelistener}, {@link java.beans.propertychangeevent} to deliver events.<p> the reference to the listener is a weakreference so you don't need to call removewhateverlistener, you can just forget about your listener and it is eventually finalized and removed. this also means that you will have to keep a reference to your listener while it is active. since the garbage collecting mechanism is not really deterministic a forgotten about listener might still receive events. unless it can handle them in a harmless way, this approach should not be used. todo: (is this still true or does it refer to the nsuml implementation? - tfm 20051109) (this is part of the contract that is established between the model subsystem and its users. if that is not fulfilled by the current implementation, then the current implementation is incorrect. linus 20060411).<p> todo: what event names? the event names generated are {@link string}s and their values and meanings are not really well documented. in general they are the name of an an association end or attribute in the uml metamodel.<p> here are some highlights:<ul> <li>\"remove\" - event sent when the element is removed. <\/ul> @author linus tolke"}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml method. @return an initialized uml method instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml binding. @return an initialized uml binding instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"returns names of all metamodel value elements including datatypes, enumerations, and primitive types. todo: this method rightly belongs in a separate interface dealing with instances of mof types as opposed to uml types like all the rest of the methods here do. @return collection containing strings with names of all metatypes"}
{"projectname":"argouml","classification":"DESIGN","comment":"returns names of all metatypes in metamodel. todo: this method rightly belongs in a separate interface dealing with instances of mof types as opposed to uml types like all the rest of the methods here do. @return collection containing strings with names of all metatypes"}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml class. @return an initialized uml class instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml associationclass. @return an initialized uml associationclass instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of an artifact @since uml 1.4 @return an initialized artifact instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml associationend. @return an initialized uml associationend instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml abstraction. @return an initialized uml abstraction instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml attribute. @return an initialized uml attribute instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml operation. @return an initialized uml operation instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml datatype. @return an initialized uml datatype instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"called by the constructor to create the figs at each end of the association. todo: this is temporary during refactoring process. we should override setdestfignode and setsourcefignode and create the ends there. that will allow the same pattern to work for uml2 where we cannot assume the connection order. @param sourceassociationend @param destassociationend @param settings"}
{"projectname":"argouml","classification":"DESIGN","comment":"add a new package at the top level, i.e. a model.<p> todo: argouml currently only supports one model."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml comment. @return an initialized uml comment instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml dependency. @return an initialized uml dependency instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml component. @return an initialized uml component instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml constraint. @return an initialized uml constraint instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an enumerationliteral. @return object new enumeration @since uml 1.4 todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml elementresidence. @return an initialized uml elementresidence instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml interface. @return an initialized uml interface instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create an empty but initialized instance of a uml flow. @return an initialized uml flow instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create a uml primitivetype. @since uml 2.1.1 @return an initialized uml primitive instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"builds a manifestation of an element for an artifact. @param utilizedelement is the packageable element @return manifestation todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"create a uml templateargument. @since uml 1.4 @return an initialized templateargument instance. todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"this checks the order in addition to the contents is that really what we want here? - tfm 20070603"}
{"projectname":"argouml","classification":"DESIGN","comment":"builds a class with a given name. @param name the given name @return class @see #buildclass() todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"builds a method with a given name. @param name is the given name @return method todo: this needs an extra parameter to specify the model\/extent where the new element should be created."}
{"projectname":"argouml","classification":"DESIGN","comment":"recognizer for primary objects. a primary object is an object that is created by the parser or by a user. object that are created as a side effect of importing some other object are not. <p> todo: this doesn't belong in the facade. it's a higher level function used specifically for certain reverse engineering operations. - tfmorris @param handle candidate @return true if primary object."}
{"projectname":"argouml","classification":"DESIGN","comment":"recognizer for parameter's with a directionkind of return. todo: this is a duplicate of {@link #hasreturnparameterdirectionkind(object)} @param handle candidate parameter @return true if handle is a return parameter."}
{"projectname":"argouml","classification":"DESIGN","comment":"recognizer for modelelements with package visibility. todo: this method name was chosen for compatibility with the existing naming scheme, but has the potential of clashing with some future use. @param handle candidate @return true if handle has package visibility"}
{"projectname":"argouml","classification":"DESIGN","comment":"recognizer for modelelements which have the <<singleton>> stereotype applied. <p> todo: moved this out of the facade to someplace elese since it's not model subsystem specific - tfm 20070607 @param handle candidate @return true if handle is a singleton."}
{"projectname":"argouml","classification":"DESIGN","comment":"this should be moved to a ui action."}
{"projectname":"argouml","classification":"DESIGN","comment":"return the tagged value with a specific tag. <p> warning: this method returns only the first taggedvalue found with the given name. hence, this method is a simplification of the real problem and should be avoided. todo: what should be done about the above problem? options are to deprecate the method, throw an exception if the name is ambiguous, or leave the caller to figure it out themselves. @param handle the model element the tagged value belongs to. @param name the tag name. @return the found tag, null if not found"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is this removed from uml2 ?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: some of these magic numbers probably assume a line width of 1. replace with appropriate constants\/variables."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this needs to be managed on a per-project or per-model\/extent basis"}
{"projectname":"argouml","classification":"DESIGN","comment":"returns all states that can be recursively contained by the given state. <p> todo: {@link #getallpossiblesubvertices(object)} and {@link #getallsubstates(object)} are duplicates as implemented for mdr. it isn't clear from the javadoc or usage whether they should do different things or this just happened because no one noticed we already had another method. @param ostate the composite state we are searching the states for, @return collection the collection with found states"}
{"projectname":"argouml","classification":"DESIGN","comment":"add a path to the list of paths to be searched when looking for xmi files to resolve external references with. the list is maintained in a static structure shared by all instances. <p> todo: it's desirable to have separate search paths for separate files, but more work is required in argouml so that it knows how to maintain separate contexts for the profiles and user models. @param path a directory path to add to the search path"}
{"projectname":"argouml","classification":"DESIGN","comment":"the buttons on selection for a stereotype. <p> todo: find a way to hide the operationscompartment on the figclass of the created metaclass. @author michiel"}
{"projectname":"argouml","classification":"DESIGN","comment":"a changecommand that updates its label. <p> the label of this command can contain the character '#' that will be replaced with information about an object when the label is returned. <p> todo: switch this to use java string formatting instead of private # notation? @author bogdan pistol"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is probably related to the sendevent that is sending the signal, but the association is not navigable in that direction"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: see if protected or need to be present in each subclass"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we don't want to do this once we have dropped uml1.3 map uml 1.4 names to uml 1.3 equivalents"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: comment by a- rueckert: i don't think it makes much sense to query interactions from a collaboration in uml2, since this diagram does no longer exist and an interaction means something different in uml2."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: comment by a. rueckert <a_rueckert@gmx.net> : i think, the handle holding the collaboration implementation, should rather be a collaborationuse in uml2. but as a workaround for now, i'll try to get a collaboration representation (collaborationuse) and then try to get the owning classifier from there..."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this probably can't be implemented in a way that will make the uml 1.4 ui happy. needs to be generalized to uml 2 semantics."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what do we want to use as an equivalent here?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is there an option we can use to save our argouml version?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: just a guess, probably not right - tfm return handle instanceof linkenddata;"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this doesn't belong in the implementation specific piece - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the uml 1.4 concept of a multiplicity & multiplicity range has been replaced by a single element"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: not sure the semantics are an exact match here between uml 1.4 aggregate and uml 2.x shared."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: changed in uml 2.x to special type of property?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: tagdefinitions are gone from uml 2 they are now properties of stereotypes;"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: moved this out of the implementation-specific piece - tfm everything is primary for now (ie not reverse engineered)"}
{"projectname":"argouml","classification":"DESIGN","comment":"this keeps track of the editing domain that is used to track all changes to the model. <p> todo: this probably needs to be a set of editingdomain so that we can manage an editingdomain per project."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this method is mostly (entirely?) redundant - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the javadoc specifies that null should be returned if 'from' or 'to' are null or if there are no associations between them. we should return an empty collection instead and the javadoc should be changed."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this isn't right"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: does corehelper#getextendedclassifiers(object element) means all parents (direct and indirect) or only the direct parents?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo\" what is the purpose of this? why do we hide buttons here? presumably if so we should not assume selectionclass"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we currently delete the old values before setting to something new. this is a workaround to issue 6056. we should consider giving an api to get the lower and upper values so that controls can listen directly to those rather than the element containing those values."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: in uml2.x event has no parameters. the event metaclass in uml1.x corresponds to the trigger metaclass in uml2.x (see uml superstructure page 456)."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should be built by reflection from the metamodel - tfm update for uml 2.x metamodel if not replaced by reflection"}
{"projectname":"argouml","classification":"DESIGN","comment":"don't implement - deprecated method in interface."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: booleanexpresion is removed from uml2.x, is it ok to use valuespecification?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this will need to be adapted to send undo\/redo commands back to our consumer (e.g. argouml) if a new undo mechanism is implemented for the model subsystem - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"this sets up the editing domain for the model editor. todo: we probably need an editingdomain per argo project so that we can keep the resourcesets separate."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: model implementation independent"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: mvw: do we really look into super-types of the stereotype, or should we be looking into super-types of the baseclass?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do we really want stereotypes from nested packages?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should call the single namespace form getstereotype(it2.next(); stereo);"}
{"projectname":"argouml","classification":"DESIGN","comment":"an array of valid connections, the combination of connecting class and node classes must exist as a row in this list to be considered valid. <ul> <li>the 1st column is the connecting element. <li>the 2nd column is the \"from\" element type. <li>the 3rd column is the \"to\" element type. <li>the 3rd column is optional, if not given then it is assumed to be the same as the \"to\" element. <li>the existence of a 4th column indicates that the connection is valid in one direction only. <\/ul> todo: this encodes not only what is legal in uml, but also what argouml knows how to create, so not all legal connections are included. probably should be split into two pieces: 1) legal uml (here) and 2) supported (in argouml application someplace) - tfm - 20060325<p> most of these are subtypes of relationship which includes association, dependency, flow, generalization, extend, and include. dependency includes binding, abstraction, usage, and permission. associationrole and associationclass are associations. the remaining items (link, transition, associationend, message) are non-relationship types which argouml treats as connections\/edges."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: can we get this info from uml2 plugin? perhaps collect all references in the metamodel, filter for those which represent containments and find the types on either end - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: use getmodelelementcontainer for transition"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we shouldn't actually have to do all this work"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: hook this creating of a new resource in to someplace more more appropriate (perhaps createmodel() ?) better yet add a new method to model api to create a new top level project\/model\/xmi file so we don't depend on side effects"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: check for resource to hold this and create if necessary? this is a discrepancy between mdr which does it here and euml which does it as part of setrootmodel"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: get\/setrootmodel aren't specific to the model implementation they could probably be moved elsewhere - tfm - 20070530"}
{"projectname":"argouml","classification":"DESIGN","comment":"i think that the synchronized access to idtoobjectmaps is required in order to respect the thread safe nature of the object. fixme: maybe this should be moved into xmireferenceresolverimpl, because it depends on internal implementation details of it."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we can choose between something which matches uml 1.4 in name or something that matches in functionality. we've chosen functionality for now, but this will create a name conflict during the migration process. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: change to throw exception when uses are fixed throw new notimplementedexception(); $non-nls-1$"}
{"projectname":"argouml","classification":"DESIGN","comment":"a near clone of this code works fine outside of argouml, but throws a null pointer exception during the transform when run within argouml i think it's something to do with the class libraries being used, but i can't figure out what, so i've done a simpler, less efficient stepwise translation below in serialtransform"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: bob says - coding by use of side effect here. maybe this should be done in a clearer way but it fixes http: argouml.tigris.org\/issues\/show_bug.cgi?id=4978 it seems that when loading an xmi that is not contained in a zip file then the inputstream given as the argument to this method can't be reused as it is at the end of the stream. in that case systemid appears to be none-null at this stage. so if systemid is not null we recreate the inputsource."}
{"projectname":"argouml","classification":"DESIGN","comment":"create temporary file for output todo: we should be able to chain this directly to xmi reader"}
{"projectname":"argouml","classification":"DESIGN","comment":"xmiwriter implementation for mdr. this implementation is clumsy because the specified writer interface wants characters, while the xmiwriter wants an outputstream dealing in bytes. we could easily create a writer from an outputstream, but the reverse is not true. todo: the old writer based interface can be removed when the deprecated modelimplementation.getxmiwriter is removed. @author lmaitre"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: return empty collection on null input or throw illegalargument?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: an iterator filter would be nice here instead of the mucking around with the collection."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: doing this violates the minimal cardinality of 1 if we allow it we at least need a critic to warn about it"}
{"projectname":"argouml","classification":"DESIGN","comment":"apply <<profile>> stereotype to make it a \"profile\" (our convention) (hack: create that stereotype instead using the uml 1.4 profile)"}
{"projectname":"argouml","classification":"DESIGN","comment":"if systemid is a valid url, simply use it. todo: this causes a network connection attempt for profiles"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: make this work when the given stereotype has more than one baseclass. todo: currently only works for stereotypes where the baseclass is equal to the given one - inheritance does not work."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: using just the last piece of the id leaves the potential for name collisions if two linked files have the same name in different directories"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should use a minimal update strategy instead of removing all and then adding all - tfm - 20070806"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what type of validation can we do here on tagtype?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this can be simplified to just ((include) extend).setbase((usecase) base);"}
{"projectname":"argouml","classification":"DESIGN","comment":"anything not found is newly created, so return a null systemid indicating that it is in the parent document. todo: this assumption will be invalid if\/when we allow editing of linked sub-models"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: distinguish between deferred resolution and things which are unresolved at end of load and should be reported to user."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this assumes ranges are sorted. is this true? - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is this adequate for finding profiles in java webstart jars? - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: check whether this is really needed. i think it's left over from an incomplete understanding of the magicdraw composition error problem - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: not sure whether the above is better in some cases, but the code below is better for both java web start and eclipse."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this returns a collection, not a single object is this what the callers expect?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this code manually processes the elementimports of a package, but we need to check whether mdr already does something similar automatically as part of its namespace processing. - tfm - 20060408"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this has different semantics than everything else"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this does not belong here - use getimportedelement."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: rationalize this with getmodelelementcontainer"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: temporary stopgap for enumerationliteral"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: more is required here to support referencevalues"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: what other non-modelelement types do we need to handle here?"}
{"projectname":"argouml","classification":"DESIGN","comment":"this causes problems. it can make multiple return messages refer to the same activator even if not returning to the same classifier role as the activator emenates from. i'm not sure that changing the activator of one message should amend any other messages but this is certainly changing too many - bob."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: i18n this needs to be localized, but we don't have any localization capabilities in the model subsystem object[] args = { typename, elemname, alias }; misc.name.element-import.alias = imported {0}: {1} alias {2} return translator.localize( \"misc.name.element-import.alias\", args);"}
{"projectname":"argouml","classification":"DESIGN","comment":"register a listener for metamodel class (and all its subclasses), optionally qualified by a list of property names. todo: verify that property\/event names are legal for this class in the metamodel"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do we want to construct an artificial name here?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: implement support for types other than string"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should be done after all events are delivered, but leave it here for now to avoid last minute synchronization problems"}
{"projectname":"argouml","classification":"DESIGN","comment":"only do verification if debug level logging is on todo: should we leave this on always? - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: mvw: this needs rethinking\/rework! i have the following questions: why does it not search for a stereotype in the namespace using properties and only create a new stereotype if it will actually be used? ie, why is there not a getstereotype(string name, string baseclass)? (edited by d00mst) <these comments imported from nsuml implementation - tfm> @see org.argouml.model.extensionmechanismsfactory#buildstereotype(java.lang.object, java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: the type of the model element used in a type parameter (ie the formal) needs to match the actual parameter that it gets replaced with later. this code is going to restrict that to always being a parameter which doesn't seem right, but i don't have time to debug it right now. - tfm - 20090608"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should be built by reflection from the metamodel - tfm update for uml 1.4 metamodel if not replaced by reflection"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should use a minimal update strategy instead of removing everything and adding it again. - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this actually returns permissions with stereotypes of both <<access>> and <<import>> when the spec calls for only the former, but that seems to give different semantics to the way package imports work. review to see which is wrong."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: do we want to <<friend>> stereotypes too? || model.getextensionmechanismshelper().hasstereotype( permission, modelmanagementhelper.friend_stereotype)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we have multiple string representations for multiplicities these should be consolidated. this form is used by org.argouml.uml.reveng"}
{"projectname":"argouml","classification":"DESIGN","comment":"get elementresidences. todo: unused. should be added to facade? - tfm @param handle a modelelement @return collection the elementresidence for this model element"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is ambiguous as to whether it should be adding a container or resident."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should either be extended to support all aggreationkinds or it should be simplified\/removed from the api - tfm - 20070331"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: it doesn't really make sense that a namespace would be returned as part of its own contents, but that's the historical behavior."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: perhaps use a hashset or other collection with faster lookup performance in case our callers are doing naive .contains() lookups"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: try reusing the same set on every recursion"}
{"projectname":"argouml","classification":"DESIGN","comment":"check that the two elements aren't already linked the opposite way todo: this is a part implementation of well-formedness rule uml1.4.2 - 4.5.3.20 [3] circular inheritance is not allowed. not self.allparents->includes(self)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is a part implementation of well-formedness rule uml1.4.2 - 4.5.3.20 [3] circular inheritance is not allowed. not self.allparents->includes(self)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is not according the contract for this function, but it is used in several places, and i (mvw) presume that we need this generally. this part (1) is about drawing an <<import>> permission between packages. the part (2) below is about modelmanagement.elementimport."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: should we handle <<access>> and <<import>>?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: ?delete instances which have this as their classifier? or should we leave them since they contain so much state that the user would have to recreate?? nsmodel.getumlhelper().deletecollection( nsmodel.getumlpackage().getcommonbehavior() .getainstanceclassifier().getinstance(cls)); todo: ?delete objectflowstates which have this as their type? nsmodel.getumlhelper().deletecollection( nsmodel.getumlpackage().getactivitygraphs() .getatypeobjectflowstate().getobjectflowstate(cls)); todo: ?delete classifierinstates which have this as their type?"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this should probably throw an exception if it gets invalid arguments rather than just returning null"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: delete old multiplicity? why is \"copy\" using hard coded value? - tfm"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: as currently implemented, this expects a list of multiplicityranges. is this an interface change from the nsuml implementation? i suspect it used to accept a list of integers. - tfm @see org.argouml.model.datatypesfactory#createmultiplicity(java.util.list)"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: copied from umldiagramrenderer. find the figs in the given layer that should be the source and destination and attach these to either end of the figedge @param layer the layer to look for the fignodes @param newedge the edge to attach"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this is probably not the right location for switching off the \"filternewlines\". the setting gets lost after selecting a different modelelement in the diagram. btw, see how it is used in javax.swing.text.plaindocument. see issue 1812."}
{"projectname":"argouml","classification":"DESIGN","comment":"the list of operations shall contain all operations of all classifiers contained in the same package as the callaction itself. <p> todo: in fact, we also should include operations of imported clasifiers. @see org.argouml.uml.ui.umlcomboboxmodel#buildmodellist()"}
{"projectname":"argouml","classification":"DESIGN","comment":"@see javax.swing.event.documentlistener#changedupdate(javax.swing.event. documentevent) todo: are the 3 methods uses ?"}
{"projectname":"argouml","classification":"DESIGN","comment":"creates a new field that selects the language for an expression. @param m expression model, should be shared between language and body fields @param n only one of language and body fields should forward events to model todo: mvw: i do not understand that."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: why do we need this as well as control? why is it instantiated when its not always needed."}
{"projectname":"argouml","classification":"DESIGN","comment":"the constructor. @param expressionmodel expression model, should be shared between language and body fields @param notify set to true to forward events to model. only one of language and body fields should have this set to true. todo: mvw: i do not understand that."}
{"projectname":"argouml","classification":"DESIGN","comment":"to simplify implementation, we list all associations found with any of the classifiers represented by the linked instances. <p> todo: make a foolproof algorithm that only allows selecting associations that create a correct model. also take into account n-ary associations and associationclasses. this algo best goes in the model subsystem, e.g. in a method getallpossibleassociationsforalink(). @see org.argouml.uml.ui.umlcomboboxmodel#buildmodellist()"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: try to use valuefield.getcomponent()"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo : ?? use an other checkbox (defines in argo and extends jcheckbox )"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: consider a conditional feature in the xml panel def for this:"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: is is really used ? @see javax.swing.jcomponent#removenotify()"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: bob says the reflective code following should be replaced with something more specific like this commented out code. this would mean we need stype changed to a meta type object rather than a string."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: are the 3 methods uses ?"}
{"projectname":"argouml","classification":"DESIGN","comment":"an opaqueexpression can have n body n language when display to user, we only show one body. a \"...\" button is enabled for edit other. todo: can we, by import xmi, have 0 language\/body ? @author laurent braud"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we have some quirk that the a baseclass addition or removal from a steroetype comes back as an attributechangeevent rather than an associationchangeevent. this needs further investigation to see if this can be made consistent."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: this needs work... we also need to listen to addition\/removal of states to\/from a classifierinstate."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we may want to restrict the list to parameters which conform to the following wfr: parameter.type = ofstype or (parameter.kind = #in and ofstype.allsupertypes->includes(type)) or ((parameter.kind = #out or parameter.kind = #return) and type.allsupertypes->includes(ofstype)) or (parameter.kind = #inout and ( ofstype.allsupertypes->includes(type) or type.allsupertypes->includes(ofstype))))"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: getallmodelelementsofkind should probably do this processing of imported elements automatically"}
{"projectname":"argouml","classification":"DESIGN","comment":"todo part of this is copied from actiondeletemodelelement. we maybe need some subclass for common code."}
{"projectname":"argouml","classification":"DESIGN","comment":"todo: we should really test the model instead for this but we have no api yet. can we just check if the collection to build the jlist control implements the list interface?"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: - please add some javadoc - ugly classname also"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"uml 1.4 spec is ambiguous - english says no association or generalization, but ocl only includes association || model.getfacade().isageneralization(dm)"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"add a comment with the given string todo: currently a no-op, doc is read only @param text the property"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"test delivery of model events. todo: we have not documented exactly what events arrive and when. @author linus tolke"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: does this still need to be synchronized? if so then explain why."}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"this interface contains methods to retrieve objects that represent the different uml types. these objects are use as tokens used to create model elements in some methods. todo: there are parts of argouml which assume that the objects returned here are classes. we should formalize that by changing the return types to match. tfm - 20070620 bob says - there should be no such assumption in argouml. can we document where these are? @see org.argouml.model.umlfactory#buildconnection( object, object, object, object, object, object, object) @see org.argouml.model.umlfactory#buildnode(object)"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: do we need this?"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"make use of the default visibility, which is public... todo: centralise this knowledge. @see org.argouml.uml.diagram.ui.abstractactionradiomenuitem#valueoftarget(java.lang.object)"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: document! @author penyaskito"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"returns all substates some composite state contains. <p> todo: {@link #getallpossiblesubvertices(object)} and {@link #getallsubstates(object)} are duplicates as implemented for mdr. it isn't clear from the javadoc or usage whether they should do different things or this just happened because no one noticed we already had another method. @param compstate the given compositestate @return all substates"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: document! @deprecated for 0.28 by tfmorris. use {@link #umlactivitydiagram(string, object, graphmodel)}."}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: document! what does this do? interacts with event pump in some manner @param objects new objeccts"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: the quickguide also mentions: -open <arg> open given file on startup -print <arg> print given file on startup (and exit) why are these gone?"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: needs documenting, why synchronized?"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: document why we catch this."}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"predecessors used to be not implemented, because it caused some problems that i've not found an easy way to handle yet, d00mst. the specific problem is that the notation currently is ambiguous on second message after a thread split. why not implement it anyway? d00mst todo: document this ambiguity and the choice made."}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: link to the signal."}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"the event to fire. todo: investigate! is the purpose really to let the next call to {@link #firepropertychanged(string, object, object)} fire the old event again if the previous invocation resulted in an exception? if so, please document why. if not, fix it."}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: document"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: the recurrence goes in front of the action? does this not contradict the header javadoc?"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo check conformancy to specification"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"set the owners of the associated fignodes to be the statevertexes which are at either end of the transition. <p> todo: this needs documentation! is this really needed? why? @param lay diagram layer containing this fig @param owner owning uml element @deprecated in 0.28 by bob tarling - the above todo is from michiel. i also don't understand the purpose of this method. the gef framework should be setting source\/dest or persistence should manage."}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo investigate typo in spec!!"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"generate the \"intno\" of the given message. <p> if the predecessor of the given message has only one successor, then we return the string representation of the given integer. <p> if the predecessor of the given message has more than one successor, then this is a case of parallel execution of messages, e.g. message 3.1a and message 3.1b are concurrent within activation 3.1. hence in this case we use a syntax like: 1a, 1b, 1c. this means that the first successor in the ordered list of successors that has more than one entry will get the postfix a, the second b, etc. todo: document exceptional behaviour. @param umlmessage the uml message object to generate the sequence number for @param umlpredecessor the immediate predecessor message (uml object) that has the given message as successor @param position the integer position of the given message within its sequence @return the generated sequence expression string, or null if the given message was null"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: are we intentionally eating all events? - tfm 20060203 document!"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"well-formedness rule for package. check that the alias for an imported element doesn't conflict with any existing name. section 4.14.3.3 of uml 1.4 spec. <p> other types of name conflicts in a namespace are checked by {@link crnameconflict}. <p> todo: mvw: if an alias is the same as another class' name, then this critic fires, but the explanation and wizard are wrong!"}
{"projectname":"argouml","classification":"DOCUMENTATION","comment":"todo: bobs says - what is the purpose of this flag? please document."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: i18n"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"not needed"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: maybe should stop at first, or find highest priority."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo how to implement this method properly?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: make this final asap."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"now we know that this critic is still valid. what we need to figure out is if the corresponding to-do item is still valid. the to-do item is to be replaced if the name of some offender has changed that affects its description or if the contents of the list of offenders has changed. we check that by creating a new todoitem and then verifying that it looks exactly the same. this really creates a lot of to-do items that goes to waste."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: what should we do here?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"the following debug line is now the single most memory consuming line in the whole of argouml. it allocates approximately 18% of all memory allocated. suggestions for solutions: check if there is a log.log(level.fine,string, string) method that can be used instead. use two calls. for now i (linus) just comment it out. log.log(level.fine, \"applying critic: \" + _headline);"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: why do we need this when we can just change the font and achieve the same effect?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this work should be deferred until actually needed for display"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: is it removed from uml2 ?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: should we be doing anything on deleted elements? this throws an exception on remove events. - skip for now - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: implement"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: allow other configuration handlers."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"if we weren't given a system id, attempt to use the url for the jar that we were loaded from. (why? - tfm)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: register listener for target todo item changes and for new showstep() requests"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: review - priority of public id vs system id has been reversed from original implementation"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this shouldn't require two passes through the list - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"compute which critics should be active (i.e., they can be applied by applyallcritics) for a given designer. <p> note: i am setting global data, i.e. the isenabled bit in each critic, based on the needs of one designer. i don't really support more than one designer. which is why each designer (if we would support more than one designer) has his own agency. todo: should loop over simpler list of critics, not compoundcritics @param d the designer"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: why is this disabled always?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: should have an image of a wizard or some logo"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: these buttons for future enhancement: buttonpanel.add(configbutton); buttonpanel.add(networkbutton);"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: check type!"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: for uml 2.x, powertypes are accessed indirectly through the generalizationsets that contain a generalization. @since nov 3, 2002 @author jaap.branderhorst@xs4all.nl"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"unused currently stringbuffer taggedvaluessb = gettaggedvalues(modelelement);"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: placeholder implementation until support for tracking on a per-project basis is implemented return dirty;"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"empty implementation."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: why is this a special case? - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"flag to indicate we are creating a new current project. todo: this isn't a thread-safe way of doing mutual exclusion."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: indicate the direction!"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: we need a way to set the line color and width here, but testdependencies thinks this creates a dependency cycle fig line = new argofigline(snapx, snapy, snapx, snapy, argofig.line_color); line.setlinewidth(argofig.line_width);"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"apparently, this method is never called."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this code can be removed when getcurrentproject is removed"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: can we just do this every time, no need for else - bob"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: tentative implementation. do we want something that updates the list of open projects or just simple open and close events? -tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: add empty placeholder here?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: needs completing - stub implementation only! - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: needs i18n"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: is this removed from uml2 ?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: why aren't we throwing an exception here? returning null results in npe and no explanation why."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: we expect an association end here - check more carefully? - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this should only be checking for the top level package (if anything at all)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"use a little trick to find out where argo is being loaded from. todo: use a different resource here. argoini is unused and deprecated"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: placeholder implementation until support for tracking on a per-project basis is implemented"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: it is a performance drain to load all classes at startup time. they should be lazy loaded when needed. instead of scanning all classes for ones which implement our loadable module interface, we should use a manifest entry or a special name\/name pattern that we look for to find the single main module class to load here. - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"enable it. todo: this by default selects all modules that are found. eventually we would rather obey a default either from the modules themselves, from how they are found, and also have information on what modules are selected from the configuration."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"if it's a jar, clean it up and make it look like a file url"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"we also show tagged values for uml 1 todo: what to do for uml2 here?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: mark diagram\/project as dirty?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: do we have any potential consumers of the unversioned name outside of the notation subsystem?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"the constructor. todo: why does this method not handle all settings?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: these defaults need to be checked against historical ones"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: shouldn't we do something here?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: handle parse error"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this try-catch will be needed once the code below is improved."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this name of the expression language should be configurable by the user. <p> according to the uml standard, the expression language should be the same for all elements in one diagram. <p> uml is not a sensible default - usually this is some pseudo-language. @return the name of the expression language"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: do we need to control separately for attributes and operations?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"we need to extend the extensionmechanismsfactory so that we can replace the above deprecated call with something like this:"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this needs more work! we simply throw the new extension point away?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: find a better default language todo: we should know the notation language, since it is us"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: can we put the static block within the init()?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: reuse the offender list."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: in the next line, i should use buildguard(), but it doesn't show the guard on the diagram... why? (mvw)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: is this a good way of handling nested notation? the following fails the tests: new transitionnotationuml(t).parse(line);"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: is this a good way of handling nested notation?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: add stereotype application (ecore anytype?)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: do we want isaumlelement here?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: any special handling for null names? append will use \"null\""}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this dtd doesn't exist, so we can't tell readers to look for it w.println(\"<!doctype profile system \\\"profile.dtd\\\" >\"); but we need a 2nd line to make the funky uml persister work remove this line if the above is uncommented"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: add implementation."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: we need the project specific diagram settings here"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"ignored - it shouldn't have been in the project in the 1st place"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: add recent patterns"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: these can not simply be translated..."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo is it possible to use more than one variable?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo support other name kinds"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: allow .zargo as profile as well?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: check if it's ok to just get the first zip entry since the zip file should contain only one xmi file - thn"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: profile dependencies for uml2"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo support real types"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"xxx: hypotheses no qualifiers (i don't know)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo check types!"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"stylepanel class which provides additional parameters for changing text elements provided by gef. todo: i18n"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo implement iterate() todo implement sortedby() todo implement subsequence()"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"how to handle empty target lists? probably the tabtext should only show an empty pane in that case"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo investigate the \"unnamed opposite end\""}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo support real numbers"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo investigate: abstraction.mapping is not in the model subsystem"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo implement oclexpression"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo implementationlocation??"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo check this"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo implement the difference between ocliskindof and oclistypeof"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this should really be coded the other way round, to only act on associations which are important for representing the current perspective (and to only act on a single end of the association) - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: do we want to use the project here instead of just its name?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this could be made more efficient by working with iterators directly and creating a composite iterator made up of all the various sub iterators."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this is going to cause the color to be reset on a refresh"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo presentation??"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"for tagged values, use their containing modelelement since they don't have property panels of their own todo: may want to do this for other types too?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"reorder submenu todo: i think this requires i18n, but not sure - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"empty implementation - not used."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: add a button to force garbage collection"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: only fetch names and defer fetching panels until needed"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"hide save action during load. otherwise we get the * appearing in title bar and the save enabling as models are updated todo: do we still need this now the save enablement is improved?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: replace the functioncall in the next line by .requestfocusinwindow() once we do not support java 1.3 any more."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: beautify the 2nd part of this string:"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"the text box containing the problem messages todo: this should be hidden by default, but accessible on via a \"details\" button or tab to provide more info to the user."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: i18n required"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: a better implementation would be to batch events into logical groups and update the tree one time for the entire group, synchronizing access to the model repository so that it stays consistent during the query. this would likely require doing the updates in a different thread than the event delivery thread to prevent deadlocks, so for right now we protect ourselves with try\/catch blocks."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: the copy function is not yet completely implemented - so we will have some exceptions here and there."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: do we want all enabled tabs to listen or only the one that is selected\/visible? - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"the drag gesture listener is notified of drag gestures by a recognizer. the typical response is to initiate a drag by invoking dragsource.startdrag(). <p> todo: find a way to show a different image when multiple elements are dragged. @param draggestureevent the draggestureevent describing the gesture that has just occurred @see java.awt.dnd.draggesturelistener#draggesturerecognized(java.awt.dnd.draggestureevent)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: consider inherited attributes?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: support other types of drag. here you set the owner by dragging into a namespace. an alternative could be to drag states into composite states..."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"returns a set (union) of all unique applicable stereotypes for a given collection of model elements. todo: this is not optimized for performance. @param elements the given collection of model elements @return the set with stereotype uml objects"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: handle n-way associations"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: ignore and report exception until gettop implemented."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"called after the diagram font gets changed. <p> todo: do we need to do anything here? @see java.beans.propertychangelistener#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"don't know what to do otherwise"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: not implemented"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"do we have 2 connection ends?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: we need to be more specific here about what to build"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"additional cleanup needed, because this would not be removed by ext.destroy():"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"a specialist selection class for figpartitions. this ensures that all swimlanes are the same length (ie height). todo: make sure that all swimlanes appear side by side (uml spec states \"separated from neighboring swimlanes by vertical solid lines on both sides\". todo: allow drag of the west and east edge to resize both the selected fig and the fig connected to that side. todo: show northwest and southwest handle only on leftmost swimlane. todo: show northeast and southeast handle only on rightmost swimlane. @author bob"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"the activity diagram.<p> todo: finish the work on subactivity states."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"this may not actually make any difference at present (the code behind addtrigger needs more work)."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: do we have anything to add here?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: we may return the following when the relocate() has been implemented."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: before adding a new region make the last region its minimum size (smallest size that will still contain all enclosed)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: do we really need to be listening for both of these events?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this comparison is very suspect, it should use equals method. the code within the block is in fact never executed. i hesitate to change this now as it will trigger code has never been used before and am not aware of any problems that it usage may introduce. i do think that we need to be able to find a different way to implement the intent here which seems to be to correct edge drawings that should actually not be allowed - bob"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: after removing a region reset the overall size of the node."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"associations not supported, yet todo: create appropriate classdiagramedge"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: make another pass to deal with overlaps?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: we may return something useful when the relocate() has been implemented, like all statemachines that are not activitygraphs."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"stylepanel which adds a checkbox to show or hide the stereotype.<p> todo: i18n. @author mvw@tigris.org"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: to enable models and subsystems, change this flag work started by markus i believe where does this stand? - bob."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: todoitem stuff should be made an opaque extension"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: for uml 2.x this is isstatic"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: why do i need to do this?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this needs to be modified for uml 2.x"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"for backward compatibility everything is above and right todo: do in polar domain?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: it would be better here to continue the loop and try to build the rest of the compartment. hence try\/catch should be internal to the loop."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: why are these different colors? - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: how to handle changes in shadowsize from the project properties?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: add \"unnamed\" or \"new\" or something? (localized, of course)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: should we require a graphmodel in the constructor since our implementations of setnamespace are going to try and set the namespace on the graphmodel as well?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"perhaps something like the following would work instead rectangle drawingarea = globals.cureditor().getjcomponent().getvisiblerect();"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this must happen on the awt thread"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: we need a better algorithm."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: use this event mechanism to update the checkmark on the presentation tab:"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: if this turns out to be a performance bottleneck, we can probably optimize the common case by caching our iterator and current position, assuming that the next request will be for a greater index"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"assert arrays.aslist(properties).contains( event.getpropertyname()) : event.getpropertyname(); todo: do we really always need to do this or only if notationprovider is null?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"let's test which situation we have. 3 possibilities: 1. the nodes are already on the diagram, we can use canaddedge for this. 2. one of the nodes is already on the diagram. the other has to be added. 3. both of the nodes are not yet on the diagram. for the time being we will only implement situation 1. todo: implement situation 2 and 3."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: a more strongly typed data structure could be used here."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"perform re-routing if src\/dest nodes have changed. <p>this method needs to be 'armed' by a previous mousedragged() to avoid the situation where the user just clicks on the node then clicks on some unrelated fig, without moving the edge... <p>todo: improve the fig finding algorithm to find the top most fig in the layer. will be useful for nested states in a statechart. @see java.awt.event.mouselistener#mousereleased(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"a window that shows the progress bar and a cancel button. as a convenience to callers which may be executing on a thread other than the swing event thread, all methods use swingutilities.invokelater() or swingutilities.invokeandwait() to make sure that swing calls happen on the appropriate thread. <p> todo: react on the close button as if the cancel button was pressed."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"write todo: check if sections are not used within the file and put them as comments at the end of the file. hint: use a second map to compare with the used keys. @param filename the file name @param indent the current indentation @param outputlostsections true if lost sections are to be written"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: uml2 - what do we do here?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: implement this - show some documentation?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: these have been used for most instances of new figfoo(x0, y0, ... but additional work is required to extract the constant from calculations, etc."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: work here !"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: what does the output directory have to do with the class path? project p = projectmanager.getmanager().getcurrentproject(); entries.add(p.getprojectsettings().getgenerationoutputdir());"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this next line prevent loading a usecase with a stereotype to grow. why?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"utility function to localize the given string with help text, and show it in the status bar of the argouml window. this function is used in favour of the inline call to enable later improvements; e.g. it would be possible to show a help-balloon. todo: work this out. one matter to possibly improve: show multiple lines. @param s the given string to be localized and shown"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"_compilecheckbox = new jcheckbox(); namebutton(_compilecheckbox, \"checkbox.compile-generated-source\"); todo: implement the compile feature. for now, disable the checkbox. _compilecheckbox.setenabled(false); southpanel.add(_compilecheckbox, borderlayout.south);"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"save the source language in the model. <p> todo: support multiple languages now that we have uml 1.4 tagged values. @param node @param language"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this transformation is java specific. we need a more language\/notation scheme for specifying qualified names. possible algorithm - replace all punctuation with our internal separator, replace multiple separators with a single instance (for languages like c++). what about i18n? - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: need to add filechooser"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this needs to be improved even for nongui calling, the config panel needs to be initialized:"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo implement additional operations in 4.5.3.5"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"return the fully qualified name of a model element in java (dot separated) format. <p> todo: we really need a language independent format here. perhaps the list of names that form the hierarchy? - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: need uml 2.x equivalent"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"the list with objects that should be shown in the combobox. todo: using a list here forces a linear search when we're trying to add a new element to the model which can be very slow for large models."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"generates a new unique id and returns it as a string. the contents of the string is supposed to be unique with respect to all strings generated by other instances of this class. todo: we should consider using java.util.uuid for this instead. @return a string with unique content."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: add up\/down buttons to control the ordering of items"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo add all top level packages"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"if the property that this comboboxmodel depicts is changed in the uml model, this method will make sure that the changes will be done in the combobox-model equally. <p> todo: this function is not yet completely written! {@inheritdoc} @see java.beans.propertychangelistener#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo support other kinds of tail"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: is this the right range here?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"how to handle empty target lists? probably the wizstep should only show an empty pane in that case"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"this class provides a text field that can be used to display the text of all comments associated with an annotated modelelement. todo: this could use more work. currently it returns all comment.name or comment.body attributes concatenated together into a single read-only document. @since 1 nov 2005 @author tom morris (tfmorris@gmail.com)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: we should assert this never happens before removing panels should control their own listeners"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: implement this!"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this is updating model on a per character basis as well as unregistering\/reregistering event listeners every character - very wasteful - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: the project should be bound to the action when it is created?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: it would be better to defer this initialization until the panel actually needs to be displayed. perhaps optimistically always return true and figure out later if we've got something to display - tfm - 20070110"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"this panel contains radio buttons that represent the changeability of an asssociation-end. @author jaap.branderhorst@xs4all.nl @since jan 4, 2003 todo: for uml 2.x this needs to be changed to be just readonly (frozen) or not (changeable)."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: what to do with the return value?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: property name will need to be updated for uml 2.x unfortunately we can specify two property names here"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: do we want to fire targetremoved here or is it enough to just stop updating the targets?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo expression and instancevalue (how) if anyone have an example."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"not implemented yet"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"a mock modelimplementation.<p> the facade, the modeleventpump, the factories and helpers are all created as mock objects using easymock. for each of them, there should also be a possibility to access their {@link mockcontrol} object. todo: create the rest of the getters for the control objects. @author linus tolke"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: what shall we do with the exception?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: with new reference resolving scheme, the model sub-system will cache the systemid of the profile, open it and resolve the profile on its own. thus, the java.util.list will be found and the return value will be present again... assertnotnull(returnparamtype);"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: i suspect this isn't needed call isn't needed but don't remove till out of alpha\/beta stage"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"the uml 1.4 model elements to test. todo: this needs to be updated with a version for uml 2.x."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: do we need this? is this the same as emptyfig.getheight()?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: use reflection against the test case to ensure that it does not import non-argouml classes"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: what can we do with other kind of actions?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: maybe a return message already exists. check first and and if the first found has no activator then set this call message as the activator and skip the code below."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: why do we need to remove then add the fig?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: minimum height should not be calculated every time, but only when an figmessage has been added or removed. currently doing that doesn't work because of an unknown problem. how to test: create only two crs and a create message between them. then move the create message to the bottom! until that is fixed the workaround is to call updateminimumheight() every time the minimum size is needed"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"finds the operation to which a callevent refers, based on the given transition. this function determines the context of the statemachine that contains the given transition. if the context is a classifier, then all operations of this classifier are candidates. if the context is a behavioralfeature, then all operations of the owner classifier are candidates. the first operation of which the name matches is the result. for activity diagrams: if the context is a package, then all operations of all classifiers in the package are candidates. todo: this function works for the most normal cases, but needs some testing for rare cases, e.g. internal transitions,... todo: the parameters of the candidates are ignored. maybe this method should return a set of matching operations. @author mvw @param trans object of type transition @param opname the name of the operation sought @return object the operation with the given name, or null"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"get the innermost containing model of a modelelement. <p> if no containing model can be found, the outermost containing modelelement is returned (which could be the original element itself if it has no owner). <p> this method is intended to return the innermost containing model, but there are circumstances where one may really expect the outermost containing model or root package to be returned (e.g. where it's being used to test if two elements are from disjoint namespace hierarchies). hence, there are two separate methods with different semantics. the method {@link #getroot(object)} returns the outermost containing object. <p> todo: note also that some code uses org.argouml.kernel.project#getroot() to navigate down from the top instead of up from the bottom. we need to use a consistent algorithm for this. - tfm 20070724 @param handle to the model element. @return model for the model element."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"there's more to be handled, which still need to be implemented:"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"builds an actor in the same namespace as the given actor. if the object is not and actor nothing is built.<p> todo: this shouldn't just silently fail if it is passed a bad argument. this contract will change. - tfm 20070607 @param model the namespace. @param actor the given actor @return actor the newly built actor"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"list<transition> result = new arraylist<transition>(); todo: not complete - how to retrieve the transitions?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: first implementation will be to call buildpopop and extract all the contained actions. the toolbar will be built to the same structure. the toolbar will be displayed to the left of the jlist under the label."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: implement remaining supported types"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: gone in uml 2.1"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: unfinished implementation"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"eclipse uml2 implementation of xmiwriter. todo: we need facilities for writing and reading stable ids to\/from either xmi.id or xmi.uuid. @author tom morris"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: all build\/create methods need undo support - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: bob says - how can we auto-generate this list?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: correctly implement next function in the model subsystem for issue 1942:"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"a language must be unique so, select the current empty language. todo ? alert"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: review the tool tips ? stringfield.settooltiptext(translator.localize(\"label.body.tooltip\"));"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"the panel that shows a value specification for an other uml element. todo: do we need to implements changelistener if yes => ok if no => can't be use without *optional class, or the *optional don't need to !"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: else : alert"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: enhance the isvalidnamespace function so that this never happens."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: not complete"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: not all namespaces are useful here - any wfrs?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: should be anything allowed by current diagram"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this is not done yet. eventually this will also feed the rational log."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this will need to change when we support multiple user models."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: 2nd next() for single hasnext()"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: fully implement this!"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: implement following wfr for generalizableelements [4] the parent must be included in the namespace of the generalizableelement. self.generalization->forall(g | self.namespace.allcontents->includes(g.parent) ) return modelmanagementhelpermdrimpl.getcontents(ns).contains( gen.getparent());"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: before allowing this, we should really check that templateparameter.defaultelement is defined"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"identifier for addonly changeability. todo: note this should not be in uml2 version"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"make a read-only copy of the listeners list so that reentrant calls back to add\/removelistener won't mess us up. todo: potential performance issue, but we need the correctness - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: review all callers to make sure that they localize the title in process by harold braun 20070912"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: once the default constructor is deleted we only set dirty flag"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: all super constructors should take a graphmodel"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: get project or other necessary context from source?? e.getsource();"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: make this more efficient for large i\/os"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: we failed to resolve url - signal error"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: count\/report unresolved references"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: implement support for multiple taggedvalues"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: treat message"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: why would this be null?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: rework to use uml 1.4 tagdefinitions - tfm"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: needs undo support"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: this is a linear search of a list that contain many thousands of items (one for every fig in the entire project)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: check if this is ok (this is literally adapted from nsuml)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"fix: set the application name for mac os x"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: use the svgwriter2d implementation cmd = new savesvgaction2(translator.localize(\"action.save-svg\"));"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: not implemented yet. the idea is that some problems identified by critic's can be fixed with certain design manipulations (or transforms) that can be applied automatically to resolve the problem. this method replies true iff the given problem can be fixed. the fixit() method actually does the fix. @see org.argouml.cognitive.poster#canfixit(org.argouml.cognitive.todoitem) also @see critic#fixit"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: not implemented yet. if the given todoitem can be fixed automatically, and the user wants that to happen, then do it. obviously, this depends on the specific critic and problem. by default this method does nothing. @param item the todo item @param arg the design material (?)"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"list of checkliststatus:es. indexed on the model element itself. todo: should use weak references so that this is forgotten about when the object is removed."}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: maybe the exception strings should be internationalized"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo understand qualifiers"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: convert this to some sensible logging"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"reply the todoitem that the designer should see iff predicate() returns true. by default it just fills in the fields of the todoitem from accessor methods of this critic. critic subclasses may override this method or the accessor methods to add computed fields to the todoitem. todo: critic's may want to add new fields to a todoitem to make stillvalid more efficent. @see critic#critique @param dm the offender @param dsgr the designer @return todoitem"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo implementation?"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: removed from uml 2.x"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"category.getroot().getloggerrepository().setthreshold(level.off); todo: find the proper implementation in java.util.logging api"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"todo: review all callers to make sure that they localize the title"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"removes a listener, eventtype pair from the listener list. todo: replace the listener implementation with a eventlistenerlist for better performance @param event the event to which the listener will not listen any more @param listener the listener to be removed"}
{"projectname":"argouml","classification":"IMPLEMENTATION","comment":"check the offenders.<p> this is called from the constructors where the offenders are given. todo: why do we only care about checking the first 2 offenders above? @param offs the offenders."}
{"projectname":"argouml","classification":"TEST","comment":"todo: no test coverage for this or createproppanel? - tfm"}
{"projectname":"argouml","classification":"TEST","comment":"todo do tests for infix operators (8.4.7), even though it is not yet supported"}
{"projectname":"argouml","classification":"TEST","comment":"the uml 2.1.1 metamodel is a mof 2.0 cmof model, so we want nodes with tag=\"ownedmember\", attribute xmi:type=\"cmof:class\" todo: this code is untested - tfm"}
{"projectname":"argouml","classification":"TEST","comment":"for modules, it would be usefule to be able to remove their factories.<p> todo: the effect of this method is not yet tested! @param factory the factory to remove"}
{"projectname":"argouml","classification":"TEST","comment":"todo: should not be using assert here but i don't want to change to illegalstateexception at lead up to a release as i don't know how much testing is done with assert on."}
{"projectname":"argouml","classification":"TEST","comment":"test the constructor used for loading a profile from a jar file. todo: test fignode! @throws exception if something goes wrong"}
{"projectname":"argouml","classification":"TEST","comment":"modelelement is abstract, so no create tests todo: add any other relevant tests"}
{"projectname":"argouml","classification":"TEST","comment":"do we need to add tests for the following? aggregationkind changeablekind messagedirectionkind orderingkind parameterdirectionkind pseudostatekind scopekind visibilitykind"}
{"projectname":"argouml","classification":"TEST","comment":"todo: test if the generated string is correct."}
{"projectname":"argouml","classification":"TEST","comment":"tests if the list with namespaces defined in getvalidnamespaceclasses contains only valid namespaces. todo: this test does not test anything, really!"}
{"projectname":"argouml","classification":"TEST","comment":"cleanallextentsbut(model); todo: why is this causing a crash?!?"}
{"projectname":"argouml","classification":"TEST","comment":"todo: this needs more work. test e.g. creation when an operation is selected. @author jaap.branderhorst@xs4all.nl @since jan 9, 2003"}
{"projectname":"argouml","classification":"TEST","comment":"todo: this requires that the tests be run with assertions enabled which isn't guaranteed in all environments."}
{"projectname":"argouml","classification":"TEST","comment":"for some reason listset.equals() allocates a lot of memory, well some memory at least. lets try to avoid that when not needed by invoking this test only when the two previous tests are not decisive."}
{"projectname":"argouml","classification":"TEST","comment":"tests for the diagramsettings. todo: test chaining of settings. @author tom morris (based on testprojectsettings by michiel)"}
{"projectname":"argouml","classification":"TEST","comment":"todo: fix this so that new sequence diagrams are tested"}
{"projectname":"argouml","classification":"TEST","comment":"todo: rewrite this test using reflection against uml class. this code has been commented out since september 2003"}
{"projectname":"argouml","classification":"TEST","comment":"test creation of collaboration diagrams. todo: test creating on an operation. @author jaap.branderhorst@xs4all.nl @since jan 9, 2003"}
{"projectname":"argouml","classification":"TEST","comment":"test a uml 1.3\/xmi 1.1 file to make sure that it gets converted properly. <p> todo: our uml 1.3 converter currently only handles xmi 1.0. @throws filenotfoundexception indicates a test configuration problem @throws umlexception if it fails to open the file"}
{"projectname":"argouml","classification":"TEST","comment":"the application should have checked for availability at startup. for tests we would expect unix developers to be correctly configured. replace with an assert when we are jre1.4+"}
{"projectname":"argouml","classification":"TEST","comment":"todo: this should fail, but it doesn't:"}
{"projectname":"argouml","classification":"TEST","comment":"todo write test for enumerations, although they are not yet supported"}
{"projectname":"argouml","classification":"TEST","comment":"test read compressed models, mainly to verify the correct reading of andromda profiles. todo: move this test into argouml base when we will want to read also zip file. @author lmaitre"}
{"projectname":"argouml","classification":"TEST","comment":"todo do tests for navigation to association classes (8.5.5), even though it is not yet supported"}
{"projectname":"argouml","classification":"TEST","comment":"we tested this above - do we need to test again?"}
{"projectname":"argouml","classification":"TEST","comment":"todo do tests for type conformance (8.4.4), even though it is not yet supported"}
{"projectname":"argouml","classification":"TEST","comment":"testing: does not fire. conflict with crnameconflict."}
{"projectname":"argouml","classification":"TEST","comment":"todo: should it remove the leftovers from other tests? cleanallextents(); assert getfacade().getrootelements().size() == 0;"}
{"projectname":"argouml","classification":"TEST","comment":"entered in 0.29.3 prove that the test below is not needed"}
{"projectname":"argouml","classification":"TEST","comment":"todo: why does it fail for changing the name of an associationend? why should it pass?"}
{"projectname":"argouml","classification":"TEST","comment":"for modules, it would be useful to be able to remove their factories. <p> todo: the effect of this method is not yet tested! @param factory the factory to remove"}
{"projectname":"argouml","classification":"TEST","comment":"todo: test this."}
{"projectname":"argouml","classification":"TEST","comment":"todo do tests for ranges in collection definition (8.5.12), even though it is not yet supported"}
{"projectname":"argouml","classification":"TEST","comment":"todo do tests for collections of collections (8.5.13), even though it is not yet supported question: should this happen with all collections or only the constructed ones?"}
{"projectname":"argouml","classification":"TEST","comment":"test creation of metatypes. todo: we could add tests here to make sure that we can not create abstract types"}
{"projectname":"argouml","classification":"TEST","comment":"listening only to \"remove\" events does not work... todo: check if this works now with new event pump - tfm"}
{"projectname":"argouml","classification":"TEST","comment":"todo: we need some way of driving this from panel xml rather than hard coded test"}
{"projectname":"argouml","classification":"TEST","comment":"todo: prove that this works. the testumlassociationrolebasecomboboxmodel does not cut it. @see org.argouml.uml.ui.umlcomboboxmodel#addothermodeleventlisteners(java.lang.object)"}
{"projectname":"argouml","classification":"TEST","comment":"todo: presumably this is only relevant if obj is actually a model or profile. an added test of isamodel(obj) or isaprofile(obj) would clarify what is going on here."}
{"projectname":"argouml","classification":"TEST","comment":"all events going to the explorer must pass through here first!<p> most will come from the uml model via the eventadapter interface.<p> todo: in some cases (test cases) this object is created without setting the treemodel. i (linus) will add tests for this now. it would be better if this is created only when the explorer is created. <p> todo: the explorertreenode also listens to some events (from diagrams), so it does not follow the rule above. @since 0.15.2, created on 16 september 2003, 23:13 @author alexb"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add figs to the fignode in back-to-front order"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphfactory#makenode()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make port invisible unless mouse enters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getprimary1()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"event handlers - mouselistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"firenoderemoved(node);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following does not seem to work - centered the fig instead. getnamefig().setjustificationbyname(\"center\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only show actions for associations not already on diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the widest of all textfigs calculate the total height"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.24 generalization"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the new figassociation edge to replace the node"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we don't try to set things smaller than the minimum"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"center the namefig, since center justification does not seem to work."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, this rect will always be transparent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we're about to upgrade the file lets take an archive of it first."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.beans.vetoablechangelistener#vetoablechange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actions specific to the use case diagram toolbar"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update any text, colors, fonts, etc."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the relative sizes and positions of internel figs"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.layout.layouter#layout()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"popupaddoffset should be equal to the number of items added here:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"loop through the associations, counting the ends with aggregations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add stereotypes submenu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the fix"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we handle and consume editing events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now we can remove ourself (which will also remove the attached association ends edges)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(mmessage)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"list of model element listeners we've registered."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we want to maintain a minimum width for the fig. also, add the border dimensions to the minimum space required for its contents:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"added this part to load the extra menu content"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and the stereotypes of its features"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"owner related todo items:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a binary association is not a node so reject."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fig related todo items:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"intentional: if there is nonsense in the field, we do not set the value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parse the text that was edited"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"intentional: if there is nonsense in the field, we return false"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"pass everything except editing events to superclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stereotype fig covers the name fig:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the source of the event is an uml object, then the uml model has been changed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"lazily create the event:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default implementation is to do nothing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the source of an association end should not be the classifier. if it is the user has drawn the wrong way round so we swap here."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.object#equals(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: update setting"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crunnavigableassoc"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"accessors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the <<extend>> label. it's not a true stereotype, so don't use the stereotype support int y = getnamefig().getbounds().height;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the tooltip string:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.persistence.pgml.pgmlstackparser#setattrs( org.tigris.gef.presentation.fig, org.xml.sax.attributes)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"since body ever looks at the type of the diagram appearance event, we can simplify from sending every existing event to one event only. but since there is no catch-all event defined, we just use one. rationale: reduce the number of total refreshes of the drawing."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note that \"multiplicity\" is what is the notation is listening for in uml1.4 \"uppervalue\" are listened to in uml2. it is not currently why it is not required to register for \"lowervalue\" also."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a use case has an external separator. external means external to the compartment box. this horizontal line sticks out of the box, and touches the ellipse edge."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fail silently as we expect users to accidentally drop on to wrong component"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"required for mouselistener interface, but we only care about clicks"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the diagram are always owned by the model in this first implementation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcombobox2#umlcombobox2( umlcomboboxmodel, action)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4. make sure the only figgroups on a diagram are also fignodes the report"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no need to update if model element went away"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.mutablegraphmodel#addnoderelatededges(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"required for keylistener interface, but not used"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private utility routine to work out the (positive) x coordinate of a point on an oval, given the radii and y coordinate.<p> todo: use this to calculate the separator lines! @param a radius in x direction @param b radius in y direction @param y y coordinate @return positive x coordinate for the given y coordinate"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"both ends must be defined and nodes that are on the graph already."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"link the new include relationship in to the ends"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"internal methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figassociationrole figassociationrole = new figassociationrole();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"newfc = _content;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"number of goals should now be 0"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"gef sets a different fig than the one that we had at construction time, so we need to set its color and width"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mark this as newly created. this is to get round the problem with creating figs for loaded comments that had stereotypes. they are saved with their dimensions including the stereotype, but since we pretend the stereotype is not visible, we add height the first time we render such a comment. this is a complete fudge, and really we ought to address how comment objects with stereotypes are saved. but that will be hard work."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"place the edge on the layer and update the diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the priority of the critic to be the same priority as the decision"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end computeroute"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#renderingchanged()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: does this help?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"snooze and verify its been enabled"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if this is not a circle to circle edge we default to let gef calculate edge route."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test with a class and class diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"? two iterations of refinement, maybe should be a for-loop"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"recursively place all nodes pointed to by outgoing transitions. because of the recursive algorithm multiple outgoing transitions will end up very lopsided because one entire subgraph will be done before dealing with the other transition(s). @param seen set of nodes seen so far @param node the node to collect neighbors for"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the two ends of any valid edge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#clone()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only allow binary associations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#updatenametext()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the drop location in the case of d&d:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#texteditstarted(org.tigris.gef.presentation.figtext)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: assumes public"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#updatelisteners(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(melementimport)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see guisettingstabinterface#gettabkey()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"modifiers ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#remove(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this sets the linewidth of all in the group:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.umldiagram#relocate(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the line angle is less than 3 degrees then snap the line straight"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: associationrole"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a dependency potentially has many clients and suppliers. we only consider the first of each (not clear that we should really accept the case where there is more than one of either)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the node, check that it is an actor or use case and add it to the model namespace."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.state.ui.figstatevertex#makeselection()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tell gef its changed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.tabtarget#settarget(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the element and place it in the namespace of the model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.activity.ui.figactionstate#getnotationprovidertype()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tell gef"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo -> settings"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"everything else is ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.table.tablemodel#getcolumnclass(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove a node"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.layout.layouter#getobject(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove an edge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"something was added - nothing for us to worry about"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if it is concurrent and contains concurrent regions, the bottom region has a minimum height"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"invoke the parent constructor first"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this makes dragging connected edges very smooth. @see org.tigris.gef.presentation.fig#getclosestpoint(java.awt.point)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"invoke the parent refresh first"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"give up if the assocation ends don't have a type defined"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class stylepanelfigusecase"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the vertex was dropped onto the diagram. get the region as the first region in the statemachine. if there is no region in the statemachine then create one."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize any other figs here"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.mouselistener#mousepressed(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only the head should be filled (not the text)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notation settings are different since, we know that, at a minimum, the isshowpath() setting can change because with implement pathcontainer, so we make sure that we have a private copy of the notation settings."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"name updating"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make all the parts match the main fig"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"text fig to hold the <<include>> label"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"2. the profile configuration, holding noneditable applied profiles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the <<include>> label. it's not a true stereotype, so don't use the stereotype support"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try some action errors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the text will be set later"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check if multiple items are selected:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the element import is in the old owned, it means it must have been removed. make sure the associated model element is removed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: use per-project undo manager, not global"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"by default we don't show the attribute check box. mark this object as a listener for the check box."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify the name property was correctly updated"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add figs to the fignode in back-to-front order put this rectangle behind the rest, so it goes first"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we should be able to just call renderingchanged on the child figs here instead of doing an updateoperations..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make the line dashed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"list of objects. note: this methods which read\/write this don't appear to be used."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add an arrow with an open arrow head"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this module will still register as enabled for uml1.4 but it won't actually do anything."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make the edge go between nearest points"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#setlinecolor(java.awt.color)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new version of the relevant fig"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if default namespace is not already set"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the nodes at the two ends"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the next if-clause is important for the deployment-diagram it detects if the enclosing fig is a component, in this case the container will be set for the owning interface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the figs for the two end nodes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.mutablegraphmodel#canaddnode(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"link the new dependency in to the ends"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.umldiagram#getlabelname()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"side effect: this creates the fig:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel2#isvalidelement(object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"by default, do not show extension points:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#getlinewidth()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use arbitrary dimensions for now."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now we are sure dm is a state."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the parent vector first"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.check.types.type#conformsto(tudresden.ocl.check.types.type)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"formula for a is described in the overall class description."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(massociationend)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for an ellipse, we can put the box in the middle:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if dm is the top state of the statemachine, then it is not supposed to have incoming transitions."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#paint(java.awt.graphics)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"super returns -1 if any of gefs buttons was hit (but maybe one of the not-gef-buttons)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now we're into processing each specific path item strategy. at the moment, we only know pathitemplacement"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add menu to add an extension point or note. placed one before last, so the \"properties\" entry is always last."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"modifier menu. placed one before last, so the \"properties\" entry is always last."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mutators hold write lock & will deadlock if use is not thread safe"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"work out the radii of the ellipse, a and b. the top right corner of the ellipse (cartesian coordinates, centered on the origin) will be at (x,y)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now we are sure dm is a statevertex."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"result as integers, rounded up. we ensure that the radii are integers for convenience."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only for associations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use the code from the figcircle, not the one from fig."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crinstancewithoutclassifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's register for events from all modelelements that change the name or body text:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register for name changes, added extensionpoints and abstract makes the text italic. all figs need to listen to \"remove\", too:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now we are sure dm is a composite state."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register for extension points:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(massociation)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set bounds will be called from our superclass constructor before our constructor has run, so make sure this gets set up if needed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in deploymentdiagrams the situation is not the same as in other diagrams only classes, interfaces and objects can intersect each other while they are not the enclosingfig, so you have to prouve only these elements."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up figtext to hold the condition."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"distribute the extra height over the visible compartments:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"join all into a group"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"new style importers don't create diagrams, so we'll do it based on the list of newelements that they created"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml spec for extend doesn't call for name nor stereotype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.jcomponent#setvisible(boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the line is dashed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see junit.framework.testcase#setup()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up the property panels for use case diagrams:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we're using a fixed offset, just add it and return no collision detection is done in this case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the renderer should be a singleton"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.activity.ui.selectionactionstate#getnewnodetype(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"allow all packages and classifiers.."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"two points for line segment used to compute slope of path here note that this is the average slope, not instantaneous, so it will give screwy results near bends in the path"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try the predecessors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(mcompositestate)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private constructor to enforce singleton"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crnavfrominterface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this is using the default platform character encoding specifying an encoding will produce more predictable results"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cp1252 is often the default, but windows-1252 is the name listed by charset.availablecharsets"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let the group recalculate its bounds and then tell gef we've finished."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the clone method that should clone the jgraph with it's contents and the toolbar with it's contents. since both jgraph as the toolbar are coming from the gef framework, cloning them will be hard work and should actually not be placed here but in a clone method of the jgraph and the toolbar. @see java.lang.object#clone()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we accept a package, but not a model or a subsystem."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we do not exclude a model here, then dropping the model on a usecase diagram causes a package to be drawn."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-1$ $non-nls-1$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"empty list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see targetlistener#targetset(targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"although we register for notification of diagrams being deleted, we currently depend on the targetmanager to assign a new target when this happens when we implement mdi and have our own list of open diagrams we can ressurect the use of this"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"some convenience methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"optimize for the normal case to minimize target changes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"read until the end section is found, discard generated content"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"class table"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel#isvalidelement(object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select buttons"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the next associationend"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"output directory"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no further listeners required in this case - the rest is handled by the notationprovider and sub-figs."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compile checkbox"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: the last argument (recursive flag) should be a selectable option"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip backup files. this is actually a workaround for the cpp generator, which always creates backup files (it's a bug)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: the following is carried over from setowner, but probably isn't needed renderingchanged(); it does the following (add as needed): updatenametext(); updatestereotypetext(); updatestereotypeicon(); updatebounds(); damage();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this is using the default platform character encoding. specifying an encoding will produce more predictable results"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: get saved default directory outputdirectorycombobox.getmodel().setselecteditem(saveddir);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generate button"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over all the associationends. we only have a problem if 1) there is an end connected to an interface and 2) an end other than that end is navigable."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove trailing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"container state \/ composite state"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"classify nodes by base path"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end at an interface? navigable other end?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"else ignore"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following is a possible future improvement of the modelchanged() function. michiel: propose not to do this to keep architecture stable."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generate the files"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#getlinecolor()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"doesn't really matter what set we use."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: changed from uml 1.4"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"show filechooser to select outputdirectory"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only look at associations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class classgenerationdialog"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.filechooser.filefilter#getdescription()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class tablemodelclasschecks"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.filechooser.filefilter#accept(java.io.file)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try changing the direction of m7"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#deletefrommodel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tablemodel implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"both ends must be classes, otherwise there is nothing to merge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"argoeventpump.fireevent( new argoimporterevent(argoeventtypes.importer_added, gen));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check if this diagram already exists in the project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: should be improved so that it's recognized whether there is something selected that can actually be generated nothing selected in the diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise create a new classdiagram for the package."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.actionlistener#actionperformed(java.awt.event.actionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-1$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"overridden to set argo-specific renderinghints to determine whether or not antialiasing should be turned on. @see org.tigris.gef.base.editor#paint(java.awt.graphics)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the class is in the diagram so we are on a second pass, find the fig for this class can update its visible state."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.io.inputstream#read(byte[], int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add edges for a 2-pass r.e. process we might have already added the class but not its edges"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for some reason, this alleged directory is a single file this could be that there is some confusion or just the normal, that a single file was selected and is supposed to be imported."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"java\" is the default module for historical reasons, but it's not required to be there"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stores the action command into the umlplaintextdocument class which is also used for setproperty and getproperty"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the previous line helps, but we better check again:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is no need to test if classes is empty because the shouldbeenabled mechanism blanks out the possibility to choose this alternative in this case."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not a suffixfilter selected, so we take all"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a runtime exception that occurs when some internal test fails"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"filter out all unchanged files"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"take canvas scrolling into account. the implementation below does place the element correctly when the canvas has been scrolled."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the lastmodified value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we can delete figs like figrects now too"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return arrays.copyof(selectedfiles, selectedfiles.length);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class sourcepathdialog"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"iss.setvalue(countfiles + (i + 1) \/ 10);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.management.notificationbroadcaster#addnotificationlistener(javax.management.notificationlistener, javax.management.notificationfilter, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"roughly equivalent to and derived from old import.dofile()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.comboboxeditor#removeactionlistener(java.awt.event.actionlistener)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.debug(\"is a base or multiplicity\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crmulticomposite"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"both ends must be navigable, otherwise there is nothing to merge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.jfilechooser#approveselection()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.management.notificationbroadcaster#removenotificationlistener(javax.management.notificationlistener)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.jfilechooser#cancelselection()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the non-associationend edges (such as comment edges) that were originally attached to this and attach them to the new figassociation and make sure they are positioned correctly."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do layout even if problems occurred during import"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the enumerationliteral uses a dedicated notation that supports parsing \"name1;name2;name3\" and stereotypes. also supports deleting a literal by erasing text."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add messages from caught exceptions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the discriminator if it changed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select the correct diagram (implicitly creates it)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the element to the diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"print an exception trace to a string buffer"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#calcbounds()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: get the list of extended settings from the current language importer and add those too"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"level 0 import detail"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel2#buildmodellist()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"level 1 import detail"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel#getselectedmodelelement()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"level 2 import detail"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the user has selected modeplace either by a diagram tool or addtodiagram then we don't want to show the toolbelt items."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build the configpanel:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select the level of import 0 - classifiers only 1 - classifiers plus feature specifications 2 - full import, feature detail"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"super implementation found a hit"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the extension panel for the configuration settings."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class cralreadyrealizes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"explorereventadaptor.getinstance().structurechanged(); projectbrowser.getinstance().getstatusbar().showprogress(0);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"although not generally true for gef, for argo we know that the layer is a layerperspective which knows the associated diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is because of the (senseless?) \"all files\" filefilter"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.defaultlistmodel#addelement(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parsing file x of z."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#textedited(org.tigris.gef.presentation.figtext)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"progress bar"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no title looks better"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#size()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the contents of the directory"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following test can cause trouble with links, because links are accepted as directories, even if they link files. links could also result in infinite loops. for this reason we don't do this traversing recursively."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no need for trigger on \"specialization\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if this file is a directory"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: add filename ?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"crazy numbering scheme at work here. here's how the handle numbers are laid out. values 0-7 are defined by gef and go left to right, top to bottom (ie not clockwise or counterclockwise). values 10-14 zigzag north, south, west, east, southwest. if you can correctly guess where 15 will go, you should buy a lottery ticket immediately. <pre> 10 0-------1-------2 | | 12 3 4 13 | | 14 5-------6-------7 11 <\/pre>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't remove the last file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.management.notificationemitter#removenotificationlistener(javax.management.notificationlistener, javax.management.notificationfilter, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't remove from existing one so create new one."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#setbounds(int, int, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"error\/warning messagearea"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"gbc.gridheight = 10;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cancel\/close button"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.componentlistener#componentmoved(java.awt.event.componentevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignored"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlplaintextdocument#setproperty(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"constructors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"normal model elements are not allowed to have spaces, but for states we make an exception"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.actionlistener#actionperformed(java.awt.event.actionevent )"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crmergeclasses"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#getchild(java.lang.object, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the introducing label"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.beans.propertychangelistener#propertychange( java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"user closing the progress window is interpreted as cancel request"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.actionlistener#actionperformed( java.awt.event.actionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"panel for controls"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothings left, disable firing."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"most likely cause of this is that someone deleted our target with the event pump turned off so we didn't get notification. nothing we can do about it now and we are changing targets anyway, so just log it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select an index."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"when this is called from pgmlstackparser.attachedges, we finished the initialization of owning pseudo element (commentedge)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"removed item in last position"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just quit"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the text box containing the problem messages"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"continue and abort buttons"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.layout.layouter#getobjects()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listeners"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.layout.layouter#getminimumdiagramsize()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this seems to be called at startup only so no check so far"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add an invisible button to be used when everything is off"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"i am only prepared to go this far."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"| removed to workaround problems with autosplit ocleditor.optionmask_autosplit"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"addonly_command determines a changeability kind. todo: removed from uml 2.x. phase out of ui - tfm - 20070529"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tabmodeltarget interface methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"warn about inherited name conflicts, different critic?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"process the listeners last to first, notifying those that are interested in this event"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getsystemtextfont()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getusertextfont()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.table.tablemodel#getvalueat(int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"guaranteed to return a non-null array"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(classifier)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it's illegal in uml to have multiple elements in a namespace with the same name, but if it happens, keep them distinct so the user has a chance of catching the error. pick an arbitrary, but stable, collating order. we don't call them equal because otherwise one will get eliminated from the treeset where this comparator is used."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"first element is e.g. the class, but we need to have its namespace to recompute the offenders."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update our model with our saved target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.layout.layouter#add(org.argouml.uml.diagram.layout.layoutedobject)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"list classes = getcandidates(); return classes.size() > 0;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"loop through the associations, looking for one with aggregation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"our first button is invisible. selecting it deselects all visible buttons."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-1$ make sure we have a recognized file extension $non-nls-1$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set editor's model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"code generation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check ocl parsing constraints"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.beans.propertychangelistener#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do not create a constraint:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify the items were correctly added"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parse and check specified constraint."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"utility is a namespace collection - also not strictly required to have variables."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"split constraint body, if user wants us to"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crzerolengthedge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the constraint _must_ be owned by a namespace"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add some test data"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the euml.resources system property is defined then we are in a stand alone application, else we're in an eclipse plug in. the euml.resource should contain the path to the org.eclipse.uml2.uml.resource jar plugin. $non-nls-1$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"store constraint body"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"new constraint, first time setdata is called"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"checkassignidtoobject(figassociationrole, true, true);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check name for consistency with spec"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this throws org.argouml.model.xmiexception: unknown element in xmi file : model because the uml 1.3->1.4 converter can only handle xmi 1.0, not 1.1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crtoomanyattr"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"also set name in constraint body -- added 03\/14\/2001"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"replace name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.rules.perspectiverule#getrulename()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: why is this ignored? - tfm - 20070110"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"critiquing api"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try predecessors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"forks have their own outgoing transitions critic"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cmd.setobjects(run.getparams().get(0));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new tagged value with the given type and value and add it to a modelelement."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete the model and make sure everything inside goes with it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not in uml1.4"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.documentlistener#changedupdate(javax.swing.event.documentevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have no model event listeners, so no need to do anything"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize new todoitem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"store wizard?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"dm is a transition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.state.ui.figstate#getinitialy()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.state.ui.fighistorystate#geth()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing by default."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the source of the transition is a pseudostate"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.datatransfer.transferable#gettransferdata( java.awt.datatransfer.dataflavor)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: i18n don't use the empty string for this or it won't show in the list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assertnotnull(model.getumlfactory().buildnode( model.getmetatypes().getstate()));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: here too?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targetlistener#targetset(org.argouml.ui.targetmanager.targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#getindexofchild(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this should not be necessary, but let's be sure:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remember the system id of our root document so that we can write out profiles and linked models to a different file if requested"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end of interval"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this call could easily fall if there is e.g. no public default constructor. if it fails tweak the if\/else tree above to accommodate the parameter or check if we need to test the particular method at all."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"start of interval"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove old listeners:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#getindexofchild( java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in middle of interval"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is the xmi version used to encode the metamodel. we could parse deeper to pull out the actual uml version. the uml 1.4 version is at xmi\/xmi.header\/xmi.model[@xmi.version]. the uml 2.1.1 metamodel doesn't actually seem to contain its version."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"allow listening to other elements:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"one of everything"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add new listeners:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.figtext#settextfilled(boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mvw: this can never happen, isn't it?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel2#removeothermodeleventlisteners(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"makes sure we can select 'none'"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#setlinewidth(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't try to test this if we're removing the element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check that the model was initialized with the unspecified goal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we tried to remove a value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notationproviderfactory2.getinstance().addnotationprovider(1234, name, mynp.class); notationprovider notationprovider = notationproviderfactory2.getinstance().getnotationprovider( 1234, new object()); asserttrue(\"test notation provider for 1234 not found\", notationprovider != null);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"object[] args = { newvalue };"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlexpressionmodel2#getexpression()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a message has a name and a named operation and a script with parameters but without name, then show the operation name:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reuse change event:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this swaps the direction of m3:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try moving in a simple maner"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see targetlistener#targetadded(targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try creating a string from the generated modelelements:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see targetlistener#targetremoved(targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the child components to the heights in the array list calculating the height of any proportional component on the fly."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following uml 1.4 elements have been removed from uml 2.x, so we don't bother testing them."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.table.tablemodel#setvalueat(java.lang.object, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do not set buildingmodel = false here, otherwise the action for selection is performed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this swaps the direction of m3 back: the colon is obliged, but the \/ not and the 2nd dot also not"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"catch callers attempting to use one without other"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a message has a name and a named operation and an expression with no script, then show the operation:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a message has a name and a named operation and a script, then show the script:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.table.tablemodel#iscelleditable(int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"upper \/ lower case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.table.tablemodel#getrowcount()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we want the b: foo attribute, that is the second in the list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"may only occur as child of the model or in a package"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for those things which we've already migrated to uml 2.x syntax we need to map them back to their uml 1.4 equivalents during the migration period."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if event source is unknown or the event source is the container's target then update the field"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#getchildcount(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check the possibility that this is a promiscuous event"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remap specific classes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a deployment diagram shows something about the whole model according to the uml spec, but we rely on the caller to enforce that if desired."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a deployment diagram shows something about the whole model according to the uml spec"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clean up our two models and the extent that we read profile in to"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ns is a namespace, but not a package"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: the following cleans up left overs from previous tests, but, preferably we shouldn't have to do this..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ommit root package name; it's the model's root"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.dragsourcelistener#dragexit(java.awt.dnd.dragsourceevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is a selection"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we have a model but no list then build the list with preferred constructor. eventually all lists should be built this way."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actioncopy"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.datatransfer.clipboardowner#lostownership( java.awt.datatransfer.clipboard, java.awt.datatransfer.transferable)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add a predicate for argouml's default capabilities:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parser.parseandupdate(modelobject, s);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: user defined profile support untested currently + \"\\t\\t<userdefined>\\n\" + \"\\t\\t\\t<filename>\\n\" + \"foo.profile\\n\" + \"<\/filename>\\n\" + \"\\t\\t\\t<model>\\n\" + \"foo.profile.package\\n\" + \"\\t\\t\\t<\/model>\\n\" + \"\\t\\t<\/userdefined>\\n\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove from the model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assertnotnull(model.getumlfactory().buildnode( model.getmetatypes().getextend())); assertnotnull(model.getumlfactory().buildnode( model.getmetatypes().getinclude())); assertnotnull(model.getumlfactory().buildnode( model.getmetatypes().getusecaseinstance())); assertnotnull(model.getumlfactory().buildnode( model.getmetatypes().getextensionpoint())); ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it is a uml element that is not a modelelement"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"projectbrowser exposes functionality, not components. assertnotnull(pb.gettabprops()); assertnotnull(pb.getstatusbar());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"lets see if this diagram has some figs on it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no content of diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"thedetailspane.getnamedtab(translator.localize(\"tab.properties\"));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we cannot delete the last diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#setenclosingfig(org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we cannot delete the model itself"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"commented out next piece to remove failure of testcase. the testcase is probably correct but the implementation of detailspane is not pane.gettabs().setselectedcomponent(docpane); pane.targetset(e); assertequals(docpane, pane.gettabs().getselectedcomponent());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"static variables"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.itemlistener#itemstatechanged(java.awt.event.itemevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targetlistener#targetadded(org.argouml.ui.targetmanager.targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we should also test that the object have been removed from their namespace. collection c = model.getfacade().getownedelements(p.getroot());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.text.document#remove(int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: the following fails due to the xmi writing saving all top level model elements and because even if there was no empty project, by creating a class, the undo mechanism in the project manager will force the creation of an empty project. assertequals(1, profilemodels.size());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test for return parameters. they can also fail!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"same name, same participants, two offenders"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"argodiagram activediagram = diagramutils.getactivediagram(); return (activediagram instanceof umlclassdiagram);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"simply create 3 usecases and an actor in a package with individual names"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"usage of other sureremove method is legacy. they should be integrated."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"multiplicity, multiplicityrange, and all expression subtypes don't have 0-argument create methods, so we special case them."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the diagram contains figs so lets ask the user if he\/she is sure"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build extend these parameters seem to be in correct order add an extend. we do not need an assoc on the extending use case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this catch block needs to be narrower and do something with the caught exception - tfm 20071120 ignore"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.table.tablemodel#getcolumncount()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ok button"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it would be better if we didn't need the container to get the target. this constructor can have zero parameters as soon as we improve targetchanged."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete button"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get a node's name along with the name of its parent (which we'll use to find the factory to create it with."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"procede with the deletion in the model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.documentlistener#insertupdate(javax.swing.event.documentevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"confirm with the user that he wants to delete, presenting the list of settings to delete"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the component is a jlabel which has another component assigned then position\/size the label and calculate the size of the registered component"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mutators hold write lock & will deadlock if use is not thread-safe"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle the simple cases anything very exotic will fail, but that will be our clue that the test needs to be extended"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the user cancelled!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this needs to be a concrete metatype, so we can't use the general, but abstract, classifier. replace with its concrete subtypes."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"custom button text:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"0"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see junit.framework.testcase#teardown()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#addtreemodellistener(javax.swing.event.treemodellistener)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see testcase#setup()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"3"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tests used to be coded to assume immediate event delivery. they've been modified to use flush() where needed. - tfm oldeventpolicy = mfactoryimpl.geteventpolicy(); mfactoryimpl.seteventpolicy(mfactoryimpl.event_policy_immediate);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try some predecessor errors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.runnable#run()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getprimary2()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following will bring up a dialog box, so can't be run headless actionsupplier.actionperformed(new actionevent(this, 0, \"foo\"));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setup a user defined profile which isn't loaded by the model subsystem and contains a stereotype and this contains a tag definition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if no project was entered on the command line, try to reload the most recent project if that option is true"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try adding the extension from the chosen filter."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"adding project files icon"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"object icon = resourceloaderwrapper.lookupicon(s); putvalue(action.name, translator.localize(s)); putvalue(action.small_icon, icon); set the tooltip string: putvalue(action.short_description, translator.localize(s));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"main methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionopenproject"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the property value has changed so rebuild our view. @see java.beans.propertychangelistener#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: see if the new target has a tv that we can proxy"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try adding the default extension."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we only have this here until we have stereotypes list on property panel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionsaveprojectas"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only need to this from super()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcombobox#umlcombobox( umlcomboboxmodel, action, boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel#isvalidelement(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this action performs the layout and triggers a redraw of the editor pane. @see java.awt.event.actionlistener#actionperformed(java.awt.event.actionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.state.ui.figstatevertex#initnotationproviders (java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"constructor. <p> todo: correct? @param nodes the uml elements, typically classifiers, to generate. @param inmodel <code>true<\/code> if the path is in the model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify the priority was correctly updated"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mdr has a hardcoded printstacktrace on all exceptions, even if they're caught, which is unsightly, so we handle unknown elements ourselves rather than letting mdr throw an exception for us to catch. org\/netbeans\/lib\/jmi\/util\/logger.java this can be uses to disable logging. default output is system.err setproperty(\"org.netbeans.lib.jmi.logger.filename\", \"\") org.netbeans.mdr.logger the property org.netbeans.lib.jmi.logger controls the minimum severity level for logging"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.management.notificationbroadcaster#getnotificationinfo()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"testing: does not fire."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"proxy methods for real umlmodelelementtaggedvalue"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only do this for classifiers"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"rearrange the diagram layout"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compound critics"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make this thread interruptible, if called from swingworker"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a problem if we found more than 1 aggregation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"targets ought to be uml objects or diagrams"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.commonbehaviorhelper#setnodeinstance(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we shouldn't need this as well as the above."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check here if there are no incoming call actions if not then create an activation at the top of the lifeline"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.mouselistener#mouseclicked(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class tabprops"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml 1.4.2 spec section 4.5.3.20 [5] a generalizableelement may only be a child of generalizableelement of the same kind."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not currently present as token in model.getfacade(). nif: runtruthtest(model.getfacade().isaelement(o), model.getfacade().element); nif: runtruthtest(model.getfacade().isaexpression(o), model.getfacade().expression); nif: runtruthtest(model.getfacade().isaextensionpoint(o), model.getfacade().extension_point); nif: runtruthtest(model.getfacade().isafeature(o), model.getfacade().feature);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if our map has any entries for this type, it's a connection type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have found a non-static one that is not initialized."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if there's a pair in this list that match the given model elements"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crillegalname"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see targettablemodelview#gettargettablemodel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore any error. the transaction may already have been unwound as part of exception processing by mdr"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.documentlistener#removeupdate(javax.swing.event.documentevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we don't have it, find the trigger. if this fails it will keep its default value of null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"includes the \"\/\" the \"seq_expr\" from the header javadoc the \":\" is not included in \"number\" - it is always present"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.commonbehaviorhelper#setreceiver(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"put everything together"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the model repository doesn't manage a di model then we must generate our figs by inspecting pgml"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make lists"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"give the resolver.getidtoobjectmap() entries priority over entries with the same uuid from resolver.getidtoobjectmaps() because entries in resolver.getidtoobjectmaps() are historic."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make buttons"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@override public final void setheadline(string s) { setupheadanddesc(); }"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignored this event"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the assocations and connections. no problem (there is a separate critic) if this is a binary association or is an association role."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make buttons layout"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make listeners"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private property prptodo; private property prpproperties; private property prpdocumentation; private property prpstyle; private property prpsource; private property prpconstraints; private property prptaggedvalues;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build namespace hierarchy like this: g a \/\\ b c \/\\ d e f"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.action#isenabled()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enumerate declaring class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.comboboxeditor#setitem(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: constraints todo: required tags"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.comboboxeditor#geteditorcomponent()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: although it's not shown in the uml 1.4 spec, a templateargument appears to be a datavalue (like multiplicityrange) and can not be reused in multiple instances. the uml diagrams don't show it as a composition, but it effectively is."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.comboboxeditor#addactionlistener(java.awt.event.actionlistener)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the next non-return parameter. null if non left."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"gridbagconstraints gridbagconstraints3 = new gridbagconstraints(); gridbagconstraints3.gridx = 2; gridbagconstraints3.anchor = gridbagconstraints.northwest; gridbagconstraints3.insets = new insets(5, 5, 0, 0); gridbagconstraints3.gridy = 3; gridbagconstraints gridbagconstraints2 = new gridbagconstraints(); gridbagconstraints2.gridx = 0; gridbagconstraints2.anchor = gridbagconstraints.northwest; gridbagconstraints2.insets = new insets(5, 5, 0, 0); gridbagconstraints2.gridy = 3;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end of sourcepathcontrollerimpl class definition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is not a well formed model in a strict sense. see the multiplicity in uml 1.3 figure 2-5."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sb.append(model.getfacade().getname(c));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"always select properties panel if defaulttoproperties is true, and if properties panel is appropriate for selected perspective"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sb.append((string) model.getfacade().getbody(c));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a parameterized class can only be the client of a single binding"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mmodelelement"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add to the collection and round to look at the next one"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"next statement is necessary to update the textfield if the selection is equal to what was allready selected"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actionpaste.getinstance().setenabled( globals.clipboard != null && !globals.clipboard.isempty());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for now just skip registering this and ignore the request, but the real issue is that magicdraw serializes the same object in two different composition associations, first in the referencing file and second in the referenced file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the workarea is all the visible space except the menu, toolbar and status bar. workarea is laid out as a bordersplitpane where the various components that make up the argo application can be positioned."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.comboboxeditor#selectall()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.comboboxeditor#getitem()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we don't want to show some nasty gray background color, now do we?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.focuslistener#focusgained(java.awt.event.focusevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.controlmech#isrelevant(org.argouml.cognitive.critics.critic, org.argouml.cognitive.designer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#addknowledgetype(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check against \"\" is needed for backward compatibility. don't remove without checking subclasses and warning downstream developers - tfm - 20081211"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"necessary to create distance between the textfield and the icon."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compare against all earlier operations. if there's a match we've found the problem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make new column with labelledlayout"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the return message modelelement with the interaction and the collaboration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"comment.name text field - editing disabled"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.table.tablemodel#getcolumnname(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"comment.body text field - editing disabled"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#todoitem(java.lang.object, org.argouml.cognitive.designer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only change the background colour if it is supplied by the laf. otherwise leave look and feel to handle this itself."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#getclarifier()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in this case, the bounds are determined by the figedge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#getsupportedgoals()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in this case, the bounds (of the box) are determined by the figclassassociationclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a newly created associationclass may not have all its parts created by the time we are called"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following calls are order dependent. not sure why, but the layer add must come before the model add or we'll end up with duplicate figures in the diagram. - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: defer most of this work if the panel isn't visible - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the generic clarifier for this designer\/poster. @see org.argouml.cognitive.poster#getclarifier()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"needs to be updated for changes in notation subsystem - tfm string namestr = notation.generate(this, getowner()).trim(); getnamefig().settext(namestr);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just returns false. @see org.argouml.cognitive.poster#canfixit(org.argouml.cognitive.todoitem)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.todolistlistener#todoitemsremoved(org.argouml.cognitive.todolistevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.check.types.type#hasstate(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there's only a single child (and we're it's only parent), set a hint for where to place it when we get to its row"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.listmodel#getelementat(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"chooser.setselectedfile(new file(filename));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the y coordinate is before the classifier role y, we place the start in the corner of the fighead."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"so, let's do it the hard way:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we know this is a return action now. it must be pointing the opposite way to the activator."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the diagram is empty, gef won't write anything, leaving us with an empty (and invalid) file. handle this case ourselves to prevent this from happening."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"java se 6 has a native gif writer, but it's not in java 5. one is available in the jai-imageio library, but we don't currently bundle that and at 6+ mb it seems like a heavyweight solution, but i don't have time to produce a stripped down version right now - tfm https: jai-imageio.dev.java.net"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"anything else is handled the normal way"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the figmessage that triggered this figactivation into existence"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create an image which will do deferred rendering of the gef diagram on demand as data is pulled from it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo real numbers not yet supported assertequals(defaultoclevaluator.getinstance() .evaluate(null, null, \"1.5\"), 1.5);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: gef's gif writer uses jeff poskanzer's gif encoder, but that saves a copy of the entire image in an internal buffer before starting work, defeating the whole purpose of our incremental rendering."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"layerperspective layer = diagramutils.getactivediagram().getlayer();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"correct exception was thrown."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"action to save a diagram as a gif image in a supplied outputstream. todo: this requires java 6 in its current state, so don't use. @author tom morris <tfmorris@gmail.com>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the purpose of this method is not explained and it give give npe depending on z order of figs as they are read. for now ignore if null but for future lets delete this."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"convert max x\/y to width\/height"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get a domimplementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"vetoablechangelistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create an instance of org.w3c.dom.document"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.keylistener#keytyped(java.awt.event.keyevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we actually are computing max x & max y, not width & height"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we have a currentact object that means have reached the end of the lifeline with a call or a create not returned. add the activation to the list after setting its height to end at the end of the lifeline."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.todolistlistener#todoitemschanged(org.argouml.cognitive.todolistevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create an instance of the svg generator"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make it stretch vertically"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip the 2 lines <?xml version=\"1.0\" encoding=\"utf-8\" ?> <!doctype pgml system \"pgml.dtd\">"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"org.argouml.cognitive.critics\","}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"correct lazy initialization of static field without further updates:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.todolistlistener#todolistchanged(org.argouml.cognitive.todolistevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"look for a tagdefinition matching the given name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todolistlistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#isleaf(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if is a message, it must return the sender and the receiver of the message."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return just the comment edges for a specific layer. todo: document: diagram \/ layer? @param diagram the diagram. @return a {@link list} with the edges."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#modelchanged(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.componentlistener#componentshown(java.awt.event.componentevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"request that we be made visible if we're not? topleveltabbedpane.setselectedcomponent(t);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the added edge is a create message it will affect the position of the classifierrole so it should be repositioned"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.keylistener#keyreleased(java.awt.event.keyevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle multivalued tagged value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.todolistlistener#todoitemsadded(org.argouml.cognitive.todolistevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"super(model.getfacade().getname(op), null);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"target has been deleted"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.changelistener#statechanged(javax.swing.event.changeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.rules.perspectiverule#getdependencies(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the row is past the end of our current collection, return an empty string so they can add a new value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"utility function to add a listener for a given property name and remember the registration. @param element element to listen for changes on @param property name of property to listen for changes of @see org.argouml.model.modeleventpump#addmodeleventlistener(propertychangelistener, object, string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep nagging until the user solves the problem: this seems a nice way to nag:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tagvalue = true;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there are one or more regions so find the one that the vertex was dropped in"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for debugging"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targetlistener#targetremoved(org.argouml.ui.targetmanager.targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class todobyoffender"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"override fignode implementation to keep setowner from getting called."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we really shouldn't add it until after it is set up, but we need it to have an owner for the following method calls"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"constants instance variables"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this next argument may be used to switch off the generation of sequence numbers - this is still to be implemented. they are less desired in sequence diagrams, since they do not add any information. in collaboration diagrams they are needed, and they are still optional in sequence diagrams."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"since we aren't sure of ordering, fire event for whole table"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.state.ui.figstate#getinitialx()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.notation.providers.notationprovider#getparsinghelp()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no way, we have to give up"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.abstractmodeleventpump#removemodeleventlistener(java.beans.propertychangelistener, java.lang.object, java.lang.string[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#valueforpathchanged( javax.swing.tree.treepath, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the diagram already exists in this project. select it as the current target."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.abstractmodeleventpump#addmodeleventlistener(java.beans.propertychangelistener, java.lang.object, java.lang.string[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing during the deprecation period, then it can be removed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the classifier is not in the current diagram, add it:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"event handlers"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for performance, we check if this is a selfmessage if it is, we have just updated the activations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"firetreenodeschanged(this, path, childindices, children);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.check.types.type#navigatequalified( java.lang.string, tudresden.ocl.check.types.type[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is done for compatibility with previous version: move the argo.user.properties written before 0.25.4 to the new location, if it exists."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: assumes public, user pref for default visibility?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.defaultlistmodel#contains(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.object#hashcode()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.ui.popupgenerator#getpopupactions(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.abstractlistmodel#firecontentschanged( object, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#removetreemodellistener(javax.swing.event.treemodellistener)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is a bug in gef where positioning nodes can affect edge positions. we need to do 3 iterations to protect against that."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.events.argogeneratoreventlistener#generatoradded(org.argouml.application.events.argogeneratorevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add an element listener and remember the registration. @param element element to listen for changes on @see org.argouml.model.modeleventpump#addmodeleventlistener(propertychangelistener, object, string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"multiplicityelement is now an interface implemented by element types that support multiplicities - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionimportfromsources"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"self messages act differently so it is needed to move them separetly. only self messages of selected cr should be horizontally translated."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't test changed element if it was deleted"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.abstractargojpanel#spawn()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is never downlighted..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this one should work except java is not registered by default asserttrue(settings.setnotationlanguage(\"java\")); assertequals(\"java\", settings.getnotationlanguage());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only specified format are allowed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getmenutextfont()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"implementation note: unlike many of the interfaces to the model there is no control to force a single instance of an xmireader. this is to allow work objects generated by the implementation to be garbage collected when an xmireader instance falls out of scope."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.componentlistener#componenthidden(java.awt.event.componentevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"populate our namespace hierarchy to the requested depth. total number of created elements is children^maxlevel, so be careful not to increase parameters too much."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try changing namespace of element and make sure results track"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.omg.uml.diagraminterchange.adiagramelementproperty#getproperty( org.omg.uml.diagraminterchange.diagramelement)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"by default the build already builds one default ep"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.mouselistener#mouseexited(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the tooltip of the arrow to open combined tools:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a generalizable element with an element without children."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the minimum and preferred equal, so that the size is fixed for the labelledlayout."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reopen the project and assert that the metaprofile isn't part of the profile configuration, including the fact that the stereotype <<critic>> isn't found"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this will add a new modelelement event listener after update is complete"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we presume that the container equals this proppanel."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml2, the tag definition is the attribute itself"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"refresh the target for all our children which weren't getting while not visible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.notation.providers.notationprovider#parse(java.lang.object, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.actionlistener#actionperformed(actionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.umlhelper#move(java.lang.object, org.argouml.model.umlhelper.direction)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.io.inputstream#read()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this works - we do get an event - and now refresh the ui:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#removefromdiagramimpl()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"to manage the case there are no label\/component pairs but just one component"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.notation.providers.notationprovider#parse( java.lang.object, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assumes the next child is the labelled component"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the component width isn't any greater than its maximum allowed width"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assert that the model element that depends on the profile is consistent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a preferred height is not given or is the same as the minimum height then fix the height of this row."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: what about objectnode? return org.eclipse.uml2.uml.objectnode.class;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"project p = projectmanager.getmanager().getcurrentproject(); collection elems = modelmanagementhelper.gethelper() .getallmodelelementsofkind(mclassifier.class);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\/** * construct an exception with a message and a causing exception. * * @param message the message * @param c the cause of the exception *\/ public xmireferenceexception(string message, throwable c) { super(message, c); }"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"allow listening to other elements: removeothermodeleventlisteners(listtarget);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setdoublebuffered(true);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try some more complex moving"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the only way a region is set to null is if we're deleting the vertex in which case we do nothing special so that the removal of the state triggers a delete event."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"implements backspace functionality"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make a nice little target area:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in this case, either the container was not set, or it was not contained in a statemachine."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.rules.perspectiverule#getchildren(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.caretlistener#caretupdate(javax.swing.event.caretevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.notation.notationprovider#parse(java.lang.object, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a composite state contains at least one region"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: gone from uml 2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: not exact, but close"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.profile.internal.ocl.modelinterpreter#invokefeature(java.util.hashmap, java.lang.object, java.lang.string, java.lang.string, java.lang.object[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actioncut"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new project and assert that it has the metaprofile as part of the project's profile configuration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"allow listening to other elements: addothermodeleventlisteners(listtarget);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uninterpretedaction.class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a selection on the clipboard"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get localised strings once only"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.guisettingstabinterface#handleresettodefault()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setting the icon"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.events.argonotationeventlistener#notationchanged(org.argouml.application.events.argonotationevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setting the tooltip to type and name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.profile.profilemanager#lookforregisteredprofile(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.saxparserbase#handleendelement( org.argouml.persistence.xmlelement)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in the next line, replacing makeemptyproject by getcurrentproject fails the test, except when run in eclipse. mvw: i have no idea why."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.projectfilepersister#doload(java.io.file)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.listselectionlistener#valuechanged(javax.swing.event.listselectionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.memberfilepersister#getmaintag()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.abstractfilepersister#getdesc()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.abstractfilepersister#getextension()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.memberfilepersister#load(org.argouml.kernel.project, java.io.inputstream)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stop updating model when we're not visible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml2, a td is a property of a stereotype in a profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.tabtarget#refresh()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only update our model if we're visible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this target is a statemachine, for which no diagram exists yet, so, let's use it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.guisettingstabinterface#handlesettingstabrefresh()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class tabtaggedvalues"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setenabled((globals.clipboard != null && !globals.clipboard.isempty()) || !issystemclipboardempty());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionpaste"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.guisettingstabinterface#gettabpanel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the target is a valid context."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"style panels only apply when a fig is selected. @see org.argouml.ui.tabtarget#shouldbeenabled(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targetlistener#targetadded( org.argouml.ui.targetmanager.targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.guisettingstabinterface#handlesettingstabsave()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.api.commandlineinterface#docommand(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"must not be used in uml2; we model a method as a opaquebehavior object that already has a body, so there is no need to have an intermediate expression object"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"as write in uml specification, we have size(bodies)==size(langs) we must have tabvalues.length%2==0"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try to get the corresponding body and set it to the current body this _should_ work, if all the bodies were stored with their corresponding languages."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specify design issue category and knowledge type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's just build a statemachine, and put it in a suitable namespace."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targetlistener#targetremoved( org.argouml.ui.targetmanager.targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"upperpanel.setborder(borderfactory.createetchedborder());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the model structure has changed significantly, eg a new project. @see org.argouml.ui.explorer.treemodelumleventlistener#structurechanged()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"buttonbox.add(box.createrigidarea(new dimension(0, 20)));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.treemodelumleventlistener#modelelementchanged(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"string title = getui().getdialogtitle(this);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: since there may be multiple top level elements in a project, this should be using the default namespace (currently undefined) or something similar"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"button action:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"detach any non-associationend edges (such as comment edges) already attached before this association node is removed. they'll later be re-attached to the new figassociation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class croppendconflict"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"report a progress to the progressmonitor window. @see org.argouml.application.api.progressmonitor#updateprogress(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.rules.perspectiverule#getdependencies( java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if its an interface we have an interface end, otherwise its something else and we should see if it is navigable. we don't check that the end is a classifier, rather than its child classifierrole, since we have effectively eliminated that possiblity in rejecting associationroles above."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.figedge#setfig(org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure it's parseable as an number"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select.settext(translator.localize(\"action.select\"));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.rules.abstractperspectiverule#getchildren(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select.add(actionaddeventasdeferrableevent.singleton);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"newmenu.settext(translator.localize(\"action.new\"));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(mextend)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.rules.abstractperspectiverule#getrulename()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize basic parameters that are different from decision.unspec"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this next line presumes that the 1st fig with this owner is the previous port - and consequently nullifies the owner of this 1st fig."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the association and its connections. iterate over all the associationends and check that each connected classifier is in the same sub-system or model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"repair action for possible np after load"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(mclassifier)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try some more errors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.rules.perspectiverule#getchildren( java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseafeatureprimaryexpression(tudresden.ocl.parser.node.afeatureprimaryexpression)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(mmodelelement)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"to be able to remove dependencies later"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: removed from uml 2.x - phase out usage - tfm 20070530"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.actionlistener#actionperformed(java.awt.event. actionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy to new file and let the regular load code do the actual load"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionaddattribute"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"apparently this object had no getitemuid"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"since uml2 it's easier: tds only via stereotypes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just mark for rebuild next time since we use lazy loading"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the user double clicks on any part of this fignode, pass it down to one of the internal figs. this allows the user to initiate direct text editing. @see java.awt.event.mouselistener#mouseclicked(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a stereotype got applied or removed just mark for rebuild next time since we use lazy loading"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see namespace#pushnamespaceelement(namespaceelement)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no concrete subclasses defined, this class is \"useless\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.swidgets.dialog#namebuttons()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#todoitem( java.lang.object, org.argouml.cognitive.designer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"issue resolution"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all strings collate before all uml elements"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the attribute 'targetscope' of an associationend in uml1.x is no longer supported in uml2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and then by their enclosing path to fully distinguish them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"elements are collated first by name hoping for a quick solution"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep track of first non-equal comparison to use in case the case-insensitive comparisons all end up equal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the action to the component"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stop desiring the goal which should remove it from the model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the strings differed only in non-primary characteristics at some point (case, accent, etc) pick an arbitrary, but stable, collating order."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"first verify that the set goal priority did not add an extra goal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"{transient=false, volatile=false}"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"argo customization"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"prohibit instantiation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keyevent.isactionkey() method"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"apparently this object had no getuuid"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.keylistener#keypressed(java.awt.event.keyevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"apparently it had a getitemuid, but we're not allowed to call it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"apparently this object had no setitemuid"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"apparently it had a setitemuid, but we're not allowed to call it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"class preloading, so packages are there..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"...getpackage() can return null's, so we have to cater for this:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.throwable#printstacktrace(java.io.printstream)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"switch the value back off, so that we will get notified again next time."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore any nested exceptions. we don't want infinite loop."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"didn't work."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"first step. create the panel if not already done and options are available. otherwise it retains its default value of null."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"likely a nosuchmethodexception or an illegalaccessexception loading\/invoking eawt.application methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.kernel.abstractprojectmember#getzipfileextension()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the target method returns a boolean, use that as a hint"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for eclipse setup"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for ant setup"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"when running from maven"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@param node @see tudresden.ocl.parser.analysis.depthfirstadapter#caseastandarddeclarator(tudresden.ocl.parser.node.astandarddeclarator)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we're setting a handler, enable the preferences menu item by calling com.apple.eawt.application reflectively"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getprimary3()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"override osxadapter.calltarget to send information on the file to be opened"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.cognitive.critics.cruml#predicate2( java.lang.object, org.argouml.cognitive.designer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore if the directory does not exist. this error will throw when running from the eclipse setup."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseamultiplicativeexpressiontail(tudresden.ocl.parser.node.amultiplicativeexpressiontail)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.todoitem#deselect()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there was a comment saying that the below has no cycles, but classycle thinks there's a cycle here too, so i believe there really is one - tfm 20070702 \"org.argouml.uml.cognitive.critics\","}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just completed the first step where we make our choices. first see if we have a choice. we always should, so print a rude message if we don't"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo:{\"org.argouml.ui\", \"org.argouml.cognitive.ui\"}, fails due to subpackages todo:{\"org.argouml.cognitive\", \"org.argouml.cognitive.critics\"},"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.checklist.checkitem#expand(java.lang.string, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"{\"org.argouml.kernel\", \"org.argouml.uml.diagram.ui\"}, why does this fail?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getcontroltextfont()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing by design"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: different critic or special message for classes that inherit all ops but define none of their own."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"obey the contract ourselves!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.cognitive.critics.cruml#getcriticizeddesignmaterials()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register all of the event listener trackers"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.clarifier#setfig(org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove all of the listeners"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fire all of the diagram events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"success"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fire all of the generator events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no good trigger"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fire all of the help events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fire all of the notation events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#getwizardclass(org.argouml.cognitive.todoitem)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep track of total events fired"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep track of which events fired"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.cognitive.critics.abstractcrunconventionalname#computesuggestion(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"x x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the event listener trackers which verify that all of the proper events were fired"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#stillvalid( org.argouml.cognitive.todoitem, org.argouml.cognitive.designer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"display events are fired on the swing event thread. we need to wait for them to be dispatched note: if more display events are added to this test, this one needs to be last"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: mvw: i think this has to be: clone.namefig = (figsinglelinetext) clonefig; but have not the means to investigate, since this code is not yet used. enable the menu-items for copy\/paste to test... btw: in some other fignodemodelelement classes i see the same mistake."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"counts each bit that has been fired"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"resolvedcritic(string, list)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"resolvedcritic(critic, listset)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the interface realization will be created in the client namespace (client is a namespace)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"resolvedcritic(critic, listset, boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"testmc should now have an itemuid so we should be able to create without adding a new itemuid"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify isrelevant returns true"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set enabled to false and check the opposite condition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify isrelevant not is false"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notsnoozedcm isrelevant checks if the critic is snoozed snooze the critic to verify isrelevant returns false"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"unsnooze the critic to verify the critic is not relevant"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify isrelevant is true"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify isrelevant is still false"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"isrelevant should now be true"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private static final stereotypeview[] stereotypeviewmap; static { stereotypeviewmap = new stereotypeview[3]; stereotypeview. stereotypeviewmap[diagramappearance.stereotype_view_textual] = stereotypeview.textual; stereotypeviewmap[diagramappearance.stereotype_view_big_icon] = stereotypeview.big_icon; stereotypeviewmap[diagramappearance.stereotype_view_small_icon] = stereotypeview.small_icon; }"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"isrelevant should still be true"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.umlhelper#getdestination(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize test data"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the todolist"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add a todoitem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the current shortcut has been set but is void, then the current shortcut is not set --> then the default value does not change"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"redundantly add item again which should be ignored"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"size should be 1 since addition of second item would have been ignored"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.ui.wizard#doaction(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"retrieve item"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.icon#painticon(java.awt.component, java.awt.graphics, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove item"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"size should be 0 since item was removed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the goalmodel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the source of the event is an uml object, e.g. the owner of this fig (but not always only the owner is shown, e.g. for a class, also its attributes are shown), then the uml model has been changed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"change priority of unspecified goal so we can verify it was updated"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check that the model correctly updates a goal's priority"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test the removal of a goal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"start desiring a goal which should add a goal and bump the size to 1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"number of goals should now be 1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"umlsequencediagram seqdiag = new umlsequencediagram();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this test calls todolist.addelement which requires the model. we are able to get away with using the mock model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"checkassignidtoobject(seqdiag, true, true);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.umldiagram#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figedgenote has no uuid"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cmd api"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"checkassignidtoobject(fighistorystate, true, true);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"checkassignidtoobject(figstate, true, true);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this could just work off the names in the uml profile todo: it doesn't look like it matches what's in the uml 1.4 spec"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize a decision object with parameters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we moused over an object just as it was deleted transient condition - doesn't require i18n"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify parameters were initialized correctly by the constructor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no more we can do here on failure"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the priority to a different value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we have only one return value and without type, the return param string is \": ,\", we remove it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the name to a different value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#initwizard( org.argouml.cognitive.ui.wizard)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"following the update the priority should be equivalent to decision.unspec"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"putnotationargument(\"showassociationname\", getsettings().isshowassociationnames());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test that properties were correctly initialized by the constructor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.component#getminimumsize() sets minimum size to 120,100"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the checklist"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify the size of the list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the trysave method results in the save taking place in another thread. if that completes without error the projectbrowser.exit() method will be called which will actually exist the system."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the text the user has filled in the textfield is first checked to see if it's a valid multiplicity. if so then that is the multiplicity to be set. if not the input is rejected."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test that the category and description are correct"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new list to test the addall"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add all of the test items from the first list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mmessage"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify the size of the new list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the checkliststatus"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"construct a checkitem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.profile.profile#getprofileidentifier()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reset the values to something different"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(2) construct another checkitem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"comments"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test that the properties were correctly initialized"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize snoozeorder"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"unsnooze and verify its been disabled"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test with a class in a package"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test with a class and an inner class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it is quite possible that the cause of the problem has by now been deleted, in which case we will throw an exception if we try to change things. catch this tidily."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try with statediagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing yet. later maybe something like:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"put the statemachine in the namespace of the class:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test with a package and a class and activity diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class projectmembermodel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name of this type of object"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build the activity diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"attempt to save this project under a new name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we no longer send individual events, so next code is obsolete:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"curdecisioncm isrelevant checks to see if the critic has any decisions that have a priority > 0 and less than the priority of the critic. by default the critic has no decisions so isrelevant should return false."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we initialised java notation, so let's activate it:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"needed for initialisations:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.cognitive.critics.cruml#predicate2(java.lang.object, org.argouml.cognitive.designer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set metaprofile as a default profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a dependency from the project's model to the metaprofile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the metaprofile from the project's profile configuration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save the project into a new file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"adds all stereotypes defined at the profiles applied to the current namespace"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setup a user defined profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try guard\/iterator syntax"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assert that the project's model element that had a dependency to the metaprofile doesn't get inconsistent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assert that the project's model elements that had a dependency to the uml profile for java are consistent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.ui.wizard#makepanel(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add it to the project configuration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"maybe uml2 has these as constants somewhere"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a dependency between the project's model and the user defined profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save the project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notation events are fired on the swing event thread. we assume that serializing on the final call is sufficient"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load the project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the user defined profile and the directory where it is"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"success - expected exception"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clean up after ourselves by deleting profile model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test both forms of addbaseclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test remaining form of removebaseclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"$junit-begin$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"$junit-end$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we put the targets 'backwards' in the history since the first target in the addedtargets array is the first one selected."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sets the value of an element#s property (tagged value). this method makes sure that a collection of values is set if and only if the property is multivalued (upper multiplicity value greater 1), so passing a collection is safe. @see org.argouml.model.extensionmechanismshelper#setvalueoftag(java.lang.object, java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.kernel.abstractprojectmember#gettype()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"flag to enable performance testing - off by default"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the model and profile subsystems to simulate a fresh argouml session"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not implementable in uml2, because property is missing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"20 sec."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add one child."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the target has changed notify the third party listener if it exists and dispatch a new element event listener to ourself. otherwise dispatch a target reasserted to ourself."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"performance testing parameters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enabledcm isrelevant checks if the critic is enabled initialize this to true to verify isrelevant returns true"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add grandchild."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check periodically to see if we've exceeded time limit"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"convert the string (e.g. \"aaa,bbb,ccc\") into separate stereotype-names (e.g. \"aaa\", \"bbb\", \"ccc\")."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add another child."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tree is created depth first, so this should be at the bottom"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try some guard\/iterator errors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if the other copy was just a lucky shot"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"layout"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.umldiagram#getowner()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see junit.framework.testcase#testcase(string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we have a root model for tagdefinitions to get put in."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the tree of objects"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only targets we didn't have allready count"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy package p1 into p2 package"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"extend, but only between two use cases. remember we draw from the extension port to the base port."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"change the structure in p1 package"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify the copied package"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify the copied class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify the copied nested package and the copied interface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify the copied attribute"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if we can copy a class right off"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"change things"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#getfillcolor()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"scale everything up"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#makeselection()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assert that the copy isn't modified when the source changes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#getroot()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: for large lists, this is doing a linear search of literally thousands of elements"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.layout.layouter#remove(org.argouml.uml.diagram.layout.layoutedobject)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if two copies look like copies of eachother"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing is editable, since a link takes its identity from the association. @see org.argouml.uml.diagram.ui.figedgemodelelement#canedit( org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#initnotationproviders(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if we can copy a datatype right off"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this function will, by design, contain long lists of i18n keys. it might be tempting to shorten these by constructing them from the parts but please then consider that we might loose the possibility to build tools to statically check the property files against this file."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if two copies look like copies of each other"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.umldiagram#getdependentelement()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if we can copy an interface right off"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.umldiagram#isrelocationallowed(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update an existing tagged value on a model element."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify all events were fired correctly"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if we can copy a package right off"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if we can copy a stereotype right off"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore non-existent and empty names"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"expected"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"is the name already in the list of those seen, if not add it and go on round."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"permission\","}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if association still exists"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"expected illegalargumentexception seen"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"exception expected - test success"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an interface to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"expected - test success"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new arg list with a different set of args (but same types)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the new encloser is null, and the old one is a component, then the \"enclosed\" fig has been moved on the diagram. this causes the model to be adapted as follows: remove the elementresidence between the \"enclosed\" and the oldencloser. @see org.argouml.ui.argodiagram#changefigencloser(org.tigris.gef.presentation.fignode, org.tigris.gef.presentation.fignode, org.tigris.gef.presentation.fignode)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not static"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the transition has a name text box. it contains: <ul> <li>the event-signature <li>the guard condition between [] <li>the action expression <\/ul><p> the content of the text box is generated by its own notationprovider. @see org.argouml.uml.diagram.ui.figedgemodelelement#getnotationprovidertype()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test passed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.umlmutablegraphsupport#isremovefromdiagramallowed(collection)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the source was one of the referenced state's path which has got a new name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not uml1.4"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the text labels and listeners. @see org.argouml.uml.diagram.ui.fignodemodelelement#modelchanged(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"non existent in uml1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a package to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"place the comment fig on the nicest spot on the diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"returns list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we don't currently have any settings that can change on a per-fig basis, so we can just use the project\/diagram defaults settings = new diagramsettings(rendersettings);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a region to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"deleting the stereotype should cascade to the tagdefinition, then the taggedvalue"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.state.ui.figstatevertex#initnotationproviders(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"must be called after setimplementation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enumerate fields"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.static_structure.layout.classdiagramnode#calculateweight()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enumerate constructors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.state.ui.figstate#getinitialwidth()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"indicate that the test was validated"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: look up class in truth table"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listen also to the association, of which the link is an instantiation, since we want to update the rendering when the association name changes. @see org.argouml.uml.diagram.ui.figedgemodelelement#updatelisteners( java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check superclass. make sure this class does not extend or reference non-argouml classes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"valid elements for a stereotype to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enumerate methods enumerate method arguments"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a list of valid connections between elements, the connection type first and then the elements to be connected"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nif: runtruthtest(model.getfacade().isainteraction(o), model.getfacade().interaction);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nif: untruthtest(model.getfacade().isamethod(o), model.getmetatypes().getmethod());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class wizmename"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"runtruthtest(model.getfacade().isarelationship(o), model.getmetatypes().getrelationship());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a use case to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nif: runtruthtest(model.getfacade().isastructuralfeature(o), model.getmetatypes().getstructuralfeature()); nif: runtruthtest(model.getfacade().isataggedvalue(o), model.getmetatypes().gettaggedvalue());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.abstractactioncheckboxmenuitem#valueoftarget(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"call methods that exists for all objects and that always return something meaningful"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an operation to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"getdata returning raster = \" + translatedraster);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find the create method in the offical api"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now get the factory implementation method to be invoked"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"here it is another object sent to the test."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.stereotypecontainer#isstereotypevisible()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#updatestereotypetext()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"abstract"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"rule for project->root (top level) elements. todo: as currently implemented it returns all top level elements in the model repository, not just those in a given project. since we only support a single project at a time currently, these are equivalent but this will need to be enhanced with additional bookkeeping in project when we support multiple open projects - tfm. todo: i changed it to get the roots from the project. it was showing the profiles that were loaded but were not applied to the current project - maurelio1234. @author tom morris <tfmorris@gmail.com>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listen for a removeassociationevent between the comment and the annotated element. when recieved delete the commentedge and this figedgenote. @see org.argouml.uml.diagram.ui.figedgemodelelement#modelchanged(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we start off clean"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.proppanel#shouldbeenabled(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the association should have same namespace as from class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#texteditstarted(org.tigris.gef.presentation.figtext)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only one end should be navigable"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#outaintegerliteral(tudresden.ocl.parser.node.aintegerliteral)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"usecaseinstance\", gone in uml 2.x & unused by argouml"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up reader to be first filter in chain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set namespace so buildassocationrole works"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class wiznavigable"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we're drawing to an edge then only allow if the start is a comment @see org.argouml.uml.diagram.ui.modecreategraphedge#isconnectionvalid(org.tigris.gef.presentation.fig, org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crfinalsubclassed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build an activity graph with a single action state the way the gui would"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crnameconflictac"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is a private method in model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crmultipleagg"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handling methods that doesn't return"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importsettings#getinputsourceencoding()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handling the isinitiated method"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.guisettingstabinterface#gettabkey()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handling the initialise method"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figeditablecompartment#getumlcollection()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle methods which return opaque objects"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"one of the expected errors, just ignore"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.abstractactionradiomenuitem#togglevalueoftarget(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"could not find model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we shouldn't get here, but just in case... we want a wide exception catcher to make sure our transaction always gets ended"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle uml 1.4 metamodel which is a mof 1.3 model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml 1.4"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.relocatable#isrelocationallowed(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"xmi 2.1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.abstractactionnavigate#navigateto(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml 2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getcorehelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"xmi 1.1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the only thing we need to deal with is updating is the condition text. @see org.argouml.uml.diagram.ui.figedgemodelelement#modelchanged(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only remap package if we didn't remap specific class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#canedit(org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a few of our factories are slightly different than as declared in the uml 1.4 metamodel, so we remap them here. <metamodel, argouml>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.kernel.delayedvchangelistener#delayedvetoablechange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"packages to be remapped"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#getnotationprovidertype()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"subsystem has been removed from uml 2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try the actions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.undo.undoableaction#isenabled()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.behavior.common_behavior.actionnewaction#createaction()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"case 1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#getnamefig()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"because uml 1.4 & 2.1 metamodels are organized differently we need to traverse the hierarchy looking for our owning package."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#updatelisteners(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specific classes to be remapped remap.put(\"\", \"\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#outarealliteral(tudresden.ocl.parser.node.arealliteral)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"go the other way to lookup an element by path"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importcommon#isminimisefigschecked()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importsettingsinternal#isdescendselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.settingstypes.booleanselection#getdefaultvalue()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importcommon#isdescendselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"activitygraphs"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"wfr transitions, omg uml 1.3"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"instance (in uml 1.4) and classifier are abstract and not tested"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.api.progressmonitor#updatesubtask(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"extend, include, usecaseinstance & extensionpoint not implemented"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we return a new list with the options instead of the options themself because we don't want the user to be able to change the options. @see org.argouml.uml.reveng.settingstypes.uniqueselection#getoptions()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reuse time event:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"state is concrete in uml 1.3, but becomes abstract in uml 1.4, so we never allow it to be created (and don't test creation)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"new initprofilesubsystem().init();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"calling connect() will add the edge to the graphmodel and any layerpersectives on that graphmodel will get a edgeadded event and will add an appropriate figedge (determined by the graphedgerenderer)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this should work now that they both have names"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if method not supported ignore failure"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umluserinterfacecomponent#targetchanged()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fine!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.sourcepathcontroller#setsourcepath(org.argouml.uml.ui.sourcepathtablemodel)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"translate & clip graphic to match region of interest"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sequence diagrams are not shown as children of the collaboration that they show but as children of the classifier\/operation the collaboration represents. statediagrams and activitydiagrams are shown as children of the statemachine or activitygraph they belong to."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcombobox2#umlcombobox2( umlcomboboxmodel2, action, boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"commonbehaviorfactory datatypesfactory extensionmechanismsfactory modelmanagementfactory"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umluserinterfacecontainer#formatcollection(java.util.iterator)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up all parameters. some methods are invoked with primitives or collections, so we need to create them accordingly"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following should fail"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and leave things unchanged"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlexpressionmodel2#setexpression(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"constructor."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umluserinterfacecontainer#getmodelelement()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"constructor. @param me an object"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"everything fine..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.tabtarget#gettarget()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reuse signal event:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel2#buildpopup(javax.swing.jpopupmenu, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reuse call event:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcheckbox2#buildmodel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try creating a timeevent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try changing the triggertype to changeevent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targettablemodelview#gettargettablemodel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nested class:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no need to check any further if we fail the 1st part."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.abstractactionaddmodelelement#getselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"start testing stuff"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the storage id for our repository so that mofids will be unique (they are composed as \"storageid\":\"serialnumber\"). note: the storage manager only looks for a few property names such as the storagefactoryclassname. everything else needs to be prefixed with \"mdrstorageproperty.\" which gets deleted from the property name before it and its associated value are copied to an *internal property table separate from the system property table."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try some errors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlplaintextdocument#getproperty()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for a transition use indirection through source statevertex"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't find a model, return the outermost containing model element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlexpressionmodel2#newexpression()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.behavior.state_machines.actionnewevent#createevent(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fignode#getportfig(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlradiobuttonpanel#buildmodel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getactivitygraphshelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notation allows to add or modify things, not remove. hence, this does nothing:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crcircularinheritance"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the expected exception is thrown."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"both diagram types shall show sequence numbers when requested:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"but the collaboration diagram refuses to leave them out:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.util.namespace.namespace#popnamespaceelement()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the message has a name, but no action, then show the name:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel2#setselecteditem(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a message has a name and a named operation, then show the operation:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: should there really be () here?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#addclassmodeleventlistener( java.beans.propertychangelistener, java.lang.object, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a message has a name and a named operation and an empty script, then show the operation:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.abstracttestactionadddiagram#getnamespace()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a message has a name and a named operation and a named script with parameters, then show the script:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getcopyhelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: why is there a space before the ( here, and not in case of the operation name?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getcommonbehaviorhelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the action still has the argument from above."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is not a very useful transition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getvisibilitykind()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mixed case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.util.namespace.namespace#isempty()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a complex internal transition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getpseudostatekind()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these are not entry\/exit\/do activities!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"long list of internals"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.abstracttestactionadddiagram#getaction()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"or should the 1 be 0 ?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"deleting it all"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getmessagesort()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no script, then the language should not be maintained."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ret.setisleaf(false); ret.setisroot(false);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#removemodeleventlistener( java.beans.propertychangelistener, java.lang.object, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getumlfactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getextensionmechanismsfactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getmodelmanagementhelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is the normal case."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"overridden purely to keep our superclass from removing the listener that we just added. @see org.argouml.uml.diagram.ui.figedgemodelelement#updatelisteners(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load a project which contains links to it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test project readable files"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#addmodeleventlistener( java.beans.propertychangelistener, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"standard uml 1.4 profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#addmodeleventlistener( java.beans.propertychangelistener, java.lang.object, java.lang.string[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a default profile and record its contents"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#containsall(java.util.collection)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"write the profile out to a temp file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.ui.wizard#getnumsteps()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"read it back in to a new empty project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an simplestate to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setting up the dependent profile creation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.collaborationshelper#getallclassifierroles(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actual call that executes everything"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.commonbehaviorhelper#getsource(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verifications"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"returns the value of an element's property (tagged value). this method makes sure that a collection of values is returned if and only if the property is multivalued (upper multiplicity value greater 1). @see org.argouml.model.facade#getvalueoftag(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.visibilitykind#getpackage()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.pseudostatekind#getjunction()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create profile model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.directionkind#getinparameter()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.pseudostatekind#getshallowhistory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save the profile into a xmi file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.copyhelper#copy(java.lang.object, java.lang.object) make a copy of element in the given namespace.<p> this function is a dispatcher that calls the copyelement(element,namespace) function from xxxfactory.<p> this function may fail and return null for any of the following reasons: <ol> <li>no copy function is known for element's type. <li>the copy function fails or throws. <\/ol> @param anelement is the element to copy. @param ans the namespace @return a copy of element, or null. @throws illegalargumentexception if element is null."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"called during teardown"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove leftovers from other tests"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is a bug in the version of mdr (20050711) that we use that causes it to fail to delete aggregate elements which are single valued and where the aggregate end is listed second in the association defined in the metamodel. for the uml 1.4 metamodel, this affects a statemachine's top statevertex and a transition's guard. see issue 4948 & 5227 - tfm 20080713"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there seems to be cases where we don't erase the profile. let's make sure it is deleted."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for a namespace: <pre> [2] the operation allcontents results in a set containing all modelelements contained by the namespace. allcontents : set(modelelement); allcontents = self.contents where contents = self.ownedelement -> union(self.namespace, contents) <\/pre><p>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"[euluis] using windows style initial path, don't know if this fails in *nixes."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following from the original nsuml implemenetation was attempting to implement wfr #1 from section 2.5.3.32 of the uml 1.4 spec, but if there is an owner set, no namespace is valid. the checks for this wfr, if desired, need to go in setowner() and settype() - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that model subsystem implementation doesn't remember the profiles by changing their names and directories"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"static accessors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"but, lookout, it doesn't work both ways"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for a package: <pre> [3] the operation allcontents results in a set containing the modelelements owned by or imported by the package or one of its ancestors. allcontents : set(modelelement); allcontents = self.contents->union( self.parent.allcontents->select(e | e.elementownership.visibility = #public or e.elementownership.visibility = #protected)) where the required operations are defined as : [1] the operation contents results in a set containing the modelelements owned by or imported by the package. contents : set(modelelement) contents = self.ownedelement->union(self.importedelement) [2] the operation allimportedelements results in a set containing the modelelements imported by the package or one of its parents. allimportedelements : set(modelelement) allimportedelements = self.importedelement->union( self.parent.oclastype(package).allimportedelements->select( re | re.elementimport.visibility = #public or re.elementimport.visibility = #protected)) <\/pre>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assertequals(defaultoclevaluator.getinstance().evaluate(vt, mi, \"x.ocliskindof(classifier)\"), true);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"on a headless system (without display) this will crash"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private jpanel propertypane;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"contains instances of each modelelement used for testing so that we only use each modelelement once"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the next 3 restrictions for abstraction seem to be argo specific not something the uml spec requires - tfm - 20070215 there is no need for these because they arn't used by buildconnection() - b00__1 {abstraction.class, org.eclipse.uml2.uml.class.class, org.eclipse.uml2.uml.class.class, null, }, {abstraction.class, org.eclipse.uml2.uml.package.class,org.eclipse.uml2.uml.package.class, null, }, {abstraction.class, component.class, interface.class, null, },"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"propertypane = \/*tabprops"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"currently this is in this try block as it does not work _propertypanel always has size 0,0"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure this test happens on the awt event thread"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"jpanel docpane = pane.gettab(tabdocumentation.class);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the target list is empty, re-emptying it again should not generate any events:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"new target is of type object, refresh should not be called"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.swidgets.orientable#setorientation(orientation)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"new target is a fig, refresh should be called"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#add(int, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setting one target should generate one event:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"new target is of type umlclassdiagram, refresh should not be called"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handles all children of relationship including extend and include which are not members of core"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we could check that the contents of the files differ."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: if we switch to a persistent repository like the b-tree repository we'll want to keep the old extent(s) around"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"new target is a modelelement, refresh should not be called"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"testing with subset of targets"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set same target again should not generate new events:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tabprops gets selected! so, 2nd time right"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"adding same targets list again should not generate new events:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#setfillcolor(java.awt.color)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"adding same target again should not generate new events:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crinterfaceoperonly"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reverse order"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check for more literals (';' separated):"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now remove one target by setting subset:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the destination is a datatype, then reject:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore if the directory does not exist. this error will throw when running from the ant setup."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: we have to do this due to leftovers from other tests being causing strange errors when running in eclipse."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all tests should consider the threshold as inclusive value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"normally the extent should exist already, but in the case of making an empty project, we may not have an extent yet, so create a default extent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this test is a bit stupid, but nevertheless..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"{a, a} are offenders"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the first prefix because it may be an archive (like magicdraw)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"everything ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"org.argouml.notation.providers\", fails because sub-packages fail (?) \"org.argouml.notation.providers.java\", \"org.argouml.notation.providers.uml\", \"org.argouml.notation\", fails because sub-packages fail (?) \"org.argouml.notation.ui\","}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"same name, different classes, everything ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the user-dropactions are: ctrl + shift -> action_link ctrl -> action_copy shift -> action_move (none) -> action_move"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"{a,a,b,b} are offenders"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"testcase: drag something from another application into argouml, and the explorer shows the drop icon, instead of the nodrop."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"{} no offenders"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generalizations are not required to have unique names within a namespace"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and remember where we are about to draw the new ghost image:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all use cases and actors require associations hence all predicates evalulate to true"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.sourcepathcontroller#getsourcepathsettings()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build association build association between actor and top use case."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.mouselistener#mousereleased(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: this listener needs to always be active even if this tab isn't visible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#set(int, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"arbitrary settings - not used used for testing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#addall(java.util.collection)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#toarray(java.lang.object[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the graph should stay the same."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build include it seems that the parameters for build include are just the other way round add an include: we do not need to have associtions on one"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setup"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#sublist(int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"real test"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.object#hashcode() this is a rather bad hash solution but with the {@link #equals(object)} defined as below, it is not possible to do better."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"some arbitrary bounds and settings - unused in test"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure everything created gets deleted"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.mouselistener#mousereleased( java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setup the project due to its use in sourcepathtablemodel ctor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a class model element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see abstracttestactionadddiagram#getvalidnamespaceclasses()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getsubtextfont()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return a package to use as the namespace."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"disable event delivery during model load"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"restore original event policy - not supported by mdr - tfm mfactoryimpl.seteventpolicy(oldeventpolicy);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we always have a default extent. the old extent will get deleted as part of creating the new extent."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assertnotnull(actionsupplier.getvalue(action.small_icon));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cont.settarget(elem);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"testing with more than one, since it failed with a manual test i made."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assertnotnull(actionclient.getvalue(action.small_icon));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following will bring up a dialog box, so can't be run headless actionclient.actionperformed(new actionevent(this, 0, \"foo\"));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"refresh the table when a critique is enabled\/disabled @see java.util.observer#update(java.util.observable, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new empty project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"inconclusive"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the profile stereotype to the class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the profile to the project configuration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use a transaction to avoid the performance penalty (3x) of mdr's autocommit mode"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this works when running the test from within eclipse. apparently eclipse runs the tests using a class-loader that has the tests folder among the url:s."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"disable the buttons for now, since no selection has been made yet"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a class in the project model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check that the tag definition is returned by {@link umltagdefinitioncomboboxmodel#getapplicabletagdefinitions(object)}"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we're setting a handler, enable the about menu item by calling com.apple.eawt.application reflectively"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the screen layout to what the user left it before, or to reasonable defaults."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"instance variables"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"autoscroll interface... the following code was borrowed from the book: java swing by robert eckstein, marc loy & dave wood paperback - 1221 pages 1 ed edition (september 1998) o'reilly & associates; isbn: 156592455x the relevant chapter of which can be found at: http: www.oreilly.com\/catalog\/jswing\/chapter\/dnd.beta.pdf"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"calcbounds();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for classifiers"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"constants"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.datatransfer.transferable#isdataflavorsupported( java.awt.datatransfer.dataflavor)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"case 4 erase it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"treemodel implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"case 1 after(...)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#casealiteralcollection(tudresden.ocl.parser.node.aliteralcollection)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have the path provided from the build script."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check the localized parts."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"wait for all model subsystem events to be delivered"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"wait for all awt events to be dispatched and processed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphmodel#getports(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.mutablegraphmodel#canaddedge(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if save did not raise an exception and name+\"#\" exists move name+\"#\" to name+\"~\" this is the correct backup file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#getusetraprect()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is null as until the first stereotype declaration is seen. after that it is non-null."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"newop.setownerscope(op.getownerscope()); not needed in case of operation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#casealetexpression(tudresden.ocl.parser.node.aletexpression)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"model.getextensionmechanismsfactory().buildtaggedvalue( tagname, new string[] {\"true\"}, model.getfacade().getroot(umlobject));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mclassifiers cannot be bag"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getdatatypeshelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"read xsltstream into a temporary file get url for temp file. openstream from url and wrap in streamsource"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this function only sets the color of the divider line (since that is the only visible part), and can be used to make the divider line invisible for the top region in a composite state. @see org.tigris.gef.presentation.fig#setlinecolor(java.awt.color)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the object does not have a name, than no problem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tree value isselected (dont want a colored background) isexpanded isleaf row (not important for rendering) hasfocus (dont want a focus rectangle)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only work for associatins"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we need to find the stereotype with the name \"create\" and the base class behavioralfeature in the model. if there is none then we create one and put it there."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"redrawmanager.unlock(); - _redrawer.repairdamage();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if this composite state is not attached to a statemachine it is not the toplevel composite state."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if this was an association then there will be relevant information to fetch out of the mode arguments. if it not an association then these will be passed forward harmlessly as null."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find selected rows and make a list of the model elements that are selected"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"treecellrenderer implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"always fire changes in the case something has changed in the composition of the taggedvalues collection."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build up an array list of the heights of each label\/component pair. heights of zero indicate a proportional height."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cmdpaste cmd = new cmdpaste(); cmd.doit();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignored: highly unlikely, and what would we do anyway? log it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stereotypes applied to the target mostly control which tds (but see below for other listeners too)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"overridden to make it possible to include a statevertex in a composite state. @see org.tigris.gef.presentation.fig#setenclosingfig(org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: add referencevalue for tagged values which have a non-primitive type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add a decision but set the critic priority to 0 so isrelevant should still be false"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"because the notation events get dispatched on the swing event thread, we need to use invokeandwait to make sure that we don't return until they've been delivered"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parent is element, but it has no attributes or associations to check checkelementcopy(e1, e2);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.check.types.type2#navigateparameterizedquery( java.lang.string, tudresden.ocl.check.types.type[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"extra careful now, not to keep any references to the second argument."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"auto-create a return message for a call message"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.check.types.modelfacade#getclassifier(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the source of the return message"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the dest of the return message"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseafeaturecallparameters(tudresden.ocl.parser.node.afeaturecallparameters)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fig spf = null; fig dpf = null; fignode sfn = null; fignode dfn = null;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseaadditiveexpressiontail(tudresden.ocl.parser.node.aadditiveexpressiontail)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the event originated from the window w\/glass pane, consume the event"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.throwable#printstacktrace(java.io.printwriter)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add gui-internal stuff. gui-internal stuff is panes, tabs, menu items that are part of the gui subsystem i.e. a class in the org.argouml.ui-package. things that are not part of the gui, like everything that has any knowledge about uml, diagrams, code generation, reverse engineering, creates and registers itself when that subsystem or module is loaded."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseapostfixexpressiontail(tudresden.ocl.parser.node.apostfixexpressiontail)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is perfectly normal and happens among other things within the call to setdiagram (below)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"iterate through the tabbed panels to determine whether they should be enabled."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tabs.addtab(translator.localize(\"dialog.find.tab.name-and-location\"), nameloctab);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.object#clone()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"_tablemodel.settarget(_target); _table.setmodel(_tablemodel);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#outabooleanliteral(tudresden.ocl.parser.node.abooleanliteral)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the current shortcut has not been set, then the actual shortcut value is the default one"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the user cancelled the operation, we don't have to save anything"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.windowlistener#windowactivated(java.awt.event.windowevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generate and register the osxadapter, passing the methods we wish to use as delegates for various com.apple.eawt.applicationlistener methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: no links in uml 2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseaexpressionlistorrange(tudresden.ocl.parser.node.aexpressionlistorrange)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing we can do about veto, so just ignore it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine,result.x + \", \" + result.y + \" theta = \" + theta * 180 \/ math.pi + \" dx = \" + dx + \" dy = \" + dy);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"event handling"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.windowlistener#windowclosing(java.awt.event.windowevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fig accessors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.windowlistener#windowdeactivated(java.awt.event.windowevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the uml object wrong end of the edge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tests if enter is pressed in the _bbodfield so we need to set the target bounds. @see java.awt.event.keylistener#keytyped(java.awt.event.keyevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we are going to add the ones still valid & new ones in the right sequence:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see guisettingstabinterface#handlesettingstabcancel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is safe because getname always returns a string of some type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the new edge implements the mouselistener interface it has to receive the mousereleased() event"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"user feedback"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"graphfactory implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"adapted from selectionwbuttons from line 280 calls a helper method to avoid this edge disappearing if the new source and dest are the same node."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"give up if we are already on the graph. this is a bit inconistent with canaddnode above."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.abstractaction.abstractaction(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"link the new extend relationship in to the ends. remember we draw from the extension use case to the base use case."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"next line does give user.home back but this is not compliant with how the project.uri works and therefore open and save project as give different starting directories. string directory = globals.getlastdirectory();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"correct the activator value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.window#dispose()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"although we've historically written out the doctype, the dtd doesn't actually exist and this line will get stripped by the .uml file persister + \"<!doctype profile system \\\"profile.dtd\\\" >\\n\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getsecondary3()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remember to change this if you change the number of mes with source path settings"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.mouselistener#mouseentered(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"put the x at the right side of the activation if needed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.mousemotionlistener#mousemoved(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure there is the minimum gap above the message being drawn"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure there is the minimum gap below the message being drawn"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actions for toolbar"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.listcellrenderer#getlistcellrenderercomponent( javax.swing.jlist, java.lang.object, int, boolean, boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the region as the first region in the state. if there is no region in the statemachine then create one."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.mutablegraphmodel#addedge(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the layer"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the renderer"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we're not provided a namespace then get it from the diagram or the root"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"force the line-width to 0, since the figgroup that contains the stereotype may want to show a border, but we don't."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"link the previous\/next reference of the swimlanes according to the x order."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"catches a mouseevent and calls mysingleclick and mydoubleclick if a tab is clicked which is selected. @see java.awt.event.mouselistener#mouseclicked(mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"graphmodel implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make space for the clarifier for vertical symmetry margin between text and border"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mutablegraphmodel implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"contructors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"event processing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getstatemachinesfactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphlistener#edgeremoved(org.tigris.gef.graph.graphevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't have a connection between 2 interfaces: get the 'other' end type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only work for associations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use \"asize\" to build up the minimum size. start with the size of the name fig and build up."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphedgerenderer#getfigedgefor( org.tigris.gef.graph.graphmodel, org.tigris.gef.base.layer, java.lang.object, java.util.map)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.menulistener#menudeselected(javax.swing.event.menuevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"our angle theta is arctan(opposite\/adjacent) because y increases going down the screen, positive angles are clockwise rather than counterclockwise"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we are the dest and is a call action, create the activation, but don't add it until the height is set."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we are the destination of a create action, create the entire activation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we are the target of a destroy action the figlifeline ends here and we add the activation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we are the source of a return action the activation ends here."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#remove(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we do nothing. no call to the parent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compares obj1 and obj2 sorting by user object type, then name. diagrams are sorted first, then packages, then other types. sorts by name within type groups. nulls are sorted first for names. @see java.util.comparator#compare(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we don't recalculate activations, just move them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if is a classifier role, it must return all the related messages."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"comments from anywhere in the model are allowed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"argument can be an instanceof a fig which we ignore"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all other types of elements must be in this namespace"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(1) test that the properties were correctly initialized"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is not the correct location to set the cursor. the commented out code illustrates the calculation of coordinates. @see java.awt.dnd.dragsourcelistener#dragover(java.awt.dnd.dragsourcedragevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no problem if this is an association role."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we initialize the coordinates."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"limit our retries in case its too hard to get free"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we do nothing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do string compare of names of uml objects. comparison is case insensitive using a primary strength collator in the user's locale. @see java.util.comparator#compare(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"manage if cursor x is less than lastx1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"manage if cursor x is more than lastx2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"manage changes of direction..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"alternatively, we could reduce the height of the fig by the height of this one hidden compartment. but that would not be possible for the width - so we better return to minimal dimensions overall."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"i have no direction yet"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.pathconv#applyoffsetamount(java.awt.point, java.awt.point, int, java.awt.point)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we move down or up the messages that are downward the broom"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we recalculate all the activations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we draw a cross"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#getminimumsize()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we don't let the user move the messages horizontally."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the edge is near the bottom of the classifier roles, we enlarge all the figclassifierroles in the diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we need the edge to be complete"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the initial x is the left side of the activation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getusecasesfactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the y coordinate is inside the head, the x must be in the border of the headfig."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.figgroup#addfig(fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.droptargetlistener#dropactionchanged(java.awt.dnd.droptargetdragevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#setboundsimpl(int, int, int, int) override setbounds to keep shapes looking right."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use a different notation as messages on a collaboration diagram:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#setfilled(boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"operations ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphlistener#nodeadded(org.tigris.gef.graph.graphevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: add logging, but this will never happen and is handled"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if possible we determine this by checking the destination and source figs are the same. if this is not possible because the edge is not yet connected then we check the model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we update the activations..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#setboundsimpl(int, int, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this call seems not very robust. yet to determine cause."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"override setbounds to keep shapes looking right. the classifier and state figs are nicely centered vertically, and stretched out over the full width, to allow easy selection with the mouse. the fig can only be shrunk to half its original size - so that it is not reducible to a few pixels only. @see org.tigris.gef.presentation.fig#setboundsimpl(int, int, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this constructor is needed for pgmlstackparser to load saved diagrams. it does nothing, because pgmlstackparser will call setpoints later."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: support commentedges. todo: support associations to self. @see java.awt.event.actionlistener#actionperformed(java.awt.event.actionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"vertical resizing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up the target and its model element variant."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return true if the given object is a valid edge in this graph. @see org.tigris.gef.graph.mutablegraphmodel#canaddedge(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return all ports on node or edge. @see org.tigris.gef.graph.graphmodel#getports(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return all edges going to given port. @see org.tigris.gef.graph.graphmodel#getinedges(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there are no regions so create one and place the vertex there."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.table.tablemodel#setvalueat( java.lang.object, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"c.insets = new insets(1, 1, 1, 1);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"_x = x; _y = y; _w = w; _h = h;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphnoderenderer#getfignodefor( org.tigris.gef.graph.graphmodel, org.tigris.gef.base.layer, java.lang.object, java.util.map)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.sourcepathcontroller#getallmodelelementswithsourcepath()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in this event we do nothing, only stop drawing the broom."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return true if the two given ports can be connected by a kind of edge to be determined by the ports. @see org.tigris.gef.graph.mutablegraphmodel#canconnect(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"1. remember current message paths"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"2. reposition and resize nodes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"3. now reposition messages based on their original position"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compute the initial center position of the cr"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name of the meta type is the class name (after the last .) and before the next $ or end of class name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"horizontal resizing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compute the final center position of the cr"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the graph model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"y position of the new cr should match existing crs y position"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.basegraphmodel#getowner(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"init the sequence diagrams from the module"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"debugging and looking at fig.headfig.figs[1]._currtext i can see that it's working, but how to test it?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"operations that work on elements:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphmodel#getinedges(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"operations that work on classes of objects:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the box for the compartments is somewhere inside the outside bounds:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.mutablegraphmodel#canconnect(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"object getimportedpackage(object element);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"object getincludingcase(object handle);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"javadoc reviewed above this point - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"object getimportingnamespace(object element);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"override setbounds to keep shapes looking right. @see org.tigris.gef.presentation.fig#setboundsimpl(int, int, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"object createstereotype();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"adiagramelementproperty delegate methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.omg.uml.diagraminterchange.adiagramelementproperty#add( org.omg.uml.diagraminterchange.diagramelement, org.omg.uml.diagraminterchange.property)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.omg.uml.diagraminterchange.adiagramelementproperty#exists( org.omg.uml.diagraminterchange.diagramelement, org.omg.uml.diagraminterchange.property)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"easy interface to properties"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just swap order of arguments to get to new form"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"here follows the interfaces that contain the enums of different kinds in the uml meta-model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"flow is not in uml 2.x - don't implement"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"additional support for tagged values"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#casealistexpressionlistorrangetail(tudresden.ocl.parser.node.alistexpressionlistorrangetail)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"public methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class uuidmanager"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.droptargetlistener#dragexit( java.awt.dnd.droptargetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"write out something for us to read back in"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now read it and check the results."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#isselectable()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"silently ignore anything specified by caller attempt to continue"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create an empty file and try to read it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"depends on implementation:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify that the equivalence test works"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"maybe next test is going to change in future"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the netbeans saxparser sets line number and column number to -1."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the xerces saxparser sets line number and column number to 1."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"updates the modelelement container if the fig is moved in or out another fig. if this fig doesn't have an enclosing fig anymore, the namespace of the diagram will be the owning modelelement. if this fig is moved inside another fignodemodelelement the owner of that fignodemodelelement will be the owning modelelement. @see org.tigris.gef.presentation.fignode#setenclosingfig(org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not true in general, but should be true for our test models"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"necessary since gef contains some errors regarding the hit subject. @see org.tigris.gef.presentation.fig#hit(rectangle)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the region is changed to another region then we make sure that a delete event is not fired as a result. $non-nls-1$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"need to 'arm' the rerouting capability with mousedragged(). <p> don't arm if the edtior's current mode is a figedge create mode, because once a new edge has been created it is not deselected, therefore on the next create an unwanted reroute is performed. @see java.awt.event.mousemotionlistener#mousedragged(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.selectionbuttons#getnewnode(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"makes sure that the edges stick to the outline of the fig. @see org.tigris.gef.presentation.fig#getgravitypoints()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml a message could have an action. in uml2 it never does."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no body found."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.listcellrenderer#getlistcellrenderercomponent(javax.swing.jlist, java.lang.object, int, boolean, boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"oops we already have the body"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return handle.stringvalue();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.mouselistener#mouseclicked( java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"public collection<element> getextendedelements(object handle) {"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.text.document#render(runnable r)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"perform recursive search of subtree rooted at 'node', selecting all nodes which have a userobject matching one of our targets."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"gone from uml 2.x throw new notimplementedexception();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get all the relationships, that this model element has. and filter everything, that is not an import."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't be done in the general case of federated repositories, but at least get what we can find for the current resource set"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"should be element not eobject really"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.kernel.delayedvchangelistener#delayedvetoablechange(java. beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"classifier powertype ="}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: signal -> receptions association not navigable in this direction"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"usage differs from uml1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"transitions can have multiple triggers now"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"gone in uml 2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treecellrenderer#gettreecellrenderercomponent( javax.swing.jtree, java.lang.object, boolean, boolean, boolean, int, boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actionstate, callstate, and subactivitystate have been replaced in uml 2.0 by explicitly modeled actions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: double check - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this method is overridden in order to ignore change of the y coordinate during dragging. @see org.tigris.gef.presentation.fignode#supertranslate(int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: gone in uml 2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see propertychangelistener#propertychange(propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have already confirmed the connection is valid"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mdr classes may have a uml or uml prefix which should be removed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"below for uml 1.4 compatibility"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: changed for uml 2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"has <<subsystem>> stereotype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"&& ((action) handle).get"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"here we are actually violating the test independance since we keep the detailspane from test to test. the reason to do this is to make it possible to run the tests with less memory requirements. hopefully someone might eventually fix the detailspane so that it is garbage collected properly and this is no longer needed. @see junit.framework.testcase#setup()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not in uml2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ok, so that didn't work out... just ignore any problems and don't set the name in the constraint body better had log it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"even though this is not relevant for uml2 we have code calling this that expects it for uml1.4 and we must handle it gracefully."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return ((redefinableelement) handle).isroot(); todo: one part of uml 2.1.1 spec says that this is as above, but it appears to be gone - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all of the applicationlistener methods are void; return null regardless of what happens"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"place in the middle of the line and ensure the line is dashed. add an arrow with an open arrow head. remember that for an extends relationship, the arrow points to the base use case, but because of the way we draw it, that is still the destination end."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"lifeline.setrepresents(prop);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"an associationend is now a property owned by an association"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel#addelement(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"throw new notimplementedexception( \"this is not a uml2 element\"); $non-nls-1$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.droptargetlistener#drop( java.awt.dnd.droptargetdropevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"jmenuitem cutitem = edit.add(actioncut.getinstance()); setmnemonic(cutitem, \"cut\"); setaccelerator(cutitem, ctrlx); jmenuitem copyitem = edit.add(actioncopy.getinstance()); setmnemonic(copyitem, \"copy\"); setaccelerator(copyitem, ctrlc); jmenuitem pasteitem = edit.add(actionpaste.getinstance()); setmnemonic(pasteitem, \"paste\"); setaccelerator(pasteitem, ctrlv); edit.addseparator();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#getclosestpoint(java.awt.point)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: exception has been removed for uml 2.x just return signal for now - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"gone in uml 2.x - just classifier now"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only association end has an aggregation option box"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: not really the same thing, but close"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete collaborationinstancesets where this is the last participatinginstance"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name of the meta type is the class name (after the last .) and before the \"impl\" or end of class name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: gone in uml 2.x return place holder for now"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the source of the transition is a choice"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: no separate syncstate in uml 2.1 - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.clarifier#settodoitem(org.argouml.cognitive.todoitem)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actionsequence.class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"comment out when we are ready to release undo\/redo jmenuitem undoitem = edit.add( projectactions.getinstance().getundoaction()); setmnemonic(undoitem, \"undo\"); shortcutmgr.assignaccelerator(undoitem, shortcutmgr.action_undo); jmenuitem redoitem = edit.add( projectactions.getinstance().getredoaction()); setmnemonic(redoitem, \"redo\"); shortcutmgr.assignaccelerator(redoitem, shortcutmgr.action_redo); edit.addseparator();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"classifierinstate.class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find the target in the project browser. we can only do anything if its a use case."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"argument.class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the \"close window\" shortcut (alt+f4) actually can't be registered as a shortcut, because it closes the configuration dialog!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"attributelink.class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"access should be fast"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"detach any edges (such as comment edges) already attached to the figassociation before the figassociation is removed. they'll later be re-attached to the new fignodeassociation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"iteration should be fast"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"literalspecification"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only reset the text if the two are not the same (i.e the fig has moved, rather than we've just edited the text, when settargetbbox() will have made them the same). note that stylebounds could be null, so we do the test this way round."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"i.e. eventtype == notification.remove"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"begin andromda code"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"implements commandstack"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not in uml 2.x (or metatypes) type.additem(predicatemtype.create( model.getmetatypes().getactivitygraph()));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"list.add(\"opaqueexpression\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"subtract the the offset of the click, to take account of user having not initially clicked in the centre."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"literalspecification list.add(\"literalnull\"); when other ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a default action was voided then we have to save it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"list.add(\"literalinteger\"); when other ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the edge is from a circle to a circle (e.g. between use cases) we have our own implementation overriding gef. which attempts to keep the edges perpendicular if the edge is already close to perpendicular."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"list.add(\"literalunlimitednatural\"); when other ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"list.add(\"instancevalue\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return the node or edge that owns the given port. @see org.tigris.gef.graph.basegraphmodel#getowner(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo else => exception !"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete messages which have this as sender or receiver"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't be changed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"rewrite it after change setexpression ?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't be set"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.netbeans.lib.jmi.xmi.xmicontext#getreference(java.lang.string, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"suggest that actors may not connect (see javadoc comment about this)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a link is an assocation in uml2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we need a method (operation implementation) to store the method body."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the 4-arg version of this method depends on this ordering. don't change it!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"maybe this operation already has a method, that fits our purpose? in this case, try to reuse it, instead of creating a new implementation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"checkstyle:off - ignore too many parameters since api is fixed by mdr"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check, if we have to create a new implementation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new implementation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this will contain the figs that we do not need anymore:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and set the specification to the current operation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add it to the operation's methods."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"look, if there's already a java implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"job done."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: get default output directory from user settings project p = projectmanager.getmanager().getcurrentproject(); p.getprojectsettings().setgenerationoutputdir(path);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it seems, there was no implementation of our current target language, so we just add one."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compare path of two elements in reverse order (inner to outer) using a primary strength text collator. this will collate e, e, \ufffd, \ufffd together, but not eliminate non-identical strings which collate in the same place. @return equivalent of list1.compareto(list2)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we cannot set the body of this model element type."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"removed from uml 2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see guisettingstabinterface#handlesettingstabrefresh()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"also parse 1_* or 0_n etc."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"warning - this has containment side effects! eclipse uml2 will move the property from the classifier to the association when the navigability is changed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@param item the todo item @param reason the reason todo: use it! @return <code>true<\/code> if the argument was a component of this list; <code>false<\/code> otherwise @throws unresolvableexception unable to resolve"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-2$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml 2.x only"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the machine state has got a new name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"where there is more than one supplier or client, take the first element in each case. there really ought to be a check that there are some here for safety."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for other xmi files with further namespaces:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the boundary box as held in the target fig, and as listed in the boundary box style field (null if we don't have anything valid)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"eclipse namespaces:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for the .uml files in the eclipse jar files, we need this:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only add mof elements, not primitive datatypes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: verify this. iiuc, then this triggers the compountstatefig to draw itself correctly. hence, there was a reason to wait this long to make the state concurrent."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notation events are likely to cause gef\/swing operations, so we dispatch them on the swing event thread as a convenience so that the receiving notationchanged() methods don't need to deal with it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we clear the save-required flag on the swing event thread in the hopes that it gets done after any other background work (listener updates) that is being done there"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not needed currently for uml 2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make the result inmediately visible in case of apply:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"an error that can be corrected by the user, so no stack trace, but instead an explanation and a hint how to fix"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a proxy object around this handler that can be reflectively added as an apple applicationlistener"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there are various details panes all of which could hold different tabs pages according to users settings. place each pane in the required border area."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"final object scope,"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the old project first. it's wasteful to create a temp empty project, but too much of argouml depends on having a current project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"targetlistener methods implemented so notified when selected diagram changes. used to update the window title."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mvw: indeed. the intention of the constructor parameter is to prove that there is a valid uml object to bind the notation to. so, the next statement should fail on a null parameter, and on anything that is not an object of which we can retrieve the multiplicity."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.umlhelper#getsource(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"prptodo = createproperty(\"label.todo-pane\", positions, tabtodo.class); prpproperties = createproperty(\"label.properties-pane\", positions, tabprops.class); prpdocumentation = createproperty(\"label.documentation-pane\", positions, tabdocumentation.class); prpstyle = createproperty(\"label.style-pane\", positions, tabstyle.class); prpsource = createproperty(\"label.source-pane\", positions, tabsrc.class); prpconstraints = createproperty(\"label.constraints-pane\", positions, tabconstraints.class); prptaggedvalues = createproperty(\"label.tagged-values-pane\", positions, tabtaggedvalues.class); property[] propertylist = new property[] { prptodo, prpproperties, prpdocumentation, prpstyle, prpsource, prpconstraints, prptaggedvalues, }; arrays.sort(propertylist); top.add(new jscrollpane(new propertytable( propertylist, panecolumnheader, positioncolumnheader)), borderlayout.center);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the module loader. at least the plug-ins that provide profiles need to be initialized before the project is loaded, because some of these profile may have been set as default profiles and need to be applied to the project as soon as it has been created or loaded. the first instance of a project is needed during the gui initialization."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create an anonymous class as a kind of adaptor for the cognitive system to provide proper translation\/i18n."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml2, we model a method as a behavior (initially opaquebehavior)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"extent ignored for euml2 implementation (required for netbeans mdr)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add listener to get notified when active diagram changes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we need to verify that ns is a package, if not - find its parent package! otherwise this causes an exception when creating a sequence diagram for a classifierrole."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.extensionmechanismshelper#getcommontaggedvaluetypes()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"also apply subprofiles:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.profile.internal.ocl.modelinterpreter#invokefeature(java.util.map, java.lang.object, java.lang.string, java.lang.string, java.lang.object[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"eliminate classifiers which already have an unnamed role"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this needs to iterate to fill entire output raster if implemented return image.copydata(outraster);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now let's check if the new line is already present in the old list of internal transitions; if it is, then mark the old one to be retained (i.e. do not create a new one), if it isn't, continue with parsing:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we only need to add the classloader once and if and only if there is at least a profile in the jar"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"commontaggedvaluetypes.add(org.eclipse.uml2.uml.resource.umlresource.)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove base class by destroying the extension"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"consider the property multiplicity"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no state with the given name is found, so we have to reject the complete user's input"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"or getdefaultvaluefor(prop)?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"search all attributes found to those expected. if any don't match then turn off the found flag so that we search for the next matching tag."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"too bad, we choose to take the first value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ready to set the value finally"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: isstatic in uml 2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in case of a tagged value, the type shouldn't be set here"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"also unapply subprofiles:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"also define subprofiles:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"{associationrole.class, classifierrole.class, },"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.13 constraint"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"because we're listening for stereotypes being added and removed but we're really interested in their owned tag definitions, the default implementation won't work for us"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"{link.class, instance.class, }, {transition.class, statevertex.class, },"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"{message.class, classifierrole.class },"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class startcritics"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note for uml2 the aggregation ends are swapped"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml2 subsystem is a component with <<subsystem>> stereotype so this must occur after the metatypes.getcomponent() case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialized in static initializer block below"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find the passed in container in validcontainmentmap"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"determine if metatype is a valid element for container"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this double 'for' loop may be optimised as follows: - use arrays in stead of a set for bases - have the second loop start from the element after base1 ... but i chose not to do this, since the gain is small, and this is only used for a lazily filled combo. btw: this is also used by notation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphfactory#makeedge()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this class represents all diagrams within argouml. it is based upon the gef diagram.<p> it adds a namespace, and the capability to delete itself when its namespace is deleted. <p> todo: mvw: i am not sure of the following:<p> the \"namespace\" of the diagram is e.g. used when creating new elements that are shown on the diagram; they will have their namespace set according this. it is not necessarily equal to the \"owner\". <p> mvw: i doubt all following: the \"namespace\" of the diagram is e.g. used to register a listener to the uml model, to be notified if this element is removed; which will imply that this diagram has to be deleted, too. <p> hence the namespace of e.g. a collaboration diagram should be the represented classifier or, in case of a represented operation, the classifier that owns this operation. and the namespace of the statechart diagram should be the namespace of its statemachine."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"constructor for a {@link figclass} during file load.<p> parent {@link org.argouml.uml.diagram.ui.fignodemodelelement} will have created the main box {@link #getbigport()} and its name {@link #getnamefig()} and stereotype (@link #getstereotypefig()}. this constructor creates a box for the attributes and operations.<p> the properties of all these graphic elements are adjusted appropriately. the main boxes are all filled and have outlines. todo: which is wrong, since the bigport is filled, too. @param element model element to be represented by this fig. @param bounds rectangle describing bounds @param settings rendering settings"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"valid elements for a profile to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.selection#draghandle(int, int, int, int, org.tigris.gef.presentation.handle)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a class to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a classifier to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a signal to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an actor to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a component to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#removefromdiagram()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a node to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test-case for the above code: draw a class. create a stereotype for it by clicking on the prop-panel tool, and name it. remove the class from the diagram. drag the class from the explorer on the diagram. select the stereotype in the explorer, and change its name in the prop-panel to something longer. the longer name does not make the class fig wider unless the above code is added."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there isn't a 3rd column then this represents a connection of elements of the same type."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a 3rd column then this represents a connection of between 2 different types of element."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#damage()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the array hasn't been flagged to indicate otherwise swap elements the elemnts and add again."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a datatype to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see guisettingstabinterface#handlesettingstabsave()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"valid elements for an action to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"trying to get a built-in standard profile from eclipse uml2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"removed from uml 2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"start interception ui interactions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"perhaps something like the following would workd. if not, then traverse up the component hierarchy to a multeditorpane rectangle drawingarea = globals.cureditor().getjcomponent().getvisiblerect();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only interested in the \"ownedelement\" property. either something has been added to the namespace for this model, or removed. in the latter case the \"something\" will be in the old value of the property, which is the collection of owned elements, and the new value will be the element import describing the model element and the model from which it was removed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"roll back transaction to remove any partial results read"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"methods that implement the mutablegraphmodel interface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we can find a nested sax exception, it will have information on the line number, etc."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#setlayer(org.tigris.gef.base.layer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore if the extent never got created or has been deleted"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"pce = (propertychangeevent) rxdevent.getsource(); asserttrue(\"wrong event name\", pce.getpropertyname().equals( diagramappearance.key_default_shadow_width.getkey())); string value = (string) pce.getoldvalue(); int i = integer.parseint(value); asserttrue(\"wrong old event value\", i == 4); asserttrue(\"wrong new event value\", ((string) pce.getnewvalue()).equals(\"2\"));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"inputsource xformedinput = chainedtransform(transformfiles, pis);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: the next text was copied - to adapt. sets the target. if the old target is an uml element, it also removes the model from the element listener list of the target. if the new target is an uml element, the model is added as element listener to the new target. <p> this function is called when the user changes the target. hence, this shall not result in any uml model changes.<p> this function looks a lot like the one in umlcomboboxmodel2. <p> as a possible future extension, we could allow listening to other model elements. @param thenewtarget the new target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.xmireader#getxmiuuidtoobjectmap()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this comment was included in a previous version (before 1\/2005) of the test which had this assertion commented out: interaction should not be removed when removing classifierrole... maybe if the last message is removed from the interaction but even then it's doubtfull since it will probably lead to backward compatibility problems in save formats. but my reading of the uml 1.4 specification is that an interaction without at least one message is definitely illegal, so mdr is doing the right thing by removing it in this case where we only have a single message, which then gets deleted. - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up source for style sheet"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create & set up temporary output file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml2.x there is no metaclass named method, but we use the 'method' association of behavioralfeature"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if action comes in with *no* modifiers, it is a pure keyboard event (e.g. spacebar), so do it. anything else is probably a mouse event, so ignore it. mouse events are dealt with by mousepressed() instead (see bottom of page)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create filter for each style sheet and chain to previous filter\/reader"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"jcontentpane.add(getjchbbold(), gridbagconstraints2); jcontentpane.add(getjchbitalic(), gridbagconstraints3);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create transformer and do transformation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up for next iteration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we presume the stream is encoded using the default char encoding"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete the old extent first"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.warning, \"unable to find extent \" + extent);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"connect to the repository"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find and add all subdirectories"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create an extent and read in our metamodel (m2 model)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create and start event pump first so it's available for all others"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getdiagraminterchangemodel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getfacade()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getmodeleventpump()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getdirectionkind()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getactivitygraphsfactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the default (16) puts the icons too close together:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the name is too long or multi-line (e.g. for comments) then we reduce to the first line or 80 chars."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we've got a streaming input, copy it to make sure we'll be able to rewind it if necessary"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"to rupdate the diagram set the stimulus name again todo: explain that this really works also in the mdr case. linus is a sceptic."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a uml 1.3 file, attempt to upgrade it to uml 1.4"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save project at slightly lower priority to keep ui responsive"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"roll back transaction from first attempt & start new one"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clear the associated id maps & reset starting collection"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"datatypes is next so it's available for kinds, modelmanagement, & extensions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize remaining factories and helpers (but defer heavyweight ones until needed)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crdisambigstatename"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a default extent for the user uml model. this will get replaced if a new model is read in from an xmi file."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getcollaborationsfactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getorderingkind()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.treeselectionlistener#valuechanged(javax.swing.event.treeselectionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getcorefactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"as long as they aren't both null (or a really rare identical string pointer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getdatatypesfactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"saveposition(prptodo, tabtodo.class); saveposition(prpproperties, tabprops.class); saveposition(prpdocumentation, tabdocumentation.class); saveposition(prpstyle, tabstyle.class); saveposition(prpsource, tabsrc.class); saveposition(prpconstraints, tabconstraints.class); saveposition(prptaggedvalues, tabtaggedvalues.class);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"alphabetic order!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getmodelmanagementfactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.abstractlistmodel#fireintervalremoved( object, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getstatemachineshelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getumlhelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getusecaseshelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getchangeablekind()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getaggregationkind()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getscopekind()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fignode#hitport(int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getconcurrencykind()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"elements created after file load won't have index entries"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private constructor for common work needed by both public constructors."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end our transaction"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getwindowtitlefont()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.extensionmechanismshelper#getallpossiblestereotypes(java.util.collection, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crinvalidsynch"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is nothing to do in uml1.4"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"loadposition(prptodo, tabtodo.class); loadposition(prpproperties, tabprops.class); loadposition(prpdocumentation, tabdocumentation.class); loadposition(prpstyle, tabstyle.class); loadposition(prpsource, tabsrc.class); loadposition(prpconstraints, tabconstraints.class); loadposition(prptaggedvalues, tabtaggedvalues.class);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"forbid instantiation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"loop through all the ends, comparing the name against those already seen (ignoring any with no name). no problem if there are no connections defined, we will fall through immediately."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if this is not overridden it will revert to the old behavior all internal subclasses have been updated, but this if for compatibility of non-argouml extensions."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.metatypes#getabstraction()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete stimulii which have this as their dispatchaction"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete messages which have this as their action"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"override paint so we can set a flag the first time we're called and notify any waiting threads that the splash screen has been painted. @see java.awt.component#paint(java.awt.graphics)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete linkends"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create an event for the other end of the association"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete attributelinks where this is the value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ask to be notified of any changes to tagdefinitions so that we can track new ones, name changes, etc"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"binary link"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.datatransfer.transferable#gettransferdataflavors()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete all sendactions which have this as signal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and a change event for that end"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete all signalevents which have this as the signal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these 3 steps are only needed for the 2 cases indicated with a x below."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getsecondary1()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"text was stored in name in uml 1.3"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"will always be null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete interactioninstancesets where this is the last participatingstimulus"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"to be able to remove dep's later"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"updates the button if the current row changes @see javax.swing.event.tablemodellistener#tablechanged(javax.swing.event.tablemodelevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this doesn't support i18n or multiple states, but it's just a default"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"partitions are composite elements and will get deleted implicitly partition contents don't need to be deleted or checked"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a enumeration to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.netbeans.api.xmi.xmireferenceprovider#getreference(javax.jmi.reflect.refobject)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"well formedness rule 4.12.3.1 compositestate [4] there have to be at least two composite substates in a concurrent composite state. if this is broken by deletion of substate then we delete the other remaining substates."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"look for an existing reference matching our mofid"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only add all if there are some to add."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"probably redundant - just in case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"helper interfaces and methods."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treenode#isleaf()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"checkstyle:on"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an associationrole to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"shorthand notation for convenience"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"quick exit if it's a transaction event (we get a lot of them and they are all ignored)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"interactioninstancesets will get deleted automatically because they are associated by composition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getsecondary2()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if this is the only message contained in the interaction we delete the interaction"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"object from a different file, register with superclass so it can resolve all references"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the model url has a suffix of '.zip' or '.jar', get the suffix without it and store it in the urlmap"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"several tries to construct a url that really exists."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if systemid is publicid previously mapped from a systemid, try to use the systemid."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.abstractlistmodel#fireintervaladded( object, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try to find suffix in module list."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.comboboxmodel#getselecteditem()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"search the classpath"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignored - we only care about open\/closing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"give up and let superclass deal with it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: probably really want to cancel editing ((figtexteditor) focusowner).cancelediting();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we've got a profile read pending - handle it ourselves now"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.comboboxmodel#setselecteditem(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"shouldn't happen"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise if it's not something we've already read, just punt to the super class."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"unfortunately the mdr super implementation throws debugexception with just the message from the causing exception rather than nesting the exception itself, so we don't have all the information we'd like"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an callstate to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an actionstate to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for transition use indirection through target statevertex"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we don't have any settings that can change per-fig currently so we can just use the default settings; settings = new diagramsettings(rendersettings);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get all (uml) metaclasses"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.ui.istatusbar#showstatus(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"object[] args = { typename, elemname }; misc.name.element-import = imported {0}: {1} return translator .localize(\"misc.name.element-import\", args);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"although this only handles one level of package, it is ok for uml 1.4 because of clustering get the right uml package in the extent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return the metatype proxy"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we must find out if the activator itself does not have message as it's activator"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"called when the user has pressed cancel. performs \"cancel\" in all tabs."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"an activator can't also be a predecessor of a message"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"an association can only have a single unnamed classifierrole, so"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we are unnamed eliminate all classifiers which are already the base of some role"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"wfr 2.10.3.3 #4"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no initialization currently"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"|| context instanceof collaboration || context instanceof model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.netbeans.lib.jmi.xmi.xmiheaderprovider#writeheader(java.io.writer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.beans.propertychangelistener#propertychange(propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: the <xmi.header><\/xmi.header> is provided for us"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not implemented in mdr"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the user selects an action that is already selected in sticky mode (double clicked) then we turn off sticky mode and make sure no action is selected."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.abstractmodeleventpump#addmodeleventlistener(java.beans.propertychangelistener, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.abstractmodeleventpump#removemodeleventlistener(java.beans.propertychangelistener, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.abstractmodeleventpump#addclassmodeleventlistener(java.beans.propertychangelistener, java.lang.object, java.lang.string[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clean up index entries"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.text.document#gettext(int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.beans.propertychangelistener#propertychange(java.beans. propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a change event for the corresponding property"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.swidgets.orientable#setorientation(org.tigris.swidgets.orientation)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"empty implementation - we only care about keytyped"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no longer abstract to allow subclasses to remove, so we provide a null default implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return all edges going from given port. @see org.tigris.gef.graph.graphmodel#getoutedges(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a change event for the associated property"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.text.document#getdefaultrootelement()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cut down on debugging noise"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"unregister deleted instances after all events have been delivered"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we don't have a fig for this uml object, we'll need to add one. we set the bounds, but they will be reset later."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"any given listener is only called once even if it is registered for multiple relevant matches"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this will include all subtypes registered"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(log.isdebugenabled()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"put all the bits together, suppressing bounds calculations until we're all done for efficiency."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for debugging you probably want either this or the logging for every event which is fired - not both"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this enforces the following well-formedness rule. <p>well formedness rule 4.12.3.1 compositestate [4] there have to be at least two composite substates in a concurrent composite state.<p> if this is broken by deletion of substate then we change the parent composite substate to be not concurrent."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.isdebugenabled()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: need named tags and constraints compartments here addfig(tagsfig); addfig(constraintsfig);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fetch the key before going in synchronized mode"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \" class \" + name + \" has subtypes : \" + names.get(name));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"temporary start private static final color[] color_array = { color.red, color.blue, color.cyan, color.yellow, color.green}; private int nextcolor = 0; temporary end"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"convert classname to refobject"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we don't have a mofclass, see if we can get one from the instance"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we still don't have a mofclass, something's wrong"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"throw new illegalargumentexception(\"property '\" + attribute + \"' doesn't exist in metamodel\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save the model (current)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the operation\/reception is abstract, then the text will be set to italics."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.changeablekind#getaddonly()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"lookup primary key, creating new entry if needed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.text.document#getlength()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there are no subkeys, register using our special value to indicate that this is a primary key only registration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.beans.vetoablechangelistener#vetoablechange(java.beans. propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new tagdefinition if none found"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clear target so that multiple copies have no effect (other than inefficiency)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: add tags & constraints addmenu.add(targetmanager.getinstance().getaddattributeaction()); addmenu.add(targetmanager.getinstance().getaddoperationaction());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete all taggedvalues with this type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"used by the copy functions. do not call this function directly. @param source the stereotype to copy from. @param target the object becoming a copy."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"element\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: check the name for validity."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the effect will get deleted automatically by mdr, unlike the guard."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"although usage & permission are dependencies, they need to be include separately because of the way lookup works"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following is specifically for realizations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see abstractaction#actionperformed(actionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the next 3 restrictions for abstraction seem to be argo specific not something the uml spec requires - tfm - 20070215"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umluserinterfacecontainer#formatelement(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a model to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.figedge#setdestfignode(org.tigris.gef.presentation.fignode)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.state.ui.figstate#getinitialheight()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignored - we just skipped inserting it in our document"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for a operation to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an event to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the operation specificationpath results in a set containing all surrounding namespaces that are not instances of package. specificationpath : set(namespace) specificationpath = self.allsurroundingnamespaces->select(n | n.ocliskindof(subsystem) or n.ocliskindof(class))"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the text labels. @see org.argouml.uml.diagram.ui.fignodemodelelement#modelchanged(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.abstractactionnavigate#navigateto( java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an state to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"since this is a complex polygon, there's no easy way to resize it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umluserinterfacecomponent#targetreasserted()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an subactivitystate to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the last one needs extra space below it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the commentedge. if there are more then one comment-edges between the 2 objects, then delete them all."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"supports implementation of some special elements not supported by buildnode"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: although wfr #3 in section 2.11.3.5 usecase of the uml 1.4 spec says \"a usecase cannot contain any classifiers,\" the ocl is actually self.contents->isempty which would seem to imply it can't contain any elements - tfm - 20060416"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the list of namespaces to return"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.27 modelelement"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the list of valid model item pairs for the given connection type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.37 structuralfeature"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the base was not changed, then only set the name:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"begin a transaction - we'll do a bunch of reads first to collect a set of elements to delete - then delete them all"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.14 dependency"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no else here to make sure classifier with its double inheritance goes ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no else here to make sure associationclass goes ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.7 behavioralfeature"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no else to handle multiple inheritance of linkobject"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we get this with the repository locked, it means our root model element was already deleted. nothing to do..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"our wrapped version of the same error"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"additional operations in 4.5.3.26"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there are no owned elements then return empty list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we don't care about the value - just want to see if it throws"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"recurse into ourself for each parent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if test fails this element should not be in the result set"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following should always be true"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we were handed a classifier to start, this must be a classifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the given node to the graph, if valid. @see org.tigris.gef.graph.mutablegraphmodel#addnode(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have to follow the arrows.."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"|| ns instanceof usecase see comment below"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"made following changes from ocl in uml 1.4 section 2.9.3.16: collaborationinstance -> collaborationinstanceset stimuli -> stimulus"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.focuslistener#focuslost(java.awt.event.focusevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml 1.4 wfr 2.5.3.1 #3 - no aggregation for n-ary associations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get classifiers in namespace"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the next line is needed so that we have the right dimension when drawing this fig on the diagram by pressing down the mouse button, even before releasing the mouse button:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a profile is a special package having the <<profile>> stereotype which can only contain the following types"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"|| modelelement instanceof statemachine"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a profile is a special package having the <<profile>> stereotype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only build a namepace if needed, with"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"methods that implement the graphmodel itself"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check whether model element is contained in given namespace\/container."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return struc.getowner().getnamespace().getownedelement().contains( struc.gettype());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"override setbounds to keep shapes looking right. @see org.tigris.gef.presentation.fig#setbounds(int, int, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"d.supplier.oclastype(generalizableelement). allparents.oclastype(namespace).ownedelement->select (e | e. elementownership.visibility = #public)->includes (r.participant) or"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"d.supplier.oclastype(package).allimportedelements->select ( e | e. elementimport.visibility = #public) ->includes (r.participant) ) )"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the namespace hierarchy for each element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"traverse the lists looking for the last (innermost) match"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml 1.4 wfr 2.5.3.1 #3"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we made something aggregate, make sure the other ends conform to uml 1.4 wfr 2.5.3.1 #2 - no more than one aggregate end"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there actually don't appear to be any restrictions on the namespace for a generalization. the uml 1.4 wfr 2.5.3.20 #3 refers to generalizableelements, not generalizations - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all text was stored in name field in uml 1.3"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"returns nothing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"boolean, string, integer, long, float, double, etc"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this method is cpu intensive and therefore needs to be as efficient as possible."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"additional operations in 4.5.3.8"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove any elements not in requested namespace"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parse the boundary box text. null is returned if it is empty or invalid, which causes no change. otherwise we tell gef we are making a change, make the change and tell gef we've finished."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select those features which are behavioralfeatures"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"should these also be deleted?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is silly, but for backward compatibility"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this is the 2nd part of this method:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"wellformednessrules and preconditions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"equal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the listeners to match the desired set using the minimal update facility"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"greater"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"less than"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"link does not exist in uml2, a link is represented just as an association"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"binary association"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete linkends which have this as their associationend"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete attributelinks where this is the attribute"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getmetatypes()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete createactions which have this as their instantiation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.actionsetmultiplicity#setselecteditem( java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.activitygraphshelper#findclassifierbyname( java.lang.object, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"methods that implement the vetoablechangelistener interface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete dependencies where this is the only supplier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete callactions which have this as their operation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we drop out there were no clashes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete callevents which have this as their operation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing more to do."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.enumeration#nextelement()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for consistency with attribute and operation, give it a default name and location"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy all the features"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.enumeration#hasmoreelements()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"used by the copy functions. do not call this function directly. todo: template parameters, default type todo: constraining elements todo: flows, dependencies, comments, bindings, contexts ??? todo: contents, residences ??? @param source the source me @param target the target me"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"namefig and stereotypefig are handled by parent."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing more to do, don't copy owned elements."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.figgroup#hitfig(java.awt.rectangle)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy raised signals:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the name so that superclasses can find the newly created element in the model, if necessary."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"search for our current target language."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note that if we're copying this element then we must also be allowed to copy other necessary objects."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't explicitly check if element is null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"unfortunately the fig and it's associated commentedge will not be fully initialized yet here if we're being loaded from a pgml file. the remainder of the initialization will happen when set{dest|source}fignode are called from pgmlstackparser.attachedges()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return 1..1 multiplicity for empty string"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"convert \"*\" to \"0..*\" instead of \"*..*\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"according wfr: in case of activitygraph only."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete extends where this is the base"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete includes where this is the addition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test multipe items registered for single key set"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and its enumerationliterals"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove with null item should remove all entries for key"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.mutablegraphmodel#addnode(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we get here then we didn't get the default diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"need to copy the lists since we will be moving the elements one by one:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.util.predicate#predicate(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"deleting \"source\" here would probably delete the parameters..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"advance currenty to where the start of the body box is, remembering that it overlaps the next box by 1 pixel. calculate the size of the body box, and update the y pointer past it if it is displayed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only set the name if it differs from the text."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the assocations and connections. no problem (there is a separate critic) if this is not a binary association or is an association role."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"need to copy the lists since we will be moving the elements:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is not necessarily the current diagram!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the old fig from the diagram, so we can draw the new one in its place:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new figtext instance based on the given mouse down event and the state of the parent editor."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"p.movetotrash(source);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"made following change from ocl in uml 1.4 section 2.9.3.22: collaborationinstance -> collaborationinstanceset"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.umlhelper#deletecollection(java.util.collection)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"elements which will be deleted when their container is deleted don't get added to the list of elements to be deleted (but we still want to traverse them looking for other elements to be deleted)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"technically this is legal, but a structuralfeature should probably only ever have an owner instead of a namespace. - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enumerationliterals should get deleted implicitly since they are associated by composition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml2 only"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"list.add(\"literalreal\"); uml 2.4 end literalspecification"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"have we handled uml2 here?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"hypotheses no time expression (only invariants)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.abstractaction.abstractaction()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: gone in uml 2.1 it is now an instancespecification with an association as its classifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get all classifiers in all top level packages of all profiles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"d.supplier.oclastype(namespace).ownedelement->select (e | e.elementownership.visibility = #public)->includes (r.participant) or"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml1.4 only"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we got passed an unmodifiable list. copy it and sort the result"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now resize all sub-figs, including not displayed figs. start by the name. we override the getminimumsize if it is less than our view (21 pixels hardcoded!). add in the shared extra, plus in this case the correction."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this doesn't work in uml2: both owner and property needed!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up the property panels for uml elements:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: in uml 2.0, classifierrole, associationrole, and associationendrole have been replaced by the internal structure of the collaboration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: restructured in uml 2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete stimuli which have this as a sender or receiver"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for a iterator call we should provide: (a) the variables (b) the expression to be evaluated on each step (c) the lambda-evaluator to evaluate it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: unimplemented return ((property) handle).gets"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the figpoly is located at the right of the name text. the namefig size is increased, so that it fits its text, and the figpoly next to the text, all within the boundaries of the namefig."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we do not set it to null first, then we get a mdr debugexception:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"self.allconnections->forall(r | self.namespace.allcontents->includes(r.participant) )"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel#buildmodellist()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"removed from uml 2.x and deprecated in model api so we won't implement it throw new notimplementedexception(); we do not throw an exception because argouml still uses this"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"<em>warning: when changing the implementation of this method be warned that the sequence of the if then else tree does matter.<\/em> most notably, do not move the setnamespace method any level up in the tree.<p>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this can throw an exception if the target has been deleted. we don't want to try locking the repository because this is called from the event delivery thread and could cause a deadlock. instead catch the exception and leave the model empty."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel#buildmodellist()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the child component is resizable then we don't know it's actual size yet. it will be calculated later as a proportion of the available left over space. for now this is flagged as zero."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see testcase#teardown()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.abstractaction.abstractaction( java.lang.string, javax.swing.icon)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getextensionmechanismshelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crnonaggdatatype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.selectionbuttons#paint(java.awt.graphics)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel2#isvalidelement(object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fire all of the status events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel2#getselectedmodelelement()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: if a namespace with sub-classdiagrams is deleted, then { confirmstr + translator.localize( \"optionpane.remove-from-model-will-remove-subdiagram\"); doask = true; }"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing by design."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"simply use name as it is"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"allow null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"restricting types for tagged values"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"classifier is way too much in uml 2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the minimum set of standard types"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep them sorted"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we assume profile is contained in a single extent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.documentlistener#removeupdate(javax.swing.event. documentevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.ui.wizard#canfinish()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make a copy of the modelelements:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see junit.framework.testcase#runtest()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the list does not exist add the code generation and good practices profiles as default"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel2#isvalidelement( java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel2#buildmodellist()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel2#isvalidelement(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the selected operation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel2#settarget(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we know it when a classifier is added as a base"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#casearelationalexpressiontail(tudresden.ocl.parser.node.arelationalexpressiontail)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"so, we found a classifier that is not a classifierinstate. and at least one state has been selected. well, let's correct that:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we just need to get someone to re-render a single line of text which represents the element here, but i'm not sure how to do that. - tfm todo: bob replies - we shouldn't be interested in this event here. the figfeature (or its notation) should be listen for change and the figfeature should be update from that."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel#removeothermodeleventlisteners(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"builds an initialized stereotype with no namespace. a stereotype must have a namespace so this method is unsafe. use buildstereotype(string, object). @param text is the name of the stereotype @return an initialized stereotype."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do not use a custom icon the titles of buttons default button title"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"base is already set to this assoc..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see guisettingstabinterface#gettabpanel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"or self.allconnections->forall( r | self.namespace.allcontents->excludes (r.participant) implies self.namespace.clientdependency->exists (d | d.oclistypeof(permission) and d.stereotype.name = 'access' and"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseaifexpression(tudresden.ocl.parser.node.aifexpression)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just in case the existing selected element is from elsewhere make sure it is in the list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set properties of the stereotype box. initially not set to be displayed, but this will be changed when we try to render it, if we find we have a stereotype."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select the current type in the combobox"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the selected value may be \"\" to clear the represented classifier."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the implementations of this operations and look for an opaquebehavior."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"init profiles defined in jar files"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean mustrefresh;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mustrefresh = true;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return a list of namespaces enclosing this element. the list is ordered outer to inner. i.e. it starts at the root model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this should not happen."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.actionadddiagram#creatediagram(object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if it has no language, then we assume it is not an instance of opaqueexpression, so we leave it null and handle elsewhere"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\/ build the field"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a body that reacts to double-clicks and jumps to a diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\/ add field(s) to panel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"click on the already selected value must not call setvalue"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"+ \"a.allconnections->exists(r | r.type.ocliskindof(actor)) and \""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the 2 radios have only one information."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the model, and then notify"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we silently ignore requests which conflict with uml 1.4 wfr 2.5.3.1 #3 - no aggregation for n-ary associations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"when call by contructor : no one is selected"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.plaf.metal.metaltheme#getname()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"expressions are datatypes, not independent model elements be careful not to reuse them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we need to to this otherwise there is no notification and diagram isn't change"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"scopekind, visibilitykind, pseudostatekind, etc doesn't include boolean though, despite what uml 1.4 spec says"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"needed for notification"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"because we map both ends of an association we'll see many names twice log.log(level.fine, \"duplicate property name found - {0}:{1}\", new object[]{typename, propertyname});"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is an expensive method that we should ensure is called rarely. hence info level to track easily."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getcommonbehaviorfactory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel#isvalidelement(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"language has changed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"translator.localize(\"button.move-down\")"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fill the list with items"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getcollaborationshelper()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid elements for an objectflowstate to contain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"commit our transaction"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml2, the target is already the \"expression\" (opaque...)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.directionkind#getinoutparameter()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#lastindexof(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the diagram as a listener to the namespace so that when the namespace is removed the diagram is deleted also."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.documentlistener#insertupdate(javax.swing.event. documentevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"simulates uml2 getting the aggregation from the opposite end"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.corehelper#clearstereotypes(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see observable#notifyobservers()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.visibilitykind#getpublic()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.extensionmechanismsfactory#createtaggedvalue()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build all other elements using existing buildnode"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this calls the getters to fetch actions even though the action variables are defined is instances of this class. this is because any number of action getters could have been overridden in a descendant and it is the action from that overridden method that should be returned in the array."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's create a class with the given name, otherwise the user will not understand why we refuse his input!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#iterator()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: all of the following can be broken if we have multiple targets selected"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if not, it is a control and must be labeled..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.visibilitykind#getprivate()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.scopekind#getinstance()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.pseudostatekind#getjoin()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.pseudostatekind#getinitial()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"destroy it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"disable the button since no row will be selected now"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"title = \"\" because already done for optional"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"frank: in case of exception delete name and mv name+\"#\" back to name if name+\"#\" exists this is the \"rollback\" to old file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do - we get all events automatically"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"force the parent to redraw"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test if the given namespace is a valid namespace to add the diagram to. todo: this method was created to facilitate the merge of this class with actionadddiagram. @param ns the namespace to check @return returns <code>true<\/code> if valid."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.abstractmodeleventpump#removeclassmodeleventlistener(java.beans.propertychangelistener, java.lang.object, java.lang.string[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#flushmodelevents()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.extensionmechanismshelper#getstereotypes(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.concurrencykind#getsequential()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#removemodeleventlistener( java.beans.propertychangelistener, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.umlhelper#move(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#addmodeleventlistener( java.beans.propertychangelistener, java.lang.object, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#removeclassmodeleventlistener( java.beans.propertychangelistener, java.lang.object, java.lang.string[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.listmodel#getsize()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#addsupporteddecision(org.argouml.cognitive.decision)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#classnameandbounds()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end andromda code"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.changeablekind#getfrozen()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we've found the module model, log it and place it in the map so we don't have to find it if we need it again."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.usecaseshelper#getallusecases(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"although not represented in the ocl (or our java), the english text of wfr #4 of section 2.10.3.4 in the uml 1.4 spec is more restrictive - \"[4] a collaboration may only contain classifierroles and associationroles, the generalizations and the constraints between them, and actions used in the collaboration's interactions.\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just returns the descr param. @see org.argouml.cognitive.poster#expand(java.lang.string, listset)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"returns a list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find the bases of the connected classifierroles so that we can see what associations are between them. if there are bases then the associations between those bases form the possible bases. otherwise the bases are formed by all associations in the namespace of the collaboration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: this may be called from a different thread, so we need to be careful of the threading restrictions imposed by abstractdocument for mutators to be sure we don't deadlock."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"* a list of the path item attributes for this container. * the list is populated during parsing, them processed at endelement() *\/ private list<hashtable<string, string>> pathitemattrs = new arraylist<hashtable<string, string>>();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"because we get the metatype class stripped of its reflective proxies, we need to jump through a hoop or two to find it in the metamodel, then work from there to get its proxy."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui. abstracttestactionadddiagram#getvalidnamespaceclasses()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcheckbox#buildmodel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy the current in the previous"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sanity check - the returned path item placement strategy should match the one in the uml. if it doesn't, it could be that the uml was created with an older argo version, and the new argo version use a different placement strategy. if they don't match, just use the default."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"super(new labelledlayout());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the list: opaqueexpression, literalstring,..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"by default, the first value of the combobox is selected."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get current initialvalue"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#critique(java.lang.object, org.argouml.cognitive.designer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.statemachineshelper#getsource(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default : 0 => opaqueexpression set to 1 for test"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#getsupporteddecisions()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#expand(java.lang.string, listset)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#supports(org.argouml.cognitive.decision)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#supports(org.argouml.cognitive.goal)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the body and language field"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#containsknowledgetype(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create other panel element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create panel containing the previous field"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#isactive()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#isenabled()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.cognitive.critics.cruml#getcriticizedmetatypes()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compare the type of the parameters. if any of the types is null, then we have a match."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there are no composite states, so this will work:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"does not do anything. @see org.argouml.cognitive.poster#fixit(org.argouml.cognitive.todoitem, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy in memory the current"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#unsnooze()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#snooze()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#fixit(org.argouml.cognitive.todoitem, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy the next value in the current"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.tabtarget#shouldbeenabled(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targetlistener#targetremoved( targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the selected value may be \"\" to clear the represented operation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targetlistener#targetadded( targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.events.argogeneratoreventlistener#generatorremoved(org.argouml.application.events.argogeneratorevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#listiterator(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy the current in the next"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"temporary until simplelistmodel is used for all"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create popup tool if we have a single row"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create add and remove buttons if needed first"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"pushing this to the end of the awt thread seems to be the only way to get this to update correctly"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"class to display graphics for a uml link in a diagram. <p> the underlined association name is shown next to the middle of the path. todo: show more notation as described in the standard: \"a rolename may be shown at each end of the link. an association name may be shown near the path. if present, it is underlined to indicate an instance. links do not have instance names, they take their identity from the instances that they relate. multiplicity is not shown for links because they are instances. other association adornments (aggregation, composition, navigation) may be shown on the link ends.\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: gennavigableclasses?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.notation.notationname#getconfigurationvalue()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"utility function to add a listener for an array of property names and remember the registration. @param element element to listen for changes on @param property array of property names (strings) to listen for changes of @see org.argouml.model.modeleventpump#addmodeleventlistener(propertychangelistener, object, string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"utility function to remove an element listener and adapt the remembered list of registration. @param element element to listen for changes on @see org.argouml.model.modeleventpump#addmodeleventlistener(propertychangelistener, object, string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get features owned by those classifiers"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now we construct the zig zag inheritance line getunderlyingfig()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the 5 main component : 2 label, a panel for langage , a panel with button, a textarea"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"translator.localize(\"button.delete\")"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy previous element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for a classifier: <pre> [10] the operation allcontents returns a set containing all modelelements contained in the classifier together with the contents inherited from its parents. allcontents : set(modelelement); allcontents = self.contents->union( self.parent.allcontents->select(e | e.elementownership.visibility = #public or e.elementownership.visibility = #protected)) where parent is defined for generalizableelement as: [1] the operation parent returns a set containing all direct parents parent : set(generalizableelement); parent = self.generalization.parent <\/pre><p>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy next element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.notation.providers.notationprovider#updatelistener(java.beans.propertychangelistener, java.lang.object, java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"translator.localize(\"button.move-up\")"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy the previous value in the current"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"self associations are special cases. no need to let the maze runner find the way."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the 2 component: a textfield and a list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"extract the icon that is used by the tree control for the current look and feel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add a new entry in the list and select it. translator.localize(\"button.add\") +"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: make use of the constants defined in the todoitem class!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle itemuid in container contents"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"profile section: dealing with profiles in different states"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this should not be needed if the above is correct, but let's be sure:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy the todo items after the model and diagrams so that any model elements or figs that the todo items refer to will exist before creating critics."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for java notation, we also need to listen to \"leaf\" changes, since they are shown as \"final\" on the diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no text? remove attr!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is needed for the junit tests. otherwise a \"assert initialized\" would suffice."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's make it a bit more difficult by setting the target:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we need to set the namespace\/owner of the new attribute before parsing:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.guisettingstabinterface#handlesettingstabcancel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if anything goes wrong return the stack trace as a string so that we get some useful feedback."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"is this item a copy? @see java.lang.object#equals(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"once one criticism is found, exit"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create new menu item if it doesn't exist for this class."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for a collaboration: <pre> [1 ] the operation allcontents results in the set of all modelelements contained in the collaboration together with those contained in the parents except those that have been specialized. allcontents : set(modelelement); allcontents = self.contents->union ( self.parent.allcontents->reject ( e | self.contents.name->include (e.name) )) parent here is the generalizableelement definition <\/pre>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"constructor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getxmireader()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"user interface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"retain the previous project file even when the save operation crashes in the middle. also create a backup file after saving."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"criticism control"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#clear()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"issue resolutions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default parameter name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"critiquing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the critiquing thread should wait if disabled."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"why?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if menus don't containt menu item necessary for this class, create it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.jcomponent#paintcomponent(java.awt.graphics)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"constructor and singeton methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"used by the copy functions. do not call this function directly. todo: generalizations, specializations? @param source the source generalizable element @param target the target generalizable element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"&& getautocritique()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete dependencies where this is the only client"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't clear everything here, breaks loading!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"v71"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't let a transient error kill the thread"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.notation.notationprovider#getparsinghelp()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"decision model listener"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class childgendmelements"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: all the todos in the docopyfoo methods below are inherited from the nsuml implementation and do not reflect new issues. one additional thing which does need to be dealt with is the copying of any attributes which have been added since this code was implemented for uml 1.3."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"used by the copy functions. do not call this function directly. todo: actions? instances? collaborations etc? @param source the source classifier @param target the target classifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this should be the name of the designer that created the todoitem, not the current username!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"predicate() returned true, creating todoitem\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"corrective automations, wizards"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check param types: only some connections are legal uml connections:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we'll put the association in the namespace of whichever end is not navigable and is writeable. if they both are, we'll use the namepace of c1."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(mstatevertex)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.events.argonotationeventlistener#notationremoved(org.argouml.application.events.argonotationevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if wizclass is not a subclass of wizard, print a warning"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return getcriticname();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"design feedback"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end interface poster"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use this for fast fail instead. sacrificed for complete fail. d00mst throw new unresolvableexception( \"unable to create itemuid for class: \" + obj.getclass());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: values"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete extends which have this as their only extensionpoint"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class goal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.windowlistener#windowopened(java.awt.event.windowevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check if we are using a supported java version"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"implements java.io.serialization"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.events.argonotationeventlistener#notationproviderremoved(org.argouml.application.events.argonotationevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class curdecisioncm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"as soon as we've created a notation and have registered it listener force an event to go to the listener so it draws for the first time."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class standardcm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.saxparserbase#handlestartelement( org.argouml.persistence.xmlelement)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class compositecm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class enabledcm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class notsnoozedcm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class andcm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class designgoalscm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class orcm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register our last chance exception handler"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.component#getlocale()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the splash screen up as early as possible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have to do this to set the laf for the splash screen"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"main initialization happens here"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.abstractfilepersister#issaveenabled()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tooltipmanager.sharedinstance().setinitialdelay(500);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"force the configuration to load"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"synchronize the startup directory"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"then, print out some version info for debuggers..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the i18n locale"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set properties for application behaviour"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now, let's print it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing else to do (?)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.xmltokentablebase#setuptokens()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we must have a project open before continuing. create if necessary"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"perform one command."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now create a new object."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the namespace to that of the base as first choice, or that of the addition as second choice."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initlogging();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make the projectbrowser"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the next one defaults to true, to stay compatible with older argouml versions that did not have this setting:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class main"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class postload"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we don't care if optional modules aren't found."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class loadmodules"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all tabs are added at the end, except a tabtodotarget:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end interface guisettingstabinterface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"editor editor = globals.cureditor(); graphmodel gm = editor.getgraphmodel(); layerdiagram lay = ((layerdiagram) editor.getlayermanager().getactivelayer());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip pos, we know it's not a valid char from above"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"store in the user configuration, and let gef know also."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use the configuration if it exists, otherwise use what gef thinks."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@param pc @see org.argouml.profile.profilemanager#applyconfiguration(org.argouml.kernel.profileconfiguration)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"failed to clone"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.selectionbuttons#paintbuttons(graphics)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remark: the code in projectsettings.init() currently presumes that nobody is using this event."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"calculate the higher and lower figs"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: this is package scope to force callers to use resourceloaderwrapper"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.observable#notifyobservers(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class resourceloader"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the validity checking thread should wait if disabled."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if element has been deleted, it's no longer valid"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"history.thehistory.additemresolution(item, \"no longer valid\"); ((todoitem)item).resolve(\"no longer valid\"); notifyobservers(\"removeelement\", item);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notifications and updates"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.profile.internal.ocl.oclexpressionevaluator#evaluate(java.util.hashmap, org.argouml.profile.internal.ocl.modelinterpreter, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip any identical items already on the list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cat.debug(\"checking for inhibitors \" + rc);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"history.thehistory.additemresolution(item, reason);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.profile.internal.ocl.uml14.bag#count(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.profile.internal.ocl.modelinterpreter#getbuiltinsymbol(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"returns the target of this tab. @see org.argouml.ui.tabtarget#gettarget()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enable buttons when selection made. @see java.awt.event.actionlistener#actionperformed(java.awt.event.actionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"here we located the new classifier with its operation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class argojmenu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"eventlistenerlist.add() is synchronized, so we don't need to synchronize ourselves"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"refresh the text of the tab. @see org.argouml.ui.tabtarget#refresh()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end of block"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end interface clarifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the checkbox on or off according to the selected value of the action. if no selected value is found then this defaults to true."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"extra care to be taken since alloffenders can be reset while this method is running."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these are blue in metal default theme"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cached expansions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these are gray in metal default theme"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.api.progressmonitor#iscanceled()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the icon for this poster"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"eventlistenerlist.remove() is synchronized, so we don't need to synchronize ourselves"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mvw"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: add double click listener"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"event related stuff"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.icon#geticonwidth()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crnwayagg.java"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.api.progressmonitor#notifymessage(java.lang.string, java.lang.string, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class checkmanager"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now lets search"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class tabchecklist"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we found it!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enter the class to speed up the next search."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targetlistener#targetset(targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is explained by wfr 2 of a structuralfeature: the type of a structuralfeature must be a class, datatype, or interface. @see org.argouml.uml.ui.umlcomboboxmodel#isvalidelement(object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"instance varables"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcomboboxmodel2#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tablemodel implemetation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.api.progressmonitor#close()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel2#addothermodeleventlisteners(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#addall(int, java.util.collection)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in the past, 0 milliseconds after january 1, 1970, 00:00:00 gmt."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"report a progress to the progressmonitor window. @see org.argouml.persistence.progresslistener#progress(org.argouml.persistence.progressevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"by default, double the snooze interval each time"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class snoozeorder"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"wizard actions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this changes the complete structure of the table, so we need to set the column widths again."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: do all following steps todo: resolve item from todolist"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionopencritics"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set initial sorting on critic headline"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"critics table"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"instead of making a new list, decrement index, return when found and index == 0"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.api.progressmonitor#notifynullaction()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"critic details panel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"case 2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no maximum set, so it will stretch..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and for advanced mode:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this check is needed, otherwise the setbase() below gives an exception."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set tablesp's preferred height to 0 so that details height is used in pack()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"c.gridy = 0; c.gridx = 0; jlabel prilabel = new jlabel(\"priority:\"); gb.setconstraints(prilabel, c); _mainpanel.add(prilabel);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"c.gridy = 0; c.gridx = 2; jlabel lowlabel = new jlabel(\"low\"); gb.setconstraints(lowlabel, c); _mainpanel.add(lowlabel);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"c.gridy = 0; c.gridx = 3; jlabel twolabel = new jlabel(\"ad\"); gb.setconstraints(twolabel, c); _mainpanel.add(twolabel);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"c.gridy = 0; c.gridx = 5; jlabel fourlabel = new jlabel(\"asd\"); gb.setconstraints(fourlabel, c); _mainpanel.add(fourlabel);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"c.gridy = 0; c.gridx = 6; jlabel highlabel = new jlabel(\"high\"); gb.setconstraints(highlabel, c); _mainpanel.add(highlabel);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.targetmanager.targetlistener#targetset( org.argouml.ui.targetmanager.targetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"------------ other methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#get(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.treemodelumleventlistener#modelelementremoved(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"treemodel implementation - todo specific stuff"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"class variables"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"general icons for poster"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specialised icons for designer"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class todotreerenderer"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"public static decision decisionuncategorized = new decision(\"uncategorized\", 1);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class todobydecision"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.perspectivemanagerlistener#removeperspective(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the control is a panel, add it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"c.gridx = 1; c.gridy = 3; c.gridheight = gridbagconstraints.remainder; spacerpanel spacer2 = new spacerpanel(); gb.setconstraints(spacer2, c); _mainpanel.add(spacer2);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"image.setmargin(new insets(0, 0, 0, 0));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class wizsteptextfield"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class wizdescription"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class wizstepcue"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stop\/start creating more critics"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actiongotocritique"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"does nothing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionautocritique"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stop\/start cleaning up invalid todoitems."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reuse opaque..., just set it's attributes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise parent must be an offending design material"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionopengoals"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"? inform()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if visibility is already changed for this class, respect it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlmodelelementlistmodel2#isvalidelement( java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#add(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the target of description will always be set directly by tabtodo"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"------------- mouselistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"p = new umlvaluespecificationpanel(model, propertyname);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class wizstepconfirm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umlcombobox#doit(actionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"next line coming from projectbrowser"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"------------ itemlistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"-------------treeselectionlistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not needed in uml 1.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"prepare for typing in rationale field when window is opened. @see java.awt.component#setvisible(boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only interrupt for one todoitem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionopendecisions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"blinks?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the perspectives to a list for the combobox"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"decslide.setpaintlabels(true);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this looks o(n^2)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: make a new history item"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cat.debug(\"bad decision\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cat.debug(\"bad goal\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class dismisstodoitemdialog"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"our comparator will throw an invalidelementexception if the old list contains deleted elements (eg after a new project is loaded) so remove all the old contents first"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"finally, apply profile configuration to the model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the text was: {frozen}"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class wizstep"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't allow instantiation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"n.b. a node which is an association is either a n-ary association or the class part of an associationclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actionlistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"documentlistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"targetlistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class configurationfactory"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.info, \"configuration saved to {0}\\n\", url);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the text was: {frozen = false}"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check for the older properties file and copy it over if possible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only allow one load"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the first point twice"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize band buffer bounds"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"getdata rectangle = \" + clip);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new graphics context so we start with fresh transforms"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get all classifiers in our model todo: we need the property panels to have some reference to the project they belong to instead of using deprecated functionality"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fill with our background color"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ask gef to print a band of the diagram (translated & clipped)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure it isn't caching anything that should be written"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assert !initialized; guitestactionopenproject fails over this..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"retain the original one:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"internal initialization method. handles initialization which is common to both public methods."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"flag the command as to whether it is first in a chain"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class delayedchangenotify"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crconflictingcomposites"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default diagram settings"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default notation settings"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generation preferences:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the next ones defaults to true, to stay compatible with older argouml versions that did not have this setting:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this notation is not available!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"always put the model at the top"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise add the diagram at the start"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register with the save action with other subsystems so that any changes in those subsystems will enable the save button\/menu item etc."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.weakexplorernode#subsumes(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end interface delayedvchangelistener"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"then any new buttons"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a profile initially has no applied profiles, we go bottom-up"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip leading underscores:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: should just be the directory to write."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the preferences with project-scope:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the argouml version with which this project was last saved:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if diagram added successfully, add the member too"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"adding a todo member removes any existing one."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"got past the veto, add the member"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"send indeterminate new value instead of making copy of vector"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"hence, a diagram name was saved in the project that we are loading. so, we use this name to retrieve any matching diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#hit(java.awt.rectangle)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use the first diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there was no diagram at all, then use the (first) uml model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we don't need this hashmap anymore so free up the memory"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can not delete the model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can not delete the profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.object#finalize()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: no longer a separate type in uml 2.1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make the topmost diagram (that is not the one being deleted) current."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"trash related methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fire an event some anyone who cares about diagrams being removed can listen for it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there's just one profileconfiguration in a project and there's no other way to add another one"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tab for the settings dialog that makes it possible to select the modules that are to be enabled. todo: header for the table. @author linus tolke"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#retainall(java.util.collection)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing - these buttons are not shown."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing! the next time we refresh, we will fetch the values again."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"access methods for modules that need to query about the status of other modules."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"access methods for the gui that the user uses to enable and disable modules."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"access methods for the program infrastructure"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"catch all exceptions and errors, however severe"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: huntformodulesfromjavawebstart();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we expect all extensions to have a manifest even though we can operate without one if necessary."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"look for our specification"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add this to search list for i18n properties (done for both modules & localized property file sets)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we havn't found it. add it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"called after the notation default property gets changed. @see java.beans.propertychangelistener#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following check should have been satisfied before we instantiated the module, but double check again"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if it didn't have a loadable module class and it doesn't look like a localized property set, warn the user that something funny is in their extension directory"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"since there is no way to compare the objects as equal, we have to search through the list at this point."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remark: there is also a java-like notation, which is also part of argouml core distribution."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nsuml does this (?) model.getfacade().setguard(trans, g);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is needed for the case when the default notation is not loaded at this point."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build the final string"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"static workers for dealing with notation names."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.diagram#initialize(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no valid field for above notationlanguage. it's valid if not null."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we also show stereotypes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fignode#isdragconnectable()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we also show the type (of which e.g. the name may change)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we also show tagged values (the \/ for derived)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#getenclosedfigs()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and when the operation is replaced:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#translate(int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we are not interested in the name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and the parameter names and values:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and the arguments:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we also show parameters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we also show types of parameters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listen to the modelelement itself:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"convenience methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register for events from all modelelements that change the name and body text i.e. when the callaction is replaced:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and when the owner is replaced (unlikely for operations), and when the operation changes name:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"removed stereotype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register for events from all modelelements that change the text i.e. when the transition is replaced:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"new stereotype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register for the doactivity etc."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register for internal transitions:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.object#hashcode() this will result in rather bad performance but at least we will not violate the contract together with {@link #equals(object)}."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return \"parsing.java.help.attribute\";"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return \"parsing.help.fig-association-end-name\";"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: initial value"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip spaces"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name itself"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check the name for validity:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"pick out return type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle multiplicity here since we need the type actually the api of generator is buggy since to generate multiplicity correctly we need the attribute too"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"strip any trailing semi-colons"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"name and params"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check for more attributes (';' separated):"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove bases that aren't there anymore"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notation.findnotation(\"java\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the notationutilityuml:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy - can't iterate modify live collection while iterating it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"when nothing is generated: omit the space."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"loop through all base classes, building a comma separated list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"yes, there are more:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no non-whitechars in text? remove attr!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the 1st attribute is static, then the new ones, too."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle derived:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle visibility:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fix for loading bad projects"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the \"show types\" defaults to true, to stay compatible with older argouml versions that did not have this setting:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the element was deleted while we were processing it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no instantiations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"construct bases string (comma separated)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no text? remove op!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no non-whitechars in text? remove op!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check for more operations (';' separated):"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end while loop"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't create a stereotype for <<signal>> on a reception but create any other parsed stereotypes as needed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"lets concatenate it to the resulting string (genstr)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphmodel#getoutedges(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the parameters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the returnparameters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the model element was deleted while we were working on it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"else: we remove only the extra \",\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.util.namespace.namespaceelement#getnamespaceelement()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the query state"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove last ,"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.util.namespace.namespace#setdefaultscopetoken(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a string of the form \"name:\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#removeall(java.util.collection)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is a message uml object"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"supported format: predecessors number \":\" action the 3 parts of the string to generate:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#contains(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this may return null:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"activatorintno is now guaranteed not null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"list<string> args = null;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the ordered list of immediate successors:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the condition or iteration expression (recurrence):"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.componentlistener#componentresized(java.awt.event.componentevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now apply the changes to the model:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"windowopen state will be changed when window is activated"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"disconnect the message from the call graph make copies of returned live collections since we're modifying"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find the preceding message, if any, on either end of the association."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do not set the name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mclassifierrole"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"connect the message at a new spot"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"case 3 & 4"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if no variable name was given, then retain the one in the model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.treemodel#valueforpathchanged(javax.swing.tree.treepath, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if no function-name was given, then retain the one in the model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"store the guard, i.e. condition or iteration expression, in the recurrence field of the action:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there was no action yet, create a callaction:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"things are strange if there are more than one candidate root, it has no obvious interpretation in terms of a call tree."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we can do nothing if we don't have both the use case and extension point."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parse the string to creat a new extension point."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"build a new extension point"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the empty string. return null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this case is a bit different, because of the parameters. if the event already exists, the parameters are ignored."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we are given the null string, return immediately, so that the extensionpoint is removed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a string of the form \"name:location\". discard the middle token (\":\")"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"read past the colon."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the string to build"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the fields we want"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"put in the name field if it's there"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"put in the location field if it's there"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"first we decode the string:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and 3rd, we adapt the model:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"same class, other operation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"other class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we found the classifier, now go find the operation:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.util.namespace.namespace#peeknamespaceelement()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the text was: {frozen = true}"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"case 3"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"should we be getting this from the gui? bt 11 aug 2002"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no type defined yet"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.util.namespace.namespace#iterator()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this automatically pulls in a tagdefinition from the profile:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the tv existed, but maybe it was not \"true\":"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: for uml2: check if the type of the tv is string."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generate all the existing internal transitions, so that we can compare them as text with the newly entered ones."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"allow concatenation order and separator to be localized"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parameter etc."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"in\" is the default"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"in\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return nothing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it can still be null if the uml element did not have a multiplicity defined."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.mutablegraphmodel#connect(java.lang.object, java.lang.object, java.lang.class)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's not be picky about the brackets - just remove them:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the classifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the state of a classifierinstate is removed, so let's reduce it to a classifier."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"strings"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.util.namespace.namespace#getbasenamespace()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the states that did not match."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the model is changed - our job is done"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no state named s is found, so we have to reject the user's input"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"finally, do the adaptations:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"then c is a \"normal\" classifier uml states"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.rules.abstractperspectiverule#getchildren( java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's create a new classifierinstate with the correct links"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this updates the diagram - hence as last statement:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(mtransition)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if no classifier has been set, then entering a state is not useful, so the user's input has to be rejected."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: if the next line trows an exception, then what do we do with the remainder of the parsed\/to be parsed lines?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add this new one, and mark it to be retained:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"process the final list of internal transitions, and hook it to the state:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't forget to remove old internals!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make next accesses to this instance predictable:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and hook in the new ones:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the actionexpression"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's look for a timeevent, changeevent, callevent or signalevent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"operation(paramlist)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the part after the || is for when there's nothing between the ()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it is safe to give a null to the next function, since a statemachine is always composed by a model anyhow."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"else the empty s will do"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return the ith element from a collection. @param collection collection to get element from @param index index of the element to be returned @return the object"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"case 1 and 2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"language"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"when(...)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"signalname"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and parse the parameter list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and hook it to the transition immediately, so that an exception can not cause it to remain dangling:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.menulistener#menuselected(javax.swing.event.menuevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just change the time expression"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have an event without expression"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it's a time-event now, but was of another type before!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just change the changeexpression"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new expression:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we can distinguish between 4 cases: 1. a trigger is given. none exists yet. 2. the trigger was present, and it is the same type, or a different type, and its text is changed, or the same. 3. a trigger is not given. none exists yet. 4. the name of the trigger was present, but is removed. the reaction in these cases should be: 1. find the referred trigger (issue 5988) or create a new one, and hook it to the transition. 2. rename the trigger. 3. nop. 4. unhook and erase the existing trigger."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the parsed text describes a change-event, but the model contains another type!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just change the name and linked operation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: change the linked operation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just change the name and linked signal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"case 3 and 4"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do not check if the parameters match."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no text. we may remove the literal."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no non-white chars in text? remove literal!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"heuristic algorithm: do not show stereotypes if there is no name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"great! the class already existed - just use it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if no base was typed, then only set the name:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only set the name if the base was found:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the associationrole name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only instantiate when we need it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the base is already set to this assoc, then do not set it again. this check is needed, otherwise the setbase() below gives an exception."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"2002-07-31 jaap branderhorst from here made visibility etc. configurable"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the base association name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and not association classes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end of oclevaluator"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"look for associations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"massociationend"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mparameter"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphlistener#edgeadded(org.tigris.gef.graph.graphevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the ocl toolkit does not like void return types"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"event handlers - mouselistener and mousemotionlistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mclassifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"first search for appropriate attributes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"moperation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#getsource()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"... and not incompletely imported"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"query checking added 05\/21\/01, sz9"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class oclexpander"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip first parameter == return type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#getnotationprovidertype()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only look at classes..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"abstract classes are hardly ever singletons"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there is an attribute which is not static => no problem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only look at classes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check for singleton stereotype, uninitialised instance variables and outgoing associations, as per javadoc above."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"found no such attribute"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we only look at singletons"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crsingletonviolatedonlyprivateconstructors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: for historical reasons true == hide, so we need to invert the sense of this"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class cremptypackage"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"at this stage during loading, the diagrams are not created yet - so we have to store this name for later use."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"pw.close();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"prevent no changes..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"project.setfile(file);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for andromda profiles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#updatelisteners(java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"give the parser a map of model elements keyed by their uuid. this is used to allocate figs to their owner using the \"href\" attribute in pgml."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create it [here, opaqueexpression which is the first choice] note that if we edit the initial value in the diagram (double clic) it was replaced by an opaqueexpression"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we get a 2nd error, just ignore it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have to give a message to user and set the system to unsaved!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"should never happen - something's really wrong"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.umldiagram#getumlactions()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"main parsing methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.io.inputstream#close()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"boolean upgraderequired = !checkversion(fileversion, releaseversion)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"upgrade is in the way for uml2 projects, so we turn it off in that case:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load .argo project descriptor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.todoitem#select()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load the rest"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there are 2 possibilities: either (1) we follow the traditional notation philosophy, and set the tagged value to false, or (2) we restore to the pristine situation and delete the taggedvalue (whatever the value was). i chose the latter (mvw)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"first read the .argo file from zip"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep reading till we hit the <argo> tag"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the version from the tag."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip 1 lines"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"loop round loading the diagrams"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private eventlistenerlist listenerlist = new eventlistenerlist();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep reading till we get the left bracket of an opening tag"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compare each following character to see that it matches the tag we want"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we also want to match with the right bracket of the tag or some other terminator"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"read the name of the child tag and then reset read position back to that child tag."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip any whitespace till we should be on an equals sign."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip any whitespace till we should be on a quote symbol."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.cognitive.critics.wizmename#doaction(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no other uses of string in pgmlhandler"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.abstractactionaddmodelelement#getdialogtitle()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle other uses of <private> contents"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if any of the values are null, ignore the element."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"|| model == null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"class to display graphics for a uml objectflowstate in a diagram.<p> the fig of this modelelement may either represent the following umlelements: <p> (1) an objectflowstate with a classifier as type, or <p> (2) an objectflowstate with a classifierinstate as type. <p> in both cases (1) and (2), the fig shows the underlined name of the classifier, and in the latter case (2), it shows also the names of the states of the classifierinstate. <p> in the examples in the uml standard, this is written like<pre> purchaseorder [approved] <\/pre> i.e. in 2 lines. the first line is underlined, to indicate that it is an instance (object).<p> the fact that the first line is underlined, and the 2nd not, is the reason to implement them in 2 separate figs.<p> todo: allow stereotypes to be shown. @author mvw"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for a match to be found, it has to have the same owner, and the same long class name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.clarifier#hit(int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new diagram wide settings block which is backed by the project-wide defaults that we were passed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore non-private elements within fignode groups"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"discard class name, x y w h"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the owner should always have already been set in the constructor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"happens when 'is' comes from a zip file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"continue with null stream, readdiagram(...) will take care of it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: localize these"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this would be solution (1): model.getextensionmechanismshelper().setdatavalues( taggedvalue, new string[] {\"false\"});"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no dot then this must be a top level fig and can be assumed to be a fignode."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fignodemodelelements should match here"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figedgemodelelements should match here (they have no bounds)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"<model> is not used in current implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.abstractactionaddmodelelement#getchoices()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try-catch only the jarfile instantiation so we don't accidentally mask anything in argojarclassloader or processjarfile."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fall back to gef's handling if we couldn't find an appropriate constructor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mywriter,"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"empty constructor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#todoitem(object, designer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for compatibility with older format"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#predicate( java.lang.object, org.argouml.cognitive.designer)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"write out header section"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note we assume members are ordered correctly already"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's initialize the progressmgr"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"run through any stylesheet upgrades"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.cognitive.critics.wizmename#makepanel(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't use systemid here or it will get opened in preference to inputstream."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml 2.x files could also contain a profile model. try again with uml:profile as main tag."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"finding children for \" + o.getclass());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's update the progress"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we're trying to load a file from a future version complain and refuse."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.cognitive.critics.umlwizard#getnumsteps()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"to be really sure, let's add the operation that is linked to the action in the model, too - if it is not listed yet. we need this, incase an operation is moved out of the package, or maybe with imported xmi..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"buffer containing characters which have been decoded from the bytes in inbb."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"regex pattern for xml declaration and, optionally, doctype backslashes are doubled up - one for java, one for regex"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"convert from bytes back to characters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"rewind our character buffer"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove anything that matches our pattern"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.treemodelumleventlistener#modelelementadded(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove null characters at the end"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reencode the remaining characters as bytes again"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and write them to our output stream"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip the <?xml... first line"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nop"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is expected to be safe, don't add a try block here"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cat.debug(\"added todoitem: \" + _headline);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.perspectivemanagerlistener#addperspective(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.xml.sax.contenthandler#startelement(java.lang.string, java.lang.string, java.lang.string, org.xml.sax.attributes)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.xml.sax.contenthandler#endelement(java.lang.string, java.lang.string, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.xml.sax.contenthandler#characters(char[], int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test creating modelelements from a given notation, and then re-generate the notation-string again, and check if they are equal. some of these tests are not very usefulll, since they may fail on white space differences. todo: white space should best be ignored."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these strings match the xml element names in the argo.tee exactly."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following is deprecated, but can never be removed to preserve backward compatibility with old project files"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"protected methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"abstract methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"non-abstract methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"e.g:org.argouml.uml.generator.ui.classgenerationdialog -> poseidon.jar"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class saxparserbase"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stop ui interception"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"jaap branderhorst 2002-23-09 added next lines to link parameters and operations to the figs that represent them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"possibly use the following instead memberfilepersister persister = new diagrammemberfilepersister();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"class methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class xmltokentablebase"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these are the file formats i know about:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure this setting exists in the configuration file to facilitate changing:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.menulistener#menucanceled(javax.swing.event.menuevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"is row at top of screen?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the current property occurs a second time in the given list of properties, then skip it:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"filefilter api"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this check for files without extension..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"}"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class xmlelement"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for andromda"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tested with fabricated xmi - ok."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.behavior.state_machines.actionnewevent#createevent( java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"thin bar to show current used"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the contents match what we expect"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load profile name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"changing the sequence only"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"yes, scroll up one row"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get a list of uml metaclass names from the xmi document. <p> though some of the dom methods such as getattributes may return null values under other conditions, in the context of this test and assuming a valid xmi file none should occur. <p> hence there is no special checking for those abnormal cases, allowing the test to fail simply with a nullpointerexception, with this comment indicating that either the input data is incorrect or the test needs to be improved."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"testing: works ok."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there is only one package in the model, we should suppose it's the profile model, if there is more than one, we take the ones marked as <<profile>>"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now we have to see if any state in any statemachine of classifier is named [name]. if so, then we only have to link the state to c."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load profile dependencies"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up the property panels for critics:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have our own uml2 profile, but it is not used. instead, by the following line the build-in eclipse uml2 standard profile and primitive types implementation are used."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"missing wfrs"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"association class 4.5.3.2 [1]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.3.2 [2]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"behavioral feature 4.5.3.5 [2]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: partly overlaps croppendvsattr."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.3.20 [4]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#casealogicalexpressiontail(tudresden.ocl.parser.node.alogicalexpressiontail)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"usecase 4.11.3.5 [2]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"classifier 4.5.3.8 [5]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generalizableelement 4.5.3.20 [1]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"datatype 4.5.3.12 [1]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actor 4.11.3.1 [1]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"namespace 4.5.3.26 [2]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"general"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"usecase 4.11.3.5 [1]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actor 4.11.3.1 [2]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tested ok, except in some cases, depending on the sequence of the eps. probably the implementation of \"forall (x, y | ...\" does not cover all combinations."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"usecase 4.11.3.5 [4]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"usecase 4.11.3.5 [3]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there are more than one suitable operation, then we pick the first one."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actionstate 4.13.3.2 [3] issue 715"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no default type for uml2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the uml profile is always present and default"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register the built-in profiles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if an exception is raised file is unusable"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this profile could have not been loaded when the default profile configuration was loaded at first, so we need to do it again"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to delete if we couldn't get the packages"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we found an old-style name, update it to the new package name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clean up our model and the extent that we read profile in to"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the names didn't change again"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if element is an associationend use the namespace of containing association"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if one side is null, compare with the equality operator"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"xxx: hypotheses for afeaturecall: fwd = op, val = head"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"xxx hypothesis: no time expression (inv)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseaconstraint(tudresden.ocl.parser.node.aconstraint)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseaclassifiercontext(tudresden.ocl.parser.node.aclassifiercontext)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these operations are ok for lists too"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"ocl feature call: \" + subject + \"\"+ type +\"\"+ feature + \"\" + parameters);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"xxx this should be done in collectionsmodelinterpreter but it can't trigger another invokefeature..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\/** * logger. *\/ private static final logger log = logger.getlogger(defaultoclevaluator.class.getname());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"ocl: \" + ocl);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"propagate"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"although operation and signal are peers in the uml type hierarchy they share the attributes isroot, isleaf, isabstract, and specification. concurrency is *not shared and is specific to operation."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if test is ok this element should not be in the result set"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these operations are ok for bags too"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.1 abstraction"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.3 association"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"additional operation 4.5.3.1 [1]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.5 associationend"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.actionadddiagram#isvalidnamespace(object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"additional operation 4.5.3.3 [1]"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.6 attribute"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.8 binding"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.9 class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.10 classifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo specifiedend??"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.11 comment"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.12 component"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"additional operation in 4.5.3.9"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no, scroll down one row"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.18 elementownership"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.19 enumeration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.20 enumerationliteral"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.21 feature"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crtoomanytransitions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"additional operation in 4.5.3.20"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.23 generalizable element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.26 method"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"avoiding null names"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"as extended by 4.6.2.2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"additional operations in 4.5.3.25"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.29 node"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.30 operation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the method"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.31 parameter"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.35 programminglanguagedatatype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the icon:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.icon#geticonheight()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.component#getminimumsize()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if location is null here the position of the new fignode is set after in org.tigris.gef.base.modeplace.mousepressed(mouseevent e)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generates a string representation for the provided attribute. the string representation will be of the form: visibility name [multiplicity] : type-expression initial-value {property-string} depending on settings in notation, visibility, multiplicity, type-expression, initial value and properties are shown\/not shown."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.38 templateargument"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.39 templateparameter"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crtoomanyoper"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.11.3.5 usecase"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.3.2 associationclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the operation allconnections results in the set of all associationends of the associationclass, including all connections defined by its parent (transitive closure)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if curhandle.index is 0 or 2, the adjacent region is the previous region but if it is 5 or 7, the adjacent region is the next region. curhandle.index show which corner of the bound we are dragging."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.6.2.3 stereotype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stereotypeconstraint ?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.6.2.4 tagdefinition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.6.2.5 taggedvalue"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.kernel.projectmember#repair()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add adapters that do nothing for keyboard and mouse actions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"discard the event if its source is not from the correct type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"guard against error conditions if climb search wasn't successful"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sets the mouse cursor to hourglass mode"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"start receiving all events and consume them if necessary"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"activate the glass pane capabilities"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stop receiving all events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parameterlist is guaranteed to contain at least \"(\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"deactivate the glass pane capabilities"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sets the mouse cursor back to the regular pointer"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no initialization required"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class spacerpanel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if dm is the top state of the statemachine, then it is not supposed to have outgoing transitions."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.datatransfer.transferable#gettransferdata(java.awt.datatransfer.dataflavor)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.datatransfer.transferable#isdataflavorsupported(java.awt.datatransfer.dataflavor)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class clclassname"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.cognitive.critics.umlwizard#setsuggestion(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"called when the user has pressed save. performs \"save\" in all tabs."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"climb the component hierarchy until a rootpanecontainer is found or until the very top"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class splashpanel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.ui.wizard#cangonext()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add settings from the settings registry."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep track of the visible window associated w\/the component useful during event filtering"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"updates stereotype setting, adds all children per treemodel 'build on demand' design. @see javax.swing.event.treewillexpandlistener#treewillexpand(javax.swing .event.treeexpansionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"show a chooser dialog for the file name, only xmi is allowed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if drop out, we're ok"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a toolbar was requested, create an empty one."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we got what we started with"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"increase width to accommodate all tabs on one row."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: localize"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class tabtext"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umluserinterfacecontainer#formatnamespace(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a recursive call from setvisible(), just return"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have to tell the settings tab in which project the settings reside:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#indexof(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we only request focus the first time we become visible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle the same as an explicit cancel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"defer work until fetched\/visible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"------------- rule management"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"slope of the line we're finding the normal to is slope, and the normal is the negative reciprocal slope is (p1.y - p2.y) \/ (p1.x - p2.x) so recip is - (p1.x - p2.x) \/ (p1.y - p2.y)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"----------- name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"------ all rules"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: factor out @param rule the rule to be added"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.treeexpansionlistener#treecollapsed( javax.swing.event.treeexpansionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"put the current pane in a scroll pane."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class stylepanelfigtext"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.umluserinterfacecontainer#getprofile()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"note: these must stay in this order to match rendering styles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we aren't able to resize neither the top bound from the first region nor the bottom bound from the last region."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"change the fill colour"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"change the line colour"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't do anything if we don't have a fig."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the text in the field, and don't do anything if the field is empty."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"how to handle empty target lists? probably the tabprops should only show an empty pane in that case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"parse the string as if possible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignored - will never be called"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add preloading progress bar?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"jasonsthemes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: the src_visibility tag doesn't appear to be created anywhere by argouml currently"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo - lets pass in project as a constructor argument"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listen to name changes in the path (useful for e.g. package):"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make up a default"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"lafclass == null ||"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set to the default laf"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"top, left, bottom, right"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set a custom laf"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.jtree#firetreecollapsed(javax.swing.tree.treepath)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.jtree#setmodel(javax.swing.tree.treemodel)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it looks better if the height increases, too"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the model is changed - job done"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: 10 and 120 were found by trial and error. calculate them."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"pack();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not localized:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class aboutbox"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these are the positions of child figs inside this fig they must be added in the constructor in this order. for now the name must not be last as this would force zero width lines (until gef is fixed)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"saves the project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return true if the given object is a valid node in this graph. @see org.tigris.gef.graph.mutablegraphmodel#canaddnode(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mvw: we should use default font sizes as much as possible. btw, this impacts only the width, and reduces readibility:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setfont(lookandfeelmgr.getinstance().getsmallfont());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the stereodim has height=2, even if it is empty, hence the -2 below:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this enables tooltips for tree; this one won't be shown:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"------------ methods that override jtree methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"with a name..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"look for stereotype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use default formatting for any other type of uml element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the event source is the stub state's referenced state or one of the referenced state's path."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"------------- other methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"labels at the left ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and when the class changes name:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"... and fields at the right."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the user's full name:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the ends from the association (we know there are two), and the types associated with them."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the user's email:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the project description:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this non-editable field shows the version of the argouml that last saved this project:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is no default description."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"defer all work until we're actually needed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critic#getcriticizeddesignmaterials()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"class accessors"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: the following can be used when we drop java 5 support or when an imageio gif writer plugin is bundled cmd = new savegifaction2(translator.localize(\"action.save-gif\"));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"leave logging commented out by default for efficiency log.debug(\"determine rendering for: \" + value); log.debug(\"show icon: \" + showicon);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.cmd#undoit()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.api.progressmonitor#setmaximumprogress(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"accumulate a bounding box for all the figs in the group."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private jcheckbox jchbbold = null;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphlistener#noderemoved(org.tigris.gef.graph.graphevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private jcheckbox jchbitalic = null;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize font faces list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actioncreatepseudostate"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"most of this code originates from actionopenproject."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initialize font sizes list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.sourcepathcontroller#deletesourcepath(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mouselistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep d even or odd, just like the line width:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphlistener#graphchanged(org.tigris.gef.graph.graphevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load project at slightly lower priority to keep ui responsive"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#isempty()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class projectbrowser"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importcommon#iscreatediagramschecked()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#getdestination()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keylistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listselectionlistener implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"diagrams are not placed in search results"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no related"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now remove the ones already applied."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: tabs for class, state, usecase, help"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load of the new project just reuse of the actionopen object"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"empty implementation - we only handle mouseclicked"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the south panel always has tabs - but they are added (later) elsewhere."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the element from available list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"loads the project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.windowlistener#windowiconified(java.awt.event.windowevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default tab todo"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"special case for backward compatibility"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the path of the model to the search path, so we can read dependent models"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select prop panel if current panel is not appropriate for selected target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.xmifilepersister#issaveenabled()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not visible any more - so remove as listener"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the previously selected tab"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the other tabs need to be updated depending on the selection."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if center points are \"close enough\" we just adjust the endpoints of the line a little bit. otherwise we add a jog in the middle to deal with the offset. todo: epsilon is currently fixed, but could probably be computed dynamically as 10% of the width of the narrowest figure or some other value which is visually not noticeable."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we could check for base class of the stereotype but the condition normally covers it all."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: quick return here for target == null? - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.sourcepathcontroller#getsourcepath(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.umldiagram#setnamespace(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove duplicates and take care of getowner() and remove nulls:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there is an outgoing association => no problem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"---------------- listener management"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"since there are no buttons on this panel, we have to set the size of the buttonpanel, otherwise the title would not be aligned right."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"------------- tree structure"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see getvalue(), setvalue()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.stereotypecontainer#setstereotypevisible(boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a timer."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mount the glasspane on the component window"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figsinglelinetext#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keep track of the glasspane as an instance variable"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name. width is the same as the cover, height is the default. the text of the name will be centered by default. in the same place as the stereotype, since at this stage the stereotype is not displayed. being a classifier role it is underlined"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class stylepanel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.memberfilepersister#save(org.argouml.kernel.projectmember, java.io.outputstream)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"getcontentpane().add(_menubar, borderlayout.north);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"calculate the insets for the *jtree*, not the viewport the tree is in. this makes it a bit messy. @see java.awt.dnd.autoscroll#getautoscrollinsets()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"allows me to ask \"do you want to save first?\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ok, we've been told to scroll because the mouse cursor is in our scroll zone. @see java.awt.dnd.autoscroll#autoscroll(java.awt.point)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add listener for project changes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modelimplementation#getxmiwriter(java.lang.object, java.io.writer, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add a listener to focus changes. rationale: reset the undo manager to start a new chain."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load modules specified by a system property. modules specified by a system property is for running modules from within eclipse and running from java web start."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we get many many events (why?), so let's filter:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the todopane"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we delete a figedge or fignode we actually call this method with the owner not the fig itself. however, this method is called by actiondeletemodelelements for primitive figs (without owner)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.jframe#getjmenubar()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.saxparserbase#iselementofinterest(string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.component#setvisible(boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"toolbar boundary is the area between the menu and the status bar. it contains the workarea at centre and the toolbar position north, south, east or west."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.pathcontainer#setpathvisible(boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add target listeners for details panes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.dragsourcelistener#dragenter(java.awt.dnd.dragsourcedragevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"convenience methods to return saved width and height values"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in theory there can be multiple details pane (work in progress). it must first be determined which details page contains the properties tab. bob tarling 7 dec 2002"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class windowcloser"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the project changed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"north, south, west, east, south-west"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"designer.thedesigner.gettodolist().removeallelements();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update all panes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this method is invoked from several places, so we have to check whether if the project uri is set or not"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"does the file really exists?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"project file doesn't exist. let's pop up a message dialog.."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.xml.sax.entityresolver#resolveentity(java.lang.string, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"..and let's ask the user whether he wants to save the actual project into a new file or not"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"eclipse uml2 implementation classes end with \"impl\" $non-nls-1$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save action has been cancelled"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.events.argonotationeventlistener#notationadded(org.argouml.application.events.argonotationevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"prompt the user for the new name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's call the real save method"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"repair any errors in the project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"e.g. for an operation: if pce.getsource() == modelelement && event.propertyname = \"parameter\" if event instanceof addassociationevent get the parameter instance from event.newvalue call model to add listener on parameter on change of \"name\", \"type\" else if event instanceof removeassociationevent get the parameter instance from event.oldvalue call model to remove listener on parameter on change of \"name\", \"type\" end if end if"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notification of menu bar"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"simulate some errors to repair. replace with junits - bob"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"change to true to enable testing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a fig with a null owner"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a fig with a null layer"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a fig with a removed model element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's save this project in the mru list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"defer initialization until we're visible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.dragsourcelistener#dropactionchanged(java.awt.dnd.dragsourcedragevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's save this project as the last used one in the configuration file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uri = persistencemanager.getinstance().fixuriextension(theprojecturi);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.persistence.progresslistener#progress(org.argouml.persistence.progressevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is temporary. load project should create a new project with its own undomanager and so there should be no command"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure save action is always reinstated"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.api.progressmonitor#updatemaintask(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"filled in later"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importsettingtypes.uniqueselection#setselection(int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"----- setup similar to the super() implementation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make this change persistant"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there is persistant state for this toolbar, respect it, or add it to persistance data"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"queue to event thread to prevent race during close"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test an unknown file"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add toolbar."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register popup menu with toolbar."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these settings are needed to make the progressmonitor pop up early"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.windowlistener#windowdeiconified(java.awt.event.windowevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.notation.notationname#samenotationas(org.argouml.notation.notationname)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.events.argogeneratoreventlistener#generatorchanged(org.argouml.application.events.argogeneratorevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.sourcepathcontroller#setsourcepath( java.lang.object, java.io.file)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importsettingtypes.uniqueselection#getdefaultselection()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importcommon#getimportlevel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: concatenate? - tfm overwrite for now"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.settingstypes.booleanselection#isselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class stylepanelfigrrect"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let the parent do its refresh."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importcommon#isdiagramlayoutselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"lets redraw the box"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.component#getpreferredsize()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"c.gridy = 0; c.gridx = 4; jlabel threelabel = new jlabel(\"asd\"); gb.setconstraints(threelabel, c); _mainpanel.add(threelabel);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"called when the user selects a tab, by clicking or otherwise. @see javax.swing.event.changelistener#statechanged(javax.swing.event.changeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importcommon#ischangedonlyselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we don't know what thread events will be delivered on, so make sure we run swing methods on the swing thread"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this instead of the label ??? displaypane.setborder(new titledborder( translator.localize(\"display: \")));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"eclipse uml2 implementation classes often start with \"uml\" $non-nls-1$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add in front of the others add the label in front of the \"pane\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and finally, adjust the scrollbars to show the fig"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.treewillexpandlistener#treewillcollapse(javax.swing .event.treeexpansionevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"% thresholds for bar color changes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"record the changes in the instance variables of our parent, tell gef and trigger the edges to reconsider themselves."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"making it possible to jump to the modelroots"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"readonly class: no generalization, no association to self"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"timer action method. periodically update our stats and force a repaint."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.ui.wizstep#settarget(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"virtual memory (heap) stats"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"thin bar to show current allocated heap size"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"c.gridy = 0; c.gridx = 1; jlabel offlabel = new jlabel(\"off\"); gb.setconstraints(offlabel, c); _mainpanel.add(offlabel);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: assumes public, user pref for default visibility? do i have to check the namespace here? (toby)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"how to handle empty target lists? probably the multieditorpane should only show an empty pane in that case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: qualifiers (e.g., const) todo: stereotypes..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private jpanel constraintstab = new jpanel();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the child is sometimes not found when the tree is being updated"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private jtabbedpane tabs = new jtabbedpane();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tabs.setminimumsize(new dimension(300, 250));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importsettings#iscreatediagramsselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private jpanel modifiedtab = new jpanel();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the activitygraph."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"private jpanel tagvalstab = new jpanel();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"open space at gridy = 2;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mainpanel.add(north, borderlayout.north);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importsettingsinternal#isdiagramlayoutselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"any type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.list#listiterator()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if this fails, then there is a problem... dthompson 29\/12\/2008: it seems that the returned value is irrelevant here, so i assume that the purpose of this call is just to throw an exception in case of a problem."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this text is for the developers. it doesn't need to be localized."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#modelchanged(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these shouldn't really be <br> instead of <p> elements, but the lines all get run together when pasted into a browser window."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initconstraintstab(); tabs.addtab(translator.localize(\"tab.constraints\"), constraintstab); tabs.setenabledat(3, false);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.check.types.type#navigateparameterized( java.lang.string, tudresden.ocl.check.types.type[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"inittagvalstab(); tabs.addtab(translator.localize(\"dialog.find.tab.tagged-values\"), tagvalstab); tabs.setenabledat(2, false);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"secondly we check the previous model structure:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class finddialog"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we got back null we interpret this as meaning delete the reference to the extension point from the use case, otherwise we set the fields of the extension point to the values in newep."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"name += \" in \" + dname;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a string of the form \"location\". this will be confused by the string \":\", so we pick this out as an instruction to clear both name and location."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the name and icon:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"help tab is 0"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"dialog box to list all critics and allow editing of some of their properties. <p> todo: supported goals, critic network."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end rungc_actionperformed()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class predicatemtype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"follow well-formedness rule for a class [2]. determine the owning namespace for the statemachine:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end updateinfo()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class navigatorpane"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end copy_actionperformed()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class systeminfodialog"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clean the history"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.poster#expand(java.lang.string, org.argouml.cognitive.listset)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"but exclude elements that enclose others, since their algorithms to calculate the minimum size does not take enclosed objects into account:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"super(translator.localize(\"action.size-to-fit-contents\"));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.util.namespace.namespace#getcommonnamespace( org.argouml.uml.util.namespace.namespace)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"unsupported."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.modecreatefigpoly#createnewitem(java.awt.event.mouseevent, int, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only resize elements which the user would also be able to resize:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importsettingsinternal#ischangedonlyselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the name:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if location is non-null, convert to a rectangle that we can use"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's load the default shortcut for every action"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionfind"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#getnamebounds()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generate menu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it should never go here!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"view menu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"file menu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.util.collection#toarray()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"align submenu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"edit menu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create menu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"arrange menu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#updatelisteners( java.lang.object, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"help menu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this id is used as default_id !"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionaboutargouml"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"distribute submenu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.cognitive.critics.critic#addsupportedgoal(org.argouml.cognitive.goal)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionpagesetup"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"skip the 2 lines <?xml version=\"1.0\" encoding=\"utf-8\" ?> <!doctype todo system \"todo.dtd\" >"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"trap focus traversal keys also"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's add the key printing logic"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"both lists have the same length."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we've found the matching tag but do we have the correct instance with matching attributes?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we drop out here, there was no match and we have no problem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a not-default current shortcut was added, then we have to save it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figsinglelinetext#removefromdiagram()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the actual is not going to be saved, then try to remove it (as it could have been cancelled)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this pair of params where the same. lets check the next pair."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no modifiers - let's check if the key is valid"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"method 1: (collect data and assign later in endelement() method). hashtable<string, string> ht = new hashtable<string, string>(); ht.put(\"classname\", classname); ht.put(\"figclassname\", figclassname); ht.put(\"ownerhref\", ownerhref); ht.put(\"angle\", angle); ht.put(\"offset\", offset); pathitemattrs.add(ht);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"middle of shortcut"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add last recently used list _before_ exit menu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#outaemptyfeaturecallparameters(tudresden.ocl.parser.node.aemptyfeaturecallparameters)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keystroke f7 = keystroke.getkeystroke(keyevent.vk_f7, 0);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and exit menu entry starting with separator."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this used to be deferred, but it's only 30-40 msec of work."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now, let's set up the \"selected action\" container"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get all the features (giving up if there are none). then loop through finding all operations. each time we find one, we compare its signature with all previous (held in collection operseen), and then if it doesn't match add it to the collection."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"generate.add(actions.generateweb);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the help menu item."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the pathitemplacement was unknown, leave the diagram with the default settings."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.windowlistener#windowclosed(java.awt.event.windowevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the edit toolbar based on the menu. all menuitems that have an icon are presumed to be based upon an action, and these actions are used in the toolbar."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sethelpmenu(help);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this code has to go within the startelement block after the strings have been matched."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"component or action"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set maximum length of menu entry"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.application.events.argonotationeventlistener#notationprovideradded(org.argouml.application.events.argonotationevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"jmenuitem item = _filemenu.add(new actionreopenproject(filename));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#textedited(org.tigris.gef.presentation.figtext)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the text is used by the event handler for opening the project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create all nessessary configuration keys for lru"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"holds file menu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"text is short, tooltip is long"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"read existing file names from configuration"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"empty entry stops reading --> last line!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is the recent count"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delete all existing entries"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.io.filefilter#accept(java.io.file)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add new entry as first entry"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add other existing entries, but filter the just added one"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save count"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and store configuration props"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.umlhelper#addlistenerstomodel(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionexit"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"box.setlocationrelativeto(jframe);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#removemodeleventlistener( java.beans.propertychangelistener, java.lang.object, java.lang.string[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionhelp"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"instantiation not allowed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionprint"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's add the table, inside a jscrollpane"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"init from config read number, write result as new default and prepare keys"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get already existing names from menu actions real file names, not action names !"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#addclassmodeleventlistener( java.beans.propertychangelistener, java.lang.object, java.lang.string[])"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's enable the radiobuttons container"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"amount to increment y position by for each node placed. we pack them densely on the assumption that the user is going to split them into at least two swimlanes."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"updating the radiobuttons container's title"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's select the correct radio button"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#removeclassmodeleventlistener( java.beans.propertychangelistener, java.lang.object, java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no shortcuts --> none"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"current shortcut == default --> default"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"customized shortcut --> custom"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the values"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's reload the shortcuts"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.corehelper#clearstereotypes(java.lang.object) all methods below similarly override methods in corehelper."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"saving shortcuts"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the id does not look like a top-level fig then we can assume that this is an id of a figedgeport inside some figedge. so extract the figedgeport from the figedge and return that as the fignode."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a shortcut has been select then we have to check if the actual action is in conflict with other ones"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#startpumpingevents()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"blanking the old action's shortcut.. and now refreshing the table."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"re-selecting the old row, without changing the target - and without throwing another listselectionevent!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"give priority to standard documentation tag"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's change the target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we are looking first to match with 3 different constructor types. we would not expect a fig to have any mix of these. any constructor other than these should be deprecated so we look for these first. fig(diagramedgesettings, diagramsettings) fig(object, rectangle, diagramsettings) fig(rectangle, diagramsettings)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"duplicate shortcut not found; let's check for duplicates"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there's a duplicate: let's recheck if there is a conflict"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.pseudostatekind#getdeephistory()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"updating the shortcut field"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.concurrencykind#getconcurrent()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"updating the table data"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.aggregationkind#getcomposite()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the shortcut has already been assigned to another action!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"verify snoozeorder starts off not snoozed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the given object is a keystroke instance, then we ca"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's update also the actions array"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.changeablekind#getchangeable()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.pseudostatekind#getchoice()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.directionkind#getoutparameter()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the default nr of rows is 8, but since we have 9 perspectives by default now, setting to 9 is nicer."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml 1.3, the name is the only place to store text. in uml 1.4, there is a body as well, but some tools still seem to use name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check if multiple items are selected."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"1. a noneditable applied profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just no item added in this case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"designgoalscm checks if the critic isrelevanttogoals of the designer this value is always true for the critic base class so designergoal should always return true in this condition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"3. the editable unapplied profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.abstractactioncheckboxmenuitem#togglevalueoftarget(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end of profile section"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: these should get replaced immediately by the creating initialization code, but make sure we've got a default just in case."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't delete last top level model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check that the model was initialized with one goal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"determine if only diagrams are in the target list."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.concurrencykind#getguarded()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"x nodes and x edges\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"extra care to be taken since allposters can be reset while this method is running."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"test if this element can be contained by the target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.orderingkind#getordered()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"iterate through all possible model elements to determine which are valid to be contained by the selected target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionaddexistingrelatednode"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"... otherwise we select the item below the mousepointer."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the dialog is modal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"unimplemented - we only care about expanding"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class explorermouselistener"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fire all of the profile events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"does nothing."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"need to update the selection state."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the elements"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"block added by bobtarling 8-jan-2002 set the checkbox on or off according to the selected value of the action. if no selected value is found then this defaults to true in order to remain compatible with previous versions of this code."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"scan the visible rows for duplicates of this elem and select them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check which targetmanager method to call"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.pathcontainer#ispathvisible()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we must call the correct method on targetmanager for each added or removed target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we can't remove the targets in one go, we have to do it one by one."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"settargets(e.getnewtargets());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"at the top right bottom left bottom"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"override superclass to do nothing. fill property cannot be changed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sortjlistmodel(rulelibrarylist);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.orderingkind#getunordered()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.directionkind#getreturnparameter()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.activitygraphshelper#findclassifierbyname(java.lang.object, java.lang.string) all methods below similarly implement methods from activitygraphshelper"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the ones already selected (if a perspective is selected)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.aggregationkind#getnone()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.scopekind#getclassifier()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importsettings#getimportlevel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the label (which shows the number of rules)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.pseudostatekind#getfork()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"must add an editable list of new explorerperspective's to the list model so that the original ones are not changed in the case of a cancel action by the user."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.reveng.importsettings#isminimisefigsselected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the newly selected item in the library list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.aggregationkind#getaggregate()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name of the umldiagram represented by this node has changed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml model events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notation events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle remove for non-uml elements (e.g. diagrams)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the selected targets (uml modelelements) from the targetmanager."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"to persist to and from zargo (zipped file) storage containing seperate xmi, argo, plgml and todo zip entries. @author bob tarling todo: review use of this against zargofilepersister - bob"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"project events"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4.5.2.28 namespace"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get one of the default profile dirs, if available (as a default value for the following save dialog)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register it as a user profile"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if laf is metal (either set explicitly, or as the default)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load user perspectives"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the perspective name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure there are some rules..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the rules"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the rule name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the rule"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"rule name but no rules"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this method can be called only if there's a valid selection so go ahead and remove whatever's selected."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the perspective"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no user defined perspectives"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"one last check that some loaded."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figeditablecompartment#getnotationtype()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"works for both statediagram as activitygraph"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enter here go rules only relevant for uml 2 empty for now"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the drag gesture recognizer fires events in response to drag gestures in a component."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"specifies valid actions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"eliminates right mouse clicks as valid actions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the cell renderer (which is a jlabel) for the path being dragged."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the layout manager would normally do this:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.dragsourcelistener#dragdropend(java.awt.dnd.dragsourcedropevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get a buffered image of the selection for dragging a ghost image"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now paint a gradient under the ghosted jlabel text (but not under the icon if any)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"slope = \" + theta \/ math.pi + \"pi \" + theta \/ math.pi * 180.0);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make the gradient ghostlike:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remember the path being dragged (because if it is being moved, we will have to delete it later)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we pass our drag image just in case it is supported by the platform."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"implements the source path controller. note: if requested in the future this could be returned from the language modules. todo: update this to use the uml 1.4 tagdefinition mechanism instead of uml 1.3 string type tag types. the tagdefinition can be made more specific so that it just applies to components with a <<sourcemodule>> stereotype or something similar. - tfm @author euluis @since 0.17.1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the destination is not a namespace, then abort:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.ui.actionnewdiagram#creatediagram()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the destination is a datatype, then abort:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we are sure \"dest\" is a namespace now."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.util.childgenerator#gen(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's check all dragged elements - if one of these may be dropped, then the drag is valid. the others will be ignored when dropping."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the rule from the library list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"empty implementation - not used."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figure out which row we're on."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we are not on a row then ignore this autoscroll request"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.explorer.relocatable#relocate(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now decide if the row is at the top of the screen or at the bottom. we do this to make the previous row (or the next row) visible as appropriate. if were at the absolute top or bottom, just return the first or last row respectively."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up a hover timer, so that a node will be automatically expanded or collapsed if the user lingers on it for more than a short time."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"isrootpath"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set timer to one-shot mode"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this class is a temporary wrapper around the gef undomanager. this will be changed when gef is modified to create commands and provide an observer interface for argouml to receive them. <p> todo: how does this relate to {@link org.argouml.kernel.defaultundomanager}? @author bob tarling"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"dragover\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.action#getvalue(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the next condition becomes false when dragging in something from another application."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a drag image is not supported by the platform, then draw my own drag image."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"rub out the last ghost image and cue line:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"access methods for program infrastructure."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just rub out the last cue line"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in any case draw (over the ghost image if necessary) a cue line indicating where a drop will occur."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"retrieve an existing glasspane if old one already exist or create a new one, otherwise return null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and include the cue line in the area to be rubbed out next time"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"types can probably contain operations, but we should not nag at them not having any."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"to prohibit dropping onto the drag source:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this element can be contained add a menu item that allows the user to take that action"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the destination is not a namespace, then reject:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"prevent hover timer from doing an unwanted expandpath or collapsepath:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clear the ghost image:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get new parent node"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"adding resolution for: \" + c.getclass() + \" \" + cancreate);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the model elements that are being transfered."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"conflict detected: showing a warning to the user, instead of saving shortcuts"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only accept copy or move gestures (ie link is not supported)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we can not remove this and have the application manage things directly based on the font, since only the names should be bold."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do this if you want to prohibit dropping onto the drag source..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the correspondence that we depend on doesn't change"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the dependent modelelements, such as the statemachine for a statechartdiagram:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for a deployment diagram, not just any namespace will do - we need a package."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove references for gc"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"strip all characters out of <var>s<\/var> that could not be part of a valid java identifier. return either the given string (if all characters were valid), or a new string with all invalid characters stripped out. this allows automatic conversion of strings containing punctuation and spaces to a resource name that can be looked up."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this should only be helpful for old garbage collectors."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"avoid doing this too early in the initialization process"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.modecreatepolyedge#mousereleased(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"avoid recursively updating the same child"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if one or the other is null or they are not equal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"types don't need a constructor."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"null elements represent new constraints, which will be added to the target the first time any actual editing takes place. this is done to ensure syntactical correctness of constraints stored with the target."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.defaulttreemodel#removenodefromparent(javax.swing.tree.mutabletreenode)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enumerate the current children of node to find out which now sorts in different order, since these must be moved"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"avoid our deinitialization here the node will be added back to the tree again"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for each reordered node, find it's new position among the current children and move it there"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"avoid our initialization here"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"collect the current set of objects that should be children to this node"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"handle weakexplorernodes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove the node from removeset"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove obj3 from weaknodes and newchildren"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we need to fill the whole pane, so that the description field can take all available space:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add any remaining nodes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it is the combo for \"order\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"order the new children, the dependencies cannot and need not be ordered"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only refresh the tab if the bounds propertychange event arrives. @see org.argouml.ui.stylepanel#refresh(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: what?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.stylepanelfig#settargetbbox()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"newly selected tab may have stale target info, so generate a new set target event for it to refresh it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"was \"\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"tabresults has really large preferred height, so divide in half to reduce size of dialog which will be sized based on this preferred size."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the responsibility of determining if the given target is a correct one for this tab has been moved from the detailspane to the member tabs of the details pane. reason for this is that the details pane is configurable and cannot know what's the correct target for some tab."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.ui.stylepanelfig#refresh()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"abstractions are represented in the inheritance node."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only return once per diagram so we don't, for example, find a class as a diagram element and also as a child of a package which is on the diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"jtabbedpane tabs = new jtabbedpane(); mainpanel.add(tabs, borderlayout.center); tabs.addtab(\"all diagrams\", alldiagrams);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name of this instance of diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a fig designed to be the child of some fignode or figedge to display the stereotypes of the model element represented by the parent fig. currently, multiple stereotypes are shown stacked one on top of the other, each enclosed by guillemets.<p> the minimum width of this fig is the largest minimum width of its child figs. the minimum height of this fig is the total minimum height of its child figs.<p> the owner of this fig is the uml element that is extended with the stereotypes. we are listening to changes to the model: addition and removal of stereotypes. <p> this fig supports showing one keyword as the first \"stereotype\" in the list. <p> there is no way to remove a keyword fig, once added. <p> todo: allow for uml2 style display where all stereotypes are displayed in the same guillemet pair and are delimited by commas. the style should be changeable by calling getorientation(orientation). the swidget orientation class can be used for this. @author bob tarling"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"--------------- tree nodes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"needs to happen after initialization is done & modules loaded"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.persistence.pgml.handlerfactory#gethandler( handlerstack, object, string, string, string, attributes)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the string <code>log4j.configuration<\/code> is the same string found in {@link org.apache.log4j.configuration.default_configuration_file} but if we use the reference, then log4j configures itself and clears the system property and we never know if it was set. if it is set, then we let the static initializer in {@link argo} perform the initialization."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml2, some elements are not to be shown"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the reason the gui is initialized before the commands are run is that some of the commands will use the projectbrowser."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't show a profile application"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't show element imports in profiles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't show extensions in profiles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"&& model.getfacade().isaproperty(o)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't show base_... properties in stereotypes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"notify the user that the modules in the list that are selected but not enabled were not possible to enable and that are not selected that we cannot disable. currently we just log this. todo: we could eventually pop up some warning window."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"n\/a\" or \"x nodes and x edges\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"also show unattached sequence diagrams:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a subclass of jpanel that can act as a tab in the detailspane or multieditorpane. added functionality:<p> spawning: when the tab is double-clicked, this jpanel will generate a separate window of the same size and with the same contents. this is almost like \"tearing off\" a tab.<p> todo: spawning of windows disabled in spawn()<p> title: this jpanel keeps track of its own title.<p> icon: this jpanel keeps track of its own icon; i.e. an arrow pointing to the panel that it gives details of.<p> orientation: this jpanel is orientable.<p> cloning: this jpanel may be cloned.<p> this class used to be named tabspawnable. renamed since it is not a tab, but a panel, and being spawnable is not any more its main purpose."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseafeaturecall(tudresden.ocl.parser.node.afeaturecall)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"transition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"disabled since it gives various problems: e.g. the toolbar icons get too wide. also the default does not give the new java 5.0 looks. swingutilities.updatecomponenttreeui(swingutilities.getrootpane(this));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.visibilitykind#getprotected()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"org.argouml.ui.tabtable tabmetrics tabjavasrc | tabsrc tabumldisplay tabhash"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if nothing selected, go to last selected target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.component#getsize()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"needed for argo startup :-("}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"|| !targets.contains(target)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"targets.remove(target);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"jpanel north = new jpanel(); north.setlayout(new borderlayout()); north.add(tabs, borderlayout.center);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"utilities usually do not require a constructor either"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"some subclasses will try to use this"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's load the current shortcut from the configuration (as a string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"implement set-like behaviour. the same element may not be added more then once."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cannot break here since an object can be multiple times in history"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figclass calls setboundsimpl before we set the stereotypefigprofileicon"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"commentedge - the owner of a figedgenote"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"write any left over bytes in the input buffer (perhaps from a partially decoded character)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check if there are new elements in the list if the old and new list are of the same size set the oldtargets to the correct selection"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if not found, try the parent namespace"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listen for the removal of diagrams from project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#outaenumliteral(tudresden.ocl.parser.node.aenumliteral)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figs on a diagram without an owning model element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class documentationmanager"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: needs localization"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class childgenrelated"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"adds all stereotypes defined at the top level namespaces"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and now remove them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the creation of the actual gui elements is deferred until they are actually needed. otherwize we have problems with the initialization."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"collect the to be removed stereotypes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we preserve the current (multiple) selection, if we are over part of it ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name of this type of diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add stereotypes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"loop through each element in the namespace, recursing."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if all targets are classifiers before adding an option to create an association between them all"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"instance"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for all other model elements, return any elements associated in any way"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"target may appear multiple places in the tree, so we don't stop here (but it's expensive to search the whole tree) - tfm - 20070904 targets.remove(t); break;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"adds all stereotypes defined at the profiles applied to the current project"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name of this type of modelelement"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name of this instance of modelelement"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the name of the parent diagram instance"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not safe to presume the destination is the comment"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this also sets the target as a convenient side effect"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the notationprovider for the classifierrole. <p> the syntax is for uml is: <pre> baselist := [base] [, base] classifierrole := [name] [\/ role] [: baselist] <\/pre><\/p> the <code>name<\/code> is the instance name, not used currently. see classifierrolenotationuml for details.<p> this syntax is compatible with the uml 1.4 specification."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is the tooltip of a comment link"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"class"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"??"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.event.treeexpansionlistener#treeexpanded( javax.swing.event.treeexpansionevent) updates the selection state."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"association"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"attribute"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we have no source and dest connector then we assume this is load of an old uml1.4 diagram from before this data was saved in pgml. for uml1.4 we can assume the source is first connection and destination is last connection stored in repository for this association."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"state"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"first argument: component to associate the target with second argument: droptargetlistener"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"operation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"interface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"link"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.lang.throwable#printstacktrace()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"umlreserved.add(\"document\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if requested height equals needed height then do nothing; it fits exactly."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"replace all occurances of offender with the name of the first offender"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ask the cell renderer to paint itself into the bufferedimage. make the image ghostlike."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check for all uppercase and\/or mixed with underscores"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"umlreserved.add(\"file\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"umlreserved.add(\"node\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mvw: these are the wfrs for datatype: [1] a datatype can only contain operations, which all must be queries. self.allfeatures->forall(f | f.ocliskindof(operation) and f.oclastype(operation).isquery) [2] a datatype cannot contain any other modelelements. self.allcontents->isempty imho we should enforce these wfrs here. ... so it is still possible to copy or move query operations, hence we should allow this."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"umlreserved.add(\"send\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the modelelement must have been deleted - ignore this - it will pass."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"umlreserved.add(\"destroy\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"self.allconnections->forall(ar|ar.participant <> self)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crcircularassocclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.visibilitycontainer#isvisibilityvisible()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(mattribute)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clear out queues! @@@"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy returned parameters because it will be a live collection for mdr"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.droptargetlistener#dragenter(java.awt.dnd.droptargetdragevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the name is only underscores"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is somewhat inconsistent with the design of the constructor that receives the root object by argument. if this is okay then there may be no need for a constructor with that argument."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.visibilitycontainer#setvisibilityvisible(boolean)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.tree.defaulttreemodel#insertnodeinto(javax.swing.tree.mutabletreenode, javax.swing.tree.mutabletreenode, int)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"umlreserved.add(\"copy\"); umlreserved.add(\"create\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class clattributecompartment"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remember that children are not treenodes but userobjects"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check whether constant, constants are often weird and thus not a problem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"why are we here?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the classifier does not have a name, then no problem - the model is not finished anyhow."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"added by eric lefevre 13 mar 1999: we must check if the figtext for attributes is drawn before drawing things over it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"abstract elements do not necessarily require associations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.management.notificationlistener#handlenotification(javax.management.notification, java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"added by eric lefevre 13 mar 1999: we must check if the figtext for operations is drawn before drawing things over it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#outastringliteral(tudresden.ocl.parser.node.astringliteral)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"special cases for use cases extending use cases and use case that are being included are not required to have associations."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"for use cases we need to check for extend\/includes actors cannot have them, so no need to check"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the association that triggered the critic. its just possible the association is no longer there, in which case we return null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class cloperationcompartment"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now create the five options"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in uml2, we don't want to see element imports in profiles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the names of the two ends. if there are none (i.e they are currently anonymous), use the argouml convention of \"(anon)\" for the names"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default (any other step) is to return nothing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the appropriate aggregation on each end"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.figedgemodelelement#updatelisteners(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"start is a composite aggregation of end"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"start is a shared aggregation of end"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end is a composite aggregation of start"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end is a shared aggregation of start"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no aggregation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.ui.fignodemodelelement#addenclosedfig(org.tigris.gef.presentation.fig)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"someone took our association away."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"first get the collection of elementresidence"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't finish if our parent can't"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can finish if it's step 0"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can finish if we're on step1 and have actually made a choice"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise we can't finish"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: the wfr doesn't restrict this to classifiers - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"performs critique asap. @see java.beans.propertychangelistener#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.droptargetlistener#dragexit(java.awt.dnd.droptargetevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"model.getfacade().getmodelelement("}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":")"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the script of the action is empty, (or only specifies arguments and no method name) then we generate a string based on a different model element:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"umlreserved.add(\"initial\"); umlreserved.add(\"final\"); umlreserved.add(\"fork\"); umlreserved.add(\"join\"); umlreserved.add(\"history\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check if there is no ocl_end; if so, the critic expression is not correct and can not be expanded"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.layout.layoutededge#layout()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"thestereotype.setstereotype(???);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"display related methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a different client to bind to the same supplier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crinterfaceallpublic"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return original string if no replacements made"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"types can probably have associations, but we should not nag at them not having any. utility is a namespace collection - also not strictly required to have associations."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we drop out there is no problem"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.static_structure.layout.classdiagramnode#isstandalone()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.graphfactory#makegraphmodel()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crcrossnamespaceassoc"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: different critic for packages consisting only of references to elements of other packages?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the next associationend, and its classifier. check the classifier is in the namespace of the association. if not we have a problem."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"original class was not abstract"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see tudresden.ocl.parser.analysis.depthfirstadapter#caseaunaryunaryexpression(tudresden.ocl.parser.node.aunaryunaryexpression)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see if there is already an element with the same name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.static_structure.layout.classdiagramnode#getweight()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crclassmustbeabstract"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class cruselessabstract"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.static_structure.layout.classdiagramnode#getrank()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"found a concrete subclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.uml.diagram.static_structure.layout.classdiagramnode#gettypeordernumer()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crtoomanyassoc"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class cruselessinterface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crcomponentinstancewithoutclassifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check that the parameter lists match."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crtoomanyclasses"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"utility is a namespace collection - also not strictly required to have operations."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.diagram#setname(java.lang.string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we don't consider secondary stuff."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.graph.mutablegraphmodel#containsnode(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"newedge.setdielement( graphchangeadapter.getinstance().createelement(gm, edge));"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end gef methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not allowed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: comments are on element in uml 2.x"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is a constructor."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a diagram. this 4-arg version is only for internal use. the 'namespace' argument is deprecated and not used in the new apis."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see profilemodelloader#loadmodel(profilereference)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this shouldn't be possible, but just in case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crtoomanystates"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the uml connection of the given type between the given model elements. default aggregation (none)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"commentlinks for comments. iterate over all the comment links to find the comment and annotated elements."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the connection is not valid unless both nodes are in this graph model."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"yeah right...we don't have an operation (and thus no"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"*important* - these must remain in order!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check that the names match."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"singleton, no instantiation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the special value <code>null<\/code> is used internally to indicate that the default value should be inherited from the next level of settings."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"both lists have the same length"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"repeat until no faults are fixed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"diagram appearance settings with project scope:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the array hasn't been flagged to indicate otherwise swap elements the elements and add again."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"some cached fonts based on the above settings"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we've got a local (uninherited) font name or size or if we've got no parent to inherit from recompute our cached fonts"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"types can probably have variables, but we should not nag at them not having any."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listen for name changes so we can veto them if we don't like them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.argouml.model.modeleventpump#stoppumpingevents()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get all the classes from the diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only classes with name need a constructor"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.command#execute()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the report"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we find an instance variable that is not a constant we have succeeded"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"de-selects the fig minimising & layout if we are not creating diagrams"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we can give up looking if we've hit both criteria"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class crnoinitialstate"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we drop out we didn't meet both criteria, and all is well."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"2. make sure that all figs are visible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create chooser for objects we are to import. old style modules get to provide their own (although i don't believe any of them do), while new style modules get the a chooser provided by us (which matches what the abstract class fileimportsupport used to provide)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"1. make sure all figs in the diagrams layer refer back to that layer."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"maybe we have a modelelement that is part of some other fig"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register for notification of any global changes that would affect our rendering"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"4. make sure all fignodes and figedges have an owner the report"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"3. make sure all figedges are attached to a valid fignode the report"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"5. make sure all fignodes and figedges have a valid owner the report"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, override in subclass."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we haven't succeeded in getting a namespace then abort"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this should always be true, but just in case..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the diagram to be laid out."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"point at which to start layout (initial state goes here). the x coordinate must be greater than half the width of the widest figure to be placed (because figures are centered on this location)."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"finalstate element for activitydiagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find our initial state"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"place all the nodes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"place the final state last with a little separation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the first editable extent (which is ok unless there is more than one editable extent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we're trying to set the namespace to the existing value then don't do any more work."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figclone.seperator = (figline) it.next();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"needed for project deletion"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we want to maintain a minimum size for the partition"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: midpoints for side handles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we removed the last partition, so now remove the pool, too:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no action required in case of veto on setname"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this test needed for project deletion"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: side handles"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listen to activitygraph deletion, delete this diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no action required"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the namespace of the activitygraph is changed!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"getactionsubactivitystate()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the space between the 2 text figs is: padding. @see org.tigris.gef.presentation.fig#getminimumsize()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"model.getactivitygraphshelper() .isaddingactivitygraphallowed(base);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we may return the following when the relocate() has been implemented."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we may return something useful when the relocate() has been implemented."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register for events from the type"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a map of partitions keyed by x coordinate"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"sort the x coordinates into order"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the state name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the layer is null, then most likely we are being deleted."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't listen to all property names we only need to listen to its \"type\", and \"remove\"."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the height of the blank space above and below the text figs:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and listen to name changes of the submachine"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"both have the same settings"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"both have the same owner"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add them back to front"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let our superclass sort itself out first"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the listeners to the newowner"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up the property panels for activity diagrams:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"overrule the single-line name-fig created by the parent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setblinkports(false); make port invisible unless mouse enters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: do we need to clone the stereotype(s)?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(mgeneralization)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the width needs to be > the height"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo:?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"((mclassifier)node).setnamespace(_collab.getnamespace());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the given edge to the graph, if valid. @see org.tigris.gef.graph.mutablegraphmodel#addedge(java.lang.object)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the stereotype. width is the same as the cover, height is its default (since the font is not yet set). the text should be centered."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"throws propertyvetoexception"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"getstereotypefig().setfilled(false);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class collabdiagramgraphmodel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in the rather unlikely case that we have no name, we give up."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the big port. color of the big port is irrelevant"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the cover."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"at least one stereotype is visible"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remember where we are at present, so we can tell gef later. then check we are as big as the minimum size"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the bounds of the bigport and cover"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"work out the padding each side, depending on whether the stereotype is displayed and set bounds accordingly"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"singleton"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this one behaves differently, hence seperated:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class figassociationrole"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the figs that make up this group"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"_x = first.getx(); _y = first.gety();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up the property panels for collaboration diagrams:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this is neat..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"elementordering(figures);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up the property panels for deployment diagrams:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"getters for plugin modules:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"so it still looks like a cube"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"_bigport.setbounds(x+1, y+1, w-2, h-2);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"nothing extra to do currently"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class predisstartpackage"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class statediagramgraphmodel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't do it for comment."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if a uml object is found, you can not remove selected elms."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check parameter types:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if nothing is selected, then not allowed to remove it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the returned list of figs is sorted according layout: from top to bottom."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if only figs without owner are selected, then you can remove them!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class predisfinalstate"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this presumes that the layer is set after the owner:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we only handle the case where a region has been removed:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if it is concurrent and contains concurrent regions, the regions are resized"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"none of the menu-items below apply when multiple modelelements are selected:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do we need to"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the event source is the owner stub state"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class figcompositestate"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the event source is the submachine state"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"targetmanager.getinstance().addtargetlistener(this);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignored - fixed rendering"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the submachine has got a new name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this indicates a change in association, not name - tfm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all states in the new reference state's path are added as listeners"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the source was the referenced state that has got a new name."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignored - rendering is fixed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the old submachine container is deleted as listener"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the referenced state or one of his path's states has got a new name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the new submachine container is added as listener"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all states in the old reference state's path are deleted as listeners"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"translate any old style sequence diagrams"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"translate any sequence diagrams create with any previous svn work in progress"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the first existing fignode and if it exists set the y position and height of _pers to be the same as it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore mouse clicks"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this assert fails for the testpropertypanels, file guitestpropertypanels.zargo:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assert w == h;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the machine state has been deleted from model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ignore w and h from here on."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"leave some space below the \"include\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"file load\/save gets done on a background thread, so we'll probably have to queue this to the swing event thread"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and the parameter of its operations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"noop - fixed rendering"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"setblinkports(false); make port invisble unless mouse enters"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there can only be one"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the group must be resized if a text field exceed the bounds"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"a concurrent region cannot have incoming or outgoing transitions so incoming or outgoing transitions are redirected to its concurrent composite state container."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cat.debug(\"note: todoparser handlestarttag:\" + e.getname());"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.event.mousemotionlistener#mousedragged(java.awt.event.mouseevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"or just the owner?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"listen to machine deletion, to delete the diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this in case we are being deleted"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the namespace of the statemachine is changed!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"model.getstatemachineshelper() .isaddingstatemachineallowed(base);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up the property panels for statechart diagrams:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mmodelelement modelelement = elementimport.getmodelelement();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"top of the hierarchy is me:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"then generalizable element"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"then classifier & package"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"navigable.... only want incoming"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"then classifier"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cast the params"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the new end type!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"rerouting the destination:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"rerouting the source:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"empty at the moment"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"move down"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"move more right"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"move left"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use left and right, up and down"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the amount of the \"sidestep\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"currentedge.setbetweennearestpoints(false);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.debug(result + \" node1: \" + this + \", node2 \" + node);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"split = (split == null || split.isstandalone()) ? node : split;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"(xoffset - curw) \/ 2;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"element is allowed, but only namedelement can return nonempty list"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actiongotodiagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"link does not exist in uml2"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"text group to contain name & stereotype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class figlink"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stereotype covers namefig:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compartments from top to bottom:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"by default, do not show operations nor attributes:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we're going to change the name immediately, so just use \"\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: place comments near connected classes todo: place from middle towards outer edges? (or place largest groups first)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"boolean haspackages = false; todo: move \"package in row\" to noderow"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"initpreinitialize(); initializesubsystems(new simpletimer(), null); argoframe.getinstance().setvisible(true);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"since uml2, this must appear before the isaclass clause"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this rectangle marks the operation section; all operations are inside it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"2nd compartment, so adjust y appropriately"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"visibility ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"collect the set of model elements that we want to listen to"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check if any stereotype is defined"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and its features"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"modifier ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there are 2 boxes showing lines: the tab and the body."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this populates the stereotypes area:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"else nothing changed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"on uniprocessors wait until we're sure the splash screen has been painted so that we aren't competing for resources"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we got at least one stereotype"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the user wants to hide them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we have any number of stereotypes displayed, then allow some space for that (only width, height is included in namefig):"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"take into account the tab is not as wide as the body:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we want at least some of the package body to be displayed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and now asize has the answer"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save our old boundaries (needed later), and get minimum size info. \"asize\" will be used to maintain a running calculation of our size at various points."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the new size can not be smaller than the minimum."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now sort out the stereotype display. if the stereotype is displayed, move the upper boundary of the name compartment up and set new bounds for the name and the stereotype compartments and the stereolineblinder that blanks out the line between the two"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"-1 for 1 pixel overlap"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set bounds of big box"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the figpoly is located at the right edge of the namefig. the namefig size is such that it at least fits its text, and the figpoly next to the text. making the package bigger, causes the figpoly to stick to the right edge."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now force calculation of the bounds of the figure, update the edges and trigger anyone who's listening to see if the \"bounds\" property has changed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only show the menuitems if they make sense:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save first"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"while"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and its stereotypes"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"try to create a new class diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if package"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if doubleclicks"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"change prefix"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class figpackage"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class stylepanelfigpackage"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in the deploymentdiagram there are no generalizations"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"self-association isn't draggable"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class stylepanelfiginterface"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no generalizations on deployment diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use super because not fully init'd"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and now add listeners to them all:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the bounds of the figure to the total of the above"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if moved into an package"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"testing: add a parameter to an operation on an interface. does the interface fig adapt its width?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up the property panels for class diagrams:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the figure that holds the text of the note."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the size of the text field."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"resize the text figure"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"resize the fignode to accomodate the new text"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not used, do nothing."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"resize the big port around the figure"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the text element has no border, so the line color doesn't matter."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the text is always opaque."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"? 2*line_width?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make a seamless integration of the text in the note figure."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"user interaction methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"accessor methods"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we have a stereotype displayed, then allow some space for that (width and height)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and add the gaps around the textfield to get the minimum size of the note."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"just move the corner to it's new position."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"all connected edges"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only adjust the stereotype height if we are not newly created. this gets round the problem of loading classes with stereotypes defined, which have the height already including the stereotype."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"whatever happened we are no longer newly created, so clear the flag. then set the bounds for the rectangle we have defined."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class stylepanelfigclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: get tip string from comment"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this one is still usable, so let's retain it,"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.figedge#setsourcefignode(org.tigris.gef.presentation.fignode)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"element will normally be null when called from pgml parser it will get it's source & destination set later in attachedges"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"unimplemented"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"alternatively, we could just return null here, so that you can not create a comment just linked to a comment this way - which is a bit uncommon, but not illegal, so for consistency, we better allow it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"return null;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"class to display a stereotype declaration figure using classifier box notation.<p> todo: this is just a place-holder right now! - tfm this needs to show tags and constraints."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"show ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"register for tagdefinitions:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: constraints, ..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see javax.swing.abstractaction#isenabled()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"avoid gef calcdrawingarea bug when nothing in a diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no generalizations in deployment diagrams"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the diagram image data"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"copy the gif image to the clipboard"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"hide grid, otherwise can't see anything"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"bigport.setfilled(f);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"background color."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"2 pixel padding after compartment"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set up hide all \/ show all"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"perform the action"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only the bigport may be filled"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"?line_width?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"see parent"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we remove all of them:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"but its position may have been changed:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"bounds not relevant here, but i am perfectionist..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we need to set a new notationprovider, since the notation language may have been changed:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add it again (but now in the right sequence)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now put the text in we must handle the case where the text is null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find the compartment fig for this umlobject:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"override superclass to do nothing. line width cannot be changed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"override superclass to do nothing. line width property cannot be changed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"aggregation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionsrcmultonetomany"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: set font?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"to circumvent too many registered listeners"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this shortcut was already been assigned to another action; let's pop-up a message for the user"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"ending editing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"used by pgml.tee"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actually return the figedge that the figedgeport is part of."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"throw new illegalargumentexception();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"updating the actions"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"here the actions to divide a region"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the 1st region has an invisible divider line (the box is always invisible):"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"throw out any previous elements that were enclosed but are not a concurrent region; let's move them onto the first region:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"linewidth?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the divider line should be visible, so no need to change its color."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make the composite state 1 region higher:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"look for the dashed edge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have the dashed edge now find the opposite fignode"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"prevent triggering too many events by setname()."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not???"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"consume to stop other modes from trying to take over"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"marker interface only"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"or vice versa?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"provide feedback to the user that their name was not accepted"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do not show border line, make transparent:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"cleanup of unused figtext's"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this doesn't do anything special with keywords. they should probably go first."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is one fig more in the group than (stereotypes + keyword):"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the keyword fig already exists."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"bounds not relevant here"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the stereotype fig already exists."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remove all stereotypes that have a graphical icon"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: check!"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set new bounds for all included figs"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"stylepanelfigclass relies on getpaneltarget() to return a figcompartmentbox"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get class box, because we will set it's bounding box"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get class box, because we will set it's bounding box in text field"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the keyword fig does not exist yet. let's create one:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"keywords which look like a stereotype (e.g. <<interface>>) have no owner"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there are no stereotypes, we return (0,0), preventing double lines in the class (see issue 4939)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class stylepanelfigassociationclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the singleton if it does not exist, and then return it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"when a new target is selected, we have to check if it 's a use case. then, the icone \"add extension point\" have to become enabled."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create a new extension point and make it the browser target. then invoke the superclass action method."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionaddextensionpoint"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if there are bits of an association class then remember their location and path."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the new fignodeassociation and locate it."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the association ends to the graph model"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the edges (such as comment edges) that were on the old figassociation to our new fignodeassociation and make sure they are positioned correctly."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.droptargetlistener#dragenter( java.awt.dnd.droptargetdragevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.droptargetlistener#dragover( java.awt.dnd.droptargetdragevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see java.awt.dnd.droptargetlistener#dropactionchanged( java.awt.dnd.droptargetdragevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"multiplicity"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class modecreateassociation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"&& ((umldiagram) dia).doesaccept(dtde.getsource())"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the new height can not be less than the name height:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"nullpointerexception ignored.\");"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class spfigedgemodelelement"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get all our sub figs and hit them with the big stick too"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only show the path item when there is an owning namespace."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"enumerate all selected figures and update their path accordingly"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compartments"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"20 = height of name fig ?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"2*line_width? or extra padding?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set properties of the stereotype box."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the namefig is transparent, since this is a box and the fill color is drawn by the bigport."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use \"asize\" to build up the minimum size. start with the size of the name compartment and build up."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only take into account the stereotype width, not the height, since the height is included in the name fig:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add the height of all the compartments (if there are any), and check their minimum width:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"save our old boundaries so it can be used in property message later"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now the new namefig height will include the stereotype height:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check for uninitialised instance variables and constructor."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"calculate the minimum needed height for all the compartments:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"increase the height of the fig:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"finally set the bounds of the big box and the border fig:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"hide compartment"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"hiding one compartment means that the fig returns to minimal dimensions:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.pathconv#stuffpoint(java.awt.point)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.pathconv#setclosestpoint(java.awt.point)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"show compartment"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"forcerepaintshadow();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update the diagram, and other users of these settings:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@jve:decl-index=0:visual-constraint=\"10,10\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find the point offset on the line that gives a correct offset"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default angle is 90 deg."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"boundary condition in gef, make sure this is less than, not equal"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check for a collision between our computed position and the edge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"increase offset by 2px at a time"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get the points representing the poly line for our edge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"increase offset by increments until we're clear"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we timed out, give it one more try on the other side"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"count >= limit"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"log.log(level.fine, \"final point #\" + count + \" \" + result + \" offset of \" + scaledoffset);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"segment size for computing slope"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if our position was clamped, try to make it up on the other end"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"can't get the slope of a point. just return an arbitrary point."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this shouldn't happen, because of our line segment size check"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"we're going vertical!\" - goose in \"top gun\""}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"arctan only returns -pi\/2 to pi\/2 handle the other two quadrants and normalize to 0 - 2pi"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"quadrant ii & iii"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"quadrant iv"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the following for some backward compatibility with old algorithm"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add displacement angle to slope"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"transform to 0 - 2pi range if we've gone all the way around circle"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"compute our deltas"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"load the standard colour, just add an alpha channel."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"should never get here. if we do, return the inner point."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"called by propertychange"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this does a calcbounds()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.base.diagram#getclassandmodelid()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the following is the default implementation for diagrams of which the owner is a namespace."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"source source position destination destination position number of objects to be copied"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"\"unnamed \" +"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"different lengths:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: should update to size of diagram contents"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"next statement gives us a clone jgraph but not a cloned toolbar"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.event.modechangelistener#modechange(org.tigris.gef.event.modechangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remains selected"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the old selection"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"target might not have been initialised yet."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add to selection"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"assuming the target is some model element."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"how to handle empty target lists? probably the tabdiagram should only show an empty pane in that case"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"any swing work done here needs to be queued to the awt thread since we don't know what thread our event will arrive on"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"redrawmanager.lock();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"getlayermanager().getactivelayer().paint(g);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this makes the text not touch the text-border line:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"certain types of fixed text (e.g. a figstereotype with a keyword) may not have an owner"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now, we link it to the modelelements which are represented by fignode"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"update all tools' enabled status"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remember the fig for later"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's build the comment first, unlinked."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"prevent e.g. associationclasses from being added trice:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"select the new comment as target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the node fig for the comment itself and draw it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"create the comment links and draw them"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if we're drawing from an edge"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-<n>$"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"user made a false start"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"so, the target is a massociationrole"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"mvw this is not the correct way, but it allows connecting a commentedge to it! see e.g. actionaddnote for the correct way. testcase: 1. select the message. 2. click the comment tool."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionaddmessage"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"let's use groups to construct the different text sections at the association"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this only happens if model-change events arrive before we are completely constructed."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"x^2 + y^2 = r^2 (equation of a circle)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"max distance is set at 100 pixels, (rsquared = 100^2)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"east"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#propertychange(java.beans.propertychangeevent)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class figassociation"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"no need to listen to these property changes - the notationprovider takes care of this."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":", new string[] {\"name\", \"visibility\", \"stereotype\"}"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"these are a list of arrow types."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"added to the arrow type for navigable"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"finished editing. parse the text that was edited. only the role is editable, hence:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figedge.showhelp(role.getparsinghelp()); role.settext();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"pass everything else to superclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"end class actionnavigability"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fonts and colors should get updated automatically for contained figs"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is none..."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only initialized to prevent warning"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"not supported for this target"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make space for the clarifier margin between text and border"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add a listener for changes to any property"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"is used as instancespecification, see umldeploymentdiagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"be careful here since subclasses could have overridden this with the assumption that it wouldn't be called before the constructors finished"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this rectangle marks the whole modelelement figure; everything is inside it:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"clone this figure. after the base clone method has been called determine which child figs of the clone represent the name, stereotype and port. <p> todo: enclosedfigs, encloser and eventsenders may also need to be cloned. @see java.lang.object#clone() @return the cloned figure"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"idem here: clone.stereotypefig = (figstereotypesgroup) clonefig;"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figclone._polygon = (polygon) _polygon.clone();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"utility function to unregister all listeners registered through addelementlistener. @see #addelementlistener(object, string)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.tigris.gef.presentation.fig#getenclosingfig()"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"add stereotype view submenu"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the node's been placed on the diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set the namespace of the enclosed model element to the namespace of the encloser."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"find all elementresidences between the class and the component:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there was no elementresidence yet, so let's create one:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the node's been placed within some fig"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there were 2 elementresidences .. strange case."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"there is already a correct elementresidence"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the owner is already linked to the component"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we are getting events we don't want. filter them out."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"only update the bounds if they change:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"resize the fignode to accommodate the new text"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: should this not be an assert?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"west"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"south"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"convert null to empty string and clear help message"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"it is done"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this enables direct text editing for sub figs of a figgroup object:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"either layer or owner was null"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default is to do nothing"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"this test needed for a figpool"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"get model listeners removed:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: state & vertex are independent classes in uml 2.1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo assert modelelement != null???"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"default for name and stereotype is no border"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"use diagraminterface to add classes to diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"actionaddallclassesfrommodel"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"situation 1"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we have an edge (the uml modelelement!)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"computeroute(); this recomputes the route if you reload the diagram."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"in case someone turns it on"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do not allow fill to change. we should see through the text to the color of the main fig background."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now force minimum dimensions for the text:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"now add the areas around the text to return the complete size:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"calculate the source and dest figs for to self assoc"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"reset the pointindex"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check pre-conds"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set-up:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the fig that was under the mouse when it was released"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"and find the fig:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"last is the top fig."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"check intermediate post-condition."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"delegate the re-routing to graphmodels."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set it to an invalid number by default to make sure it is set correctly."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"figpoly.setfillcolor(col);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"north"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing until code is reviewed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: do nothing until code is reviewed"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"message"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"classifierrole classifierrole"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"simulate a press of the mouse above the calculated point:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"calculate the drop location, and place every n-th element at an offset proportional to n."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"simulate a release of the mouse:"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the file doesn't exist so the user will get prompted to choose a new name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"overridden in order to implement pathcompartmentcontainer."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing by default"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"don't allow drag outside of bounds of diagram"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"if the user has selected modeplace either by a diagram tool or addtodiagram then we don't want to show the clarifiers."}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"remember what handle was clicked for the case where the drag is released over empty space"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"transparent cyan"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"yellow"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"translucent green"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"super(modecreatepolyedge.class, \"edgeclass\", model.getmetatypes().getassociation(), name);"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"set this to true on to enable debugging figs"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"anchor position"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"todo: the uml does not seem to define this name. or is it?"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"the serialversionuid (generated by eclipse)"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"uml spec for generalizations doesn't call for name"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"name & stereotypes get updated by superclass"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"show it"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"fig.calcbounds();"}
{"projectname":"argouml","classification":"WITHOUT_CLASSIFICATION","comment":"we only take the filename, not the whole system path"}
