{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: we loose encoding information here, fix it"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: we should use implicit nil for body, but problem (punt til later)"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: numeric.new works in ruby and it does here too. however trying to use that instance in a numeric operation should generate an argumenterror. doing this seems so pathological i do not see the need to fix this now."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: adding implicit nils caused multiple problems in compiler -- revist after landing assert bodynode != null : \"bodynode is not null\";"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: take bigdecimal.mode into account."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: full-precision remainder is 1000x slower than mri!"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: for some reason this dispatcher causes a verifyerror... classclass.dispatcher = callbackfactory.createdispatcher(classclass);"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: i doubt any of the constants referenced in this method are ever redefined -- should compare to the known values, rather than do an expensive constant lookup."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: rewriter and compiler assume case when empty expression. in mri this is just a when. assert casenode != null : \"casenode is not null\";"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: don't require pop"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"xxx wrong, but will have to do for now"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"get value from current scope or one of its captured scopes. fixme: block variables are not getting primed to nil so we need to null check those until we prime them properly. also add assert back in. @param offset zero-indexed value that represents where variable lives @param depth how many captured scopes down this variable should be set @return the value here"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"important: receive the block argument before the opt and splat args this is so that the *arg can be encoded as 'rest of the array'. this won't work if the block argument hasn't been received yet!"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: i got a bunch of npes when i didn't check for nulls here...how?!"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"sss fixme: there are also differences in variable scoping between 1.8 and 1.9 ruby 1.8 is the buggy semantics if i understand correctly. the semantics of how this shadows other variables outside the block needs to be figured out during live var analysis."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"this was a getopt with one mandatory arg, but it did not work so i am parsing it for now."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"this is the result of a bug that left off all trailing arguments. e.g.: system \"ls\", \"-1\", \"dir\" would be seen as system \"ls\""}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: broken but behaving"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: we overflow on large files...we could increase to long to limit this, but then the impl gets more involved since java io apis based on int (means we have to chunk up a long into a series of int ops)."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"if we outgrow our pushback stack then grow it (this should only happen in pretty pathological cases)."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: arg may also be true, false, and nil and still be valid. strangely enough, protocol conversion is not happening in ruby on this arg?"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: proper sign"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: in mri 1.9, an explicit check for negative length is added here. indexerror is raised when length is negative. see [ruby-core:12953] for more details. new note: this is actually under re-evaluation, see [ruby-core:17483]."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"enebo: very wrong"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: if we terminate immediately, this appears to break while in method arguments we need to push a nil for the cases where we will never enter the body"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"the following constants capture pre-known static call sites -- jruby implementations of methods of ruby classes sss fixme: note that compiler\/impl\/basebodycompiler is using op_match2 for match() and and op_match for match2 ... is this a bug there?"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"sss fixme: this doesn't preserve original order of when clauses. we could consider preserving the order (or maybe not, since we would have to sort the constants first in any case) for outputing jump tables in certain situations. add body to map for emitting later"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"sss fixme: why is the for node being built using closures and not as a \"regular\" loop with branches? this has implications on inlining, implementations of closures, next, break, etc. when \"each\" and the block it consumes are inlined together in the caller, the \"loop\" from the each should become a normal loop without any closures. but, in this implementation of for, we replace one closure with another!"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"synchronized method per jruby-1173 (unsafe double-checked locking) fixme: synchronization is still wrong in cp code"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"vulture thread will periodically expunge dead entries. entries are also expunged during 'put' operations; this is designed to cover the case where many objects are created initially, followed by limited put activity. fixme: disabled (below) pending resolution of finalization issue"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: we are assuming that original string will be raw bytes. if -ku is provided this will not be true, but that is ok for now. deal with that when someone needs it."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: ruby locks the string here"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: rubicon testkernel dies without this line. a cursory glance implies we falsely set $! to nil and this sets it back to something valid. this should get fixed at the same time we address bug #1296484."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"mri 1.8 behavior: this combination of flags is not allowed"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"zero args with block fixme: omit args index; subtract one from normal block index"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: it may be possible to killpg on systems which support it. posix library needs to tell whether a particular method works or not"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: this code effectively disables all inspection-based optimizations; none of them are 100% safe yet"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: no argument seems to work for -k in mri plus this should not siphon off additional args 'jruby -k ~\/scripts\/foo'. also better error processing."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"we are in eval with binding break out early fixme: this is broken with the new backtrace stuff"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: this is a system error based on errno"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: make sure it's really safe to not to copy it"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: not correct exception"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: we can't guarantee this will always be a rubyio...so the old code here is not safe"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"dump the trace and continue this is currently only here for android, which seems to have bugs in its enumeration logic http: code.google.com\/p\/android\/issues\/detail?id=2812"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: add at_exit and finalizers to exit, then make exit_bang not call those."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: need to isolate the \"current\" thread from class creation"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"xxx actually only on windows..."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"enebo : should ~frogger\\\\foo work (it doesnt in linux ruby)?"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme can't use static; would interfere with other runtimes in the same jvm"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: anything threads attached to original fd are notified of the close... see rb_thread_fd_close"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: this is an freopen in mri, this is close, but not quite the same"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: check how ruby 1.9 handles this"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: full-precision divmod is 1000x slower than mri!"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: i'm not sure this is right, but the old code returned the undef, which definitely isn't right..."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: mri has special case for constants here"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: throw the right argumenterror's if the class is missing or if it's a module."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: this isn't quite right; it shouldn't evaluate the value if it's going to throw the error"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: -x flag not supported case 'x' : break;"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: this is causing a verification error for some reason nilclass.dispatcher = callbackfactory.createdispatcher(nilclass);"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"walk up the scope tree right now as much as possible, to avoid run-time walking sss fixme: any reason why this might break in the presence of ruby's dynamic resolution? what might break?"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: errno descriptions from constantine on windows are not useful at the moment."}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: this should reset to what it was before"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"sss fixme: incorect!"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: vulture daemon thread prevents finalization, find alternative approach. vulture.start();"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: this seems like a good assertion, but it breaks compiled code and the code seems to run without it... assert currentmodule != null : \"can't push null rubyclass\";"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"are there are available data flow facts to run this problem? sss fixme: silly optimization?"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"sss fixme: for constant arrays, we should never get here!"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: this is wrong"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"fixme: may need to broaden for ipv6 ip address strings"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"todo: sys fail"}
{"projectname":"jruby-1.4.0","classification":"DEFECT","comment":"sss fixme: verify semantics of this instruction"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"we basically ignore protocol. let someone report it..."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: is this correct?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: i use a for block to implement end node because we need a proc which captures its enclosing scope. forblock now represents these node and should be renamed."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: 1. is the ordering correct? (poll before next)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"we use a highly uncommon string to represent the paragraph delimiter (100% soln not worth it)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"add a \"self\" recv here todo: is this right?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: mri behavior: call \"+\" or \"add\", depending on the call. but this leads to exceptions when floats are added. see: http: blade.nagaokaut.ac.jp\/cgi-bin\/scat.rb\/ruby\/ruby-core\/17374 return callcoerced(context, op, b, true); -- this is mri behavior. we'll use ours for now, thus providing an ability to add floats."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: is this correctly placed ... at the end of the loop iteration?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: ruby reuses this logic for other \"write\" behavior by checking if it's an io and calling write again"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: where does this go? m.setlineposition(arraynode.getposition());"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"it would be nice (and logical!) if exponent form behaved like e\/e, and decimal form behaved like f, but no such luck. hence:"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: these should get normally compiled or initialized some other way ... sss fixme: parent\/super-type info is incorrect! these are just placeholders for now .. this needs to be updated with *real* class objects later!"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: not_allocatable_allocator is probably ok here. confirm. jruby-415"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: i could make ir_loop a scope too ... semantically, it is a scope, but, functionally, not sure if this is required yet ..."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"this covers the rare case of lower-case class names (and thus will fail 99.999% of the time). fortunately, we'll only do this once per package name. (and seriously, folks, look into best practices...)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: should this be a string literal or a string? dummy class for the script"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo should this be deprecated ? (to be efficient, internals should deal with rubyhash directly)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: does int suffice, or do we need long?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"modules are included with a shim class; we must find that shim to handle super() appropriately"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"reset value map if this instruction is the start\/end of a basic block right now, calls are considered hard boundaries for optimization and information cannot be propagated across them! sss fixme: rather than treat all calls with a broad brush, what we need is to capture different attributes about a call : - uses closures - known call target - can modify scope, - etc. this information is probably already present in the ast inspector"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: determine whether we should perhaps store non-singleton class in the implementationclass"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: correct? where does closure arg come from?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: consider fixing node_assign itself rather than single case"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: should i have a reference to the ir_loop that is being retried?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"temporary hack to handle non-ruby values will come up with better solution shortly"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"simplify the variables too -- to keep these variables in sync with what is actually used in the when clauses this is not required for correctness reasons, but only for performance reasons."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"must be called from main thread (it is currently, but this bothers me)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"con fixme: i don't know how to make case be an expression...does that logic need to go here?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: legal here? may want unsupportedoperationexception"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this is an ugly hack to resolve jruby-1381; i'm not proud of it"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"something wrong we don't know the cwd... todo: is this behavior really desirable? \/mov"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: no java stringity"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: total hack to get flash in rails marshalling\/unmarshalling in session ok...we need to totally change marshalling to work with overridden core classes."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this method is not present in mri!"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: ideally javaobject instances should be marshallable, which means that the javaobject metaclass should have an appropriate allocator. jruby-414"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: public only?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this should probably do some translation from ruby priority levels to java priority levels (until we have green threads)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: consider a better way of synchronizing"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"using ioinputstream may not be the most performance way, but it's easy."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: we should not be regenerating this over and over"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"xxx: this check previously used callmethod(\"==\") to check for equality between classes when scanning the hierarchy. however the == check may be safe; we should only ever have one instance bound to a given type\/constant. if it's found to be unsafe, examine ways to avoid the == call."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: why are we duplicating the constants here, and then in file::constants below? file::constants is included in io."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"a cloned method now belongs to a new class. set it. todo: make dynamicmethod immutable"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: these were missing, so we're not handling them elsewhere?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: cache?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: wtf is this? why would these use the class?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: figure out how this can happen and possibly remove"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: i don't like this"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: these descriptions should probably be moved out, to constantine project which deals with all platform-dependent constants."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme this below is temporary, but its much safer for cow (it prevents not shared strings with begin != 0) this allows now e.g.: bytelist#set not to be begin aware"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: what about n arg?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: i think this chunk is equivalent to mri id2name (and not our public method id2name). make into method if used more than once."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this is probably not very efficient, since it loads all methods for each call"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"hack in to replace usual readline with this"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"if we get here, we found a matching method, use it todo: choose narrowest method by continuing to search"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this is kinda gross"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: in order for thread to play well with the standard 'new' behavior, it must provide an allocator that can create empty object instances which initialize then fills with appropriate data."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"these extra arrays are really unfortunate; split some of these paths out to eliminate?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"we clone dynamic scope because this will be a new instance of a block. any previously captured instances of this block may still be around and we do not want to start overwriting those values when we create a new one. enebo: once we make self, lastclass, and lastmethod immutable we can remove duplicate"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: protected methods. this is going to require a rework of some of the mechanism."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"if not overloaded, we add a method that guesses at which signature to use todo: just adding first one right now...add in signature-guessing logic"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: this should never get called for constant svalues"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this version is better than the hackish previous one. windows behavior needs to be defined though. i suppose this version could be improved more too. todo: \/etc\/passwd is also inadequate for macosx since it does not use \/etc\/passwd for regular user accounts"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: there's some code duplication here with rubyobject#inspect"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"for visibility checking without requiring frame self todo: don't bother passing when fcall or vcall, and adjust callsite appropriately"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: figure out why we get null sometimes"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"hacky: advance position to eat newline here...."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"need to reexamine this"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this is currently only here because of some problems with iooutputstream writing to a \"bare\" runtime without a proper scope"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"workaround for jruby-4149"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"using iooutputstream may not be the most performance way, but it's easy."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"ignore...bean doesn't get registered todo: why does that bother me?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"enebo: lots of optz in 1.9 parser here"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: move out of this class!"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"in fact, we should probably raise an error, yes?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: ary_sort_check should be done here"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: get rid of this (lax returns 0.0, strict will throw)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"bit risky if someone changes completor, but useful for method calls"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: the rest of this...seeking to same position is unnecessary since we share a channel but some of this may be needed?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: is this the right thing to do?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this probably belongs in a different package."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: not very efficient"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"this is gross, but java api's aren't iso 8601 compliant at all"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: is this correct ?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"workaround for jruby-2326 (mri does not enter this production for some reason)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"create block for this iter node fixme: we shouldn't use the current scope if it's not actually from the same hierarchy of static scopes"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: do we need to check if l is same as whatever popped?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: where is this set up? how is this diff from classvardeclnode??"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: do we need the check or does main.java not call this...they should consolidate"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this table will get moved into posix library so we can get all actual supported signals. this is a quick fix to support basic signals until that happens."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this worries me a bit, since it could allocate a lot with a large newlength"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this filtering is kind of gross...it would be nice to get some parser help here"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: decompose getjavapackagemodule so we don't parse fullname"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: get rid of laziness and handle restricted access elsewhere"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: for now, we use a faithful reimplementation of mri's algorithm, but should use utf8encoding facilities from joni, once it starts prefroming utf-8 content validation."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"if we don't have opt args, start after args (they will be assigned later) this is for crap like def foo(a = (b = true; 1)) which numbers b before a fixme: only starting after required args, since opt args may access others and rest args conflicts with compileroot using \"0\" to indicate [] signature."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: determine if a real allocator is needed here. do people want to extend javaclass? do we want them to do that? can you class.new(javaclass)? should you be able to? todo: not_allocatable_allocator is probably ok here, since we don't intend for people to monkey with this type and it can't be marshalled. confirm. jruby-415"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"grrr, arghh, want to subclass sun.misc.floatingdecimal, but can't, so we must do all this (the next 70 lines of code), which has already been done by floatingdecimal."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: do we really want 'declared' methods? includes private\/protected, and does _not_ include superclass methods. also, the getdeclared calls may throw securityexception if we're running under a restrictive security policy."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"small hack to save a cast later on"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"this is perhaps innefficient timewise? optimal spacewise"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: confirm expected args are irubyobject (or similar)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"there's not a compelling reason to keep javaclass instances in a weak map (any proxies created are [were] kept in a non-weak map, so in most cases they will stick around anyway), and some good reasons not to (javaclass creation is expensive, for one; many lookups are performed when passing parameters to\/from methods; etc.). todo: faster custom concurrent map"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: check for java reserved names and raise exception if encountered"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: jruby-3188 ends up with condition returning null...quick fix until i can dig into it"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"workaround for a bug in sun's jdk 1.5.x, see http: bugs.sun.com\/bugdatabase\/view_bug.do?bug_id=6303753"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme weakref.rb also does caller(2) here for the backtrace"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: remove this from grammars."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: it's perhaps just a coincidence that all the channels for which we should raise are instanceof selectablechannel, since stdio is not...so this bothers me slightly. -con"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: not sure what the semantics of transfer are cfiber.definefastmethod(\"transfer\", cb.getfastoptmethod(\"transfer\"));"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this is pretty gross; we should have a cleaner initialization that doesn't depend on package-visible fields and ideally is atomic, probably using an immutable structure we replace all at once. lazy, null when no groups defined"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"this is a dummy scope; we should find a way to make that more explicit"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: resolve what the hell is going on"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"rb_obj_id return the internal id of an object. fixme: should this be renamed to match its ruby name?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"again, shouldn't happen. todo: might want to throw exception instead."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: maybe not best place, but move it to a good home"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: not_allocatable_allocator may be ok here, but it's unclear how structs work with marshalling. confirm behavior and ensure we're doing this correctly. jruby-415"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: should next and return also catch here?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"we always prepend an org.jruby.proxy package to the beginning because java and javax packages are protected and signed jars prevent us generating new classes with those package names. see jruby-2439."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: we should be able to optimize this quite a bit post-1.0. javaclass already has all the methods organized by method name; the next version (supporting protected methods\/fields) will have them organized even further. so collectmethods here can just lookup the overridden methods in the javaclass map, should be much faster."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"index for the item this could probably be more efficient, bailing out on assigning args past the end?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: make more efficient by not creating irubyarray[]"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"rb_mod_remove_cvar fixme: any good reason to have two identical methods? (same as remove_class_variable)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"from dup_setup rb_copy_generic_ivar from dup_setup here ...unlikely.."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"if it's a single-arg when but contains an array, we know it's a real literal array fixme: this is a gross way to figure it out; parser help similar to yield argument passing (expandarguments) would be better"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: only setaccessible to account for pattern found by accessing constants included from a non-public interface. (aka java.util.zip.zipconstants being implemented by many classes)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"not intended to be called directly by users (private) old todo from ruby code: this should be implemented in javaclass.java, where we can check for reserved ruby names, conflicting methods, etc."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: don't allow multiple threads to do this at once"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: bleeding runtime into parser. arity may be should be in parser (to keep bleeding oneway)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"rb_ary_push_m fixme: whis is this named \"push_m\"?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this probably isn't the best hack, but it works until we can have different root frame setup for 1.9 easily."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: at least parsersupport.attrset passes argsnode as null. implicitnil is wrong magic for setupargs since it will irubyobject[] { nil }. so we need to figure out a nice fast null pattern for setupargs. assert argsnode != null : \"receivernode is not null\";"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"hack: in order to have stdout\/err act like ttys and flush always, we set anything assigned to stdout\/stderr to sync"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: people extending gzipwriter\/reader will break. find better way here."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: set up a call configuration for this"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"process streams get channel.newchannel()ed into filechannel but are not actually seekable. so instead of just the isseekable check doing instanceof filechannel, we must also add this boolean to check, which we set to false when it's known that the incoming channel is from a process. fixme: this is gross, and it's nio's fault for not providing a nice way to tell if a channel is \"really\" seekable."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: somehow i'd feel better if this could get the appropriate var index from the argumentnode"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: can get optimized for ieqlnode"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: rounding mode should not be hard-coded. see #mode."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme moved this here to get what's obviously a utility method out of irubyobject. perhaps security methods should find their own centralized home at some point."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: if nativeexception is expected to be used from ruby code, it should provide a real allocator to be used. otherwise class.new will fail, as will marshalling. jruby-415"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"object#to_a is obsolete. we match ruby's hack until to_a goes away. then we can remove this hack too."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: callback for value would be more efficient, but unlikely to be a big cost (constants are rarely assigned)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this should go somewhere more generic -- maybe idutil"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: move this code to some utils area .. or probably there is already a method for this in some jruby utils class holy cow! just to append two darned arrays!"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: set our metaclass to target's class (i.e. scary!)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"add 'new' with full signature, so it's guaranteed to be directly accessible todo: no need for this to be a full, formal jvm signature"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"context is null, wipe out the softreference (this could be done with a reference queue)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: remove"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: big fat hack here, because scope names are expected to be interned strings by the parser"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this is actually now returning the scope of whoever called method#to_proc which is obviously wrong; but there's no scope to provide for many methods. it fixes jruby-2237, but needs a better solution."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"@author headius fixme convert to enum ?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"the following three methods must be defined fast, since they expect to modify the current frame (i.e. they expect no frame will be allocated for them). jruby-1185."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: not_allocatable_allocator is probably ok here, since we don't intend for people to monkey with this type and it can't be marshalled. confirm. jruby-415"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: can this return anything other than nil?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"xxx: const lookup can trigger const_missing; is that enough to warrant it always being executed?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: should frozen error have its own distinct class? if not should more share?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: only used by interface implementation; eliminate it"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: null check is removable once we figure out how to assign to unset named block args"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"for jruby-2759, when met choose cet timezone to work around joda"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this is gross. don't do this."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: i think we need these pushed somewhere?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: deprecated! going forward, all instructions should come from the cfg"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: should probably apply the null object pattern for a non-allowed class, rather than null"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"yow...this is still ugly"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"add method with full signature, so it's guaranteed to be directly accessible todo: no need for this to be a full, formal jvm signature"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this version is faster than the previous, but both suffer from a crucial flaw: it is impossible to create an objectspace with an iterator that doesn't either: a. hold on to objects that might otherwise be collected or b. have no way to guarantee that a call to hasnext() will be correct or that a subsequent call to next() will produce an object. for our purposes, for now, this may be acceptable."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: clearing read buffer here...is this appropriate?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: specifying soft refs, may want to compare memory consumption, behavior with weak refs (specify weak in place of soft below)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: lose syntactical elements here (and others like this)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"enebo: totally weird naming (in mri is not allocated and is a local var name)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this doesn't actually support anything but string"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"up to ten, stuff into tmp locals, load in reverse order, and assign fixme: there's probably a slightly smarter way, but is it important?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"xxx: do something?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: only setaccessible to account for pattern found by accessing constants included from a non-public interface. (aka java.util.zip.zipconstants being implemented by many classes) todo: not sure we need this at all, since we only expose public fields. field.setaccessible(true);"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme we want to eliminate these type casts when possible"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"hack: force clinit to be created"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: if true array is common enough we should pre-allocate and stick somewhere"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"optional args, so we have irubyobject[] todo: confirm"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this is almost rubymodule#instance_methods on the metaclass. perhaps refactor."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: added this because marshal_spec seemed to reconstitute objects without calling datawrapstruct this resulted in object being null after unmarshalling..."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: factor this chunk as in mri\/yarv getaster"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"exit monitor before making call fixme: this not being in a finally is a little worrisome"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"self = args[0] sss fixme: verify that this is correct"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"this is for jruby-2988, since after a suspend the terminal seems to need to be reinitialized. since we can't easily detect suspension, initialize after every readline. probably not fast, but this is for interactive terminals anyway...so who cares?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: do above but not below for additional newline nodes"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: receiver -- this is the class meta object basically? operand receiver = build(defsnode.getreceivernode(), s);"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme this whole thing could probably be implemented as a module and mixed into appropriate classes, especially if it uses either ioinput\/outputstream or is smart about the kind of io-like object it's being used against."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: bit of a kludge here (non-interface classes assigned to both class and module fields). simplifies proxy extender code, will go away when ji is overhauled (and proxy extenders are deprecated)."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: what should these really be? numeric? assert x instanceof rubycomplex && y instanceof rubycomplex;"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"we're depending on the side effect of the load, which loads the class but does not turn it into a script i don't like it, but until we restructure the code a bit more, we'll need to quietly let it by here."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: we should also support orgs that use capitalized package names (including, embarrassingly, the one i work for), but this should be enabled by a system property, as the expected default behavior for an upper-case value should be (and is) to treat it as a class name, and raise an exception if it's not found"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this version differs from ioctl by checking whether fcntl exists and raising notimplemented if it doesn't; perhaps no difference for us?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this is temporary since the variable compilers assume we want args already on stack for assignment. we just pop and continue with 1.9 args logic."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: eliminate?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: handle writing into original buffer better"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"this is a fairly specific hack for empty string, but it does the job"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"xxx this constructor is a hack to implement the __end__ syntax. converting a reader back into an inputstream doesn't generally work."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"method has more than 500 lines; we'll need to split it and therefore need to use a heap-based scope"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"the implementations of these are all bonus (see todo above) i was going to throw an error from these, but it appears to be the wrong place to do it."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"entry exists, proxy doesn't match. replace. this could happen if old proxy was gc'ed todo: raise exception if stored proxy is non-null? (not gc'ed)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: better algorithm to set precision needed"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: used anywhere? i don't see calls to this anywhere public operand builddasgnassignment(node node, ir_scope s) { dasgnnode dasgnnode = (dasgnnode) node; s.getvariablecompiler().assignlocalvariable(dasgnnode.getindex(), dasgnnode.getdepth()); }"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: make this more intelligible value"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: split this into two sub-classes so that name and constnode can be specified seperately."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"not sure how well this works, but it works much better than just currenttimemillis by itself."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this is copied code from rubyarray. both re, struct, and array should share one impl this is also hacky since i construct ruby objects to access ruby arrays through aref instead of something lower."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: no, i don't like it."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"arguments compilers always create irubyobject[], but we want to use rubyarray.concat here; fixme: as a result, this is not efficient, since it creates and then later unwraps an array"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: what is the difference between classvarasgnnode & classvardeclnode"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: set up a callconfiguration for this"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: reads\/writes from frame todo: information on scoping todo: visibility?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this is almost entirely duplicated from main.java"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"we might need to perform a dst correction"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: how much more obtuse can this be? heredoc already parsed this and saved string...do not parse..just return"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"this needs to be split, since conditional calling #inherited doesn't fit standard ruby semantics"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"xxx: again, screwy evaling under previous frame's scope"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: maybe this is not really a concern after all ... nesting level of this scope in the lexical nesting of scopes in the current file -- this is not to be confused with semantic nesting of scopes across files. consider this code in a file f class m1::m2::m3::c ... end so, c is at lexical nesting level of 1 (the file script is at 0) in the file 'f' semantically it is at level 3 (m1, m2, m3 are at 0,1,2). this is primarily used to ensure that variable names don't clash! i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! private int _lexicalnestinglevel;"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"actual type does not exactly match method return type, re-get converter fixme: when the only autoconversions are primitives, this won't be needed"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme we should probably still be dyncalling 'write' here"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: finalizer should be dupped here"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"don't bother to check if final method, it won't be there (not generated, can't be!)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: generalize this type-checking code into irubyobject helper."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: needs to be rethought"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"ruby constants for strings (should this be moved somewhere else?)"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"let's only generate methods for those the user may actually intend to override. that includes any defined in the current class, and any ancestors that are also javaproxyclasses (but none from any other ancestor classes). methods defined in mixins will be considered intentionally overridden, except those from kernel, java, and javaproxymethods, as well as enumerable. todo: may want to exclude other common mixins?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: i don't like the null checks here"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"invoke callmethodmissing method directly todo: this could be further optimized, since some dsls hit method_missing pretty hard..."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo this is really ineffient, and potentially a problem everytime anyone require's something. we should try to make loadpath a special array object."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: why was this using a fullfunctioncallbackmethod before that did callsuper?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"if body is a rescue node, inspect its pieces separately to avoid it disabling all optz todo: this is gross."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this does not have exact same semantics as rubyarray.join, but they probably could be consolidated (perhaps as join(args[], sep, dochomp))."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"lame generics issues: making segment class static and manually inserting cache reference to work around various problems generically referencing methods\/vars across classes."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this determine module is in a strange location and should somehow be in block"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo? i think this ends up propagating from normal java exceptions sys_fail(openfile.getpath())"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"this seems unlikely to happen unless it's a totally bogus fileno ...so do we even need to bother trying to create one?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: turn off the negative? will return -0.0 in lax mode"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: list.sublist(from, to).clear() is supposed to clear the sublist from the list. how can we support this operation?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"see note below re: 2-field kludge"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"we're not setting the provider or anything, but it seems that bouncycastle does some internal things in its provider's constructor which require it to be executed in a secure context. ideally this hack should be removed. see jruby-3919 and this bc bug: http: www.bouncycastle.org\/jira\/browse\/bja-227"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"this is a rather ugly hack, but similar to mri. see hash.c:ruby_setenv and similar in mri we search all keys for a case-insensitive match, and use that"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: wrong - get interfaces from class"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: make callcoerced work in block context...then fix downto, step, and upto."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: the code below is a copy of rubyio.puts, and we should avoid copy-paste."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"install invokedynamic bootstrapper todo need to abstract this setup behind another compiler interface"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: inefficient; constructing a bignum just for dumping?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: ruby does not seem to care about invalid numeric mode values i am not sure if ruby overflows here also..."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: obvious issue that not all platforms can display all attributes. ugly hacks. using generic posix library makes pushing inspect behavior into specific system impls rather painful."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"rb_copy_generic_ivar from dup_setup here ...unlikely.."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this really ought to be in clinit, but it doesn't matter much"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"using iochannel may not be the most performant way, but it's easy."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo this should entry into error handling somewhere"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: make this do specific-arity calling"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: what happens to the add class in this case??"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: are we guaranteed that we splats dont head to multiple-assignment nodes! i.e. |*(a,b)|?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: catch exception if constant is already set by other thread"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: implement tty? and isatty. we have no real capability to determine this from java, but if we could set tty status, then we could invoke jruby differently to allow stdin to return true on this. this would allow things like cgi.rb to work properly."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: we should be getting this from the runtime rather than assume none? return runtime.getencodingservice().getencoding(runtime.getdefaultexternalencoding());"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"end hack"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this isn't an exact port of mri's pipe behavior, so revisit"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: what should this really be? assert x instanceof rubycomplex;"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: this isn't right for within ensured\/rescued code"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: token can be final for a method -- implying that the token is only for this particular implementation of the method but, if the mehod is modified, we create a new method object which in turn gets a new token. what makes sense?? intuitively, it seems the first one ... but let us see ... current code version token for this method -- can change during execution as methods get redefined!"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: it would be nice to throw a better error for this"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"set up a field for the cacheentry todo: make this an array so it's not as much class metadata; similar to abstractscript stuff"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: newtypeerror does not offer enough for ruby error string..."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: i added this in. is this correct?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"upper-case package name todo: top-level upper-case package was supported in the previous (ruby-based) implementation, so leaving as is. see note at #getproxyorpackageunderpackage re: future approach below the top-level."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: wire into new exception handling mechanism"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this is also defined in the metaclass too...consolidate somewhere."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: constdecl could be two seperate classes (or done differently since constnode and name never exist at the same time."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: number formatting here, mri uses \"%-.10g\", 1.4 api is a must?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: need to get this back into the method signature...now is too late..."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"super calls from proxies must use reflected method fixme: possible to make handles do the superclass call?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: better error handling"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: should this be operand or compoundstring? can it happen that symbols are built out of other than compound strings? or can it happen during optimizations that this becomes a generic operand?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: we should really not be creating the dynamic scope for the root of the ast before parsing. this makes us end up needing to readjust this dynamic scope coming out of parse (and for local static scopes it will always happen because of $~ and $_). fixme: because we end up adjusting this after-the-fact, we can't use any of the specific-size scopes."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: not sure that we should skip calling join() altogether. thread.join() has some implications for java memory model, etc."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"hack to get right style for input"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"if variables were added then we may need to grow the dynamic scope to match the static one. fixme: make this so we only need to check this for blockscope != null. we cannot currently since we create the dynamicscope for a localstaticscope before parse begins. refactoring should make this fixable."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sss fixme: this method (at least in the context of multiple assignment) is a little weird. it calls regular to_ary on the object. but, if it encounters a method_missing, the value is inserted into an 1-element array! try \"a,b,c = 1\" first; then define fixnum.to_ary method and try it again. ex: http: gist.github.com\/163551"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: potentially could just use bytelist here?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"ignore; job was cancelled fixme: is this ok?"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"regular division with some default precision todo: proper algorithm to set the precision"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: exec should replace the current process. this could be possible with jna."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"sometimes the value can be retrieved at \"compile time\". if we succeed, nothing like it! we might not .. for the following reasons: 1. the constant is missing, 2. the reference is a forward-reference, 3. the constant's value is only known at run-time on first-access (but, this is runtime, isn't it??) 4. our compiler isn't able to right away infer that this is a constant. sss fixme: 1. the operand can be a literal array, range, or hash -- hence operand because array, range, and hash derive from operand and not constant ... is there a way to fix this impedance mismatch? 2. it should be possible to handle the forward-reference case by creating a new forwardreference operand and then inform the scope of the forward reference which the scope can fix up when the reference gets defined. at code-gen time, if the reference is unresolved, when a value is retrieved for the forward-ref and we get a null, we can throw a constmissing exception! not sure!"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: not_allocatable_allocator is probably not right here, since we might eventually want javaarray to be marshallable. jruby-414"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"todo: this is probably bad..."}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: do we really want 'declared' methods? includes private\/protected, and does _not_ include superclass methods"}
{"projectname":"jruby-1.4.0","classification":"DESIGN","comment":"fixme: shouldn't need @__java_ovrd_methods, just query locally defined methods."}
{"projectname":"jruby-1.4.0","classification":"DOCUMENTATION","comment":"fixme: document difference between warn and warning (or rename one better)"}
{"projectname":"jruby-1.4.0","classification":"DOCUMENTATION","comment":"fixme: only f_setfl and f_getfl is current supported fixme: only nonblock flag is supported fixme: f_setfl and f_setfd are treated as the same thing here. for the case of dup(fd) we should actually have f_setfl only affect one (it is unclear how well we do, but this todo is here to at least document that we might need to do more work here. mostly setfl is for mode changes which should persist across fork() boundaries. since jvm has no fork this is not a problem for us."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: call config with scope but no frame"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: ruby truncates string to specific size here, but our bytelist should handle this already?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: clone_setup here"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: must override in rubymodule to pick up constants"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: non-strict option"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: adjust length so it won't fall in the middle of a multi-byte character. mri's sprintf.c uses tables in a modified version of regex.c, which assume some particular encoding for a given installation\/application. (see regex.c#re_mbcinit in ruby-1.8.5-p12) this is only an issue if the user specifies a precision that causes the string to be truncated. the same issue would arise taking a substring of a bytelist-backed rubystring."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: \\r logic needed"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: note lack of command.com support for win 9x..."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: no need to calculate every time."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: create attrreadermethod, attrwritermethod, for faster attr access"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: 3 times calculate the same value below"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: opt for 2 and 3 ?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: optimize for cases where we have no false branch"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: don't use rubyio for this"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: after jump is not in here. will if ever be? label afterjmp = new label();"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: missing additional logic for dealing with conflicting protected fields."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: rescan code range ?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo deal with unc names"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: pass this in?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: missing arity check"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: warn \"tried to create proc object without a block\""}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: make threadsafe"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: port exact behavior from mri, and move most locking logic into channeldescriptor todo: for all lock_nb cases, return false if they would block"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: do something here?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: pipe handler to be reopened with path and \"w\" mode"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: check the return value here"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: when we get jna3 we need to properly write this to errno."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: other reserved names?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: better detection when path is absolute or not. if the path isn't absolute, then prepend the current working directory to the path."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: deal with varargs"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: store begin and end information into this node"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: ruby locks the string here"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: put these nil guards into tree (bigger than i want to do right now)"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: should we make this work with platform's locale, or continue hardcoding us?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: make bodynode non-null in parser"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: pass block down?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: add trace call?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: call ruby method"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: build arg list based on number of args, optionals, etc"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: check for ascii string"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"sss fixme: traverse up the scope hierarchy to find the constant as long as the parent is a static scope"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"xxx shouldn't check if valid option variable"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"sss fixme: should i be returning the operand constructed here?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: arg_concat missing for opt_call_args"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: add ir instructions for checking method arity! s.getvariablecompiler().checkmethodarity(required, opt, rest);"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: add safety check for taintedness"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: ruby 1.9 post args code needs to come here"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: make sure all appropriate open flags are added to this check."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"sss: fixme: somewhere here, we need to record information the type of this operand as string"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"xxx: check if it's appropriate type?"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: translate this call below! s.unwrappassedblock();"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"sublist.clear(); sublist is supposed to share same backing store as list...todo in rubyarray. asserttrue(list.size() == 1);"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"sss fixme: we need to build debug information tracking into the ir in some fashion so, these methods below would have to have equivalents in ir_scope implementations."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fix replace type() == ... with isinstanceof(...)"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"sss fixme: incomplete!"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"sss fixme: pick one of bytelist or string, or add internal conversion methods to convert to the default representation"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: check if too many open files, gc and try again"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"sss fixme: cannot optimize this without assuming that range.to_ary method has not redefined. so for now, return null!"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: this and recacherespondsto needed to be synchronized for jruby-3466, but this degraded performance nearly 2x. it's still faster than mri, but a reanalysis of this code may show a faster way to ensure we're caching safely."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"sss fixme: to be done"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: arg_concat logic missing for opt_call_args"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: implement, won't do this now"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: need to detect magic_comment in 1.9 here for encoding"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: we may be intern'ing more than once."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: validate port as numeric"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo same zero-length checks as file above"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: this code should really check if a ruby equals method is implemented or not."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: ruby unlocks the string here"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"if not already defined, we add a 'new' that guesses at which signature to use todo: just adding first one right now...add in signature-guessing logic"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: make thread pool threads daemons if necessary"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"filter out any java primitive names todo: should check against all java reserved names here, not just primitives"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: we can probably release our references to the constantfields array and static\/instance callback hashes at this point."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"do not clone cached methods fixme: mri copies all methods here"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: check safe, taint on incoming string"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: mri is just a when node. we need this extra logic for ide consumers (null in casenode statement should be implicit nil)"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: formalize conversion mechanisms between java and ruby"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: turn off readable? am i reading this right? this only seems to be used while duping below, since modes gets reset to actual modes afterward fptr->mode &= (m & fmode_readable) ? ~fmode_readable : ~fmode_writable;"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: someday, enable."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"bunch of methods still not implemented"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: make it cross runtime safe by cow or eager copy"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: don't calculate the same value 3 times"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: notify threads waiting on descriptors\/io? probably not..."}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: this needs to happen for lambdas args.checkargcount(runtime, parameters.length);"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"fixme: add text mode to mode flags"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: something about pipe buffer length here"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: mri also can hadle bignum here"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: handle errors in buffered write by retrying until finished or file is closed"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: this isn't handling multibyte yet"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: safestringvalue here"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: this should be something else like a tchar"}
{"projectname":"jruby-1.4.0","classification":"IMPLEMENTATION","comment":"todo: ruby re-checks that the buffer string hasn't been modified"}
{"projectname":"jruby-1.4.0","classification":"TEST","comment":"?r | boolean | true if file is readable by the real uid\/gid of the caller fixme: need to implement an readable_real_p in filetest"}
{"projectname":"jruby-1.4.0","classification":"TEST","comment":"?w | boolean | true if file1 exists and is writable by the real uid\/gid fixme: need to implement an writable_real_p in filetest"}
{"projectname":"jruby-1.4.0","classification":"TEST","comment":"todo add test methods here. the name must begin with 'test'. for example:"}
{"projectname":"jruby-1.4.0","classification":"TEST","comment":"if the method is extending something, then we have to test if the handler is initialized..."}
{"projectname":"jruby-1.4.0","classification":"TEST","comment":"todo make an assert here"}
{"projectname":"jruby-1.4.0","classification":"TEST","comment":"todo: make into an assert once i get things like blockbodynodes to be implicit nil"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"...and shift the result back to the left (multiply by 10**(abs(scale)))"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"exceptionnext target is for a next that doesn't push a new value, like this one"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"static methods only"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"prepare to call class definition method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"inside a loop, break out of it go to end of loop, leaving break value on stack"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"interrupt the target thread in case it's blocking or waiting warning: we no longer interrupt the target thread, since this usually means interrupting io and with nio that means the channel is no longer usable. we either need a new way to handle waking a target thread that's waiting on io, or we need to accept that we can't wake such threads and must wait for them to complete their operation. threadimpl.interrupt();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore switch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"switch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if element count is less than 6, use helper methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: ruby logic is somewhat more complicated here, see comments after"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return last value from execution"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_enc_mbclen"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reverse the entire area of the array selected if it's reversed."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a place to store that special hiding space that bindings need to implement things like: eval(\"a = 1\", binding); eval(\"p a\"). all binding instances must get access to this hidden shared scope. we store it here. this will be null if no binding has yet been called."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is the order in which mri does these two tests"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"copy out any buffered bytes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"restore the original exception"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate variable writers initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is the order in which mri does these tests"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the length is not a multiple of 8 we need to pad the last byte"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\" calculatelength()\/str=\" + str);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"used by our duck-typification of proc into interface types, to allow coercing a simple proc into an interface parameter."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"basically just forcing a typeerror here to match mri"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bind 'normal' parameter values to the local scope for this method."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"con: popen is a case where i think we should just always shell out."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end of variable scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'_' in number just ignored"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri 1.8.5-p12 doesn't support 1-char strings, but yarv 0.4.1 does. i don't think it hurts to include this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"&foo are not getting set from somewhere...i want the following assert to be true though assert variablevalues[offset] != null : \"getting unassigned: \" + staticscope.getvariables()[offset];"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check arity in the variable-arity version"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the reason why we need the stream is to be able to invoke available() on it. stdin in java is non-interruptible, non-selectable, and attempt to read on such stream might lead to thread being blocked without *any* way to unblock it. that's where available() comes it, so at least we could check whether anything is available to be read without blocking."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"grab nil for local variables"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"there are two different popular tz formats: legacy (ast+3:00:00, gmt-3), and newer one (us\/pacific, america\/los_angeles). this pattern is to detect the legacy tz format in order to convert it to the newer format understood by java api."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"special form of sprintf that returns a rubystring and handles tainted strings correctly. version for 1.9."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no extra args for rest"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"thread context, receiver and original args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"prepare a string with the same number of redundant slashes so that we easily can prepend it to the result."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we append an index to ensure two identical method names will not conflict"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"element set"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we have a body, do a full-on method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"close without removing from finalizers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"special form of sprintf that returns a rubystring and handles tainted strings correctly."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise decrement and possibly close as normal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"last index (+1) accessed by next() last index (+1) accessed by get()"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"isfoo() => foo, isfoo(*) => foo(*)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nofunctionalitysignalfacade"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"logevery n methods based on configuration"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get the value from the map via the key"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"finally, grab the script"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only whitespace allowed after value for strict"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"done processing args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rest of the argument array!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri doesn't flag it as an error if width is given multiple times as a number (but it does for *)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"new exception().printstacktrace();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\"head\" must have no non-trivial assigns (array groupings, basically)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"truncate can't lengthen files, so we save position, seek\/write, and go back"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class could not be found nor generated; give up on jit and bail out"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a scoped location of this variable (high 16 bits is how many scopes down and low 16 bits is what index in the right scope to set the value."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"sizes must match"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"oh, well, it was worth a try. go let double\/floatingdecimal handle it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we get here, no optz cases work; fall back on unoptz."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"super uses current block if none given"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next jump"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"test that requiring a normal java class raises an error (jruby-3214"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check args first, since body inspection can depend on args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"without a flush ant will miss some of our output"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"intdigits isn't used here, but if it were, it would be 1"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create the closure class and instantiate it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore; i don't like doing it, but it seems like we really just need to make all channels non-blocking by default and use select when implementing blocking ops, so if this remains set non-blocking, perhaps it's not such a big deal..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":".."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no-arg constructor using static references to ruby and rubyclass"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create the default thread group"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"there should only be one more thread in thread group than before we started"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip '-' in bytes, will add where appropriate"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"perform the dispatch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'d' and 'i' are the same"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"keep cr ?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"broken symlinks considered by exists() as non-existing, so we need to check for symlinks explicitly."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dup it since we need to return appropriately if it's false"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby uses qnil here, we use \"dummy\" because we need a class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if root of method is rescue, compile as light rescue"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"gotta have at least a zero..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"runtime.getwarnings().warn(id.struct_constant_redefined, frame.getfile(), frame.getline(), \"redefining constant struct::\" + name, name);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'u' with space or plus flags is same as 'd'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load null block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only supports simple parallel assignment of up to 4 values to the same number of assignees"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"switch for no exponent, so drop through for calculation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method has jited already or has been abandoned. bail out."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we have read ahead, and need to back up"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if a line is followed by a blank line put it back."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reuse trailing consecutive sequence at same slot"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"send it along as arity-specific, we don't need the array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"classes are directly in the hierarchy, so no special logic is necessary for implementer"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create method for toplevel of script"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we promote our box to being its own box since we're changing visibilities, and need it to be reflected on this method object independent of any other sharing the box."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[recv]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"has the method that is calling super received a block argument"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"argf, $< object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"done done done nothing to do for 1.8 done done done done done done done? done done done done done done done done done done done case definednode: return builddefined(node, m); incomplete done done done done done done done done case ensurenode: return buildensurenode(node, m); deferred done done done done case flipnode: return buildflip(node, m); sss fixme: what code generates this ast? done done done done done done done done done done done done done done done done done done? done done done done done done -- partially case opelementasgnnode: return buildopelementasgn(node, m); deferred sss fixme: what code generates this ast? done case postexenode: return buildpostexe(node, m); deferred case preexenode: return buildpreexe(node, m); deferred done?? done"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ok, we now have the significand in digits[0...ndigits] and the exponent in exponent. we're ready to format."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"serialization killed our dynamic scope. we can just create an empty one since serialization cannot serialize an eval (which is the only thing which is capable of having a non-empty dynamic scope)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"condition is always true, just compile it and not body"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby ignores empty syswrites"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$\/: input record separator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby's designation for some platforms, minus version numbers in some cases"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try optz version"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1615"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the environment variables can't be obtained, define an empty env"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1982"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"after defn of $stderr as the call may produce warnings"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for sockets, only write as much as will fit."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it's safe since adler.update doesn't modify the array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"redonode redonode = (redonode)node;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"too big for us"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"instance variable methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assign to appropriate variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip all whitespace in pack format string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"head must not be null and there must be no \"args\" (like *arg)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"need padding i'm fairly sure there is a library call to create a string filled with a given char with a given length but i couldn't find it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fall back on env entry for user"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compile into array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"index for the item"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"double-testing args.length here, but it avoids duplicating the proc-setup code in two places"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call getpwent to fail early if unsupported"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we force argparamcount to 1 since we always know we'll have [] args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"perform assignment for the next node"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?o | boolean | true if file1 exists and is owned by the caller's real uid"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"intdigits = 1;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 329"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compile first node only"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"also create the javaproxy* classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"drop through for non-strict digits"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"inside a loop, jump to conditional"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if root of method is rescue, compile as a light rescue"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, this iteration restarts"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"attempt to set the permissions, if we have been passed a posix instance, and only if the file was created in this call."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"always false or nil"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we're not the \"argument scope\" for zsuper, try our parent"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load args[0] which will be the irubyobject representing block args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"@jrubymethod public irubyobject to_proc() { return rubyproc.newproc(getruntime(), callblock.newcallclosure(this, getruntime().getsymbol(), arity.noarguments(), new toproccallback(this), getruntime().getcurrentcontext()), block.type.proc); }"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1565"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compile condition as non-expr and just compile \"then\" body"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must not be used across threads"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try to read grent to fail fast"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 818"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"since we're not actually duping the incoming channel into our handler, we need to copy the original sync behavior from the other handler"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[rubyclass] []"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compstmt position includes both parens around it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not actually called anywhere (all known uses call the fast version)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first we make modifications to the class, to adapt it to being both a ruby class and a proxy for a java type"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"empirical observations: null -> some arity argsnode == this.argsnode then check for arity changes newline(splatnode) -> argspushnode"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[irubyobject, rubyclass, visibility] [irubyobject, rubyclass] [irubyobject]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"parent container for this context (can be dynamic!!) if dynamic, at runtime, this will be the meta-object corresponding to a class\/script\/module\/method\/closure list of ir instructions for this method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reopen"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"long, big-endian"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\" stringtolong\/converted c=\" + c);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in certain places, like grep, we don't use real frames for the call blocks. this has the effect of not setting the backref in the correct frame - this delta is activated to the place where the grep is running in so that the backref will be set in an appropriate place."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"argf methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, allow loop to redo"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\" stringtolong\/reading c=\" + data[s]);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"even shift.. ..floors to 62 or 63 bit biginteger"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"need the array, use unoptz version"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"happens with native exceptions, should not filter those out"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 423"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore leading zeroes switch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"inspect body and args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next v g = 1 - 2*x*v"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[rubyclass] [rubyclass, rubyclass] [rubyclass] [] [self] [rubyclass] [rubyclass, rubyclass]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bouncy castle doesn't support algorithm"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can't do it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not normally used, but is left in here since it can be useful in debugging grammar and lexing problems."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1609"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"position within source must reflect the actual offset and column. since we ate an extra character here (this accounting is normally done in read ), we should update position info."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"colon3, assign in object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"synthetic methods always have zero arg parameters"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"last node, either !instanceof whennode or null, is the else"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we are presumably running a precompiled class; load directly"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if __send__ with a literal symbol, compile it as a direct fcall"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: if 's' happens to the a class, this is effectively an assignment of a class instance variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"define argv and $* for this runtime"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"once hasnext has been called, we commit to next() returning the entry it found, even if it were subsequently deleted"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"r = x * 2 ** y"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first try our custom-generated unsafe"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"aggregate when nodes into a list, unfortunately, this is no"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1362"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"doesn't fit in buffer. write immediately. ensure nothing left to write"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\"assignment\" means the value is already on the stack"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"paths which end in \"\/\" or \"\\\\\" must be stripped off."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is almost always already interned, since it will be called with a symbol in most cases but when created from java code, we might get an argument that needs to be interned. addaccessor has as a precondition that the string must be interned"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?s | int\/nil | if file1 has nonzero size, return the size, otherwise nil"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: be default, 2 digits in the exponent. use 3 digits only when necessary. see comment for writeexp method for more details."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the read buffer is ahead, back up"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"deal with length\/width"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"switch for no more data, ok for strict to go calc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next entry to return current slot current entry"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add setposition impl, which stores filename as constant to speed updates"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: in this mode trailing zeroes are removed: 1.500e+05 -> 1.5e+05"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next x e = d - x^2"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over remainder of buffer until we find a match"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first digit is always printed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"three args, no block; load null_block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the problem we trying to solve below: stdin in java is blocked and non-interruptible, so if we invoke read on it, we might never be able to interrupt such thread. so, we use in.available() to see if there is any input ready, and only then read it. but this approach can't tell whether the end of stream reached or not, so we might end up looping right at the end of the stream. well, at least, we can improve the situation by checking if some input was ever available, and if so, not checking for available anymore, and just go to read."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now, for all variables used by 'i' mark them live before 'i'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"these are only needed if we have a non-noop call config"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"because regexp#=== sets backref, we have to make this backref-aware"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: currently this optimization is limited to the following situations: * all expressions must be int-ranged literal fixnums it also still emits the code for the \"safe\" when logic, which is rather wasteful (since it essentially doubles each code body). as such it is normally disabled, but it serves as an example of how this optimization could be done. ideally, it should be combined with the when processing to improve code reuse before it's generally available."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ok, we have fast paths"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"copy what is in the buffer, if there is some buffered data"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if more than 4 vars, get values array too"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set to default thread group"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check the visibility of the previous frame, which will be the frame in which the class is being eval'ed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"optimistic pass - calculate value as digits are processed digits - lax rules decimal digits - lax rules exponent sign\/digits - lax rules digits - strict rules decimal digits - strict rules exponent sign\/digits - strict rules complete calculation if possible"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in this mode, '.' is always printed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1669"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"4 -> e+nn \/ e-nn"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"let rescuedblock continue"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the method also needs a scope, do both"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a 'next' is like a local return from the block, ending this call or yield."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build first node (and ignore its result) and then second node"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we're doing normal framed compilation or the method needs a frame"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try to look up field for simple name get field; if nonnull, go straight to dispatch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1136"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"long, slow way causes disabling"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"silence"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"precision for g\/g includes integer digits"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make a nil node if no body. notice this is not part of ast."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"5 -> e+nnn \/ e-nnn"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"lattice top, bottom, any values -- these will be used during dataflow analyses"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore this; select() will set the correct mode when it is finished"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"execute rescue block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1158"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if no exception is thrown execute else block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load all arguments straight through"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note segmentshift differs from concurrenthashmap's calculation due to issues with system.identityhashcode (upper n bits always 0, at least under java 1.6 \/ winxp)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"clear exception when handled or retried"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"proc implementing an interface, pull in the catch-all code that lets the proc get invoked no matter what method is called on the interface"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"what static scoping relationship exists when it comes into being."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the following constants capture pre-known static call sites -- used to implement ruby internals"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for 'foo'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"method handle, arg receive, return value, and call instructions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just rethrow"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we re-set self to the class, but store the old self in a temporary local variable this is to prevent it gcing in case the singleton is short-lived"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"tempering"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"read"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normalize the value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"s\/b true, since intlength > 0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arg2"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ok, now it gets expensive..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct the proxy method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"switch will use this if we have to go back the slow way"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"putting a bit back, so we're not at eof anymore"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yylen 496"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?s | boolean | true if file1 exists and is a socket"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"save entering the try if there's nothing to ensure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"common constant \/ cvar methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eq == 0 (i.e. false) [c]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"4!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"then try sun's unsafe"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'.' is printed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"value equality"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not saving dfs instance, as it will only be used once (at most) per call"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for 'foo()'. args are only significant in maintaining backwards compatible ast structure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"copy any buffered data (including ungetc byte)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yydgoto 136"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"need to clamp source (buffer) size to avoid overrun"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"digits array shifted, update all"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1081"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all precision numebers printed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"any biginteger is bigger than fixnum and we don't have fixable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now used as an interpreter event"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in method body with no containing loop, issue jump error load runtime and value, issue jump error"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store each line into this list if not null."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$>: default output handle"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only arrays that are \"lightweight\" are being used as args arrays"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"instance methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"explode array, it's an internal \"args\" array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"range_each_func(range, step_i, b, e, args);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"decimal form, like (but not *just* like!) 'f'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check if it's an immediate, and don't outline"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now some data..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check arity checkarity(mv, scope);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no actual test, so do 'when' if when expression is not nil"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"found a match above, check if remaining separator characters match, appending as we go"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore compiler pragmas"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"sss: looks like we receive the arg in buildblockargsassignment via the iternode we won't get here for argument receives! so, builddasgn is called for assignments to block variables within a block. as far as the ir is concerned, this is just a simple copy"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"translate ret = (a || b) to ret = (a ? true : b) as follows v1 = -- build(a) -- opt: ret can be set to v1, but effectively v1 is true if we take the branch to l. while this info can be inferred by using attributes, why bother if we can do this? ret = true beq(v1, true, l) v2 = -- build(b) -- ret = v2 l:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over the rubyhash keyset, simultaneously iterating over the values()"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assert !(value instanceof rubyarray) : \"not an array\";"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"else leave it null"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1649"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-646 presumably this require should fail"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1687"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we lazily initialize this in case readline.readline has been overridden in ruby (s_readline)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1725"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"clean-up string representation so that it could be understood by java's bigdecimal. not terribly efficient for now. 1. mri allows d and d as exponent separators"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1784"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"last conditional case, use defaultcase"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$$ = $3;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we do preand post load outside the \"body\" versions to pre-prepare and pre-push the dynamic scope we need for lastline"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"each root node has a top-level scope that we need to push"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we are creating a new io object that shares the same iohandler (and fileno)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"significant digits and exponent"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 563"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"evstrnode :\"#{some expression}\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the method doesn't need a scope, but has static scope needs; use a dummy scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mark as captured if from containing scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: serialization is primarily supported for testing purposes, and there is no general guarantee that serialization will work correctly. specifically, instance variables pointing at symbols, threads, modules, classes, and other unserializable types are not detected."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no such luck..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"new factory methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"equivalent of data_get_struct this will first check that the object in question is actually a t_data equivalent."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wake up any channels that became unblocked"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we know this is a block scope because a local scope cannot be within a local scope if topscope was itself it would have created a localasgnnode above."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"is the parser current within a singleton (value is number of nested singletons)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"force the client socket to be blocking"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"8!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, dynamicmethod, rubyclass, cacheentry, threadcontext, irubyobject, irubyobject, string, args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add real top to new top (unless this top is empty [only begin\/end nodes or truly empty])"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if reciever is self then we do the call the same way as vcall"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"11!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[c,c] [c, boolean]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return new calloneargnode(firstnode.getposition(), firstnode, operator, new arraynode(secondnode.getposition(), secondnode));"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fixme: what is correct 'recv' argument? (this does produce the desired behavior)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"block and block pass passed in at same time....uh oh"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"package scheme 2: separate module for each full package name, constructed from the camel-cased package segments: java::javalang::object,"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create constants for flock"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there's a second argument, it's the path to which the first argument is relative."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"extract item from array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create ruby proxies for any input arguments that are not primitives."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"zero-argument declaration"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nothing else to here - the module version will be included in the class."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yylen 542"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set the binding's frame's \"previous\" file and line to current, so trace will show who called the block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store to temp so it does null out on us mid-stream"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"kcode.none is used because kcode does not affect parse in ruby 1.8 if ruby 2.0 encoding pragmas are implemented, this will need to change"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"other args begin at index 1"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yydgoto 152"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this does the assignment!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yyrindex 945"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"flush first"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"switch if"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 540"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the name of the variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"seek to force underlying buffer to flush"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dynamically increase"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"brace to match it. bracket expressions must be"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"translate \"ret = (a && b)\" --> \"ret = (a ? b : false)\" --> v1 = -- build(a) -- opt: ret can be set to v1, but effectively v1 is false if we take the branch to l. while this info can be inferred by using attributes, why bother if we can do this? ret = false beq(v1, false, l) v2 = -- build(b) -- ret = v2 l:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 388"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"length check is a hack. we should not be reeiving \"\" as a filename ever."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 436"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\o, \\oo, \\ooo or backref"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1093"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java \/ and % are not the same as ruby"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java requires \"w\" for creating a file that does not exist"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create a new variable using the prefix"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 509"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check if the method has been explicitly excluded"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 785"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"switch while"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 592"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we limit reads to bulk_read_sized chunks to avoid nio allocating a huge temporary native buffer, when doing reads into a heap buffer if the dst buffer is direct, then no need to limit."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 633"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pre-create all the core classes potentially referenced during startup"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-530 until case"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we're not attempting to invoke method_missing and method is not visible, branch to method_missing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 666"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get the value from the map via the values iterator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 817"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, dynamicmethod, threadcontext, irubyobject, rubymodule, string, irubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 820"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now clear out any previously selected channels"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 902"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"seek to force read buffer to invalidate"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 947"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"lazily create class init only if necessary"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"13!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 977"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method takes as input a map of operands to their values, and outputs the result of this instruction. if the value map provides a value for any of the instruction's operands the expectation is that the operand will be replaced with the simplified value. it is not required that it do so -- code correctness is not compromised by failure to simplify. @param valuemap mapping from operands to their simplified values @returns simplified result \/ output of this instruction"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\" main\/len=\" + len);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"expect value to be an array of nodes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use same classindex as metaclass, since we're technically still of that type"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1060"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"proxy is under construction, building thread can safely read non-volatile value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1204"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"minus one more for irubyobject[]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1090"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bench straight-up long fib(30)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1149"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"translate \"x || y\" --> \"x = (is_true(x) ? x : y)\" --> x = -- build(x) should return a variable! -- f = is_true(x) beq(f, true, l) x = -- build(y) -- l:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eq != 0 (i.e. true)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get javaclass if this is the new proxy class; verify it matches if this is a superclass proxy."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"main while loop (offset < length)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$:: load path"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'.'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enebo: c can never be antrhign but '.' why did i put this here?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assign given optional arguments to their variables"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first, build an assignment for a splat, if any, with the rest of the args!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"experimental class reification support, to create real java classes for ruby classes after the first opening"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"attempt to load the found library"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the appropriate scope has proper size. see jruby-2046."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wait until thread has completed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"@jrubymethod(name = \"complex?\")"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"synchronize and re-check to avoid creating more than one selector per provider"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"}"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"populate up to shorter of calling arguments or local parameters in the block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"@jrubymethod(name = \"inexact?\")"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we use file test since it is faster than a stat; also euid == uid in java always"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"6!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set thread context jruby classloader here, for the main thread"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'.' and all precision digits printed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note that we'll potentially see the refs for both the java object and proxy -- whichever we see first will cause the entry to be removed; the other will not match an entry and will be ignored."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assign the default values, adding to the end of allargs"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check the entry.setvalue values come back out ok"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in-frame evalstate should already have receiver set as self, continue to use it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for prec 15 root x0 must surely be ok return small prec roots without iterations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dangling '%' char"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1079"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"when reading into a heap buffer, the jvm allocates a temporary direct bytebuffer of the requested size. to avoid allocating a huge direct buffer when doing ludicrous reads (e.g. 1g or more) we split the read up into chunks of no more than 1m"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"setfoo(foo) => foo=(foo)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"relatively cheap test for 32-bit values"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a while node could receive non-local flow control from any of these: * a closure within the loop * an eval within the loop * a block-arg-based proc called within the loop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'class << state.self' and 'class << obj' uses defn as opposed to defs"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement n"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri rounds up on nnn5nnn, but not nnn5 -- except for when they do"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"depending on size of original args, call appropriate utility method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\"%.0f\" % 0.99"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no dec digits after '.', error for strict"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"scope (method\/closure) to which this cfg belongs entry bb -- dummy exit bb -- dummy the actual graph next available basic block id"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"debugging code, keeping for now"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check for frame field reads or writes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bench fully-boxed fib"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri extends in order from last to first"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eq == 0 (i.e. false)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load object under value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"typematcher"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for 'b.foo()'. args are only significant in maintaining backwards compatible ast structure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"complete the request by filling the read buffer first"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"go through negated powers of 32 until we find one small enough"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"----------- public interface ------------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add to the corresponding positive power of 32 for the result. meaningful? no. conformant? yes. i just write the code..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's an array, only add methods for aref, aset, and length"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"attribute set."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"avoid double-copying for reads that are larger than the buffer size"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"identity equality"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"additional context surrounding tokens that both the lexer and grammar use."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1124"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri 1.8.6 behavior: null byte after '%' leads to \"%\" string. null byte in other places, like \"%5\\0\", leads to error."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get the control flow graph for this scope -- only valid for methods & closures"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"least significant r bits"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check current directory; if file exists, retrieve url and return resource"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"drop through for sign"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_enc_precise_mbclen"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1179"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add all names for this annotation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"most significant w-r bits"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no dec digits, end of parseable data, go to calc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set argv from main's args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"switch for"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"3!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"trim extension to try other options"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no more values to stick in rest arg"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 836"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arity.checkarity(runtime, argslength);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"---------- these methods below are used during compile-time optimizations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"done with closure compilation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 643"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1138"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"notify thread to proceed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 896"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1155"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: since we are processing asts, loop bodies are processed in depth-first manner with outer loops encountered before inner loops, and inner loops finished before outer ones. so, we can keep track of loops in a loop stack which keeps track of loops as they are encountered. this lets us implement next\/redo\/break\/retry easily for the non-closure cases"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no arg grouping, just use bulk assignment methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"should we run this pass on the current scope before running it on nested scopes?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first try to use drive letter from supplied dir value, then try current work dir."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 486"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"whether this scope is used as the \"argument scope\" for e.g. zsuper"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"constant vector a"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"will have a trailing '.' g fills trailing zeroes if"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yydefred 945"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 899"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"state[i] &= 0xffffffffl;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invoke method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"optargs and restargs require more work, so isolate them and arraylist creation here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check if we're a stdio io, and ensure we're not badly mutilated"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rounding neccessary"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-2435: aliasing eval and other \"special\" methods should display a warning we warn because we treat certain method names as \"special\" for purposes of optimization. hopefully this will be enough to convince people not to alias them."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"state[j] &= 0xffffffffl;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"start setup method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get \"self\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"looks like someone's trying to raise a java exception. let them."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"used only by the compiler\/interpreter (will set the literal flag)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this appears to be some windows-only mode. on a java platform this is a no-op"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":". array given to rest should pass itself . array with rest + other args should extract array . array with multiple values and no rest should extract args if there are more than one argument"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no timeout in critical section"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that separator is valid otherwise give it the default paragraph separator."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"msb is 1; assuring non-zero initial array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"readable only by thread building proxy, so don't need to be volatile. used to handle recursive calls to getproxyclass\/module while proxy is being constructed (usually when a constant defined by a class is of the same type as that class)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"never visited, should be fine"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"retry handling in the rescue blocks"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add in reverse order"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ok, it's a socket...set values accordingly just using af_inet since we can't tell from socketchannel..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we can callsite cache const_missing if we want"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"determine what sort of assigner should be used for the provided 'iter' (e.g. block). assigner provides just the right logic for assigning values to local parameters of the block. this method also has a second optimization which is to set 'noargblock' in the case that the block is a block which accepts no arguments. the primary reason for this second optimization is that in the case of a yield with a rubyarray we will bypass some logic processing the rubyarray into a proper form (only to then not do anythign with it). a secondary benefit is that a simple boolean seems to optimize by hotspot much faster than the zero arg assigner."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby grammar productions return plenty of nulls."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"change visibility so others can see it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can be overridden to be informed when objects are removed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"append what we read into our buffer and allow the loop to continue"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"bytelisttoinum(\" + str + \")\");"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"package-protected"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"something in here is used to build up ruby stack trace..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"equivalent to mri case '\\0':"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not reached"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: for 'q', do not add trailing nils"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: \"if digits is 0, the result is the same as the \/ operator.\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\" figureoutbase\/base=\" + base);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"result = eval(\"arr = array::['c', 200]; p arr\"); assertequals(\"[\\\"c\\\", 200]\", result); result = eval(\"arr = array.['d', 200]; p arr\"); assertequals(\"[\\\"d\\\", 200]\", result);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only public methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize all flow graph nodes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"see if module is in chain...cannot match against itself so start at superclass."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_reg_initialize_str"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"adapter, tc, recv, args{0,1}, block{0,1}]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubymodule module = context.getrubyclass();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"presumably this require should fail"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\" getsign\/\" + sign);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we could not find the constant from cref..then try getting from inheritence hierarchy"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for 'b.foo'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"accumulate call arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"getsign()\");"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"data.currentfile.callmethod(context, \"lineno=\", line);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\xhh"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"any exceptions raised must continue to be raised, skipping $! restoration"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1456"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there's a non-null superclass, we're including into a normal class hierarchy; update subclass relationships to avoid stale parent\/child relationships"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rethrow exception rethrow it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate constants initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"trailing garbage"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"zlib behavior: negative win_bits means no header and no checksum."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"produce a nicer error since rubyists aren't used to seeing this"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we have a specific-arity helper to construct an array for us, use that"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[irubyobject] [irubyobject, irubyobject] [irubyobject, rubyclass] [irubyobject, rubyclass, rubyclass] [irubyobject, rubyclass, visibility] [irubyobject, rubyclass, visibility, visibility]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load block from [] version of method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"our values holder (name of variables are kept in staticscope)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no number"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"to turn a module into an \"interface collection\" we add a class instance variable to hold the list of interfaces, and modify append_features for this module to call append_features on each of those interfaces as well"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"states"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"how far ahead we are when reading"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"calculatelength()\/str=\" + str);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the cache is full. abandon jit for this method and bail out."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1462"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we need to collect all methods, though we'll only install the ones that are named in this class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"portion of line right after beginning marker"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in case when the number of occurences is explicitly specified, we have to read up the remaining garbage after the '\\0' to satisfy the requested pattern."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we define an actual list to get around bug in java integration (1387115)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_iterate((value(*)_((value)))str_step, (value)args, step_i, (value)iter);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"string has it's own bytelist, but it's pointing to a shared buffer (byte[])"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\" stringtolong=\" + val);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eq == 0 (i.e. false) pop the extra result and replace with the send part of the and"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"constants for seek"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"colon3"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first char must be digit or decimal point"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if entry starts with a slash, skip it since classloader resources never start with a"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"re-register, since fileno points at something new now"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal return for method body. return jump for within a begin\/rescue\/ensure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"signal uses sun.misc.* classes, this is not allowed in the security-sensitive environments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior on windows: it treats '\/' as a root of a current drive (but only if single slash is present!): e.g., if current work directory is 'd:\/home\/directory', then '\/' means 'd:\/'. basically, '\/path' is treated as a *relative* path, relative to the current drive. ' path' is treated as absolute one."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now read unbuffered directly from the file"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"captures begin and end are used when not groups defined source string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$$ = new argauxiliarynode($1.getposition(), (string) $1.getvalue(), 1);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method takes as input a map of operands to their values, and outputs if the value map provides a value for any of the instruction's operands this method is expected to replace the original operands with the simplified values. it is not required that it do so -- code correctness is not compromised by failure to simplify"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it was not found at all!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"singleton methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"see if we already have this descriptor open. if so then we can mostly share the handler (keep open file, but possibly change the mode)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not synchronizing these methods, no harm if these values get set more than once. (also note that there's no chance of getting a partially initialized class\/module, as happens-before is guaranteed by volatile write\/read of constants table.)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for b.foo"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"does this method define code? default is yes -- which basically leads to pessimistic but safe optimizations but, for library and internal methods, this might be false."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not closing from finalize"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: this method produces meaningful results only for rubyio objects. for everything else returns 0."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we yield here to hopefully permit the target thread to schedule mri immediately schedules it, so this is close but not exact"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"instance config for the script run"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"special classes like collections.empty_list are inner classes that are private but implement public interfaces. their methods are all public methods for the public interface. let these public methods execute via setaccessible(true)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we have more than one arg, make sure the array created to contain them is not objectspaced"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wire up function#call(*args) to use the super-fast native invokers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1014"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"don't initialize with class don't put in object space and don't taint"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"translate \"x &&= y\" --> \"x = (is_true(x) ? y : false)\" --> x = -- build(x) should return a variable! -- f = is_true(x) beq(f, false, l) x = -- build(y) -- l:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fields used for direct (optimistic) calculation number of significant digits, updated as parsed zeroes that may go to significand or exponent offset of decimal pt from start (-1 -> no decimal) significand, updated as parsed exponent, updated as parsed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add (potentially) overridden names to the key. todo: see note above re: optimizations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we reached the end"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"declared type returns the qualified name without $ for inner classes!!!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"goto next bucket"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: value given in seconds; converted to float; less than or equal to zero returns immediately; returns nil"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we reached the end of a list"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rest arg must be splatted"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: varargs?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:) into individual whennodes. the primary reason for this is to ensure lazy evaluation of the arguments (when foo,bar,gar:) to prevent side-effects. in the old code this was done using nested when statements, which was awful for interpreter and compilation. notes: this has semantic equivalence but will not be lexically equivalent. compiler needs to detect same bodies to simplify bytecode generated."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note all fields are final -- rehash creates new entries when necessary. as documented in java.util.concurrent.concurrenthashmap.java, that will statistically affect only a small percentage (< 20%) of entries for a given rehash."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"remove leading whitespace (includes _ for lax) get sign, if any"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single precision, native single precision, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if refcount is at or below zero, we're no longer valid"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"modelled after c ruby implementation (java \/,% not same as ruby)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"correct position for read \/ write buffering (we could invalidate, but expensive)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\"else\" body"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1207"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"determine if the parameter might be passed as a 32bit int parameter. this just applies to buffer\/pointer types."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this constructor is used by fdopen, so we don't increment descriptor ref count"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"inner class, use $ to delimit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"copy constructor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"backwards-compatibility, but threadsafe now"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build first node only and return true"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unicode is can be only 21 bits long, int is enough"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"<=> may return nil in many circumstances, e.g. 3 <=> nan"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip anything not related to jruby"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"block argument assignment, if there's a block arg"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yylhs 496"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check the length every iteration, since the block can modify this string."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$+: string matches last paren."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unlike weakhashmap, our entry does not subclass weakreference, but rather makes it a final field. the theory is that doing so should force a happens-before relationship wrt the weakreference constructor, guaranteeing that the key will be visibile to other threads (unless it's been gc'ed). see jls 17.5 (final fields) and 17.4.5 (happens-before order) to confirm or refute my reasoning here."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"args should be at end"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: it's not clear to me why, in floatingdecimal, the \"slop\" calculation performed above for positive exponents isn't used for negative exponents as well. will find out..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"should alter global state"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eval value and save it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"start a new populator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we need to ensure that the variable names generated here cannot conflict with ruby variable names! hence the \"%\" tthat is appended to the beginning!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"@jrubymethod(name = \"new\", meta = true, visibility = visibility.private)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby code frequently uses a platform check to choose \"nul:\" on windows but since that check doesn't work well on jruby, we help it out"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, allow loop to retry"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"args should be before block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the solution has changed, add \"dsts\" to the work list. no duplicates please which is why we have bbset."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"option_to_str"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct the top-level execution frame and scope for the main thread"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"+++ helper methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"is this instruction live or dead? during optimization passes, if this instruction causes no side-effects and the result of the instruction is not needed by anyone else, we can remove this instruction altogether without affecting program correctness."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check the 2 values obtained via different means"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"10!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not true, eval value and assign"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case rescuenode: return buildrescue(node, m); deferred case retrynode: return buildretry(node, m); deferred done"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_enc_reg_error_desc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"explicit zero in mri returns immediately"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_reg_initialize"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we do have another slash; omit both \/ and . (jruby-1606)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\\\u{h hh hhh hhhh hhhhh hhhhhh ...}"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in the case of two arguments, mri will discard the portion of the first argument after a decimal point (i.e., \"floor\"). however in the case of a single argument, any portion after the decimal point is honored."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first, iterate over all required args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"are we recursing?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assign the values."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all these types are immediately considered \"defined\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"called before any write to make sure the header is always written before the first bytes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"newinstance here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no match, append remainder of buffer and continue with next block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"inner switch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"utf8 lead byte"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_reg_desc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"raise will also wake the thread from selection"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\m-x, \\m-\\c-x, \\m-\\cx"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set up a local ruby variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"negative values"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"encountered a node we don't recognize, set everything to true to disable optz"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if no release method is defined, then memory leaks will result."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no seconds, just yield"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: this is where we would want to do precision checks to see if it's non-destructive to coerce a given type into the target integral primitive"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, cacheentry, threadcontext, irubyobject, irubyobject, string, irubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 449"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must be called from synchronized\/locked block! should only be called by variabletablestore\/variabletablefaststore"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\\\uhhhh"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we may need to subtract addition offset off of first"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 495"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"finally, set javasupport.isenabled to true"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can't create custom classloaders"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"surrogates"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we fail to find as a normal ruby script, we try to find as an extension, checking for a builtin first."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\0, \\0o, \\0oo"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1070"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set up a local iruby variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"execute command with sh -c this does shell expansion of wildcards"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there's no receiver, evaluate and pass in the superclass, or pass self if it no superclass"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build the new module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1190"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in debug mode we append _dbg to class name to force it to regenerate (or use pre-generated debug version)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"process any set of annotations no supported options"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"let the width (if any), get processed in the next loop, so any leading 0 gets treated correctly"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ok, got a non-zero, have to own up to our horded zeroes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 317"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"14!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case ruby_hybrid: backtrace = threadcontext.createrubyhybridbacktrace(getruntime(), backtraceframes, javastacktrace, getruntime().getdebug().istrue()); break;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"management\/monitoring"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add to the jitted methods set"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"adding a post-invoke for the cb result serves to both keep it alive until after the function returns, and allows us to clean up the native trampoline early, instead of letting them accumulate until a gc run"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assertsame(script1, script2);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this test really means, that this is a ruby-defined subclass of a java class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore leading zeroes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make the class name look nice, by splitting on _ and capitalize each segment, then joining the, together without anything separating them, and last put on \"service\" at the end."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1236"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for fast lookup: encoding entry => org.jruby.rubyencoding"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mbclen_needmore_p"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"retryjump, cacheentry, threadcontext, irubyobject, irubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"other java proxy classes added under their superclass' java proxy"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1217"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"here are hash internals (this could be extracted to a separate class but it's not too large though)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the next scope out has the same binding scope as this scope it means we are evaling within an eval and in that case we should be sharing the same binding scope."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"atomic integers for symbol and method ids"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, dynamicmethod, rubyclass, cacheentry, threadcontext, irubyobject, irubyobject, string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we know what method was being called, strip everything before the call. this hides the jruby and reflection internals."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"18!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the replacement \"new\" allocates and inits the ruby object as before, but also instantiates our proxified java object by calling __jcreate!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can't support the rest with java"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"limit the length of negatives if possible (also faster)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"else catch oversize below"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"avoid double-copying for reads that are larger than the buffer size, or the destination is a direct buffer."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"22!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"string construction routines by not byte[] buffer and not making the target string shared"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri also does a pointer comparison here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"an atomic long for generating dynamicmethod serial numbers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 794"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\c-x, \\c-\\m-x"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"by default, call instructions cannot be deleted even if their results aren't used by anyone unless we know more about what the call is, what it does, etc. similarly for evals, stores, returns."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: always check whether the file is writable or not, even if we are to write 0 bytes."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assuming the user wants a collection of interfaces that can be included together. make it so."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this covers primitives and (unlikely) lower-case class names"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"raw file url, just open directly"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end of parseable data, go to calc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not an expression, only compile the elements"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build a new class and add it to the current scope (could be a script \/ module \/ class)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"define a second version that doesn't take a block, so we have unique code paths for both cases."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"value of \"tz\" property is of a bit different format, which confuses the java's timezone.gettimezone(id) method, and so, we need to convert it."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fill in all vars with nil so compiler is happy about future accesses"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check file size - special files in \/proc have zero size and need to be handled by the generic read path."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"multimethod, new logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"select appropriate call site dup receiver load self"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we only add live threads"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement three"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"because we implement java interfaces now, we need a new === that's aware of those additional \"virtual\" supertypes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"double.max_exponent since java 1.6"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"currently dead code, but useful when we figure out how to actually perform translit. private static boolean istranslit(string encoding) { return encoding.tolowercase().indexof(translit) != -1 ? true : false; }"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"af_inet"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"haven't found a class, continue on as though it were a package"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"insert all nodes in sequence, hash them in the final instruction key"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby arrays default to holding 16 elements, so we create an arraylist of the same size if we're not told otherwise"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\cx, \\c\\m-x"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"marsaling dumps usec, not msec"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement three to n with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"low-level constant interface fetch\/store\/list constants for this module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"base64"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"since we don't have any other error reporting mechanism, we add the error message as an always-failing test to the test suite."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note nemes_gamma can return double.positive_infinity or double.negative_infinity when value is an integer less than 1. we treat 0 as a special case to avoid domain error."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this while loop is for restarting the block call in case a 'redo' fires."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\ooo"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the converters handle not only primitive types but also their boxed versions, so we should check if we have a converter before checking for isprimitive()"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 537"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bindings scopes must always be manyvars scopes since evals can grow them"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"cruby uses sprintf(buf, \"%.*g\", float_dig, d); this pattern adjusts the output of string.pattern(\"%g\") to mimic the c version."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"register any new blocking i\/o requests"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject protocol = args[4];"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set a value in the rubyhash"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"temp locals must start after last real local"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next immediate scope. variable and constant scoping rules make use of this variable in different ways."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"sign"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we are setting post arguments we can assume there are no pre or others"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"carriage return"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"clear runtime so it doesn't get stuck in memory (jruby-2933)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add script#run impl, used for running this script with a specified threadcontext and self root method of a script is always in __file__ method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"handle everything after -- as arguments to the jruby process"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arg cannot be negative"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby's omg capture all source in a hash feature add each line to buffer when encountering newline or eof for first time."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1261"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must be at least one digit for strict"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"discarding a token does not change stack"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"one word type name that starts lower-case...it may be a primitive type"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"save sourceline for error reporting to display line where error occurred"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first non_underscore char must be digit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we're already aborting, we can receive no further mail"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mask off \"once\" flag"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?b | boolean | true if file1 is a block device"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"synchronize on the rubythread for threadgroup updates"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enebo: can these be fast?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 952"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jrubyservice"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make mantissa same sign so we only have one code path."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"internal usage (complex\/rational)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1772"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"long-hand (e.g. %q{})."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"string construction routines by not byte[] buffer and making the target string shared"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"r\/w buffer are we reading or writing?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubydigest"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case sclassnode: return buildsclass(node, m); deferred done done done done done done done done case undefnode: return buildundef(node, m); deferred done case valiasnode: return buildvalias(node, m); deferred done done"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first char must be digit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"decrease value to hit upper range."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"entry is the first element of this bucket"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"keyword keyword = keyword.getkeyword(tempval, tempval.length());"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compile first node as non-expr and then second node"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for each simple method name, implement the complex methods, calling the simple version"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"caching constructors, as they're accessed for each new instance"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?z | boolean | true if file1 exists and has a zero length"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"define the annotation for the method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"basic block id cfg that this basic block belongs to all basic blocks have a starting label list of non-label instructions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"is there a supplied proc argument or do we assume a block was supplied"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise one key has been selected (ours) so we get the channel and hand it off"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"lax (str.to_f) allows underscores between e\/e and sign"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"file not given"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"provider is not available"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we set all java methods to optional, since many\/most have overloads"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"implement is called to force this class to create stubs for all methods in the given interface, so they'll show up in the list of methods and be invocable without passing through method_missing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first, iterate over all pre args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"don't override numeric#div !"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the instant at which we will ask dtz what the difference between dst and standard time is"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"finally handling for abnormal exit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 735"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java doubles are 64 bit long:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$': string after last match"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\".\" dir is used for relative path loads from a given file, as in require '..\/foo\/bar'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fall back to system jca providers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there was a good library before, we go back to that"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a gotcha for long.min_value: value = -value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"block argument to the method closure present class present method table mutations, def, defs, undef, alias likely call to eval makes calls that are aware of the frame makes calls that are aware of the frame's self makes calls that are aware of the frame's visibility makes calls that are aware of the frame's block makes calls that are aware of the frame's name makes calls that set or get backref makes calls that set or get lastline makes calls that are aware of the frame's class optional arguments to the method rest arg to the method makes calls that are aware of the scope makes a zero-argument super call accesses or sets constants accesses or sets class variables makes normal super call contains a retry"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for all uninitialized specific arities, we defer to the \"n\" method which should raise appropriate error in all cases."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1935"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case ir instructions are dummy instructions -- all when\/then clauses have been converted into if-then-else blocks"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"look for mangling markers for bound, framed methods in class name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build closure body and return the result of the closure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: we don't print errno for actual errno errors"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"numeric.equal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"copy and splat arguments out of the scope to use for zsuper call"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"leave it null and fall back on our normal invocation logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set of utility methods for java-based proxy objects"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reset the $loadtestvar"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all errors to sysread should be systemcallerrors, but on a closed stream ruby returns an ioerror. java throws same exception for all errors so we resort to this hack..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we were woken up without being selected...poll for thread events and go back to sleep"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"deal with case when \"other\" is not a string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the 1 is for the stripped sign char"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"need to initialize"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"uber-threadkill catcher, since it should always just mean \"be dead\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single-quote fast path"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is now needed, since module java isn't in by default"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"how many occurrences of 'type' we want"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make sure all arguments are modules before calling the callbacks"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?g | boolean | true if file1 exists and has a group ownership equal to the caller's group"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fall through"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create list of interface names to proxy (and make sure they really are interfaces) also build a hashcode from all classes to use for retrieving previously-created impl"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\v"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we depart here from strict adherence to mri code, as mri uses c-sprintf, in part, to format numeric output, while we'll use java's numeric formatting code (and our own)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"write-volatile"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just push nil for pragmas"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"receiver"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"indices for temp values"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"char hexvalue = scanhex(2);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the default allocator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bench fixnum-boxed fib"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the load method is used for loading as a top-level script, and prepares appropriate scoping around the code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create constructorinstaller; if there are no constructors, it will disable construction"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1282"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, rubyclass, cacheentry, threadcontext, irubyobject, irubyobject, string, args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"non-signature signature with just irubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enebo: 1.9 is is_arg, but we need to break apart for 1.8 support."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first, build assignments for specific named arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"instance variable ruby methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"public object invoke(object receiver, object arg0, object arg1, object arg2, object arg3) { throw fail(); } public object invoke(object receiver, object arg0, object arg1, object arg2, object arg3, object arg4) { throw fail(); }"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the counting of slashes that follows is simply a way to adhere to ruby's unc (or something) compatibility. when ruby's expand_path is called with \" foo bar\" it will return \" foo\/bar\". jruby uses java.io.file, and hence returns \"\/foo\/bar\". in order to retain java.io.file in the lower layers and provide full ruby compatibility, the number of extra slashes must be counted and prepended to the result."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"will have a trailing '.'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we have more than one argument, then make sure the array is not objectspaced."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"octal constant"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end of hash internals"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"x0 ~ sqrt()"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"standard constructor that accepts ruby, rubyclass"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"strip off \"_dot_rb\" for .rb files"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"0x3fff_ffff -0x4000_0000"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] assert argsnode != null : \"argsnode is not null\";"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we have optimized switch cases, build a lookupswitch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we've found the last char of the separator, and we've found at least as many characters as separator length, and the last n characters of our buffer match the separator, we're done"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it doesn't handle special cases"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"truncate buffer string to zero, if provided"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"save blocking state"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the java method doesn't care what class it is, but we need to know what to convert it to, so we use the object's own class. if that doesn't help, we use string to force a call to the object's \"to_s\" method."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: we change current frames visibility here because the methods which call this method are all \"fast\" (e.g. they do not created their own frame)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"force static scope to claim restarg at 0, so it only implements the [] version of __file__"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"on platforms without a c-library accessable through jna, getpid will return hashcode as $$ used to. using $$ to kill processes could take down many runtimes, but by basing $$ on getpid() where available, we have the same semantics as mri."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"save the ungot"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement zero to n"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"inside a loop, jump to body"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore; we won't use invokedynamic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we take the first method found as our \"n\" method, since for any non-specific arity they'll all error the same. if an actual \"n\" method is created, we use that."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fill up the rest with zeroes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we know variables cannot be null since localstaticscope will create a 0 length one."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 964"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invoke static __file__"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1269"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"equivalent of t_data"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"at end"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unsigned int, native unsigned long, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bang: true, no match, no substitution"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we only need to pass in current scope if we are evaluating as a block (which is only done for evals). we need to pass this in so that we can appropriately scope down to captured scopes when we are parsing."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: mri has a very non-trivial way of calculating the precision, so we use very simple approximation here:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we do this b\/c make_tmpname might be overridden"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri ignores seek errors, presumably for unseekable files like serial ports (jruby-2979), so we shall too."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"advance to first entry"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"remove us from old superclass's child classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"self method name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java's select doesn't do anything about this, so we leave it be."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store argument count information into scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"-1 no match; 0 it is dot file not extension"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore; job was cancelled fixme: is this ok?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not using a new scope, use saved one for a flat closure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"undefinedmethod should be immutable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"don't bother"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return result"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"(1|intlen)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"methods with required = 4 or higher should bind and be callable using reflection jruby-3649"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fall back on empty env when security disallows environment var access (like in an applet)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"out of byte range there will be no match for sure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"self"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"last expression should not be void"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"variable args no block, load null block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set constants now that they're initialized"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load should work several times in a row"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"convert into longs, returning unsigned 64-bit values as signed longs ( num2long raises a rangeerror on values > long.max_value )"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct a new cache with thread's classloader and no limit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get current context"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do not load the class if not used"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"public class hello { public static string getmessage() { return \".....\"; } }"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"proc class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, we try an unbuffered read to get whatever's available"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we check length == 0 for 'load', which does not use load path"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"could be pulled down to rubyclass in future rb_class_boot"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we always open this rw since we can only open it r or rw."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-1000, fail early when attempting to subclass a final java class; solved here by adding an exception-throwing \"inherited\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise fall back on system temp location"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this point is only reached if there was an exception handler installed."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) -1 -> 10's digit, -2 -> 100's digit, etc."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1213"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add us to new superclass's child classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"force t3 to quit, just in case if it's stuck. note: on some platforms, even interrupt might not have an effect if the thread is io blocked."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"handle flow exceptions, just propagating them"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: contrary to what seems to be logical, when '*' is given, mri calculates the distance to the end, in order to go backwards."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"block given"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"constructor for internal usage (mainly for array#|, array#&, array#- and array#uniq) it doesn't initialize ifnone field"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"register the new descriptor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this really needs to be inlined here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unfortunately, the number of digits in the exponent is not clearly defined in ruby documentation. this is a platform\/version-dependent behavior. on linux\/mac\/cygwin\/*nix, two digits are used. on windows, 3 digits are used. it is desirable for jruby to have consistent behavior, and the two digits behavior was selected. this is also in sync with \"java-native\" sprintf behavior (java.util.formatter). e or e"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"1!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"libc flushes writes on any read from the actual file, so we flush here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only in ruby 1.9 methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"1.9 rb_check_to_integer"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just save a count of zeroes for now; if no digit ends up following them, they'll be applied to the exponent rather than the significand (and our max length for optimistic calc)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"methods and closures"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1925"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the requested precision"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"boot the module and class classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"used for tiny smidgen of grammar in lexer (see setparsersupport())"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initial precision is that of double numbers 2^63\/2 ~ 4e18 63-1 an even number of number bits precision seems 16 to 18 digits"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"support io modes that this object was opened with"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no classcastexception!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: with tz equal to \"gmt\" or \"utc\", time.now is *not* considered as a proper gmt\/utc time: env['tz']=\"gmt\" time.now.gmt? ==> false env['tz']=\"utc\" time.now.utc? ==> false hence, we need to adjust for that."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"-------------- packaged\/protected fields and methods below ----------------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"declare the field"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: #fix has only no-arg form, but truncate allows optional parameter."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal exit, perform finally and return"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check arity"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only supports simple parallel assignment of up to 10 values to the same number of assignees"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this field is used during argument processing to avoid putting rubyarray instances that are purely for utility purposes into objectspace."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no hex value after the 'x'."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"install direct java methods with mangled name so 'send' can call them directly."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"(1|intlen).prec"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"called only by initializing thread; no synchronization required"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get a new label using a generic prefix"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invoke pre method stuff"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"always need at least a 0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"methods of the object class (rb_obj_*):"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"processes seem to have some peculiar locking sequences, so we need to ensure nobody is trying to close\/destroy while we are"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"profile"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"equivalent of data_wrap_struct"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"file given, use it and force it into binding"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"from encoding, special-casing ascii* to ascii"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class.allocate object is not allocatable before it is initialized"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ensure the object is associated with the wrapper we found it in, so that if it comes back we don't re-wrap it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, cacheentry, threadcontext, irubyobject, irubyobject, string, args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return sqrt(squard) with precision of rootmc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubystring aka rb_string_value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initial x - use double root - multiply by halfback to unshift - set new scale"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"retrieve call site from sites array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"0.0 is ok float range inverted float range? nan +infinity -infinity"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if 'r' is not a constant, it could actually be a compound value! look in our value map to see if we have a simplified value for the receiver."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arg"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we can assign if we already have variable of that name here or we are the only scope in the chain (which local scopes always are)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"boot the object class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"special case for handling accmode, since constantine will generate an invalid value if it is not defined by the platform."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"coerce arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get a new label using the provided label prefix"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initial size state stack value stack current input #tokens to shift"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set this class's method names in var @__java_ovrd_methods if this is the new class; otherwise, get method names from there if this is a proxy superclass."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no binding given, use 0 for both"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we create one extra dynamicscope on a binding so that when we 'eval \"b=1\", binding' the 'b' will get put into this new dynamic scope. the original scope does not see the new 'b' and successive evals with this binding will. i take it having the ability to have succesive binding evals be able to share same scope makes sense from a programmers perspective. one crappy outcome of this design is it requires dynamic and static scopes to be mutable for this one case."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"expected"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"variables live at entry of this node variables live at exit of node temporary set of live variables size of the \"_in\" and \"_out\" bit sets"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore backslashed spaces in %w"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must have been loaded from our known classloader hierarchy"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invert the sign, since tz format and java format use opposite signs, sigh... also, java api requires the sign to be always present, be it \"+\" or \"-\"."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, dynamicmethod, threadcontext, irubyobject, rubyclass, string, irubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"tainting here if we ever want it. (secure 4)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a thread pool to use for executing this runtime's ruby threads"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":".append(\" -x[directory] strip off text before #!ruby line and perhaps cd to directory\\n\")"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note that this object equality check is intentional, to ensure the string and its interned version are the same object."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_match_busy"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assert internedsymbol == internedsymbol.intern() : internedsymbol + \" is not interned\";"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"allow proxy to be read without synchronization. if proxy is under construction, only the building thread can see it."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"does this instruction have side effects as a result of its operation this information is used in optimization phases to impact dead code elimination and other optimization passes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct local variables based on parameter names passed in"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if any exceptions were raised, we fail"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we're running from within an ide we may not have the .rb files in our classpath. try to find them in the filesystem instead."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$!: error string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"extra args for rest"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1105"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"label for the start of the method label for the end of the method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use array as-is, it's a literal array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"let m be the exact digits precision in an earlier! loop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bench straight-up integer fib(30)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bench integer fib"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reset the state"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"save package module as ivar in parent, and add method to parent so we don't have to come back here."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"obtain d"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 159 \"-\" %token constants"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"1.8"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"comparisons & checks checks if the operand is non-null and non-false eqq a === call used only for its conditional results, as in case\/when, begin\/rescue, ..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fixme: jruby-3604"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store call information so method_missing impl can use it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use parent's marshal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"actual required is greater than 3, raise error (we don't support actual required > 3)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"tries to load at compile-time the constant referred to by 'constref'. this might be possible if the constant is defined and is not a forward reference to a value that will be defined later in the class."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: week values are monotonous. so, weeks that effectively belong to previous year, will get the value of 0, not 52 or 53, as in java."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build scope names string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arg grouping, use slower arg walking logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for nodes do not have their own scope so we pass null to indicate this. 'for's are implemented as blocks in evaluation, but they have no scope so we just deal with this lack of scope throughout its lifespan. we should probably change the way this works to get rid of multiple null checks."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"always use \"gmt\" since that's required by java api."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"explicitly use utf-8 here. c.f. history.addtohistory using line.asutf8()"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"remaining arguments are for the script itself"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assertequals(\"\\\"foo\\\"\\n\\\"bar\\\"\", eval(\"$h.each {|val| p val}\")); assertequals(\"[\\\"foo\\\", \\\"bar\\\"]\", eval(\"p $h.each {|val| }\"));"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 280"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if an io exception occurs (something odd, but possible) a directory may return null."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all done with lookup attempts, release monitor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"notify the calling thread that we're about to go to sleep the first time"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"6:tags 16:addr 1:eos"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1115"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use numbered access method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"keep a reference to the temporary memory in the cache so it does not get freed by the gc until the struct is freed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"obtain c"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"classid is the name of the class\/module sans where it is located. if it is null, then it an anonymous class."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"here we create an \"anonymous\" exception type used for unrolling the stack. mri creates a new one for *every call* to timeout, which can be costly. we opt to use a single exception type for all cases to avoid this overhead."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"finally"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"start off with a neutral parent"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"static private final string translit = \" translit\";"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"double precision, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"value of last token which had a value associated with it."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"obtain a"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rename is successful"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not enough bytes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"specialized for value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must let original string know we're modifying, so shared buffers aren't damaged"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"treat start and end as start...end for end >= 0, start..end for end < 0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return warnmultireturnnil(ruby);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1279"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"specific arity"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"push(0). if you look at original macro: stack |= (n&1) => stack |= 0 => no-change."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: 1.9 rb_enc_symname_p"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if adding a module under a constant name, set that module's basename to the constant name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"common variable methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not that is loaded loop around to resolve it next pass"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 335"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if more than 4 locals, get the locals array too"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"limit each iteration to a max of bulk_read_size to avoid over-size allocations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"actualpath = new file(rubyfile.expanduserpath(runtime.getcurrentcontext(), reportedpath));"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not so backwards-compatible here, but no one should have been calling this anyway."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"open up the 'to_java' and 'as' coercion methods on ruby objects, via kernel"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"update superclass reference"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load always uses irubyobject[], so simple closure offset calculation here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only this case affects backrefs"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"methods of the nil class (nil_*):"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"declare those components as beans in bsf. then it will be possible to access those components in ruby as global variables ($frame, $menubar, ...)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"represents the the dynamic portion of scoping information. the variablevalues are the values of assigned local or block variables. the staticscope identifies which sort of scope this is (block or local). properties of dynamic scopes: 1. static and dynamic scopes have the same number of names to values 2. size of variables (and thus names) is determined during parsing. so those structured do not need to change fixme: when creating dynamic scopes we sometimes accidentally pass in extra parents. this is harmless (other than wasting memory), but we should not do that. we can fix this in two ways: 1. fix all callers 2. check parent that is passed in and make if new instance is local, then its parent is not local"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"c: bind_eval"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if \\r\\n then just pass along \\n (windows). if \\r[^\\n] then pass along \\n (mac)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"utility methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try to load the specified name; only if that fails, try to define the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's a singleton class and the real class is proc, we're doing closure conversion so just use proc's hashcode"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check for thread events, in case we've been woken up to die"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we do both writable and writable_real through the same method because in our java process effective and real userid will always be the same."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"module methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"remove the executor task now, to avoid cancelled tasks accumulating until an executor thread can schedule and remove them"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement two to n with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"but there's a superclass passed in, use it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?w | boolean | true if file1 exists and is writable by effective uid\/gid"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, fall back on default compiler below"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call throwexception via jruby"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assume ninit = 16 <= prec"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add aliases in type::*, nativetype::* and ffi::type_*"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we set scope-aware to true to force heap-based locals"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal file descriptor..try to work with it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubygems is too specific on host cpu so until we have real need lets default to universal setconfig(confighash, \"arch\", system.getproperty(\"os.arch\") + \"-java\" + system.getproperty(\"java.specification.version\"));"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invalid ranges result in an empty string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"close process output see jruby-3405; hooking up to parent process stdin caused problems for irb etc using stdin."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is needed to unpack stuff"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"refresh call adapter, since it matters if this is iter-based or not"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add property name aliases"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rehash the table if the threshold is exceeded"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ordering of array traversal not important, just intuitive"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we already confirmed above that length > 0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there is exactly _one_ callback argument to the function, then a block can be given and automatically subsituted for the callback parameter."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"128k seems to be the minimum at which the stat+seek is faster than reallocation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby interpreter compatibilty usage: ruby [switches] [--] [programfile] [arguments])"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"define system.getproperties() in env_java"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"@jrubymethod(name = \"exact?\")"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"terminate and advance buffer when we find our char"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there's no second argument, simply use the working directory of the runtime."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wow, the only time we can use the java protocol ;)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"internal variable methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"makes sure the key is not already in the hashtable."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check for special shell characters [<>|] at the beginning and end of each command word and don't run in process if we find them."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"there is something valid in the sun_path component"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try lookup again under lock"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"figureoutbase()\/base=\" + base);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"symbol class methods."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nested class whose instances act as thunks reacting to to_str method called from (exception#to_str, exception#message) mri equivalent: rb_cnameerrormesg, class name: \"message\", construction method: \"!\", to_str implementation: \"name_err_mesg_to_str\" todo: this class should not be lookupable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no block from a nil proc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"setting the loader needs to reset the class cache"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the main stream is set to null"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"until we get a little more solid on 1.9 support we will only run interpreted mode"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method is intended only for defining new classes in ruby code, so it uses the allocator of the specified superclass or default to the object allocator. it should not be used to define classes that require a native allocator."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yysindex 889"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yygindex 136"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"backspace"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load target for invocations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"void methods should work"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"verify it if it's there"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"difficult case, send to double\/floatingdecimal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"init"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"asserttrue(rubyobject.kind_of(ruby.getclasses().getstringclass()).isfalse());"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"from commandlineparser"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"adjust for buffered data"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"v += g*v ~ 1\/2\/sqrt()"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"package-private"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"getsimplifiedoperand returns the value of this operand, fully simplified getsimplifiedoperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away the value is used during optimizations and propagated through the ir. but, it is thrown away after that. but, the operand form is used for constructing the compound objects represented by the operand. example: a = [1], b = [3,4], c = [a,b], d = [2,c] -- getvalue(c) = [1,[3,4]]; getsimplifiedoperand(c) = [1, b] -- getvalue(d) = [2,[1,[3,4]]]; getsimplifiedoperand(d) = [2, c] note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. so, if contents of a or b is modified, the \"simplified value\"s of c and d also change! this difference is captured by these two methods."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"int n = 10;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"x += e*v ~ sqrt()"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-2380, associate future early so it shows up in thread.list right away, in case it doesn't run immediately"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"increase precision - next iteration supplies n exact digits"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the datastruct is a place where custom information can be contained for core implementations that doesn't necessarily want to go to the trouble of creating a subclass of rubyobject. the openssl implementation uses this heavily to save holder objects containing java cryptography objects. java integration uses this to store the java object ref. protected transient object datastruct;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initial v - the reciprocal v0 = 1\/(2*x)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"estimate the square root with the foremost 62 bits of squard bi and scale are a tandem"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri issuses warning here on (rbignum(x)->len * sizeof_bdigits * yy > 1024*1024)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"function not used...but it gets rid of unused warnings in eclipse (we do call those methods from ruby so they are not really unused)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"collect iteration precisions beforehand"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip this one, probably no 'ls' (windows)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just in case, add a bit of extra precision"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"general number and precision checking"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"run ten separate calls into ruby, with delay and explicit gc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the killee thread is the same as the killer thread, just die"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wait until thread has initialized"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the name of this source (e.g. a filename: foo.rb)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: mri's sqrt precision is limited by 100, but we allow values more than 100."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: raise argumenterror for 'unknown command' before checking number of args."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this should only be called by this and rubyfile. it allows this object to be created without a iohandler."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"calculation for negatives when %u specified for values >= integer.min_value * 2, mri uses (the equivalent of) long neg_u = (((long)integer.max_value + 1) << 1) + val for smaller values, biginteger math is required to conform to mri's result."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 766"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"sync_flush"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unread back"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 476"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"look in classpath next (we do not use file as a test since unc names will match) note: jar resources must never begin with an '\/'. (previous code said \"always begin with a \/\")"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note that addmethod now does its own put, so any change made to functionality here should be made there as well"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ok"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 513"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add a forward reference from tgt -> currbb"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"beneath are rewritten coercions that reflect mri logic, the aboves are used only by rubybigdecimal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"empirically it appears that to_ary coersions always return array or nil, so this should always be an array by now."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 414"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rethrow to outer flow catcher"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: make it 16 now ? must be power of 2!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this _is_ legal (when removing an undef)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1244"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"channeldescriptors opened by sysopen are cached to avoid collection"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yyrindex 889"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ensure we have a new interpreter for each test. previous we were using the same interpreter which caused problems as soon as one test failed."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we don't want a package name beginning with dots, so we remove them"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the pipe stream is set to null"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"getfoo => foo getfoo(int) => foo(int)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"callbacks to fill in method body"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$@ returns nil if $!.backtrace is not an array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's an inner class and it's not public, we can't access it; skip population of declared elements"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if this is not a closure, the break is equivalent to jumping to the loop end label"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bench long fib"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in the current logic, if we get here we know that module is not an includedmodulewrapper, so there's no need to fish out the delegate. but just in case the logic should change later, let's do it anyway"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"leave as a normal array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"switch on the object's *native type*. this allows use-defined classes that have extended core native types to piggyback on their marshalling logic."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: we can't use file.exists() to check whether the symlink exists or not, because that method returns false for existing but broken symlink. so, we try without the existence check, but in the try-catch block. mri behavior: symlink? on broken symlink should return true."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case 4: signature = sig(object.class, object.class, object.class, object.class, object.class); break; case 5: signature = sig(object.class, object.class, object.class, object.class, object.class, object.class); break;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create a lightweight thunk"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"contains a list of all blocks (as procs) that should be called when the runtime environment exits."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all the positive powers of 10 that can be represented exactly in double\/float. (from sun.misc.floatingdecimal.java)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"there might be more test classes in a single file, so we iterate over them"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is needed when the enclosing class or module is a singleton. in that case, we generated a name such as null::foo, which broke marshalling, among others. the correct thing to do in this situation is to insert the generate the name of form #<class:01xasdfasd> if it's a singleton module\/class, which this code accomplishes."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no digits, error"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is the only case it might be null here (in metaclass construction)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"-1 == don't set permissions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$@: error position"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we get here, the class and field exist; construct our unsafe impl that calls it directly"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate a real method signature for the method, with to\/from coercions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wait for the go signal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if already inspecting, there is no need to register\/unregister again."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: intentionally returning the actual array returned from java, rather than wrapping it in a rubyarray. wave of the future, when java_class will return the actual class, rather than a javaclass wrapper."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1392"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add alias to meta"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"snapshot of contents of directory current position in directory"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if channel is already closed, we're no longer valid"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"exclusive locks in java require the channel to be writable, otherwise an exception is thrown (terminating jruby execution). but flock behavior of mri is that it allows exclusive locks even on non-writable file. so we convert exclusive lock to shared lock if the channel is not writable, to better match the mri behavior."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"zero args, no block; do nothing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we don't support .so, but some stdlib require .so directly replace it with .jar to look for an extension type we do support"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store previous exception for restoration if we rescue something"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"label for the start of the closure (used to implement redo) label for the end of the closure (used to implement retry)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a specific version was requested - use as is for search"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"then deliver mail to the target"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set self to the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"confirm minimum args provided"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"---------- public fields, methods ---------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"predefine a few other methods we invoke directly elsewhere"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 152 \"-\" %token constants"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"force heap-scope behavior, since it uses parent's scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we don't have a body, check for required or opt args if opt args, they could have side effects if required args, need to raise errors if too few args passed otherwise, method does nothing, make it a nop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"creates the new entry."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"and we were given a specific exception"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"finally with no exception"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compute meet over all \"sources\" and compute \"destination\" basic blocks that should then be processed. sources & targets depends on direction of the data flow problem"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"accessor methods."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"declare locals for java debugging purposes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"silent ?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no check for '*'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not a class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assert internedname == internedname.intern() : internedname + \" is not interned\";"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no digits, go calc (will return +\/- 0.0 for lax)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"loop until a context is available, to clean up softrefs that might have been collected"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pop extra failed value from first cycle and we're done"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"version information:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"could not get canonical path, just use given path"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 420"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"adding char: \" + (char)cx + \" with number: \" + cx);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"io.available() only returns 0 after eof is encountered so we need to differentiate between the empty string and eof"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the assumption here is that the 'in' stream provides proper available() support. if available() always returns 0, we'll hang!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's less than 200 do median of 3"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store the local vars in a local variable for preparing the class (using previous scope)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"constant api methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class<?> script1 = ((defaultmethod) runtime1.getobject().getmethods().get(\"foo\")).getjitcompilerscript().getclass(); class<?> script2 = ((defaultmethod) runtime2.getobject().getmethods().get(\"foo\")).getjitcompilerscript().getclass();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"low-level class variable interface fetch\/store\/list class variables for this module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no read requested, hook up read to parents output"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"prepare loadservice and load path"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"and subtract as neeeded."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"digits arr shifted, update all"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yygindex 152"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"sss fixme: can this ever be null?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: just plain ' ' or '\\\\\\\\' are considered illegal on windows."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"num2int is also implemented"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"what we passed to the constructor for method 'path'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check visibility dup method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"----- ruby instance methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"constant table methods - pass to delegate"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"exec needs to behave differently in-process, because it's technically supposed to replace the calling process. so if we're supposed to run in-process, we allow it to use the default streams and not use pumpers at all. see jruby-2156 and jruby-2154."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this relies on the ruby rounding enumerations == java ones, which they (currently) all are"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it's either as converted as we can make it via above logic or it's not one of the types we convert, so just pass it out as-is without wrapping"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a gotcha"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now we provide default impls of a number of signatures. for each arity, we first generate a non-block version of the method, which just adds null_block and re-calls, allowing e.g. compiled code, which always can potentially take a block, to only generate the block-receiving signature and still avoid arg boxing. we then provide default implementations of each block-accepting method that in turn call the irubyobject[]+block version of call. this then finally falls back on the minimum implementation requirement for dynamic method handles."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we get canonical path to try and flatten the path out. a dir '\/subdir\/..' should return as '\/' cnutter: do we want to flatten path out?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"base"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"used for the 'redo' command"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"by default, no_flush"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 286"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"push false"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"false zero"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make sure any read()s after close fail."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no passed in block, lets check next outer frame for one ('proc.new')"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 551"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this looks wrong, but it's the way mri does it."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for future compatibility as constructors move toward not accepting metaclass?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: the indicies here match exactly the signal values; do not reorder"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_exc_new3"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"visit a label to start scoping for local vars in this method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: in finished mode, we work as pass-through"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"zstream actually *isn't* allocatable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior, enforced by tests"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"registerthreaddumpsignalhandler(runtime);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dump usec, not msec"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"handle ruby exceptions (raiseexception)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"io.finish();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"biginteger required a sign byte in incoming array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"modified to match how hash is calculated in 1.8.2"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"retry handling in the rescue block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we only want io objects with valid streams (better to error now)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"float number of seconds"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we define a class in ruby, but later want to allow it to be defined in java, the allocator needs to be updated"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we can just use dt, since it is immutable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for jdk 1.4 we can use \"cal.gettimeinmillis()\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set up with min values and then add to allow rolling over"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pad with a 0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri accepts additional wday argument which appears to be ignored."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we might be moving this time from !dst -> dst, the offset is assumed to be the same as it was just before we last moved from dst -> !dst"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no bignorm here needed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignores usec if 8 args (for compatibility with parsedate) or if not supplied."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"time class methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the value will fit in a fixnum, return one of those."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"attempt to decriticalize all if we're the critical thread"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"depends on io, filetest"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"???"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"len + margin"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"volatile to ensure that initial nil-fill is visible to other threads"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"elements and trailing nils"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"plain internal array assignment"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dir::tmpdir"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_ary_new2 just allocates the internal array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"newobj and objsetup equivalent fastest one, for shared arrays, optional objectspace"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pid"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"array constructors taking the metaclass to fulfil mri array subclass behaviour"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create global constants and variables"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"satisfy java.util.list interface (for java integration)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"windows does not support these functions, so we won't even try this also matches ruby behavior for jruby-2353."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"see [ruby-core:17483]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"possibly should not in object space"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"1.9 seems to just do inspect for to_s now"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_ary_new4"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[?, ?] [?, boolean]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"gmt+00:00 --> etc\/gmt, see \"mri behavior\" comment below."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pre-set for the sake of terminating recursive calls"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"extras flag"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"...nothing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"see http: www.gzip.org\/zlib\/rfc-gzip.html"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"zlib::no_flush"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"utility method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"object is ready, create top self"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not to be confused with rubyobject's flags"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yylhs 542"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"1.8 \"include?\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the method is intentionally not public, since it typically should not be used outside of the core."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"flags 4 bytes of modified time"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubyclasspathvariable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it won't hurt fixnums"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri does it!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"won't hurt fixnums"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"second argument is allowed, but ignored (mri)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"recheck condition"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize kernel and include into object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"terminate; trycompile will have printed out an error and we're done"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the root of the class hierarchy completely"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct key services"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the \"dummy\" class used as a marker"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get the main threadcontext (gets constructed for us)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize all the core classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"event name filename line numbers should be 1-based"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"default: don't retain"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we try to get the classloader that loaded jruby, falling back on system"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bootstrap the top of the hierarchy"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for regular expressions with the \/o flag"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"determine spacing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method is for finalizers registered via objectspace"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for jsr 223 support: see http: scripting.java.net"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use this for jruby-internal finalizers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mutex that controls modifications of user-defined finalizers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"record separator var, to speed up io ops that use it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"former java.lang.system concepts now internalized for mvm"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"default objects"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initial spaces spaces before \"at\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can't read non-standard properties"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java support"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compilation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"parser stats"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mutex that controls modifications of internal finalizers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a global object lock for class hierarchy mutations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1264"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compensate for missing slash after drive letter on windows"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"kernel is the only module that doesn't need an implementor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"iso-2022-jp"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enc_coderange_asciionly"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"quoted-printable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: this field and the following static initializer must be located be in this order!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"shift_jis"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"utf-8"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"euc-jp"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"string doesn't have it's own bytelist (values)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"string doesn't share any resources"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_enc_str_asciionly_p"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use 1.8 impl"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must not reallocate"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_enc_str_coderange"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if len == 0 then shared empty"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_str_subseq"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_str_cmp_m"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_str_buf_append"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"encoding doesn't have to be copied."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"copy pre-match substr"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: keep cr todo: rb_str_splice_0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"string given"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"substring longer than string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"illegal combination"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"hash given"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this represents left most digit in a set of incremented values? therefore leftmost numeric must be '1' and not '0' 999 -> 1000, not 999 -> 0000. whereas chars should be zzz -> aaaa and non-alnum byte values should be \"\\377\" -> \"\\001\\000\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create constants class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_str_substr"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_str_splice"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nothing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"decode from \"from\" and encode to \"to\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1308"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"to encoding, same special-casing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"retrieve last replacer"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"long size * bits in byte"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"qtrue"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we need this loop in order to be able to \"unblock\" the join call without actually calling interrupt."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"file to be loaded by autoload has already been or is being loaded."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"interned, ok for \"fast\" methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no catch active for this throw"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no binding given, use (eval)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"catch active, throw for catch to handle"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_cstr_to_dbl case"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we break if we know this sleep was explicitly woken up\/interrupted"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"zero sleeps forever"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"exec process, create io with process"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bomb out, it's not a binding or a proc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"adjusts paths started with '\/' or '\\\\', on windows."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?g | boolean | true if file1 has the \\cf{setgid} bit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"string to eval"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"binding given, use binding's file"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: now check arg count"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"modified"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: use first byte of string value if len > 0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore if it's not a global var"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?c | time | last change time for file1"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?a | time | last access time for file1"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?c | boolean | true if file1 is a character device"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?e | boolean | true if file1 exists"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?f | boolean | true if file1 exists and is a regular file"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?k | boolean | true if file1 exists and has the sticky bit set"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?o | boolean | true if file1 exists and is owned by the caller's effective uid"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?m | time | last modification time for file1"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?r | boolean | true if file1 is readable by the effective uid\/gid of the caller"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"without full tracing, many events will not fire"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?p | boolean | true if file1 exists and is a fifo"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the target thread is sleeping or stopped, wake it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wrapped to \\0...\\0. search next valid char."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we limit to int because bytebuffer can only allocate int sizes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ne == nonzero (i.e. true)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no need to assign encoding, same bytelist shared"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?x | boolean | true if file1 exists and is executable by the real uid\/gid"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?x | boolean | true if file1 exists and is executable by the effective uid\/gid"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?= | boolean | true if the modification times of file1 and file2 are equal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"deprecated string construction routines"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?> | boolean | true if the modification time of file1 is after that of file2"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?< | boolean | true if the modification time of file1 is prior to that of file2"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"error info is per-thread"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"new interrupt, to hopefully wake it out of any blocking io"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"init errorinfo to nil"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if this thread is sleeping or stopped, wake it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-2380, associate thread early so it shows up in thread.list right away, in case it doesn't run immediately"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for thread::start, which does not call the subclass's initialize"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1326"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"file class methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"count number of extra slashes in the beginning of the string."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"strip off the o_ prefix, so they become file::rdonly, and so on"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not valid for \"dead\" state"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can't select, just have to do a blocking call"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"null channel always succeeds for all locking operations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make sure any existing lock is released before we try and close the file"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"file::constants module is included in io."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we use file versus io to match t_file in mri."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try both"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"should we do anything?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1345"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we're not actually a real file, so we can't flock"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"...round to that digit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"method.invokeinterface(p(irubyobject.class), \"getinstancevariable\", sig(irubyobject.class, params(string.class)));"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return false here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"strip c: away from relative-pathed name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri-compatible basename handling for windows drive letter paths"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"trim trailing slashes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"handle ~user paths"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dot is not at beginning and not at end of filename."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"find out which string to check."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fnfexception can be thrown in both cases, when the file is not found, or when permission is denied."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java and mri definitions of divmod are different."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"include additional path separator (so that dirname of \"c:\\file.txt\" is \"c:\\\", not \"c:\")"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"handle ~user paths."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no directory delimeter. rest of string is username"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generation count for o(1) clears"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"c:\\ is returned unchanged"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubycontinuation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"special constructor that accepts stream, not channel"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'~\/...' as path to expand"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we don't have another slash after this, so replace \/. with"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'~user\/...' as path to expand"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there are n slashes, then we want n-1."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no canonical path yet or length is zero, and we have a \/ followed by a dot..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, we should not delete the drive letter"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb: check_modifiable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb: readable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rename via java api call wasn't successful, let's try some tricks, similar to mri"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can we produce ioerror which bypasses a close?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fast path since jna stat is about 10x slower than this"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"3. mri ignores the trailing junk"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try to rename one more time"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"n.b. we need to recompute the hash in case the key object was modified"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"delete implementation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get implementation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"put implementation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"other hash does not contain key"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"update the hash value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single '~' as whole path to expand"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nio-based"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first try as directory"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next as regular file"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing. fd_cloexec has no meaning in jvm since we cannot really exec. and why the hell does webrick pass this in as a first argument!!!!!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dup2 new fd into self to preserve fileno and references to it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: read_check from mri"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"7!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not exposed by filetest, but so similiar in nature that it is stored here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"confirm we're not reopening self's channel"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"default options"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"re-register the descriptor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"redundant, done above as well"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use original modes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"io class methods."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a potentially previously close io is being 'reopened'."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is for a range check, near as i can tell"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_class_boot"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: swallow standarderorrs"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"isretained=true"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if not sync, we switch to write buffered mode"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"throw bad file descriptor is we can not read on supplied descriptor."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"claims conversion is done via 'to_s' in docs."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return len - n;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"everything written"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"of course this isn't particularly useful."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: read into buffer using all the fread logic int read = openfile.getmainstream().fread(buffer);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"cleanup, raising errors if any"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"5!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bytelist buffer = null;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"length to read"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing. fd_cloexec has no meaning in jvm since we cannot really exec."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"i believe ruby bails out with a \"bug\" if closing fails"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"select until read is ready"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no receiver for singleton class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"0!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"string\/buffer to read it into"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"cryptic for the uninitiated..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb: writable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"buffer = str.getbytelist();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"read_check from mri io.c"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we're cloning ourselves, so we know the result should be a rubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class methods for io"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make all sockets blocking as configured again close unregisters all channels, so we can safely reset blocking modes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not using remove(object) here to avoid the equals() call"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call chmod after we created the randomaccesfile because otherwise, the file could be read-only"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fixme: process options"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"write"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nio based pipe"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enebo: annotation processing forced me to do pangea method here..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1254"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"objectclass.defineannotatedmethods(basicobjectmethods.class);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"may need to handle enc_coderange_broken"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"zeroed by jvm"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the class of this object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: rb_usascii_str_new2"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-4113: callers should not call settaint on immediate objects"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we can safely reference methods here instead of doing getmethods() since if we are adding we are not using a includedmodulewrapper."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"include its parent (and in turn that module's parents)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: includes part of fix for jruby-1339"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"define access methods."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"static constants"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for binding purposes on the newly created struct types"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for interface impls"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"these call* assume threadcontext = receiver.getruntime().getcurrentcontext()"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"obj_infect"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"superclass may be null."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"@param nv number of times to cycle or -1 to cycle indefinitely"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we need full traces, use default (slow) populator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"atomic ?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip any commandline args if \/usr\/bin\/env is in play"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"containing class...the parent of object is null. object should always be last in chain."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri checks all types first:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the module we include does not already exist"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"classproviders return java class\/module (in #defineorgetclassunder and #defineorgetmoduleunder) when class\/module is opened using colon syntax."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1298"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"constant ruby methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"execute iteratemethod again."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a normal block passed to define_method changes to do arity checking; make it a lambda"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we grab serial number first; the worst that will happen is we cache a later update with an earlier serial number, which would just flush anyway"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"module\/singleton methods are all defined public"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just using required is broken...but no more broken than before zsuper refactoring"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"update all hierarchies into which this module has been included"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method is intended only for defining new modules in ruby code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"need to skip includedmodulewrappers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reopen a java module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fixme warning"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reopen a java class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for zsupers in define_method (blech!) we tell the proc scope to act as the \"argument\" scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class and module bodies default to public, so make the block's visibility public. jruby-1185."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore error"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the insertion point is a class, update subclass lists"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eh?!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build a list of all modules to consider for inclusion"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"scan class hierarchy for module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri error message says class, even though module is ok"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"module class methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next in hierarchy is an included version of the module we're attempting, so we skip including it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we haven't encountered a real superclass, use the found module as the new inclusion point"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1635"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"tmpposition is required because getposition()'s side effects. if the warning is generated, the getposition() on line 954 (this line + 18) will create a wrong position if the \"inclusive\" flag is not set."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java and mri definitions of remainder are the same."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class variable api methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can't set tc classloader"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"returns the stored value without processing undefs (autoloads)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 723"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri has extra pointer which makes our code look a little bit more strange in comparison"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"tempory buffer to build up a potential token. consumer takes responsibility to reset this before use."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-914: java 1.4 bigdecimal does not allow a negative scale, so we have to simulate it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 691"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"removes and returns the stored value without processing undefs (autoloads)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fix for jruby-1339 - search hierarchy for constant"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"what is \\v in c? case '\\v': c2 = 'v'; break;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"w_symbol"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 625"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"consider thread aspects of this"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 601"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"an interrupt or timeout may have caused us to miss a notify that we consumed, so do another notify in case someone else is available to pick it up."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1133"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 929"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1373"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 845"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 800"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 839"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1603"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1097"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 970"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1406"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1085"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 972"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1038"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1582"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1210"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we got a valid errno value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"one optional and no required args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1293"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"print out as a nice ruby backtrace"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1229"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1523"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1448"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try to get errno value out of the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1398"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1513"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1492"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 854"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"actions_end"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"internal module variable api methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no script to run, return success below"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java and mri definitions of modulo are different."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1789"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1755"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: why this: .setresult();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jrubyclient"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip \/usr\/bin\/env if it's first"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"force for args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1652"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip any assignments if \/usr\/bin\/env is in play"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 814"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 451"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore, no debugger present"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 413"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fixme: temporarily disabling because this fires way too much running rails tests. jruby-518"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 339"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 703"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 515"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 472"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 669"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 582"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 636"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 2014"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1108"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 992"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"2!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"increase value to hit lower range."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 958"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"x = mantissa * 2 ** exponent where mantissa is in the range of [.5, 1)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 905"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 925"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1072"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"uncomment the \"puts\" lines if you want to see more detail"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 572"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 649"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1047"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1950"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1395"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1286"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1192"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1241"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1333"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"9!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 991"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1812"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1779"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1476"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1420"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1728"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1588"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1618"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1320"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1363"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1595"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1681"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1317"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1535"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1992"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it is a file channel, then we can pre-allocate the output buffer to the total size of buffered + remaining bytes in file"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1643"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1794"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1314"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1837"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1753"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"iteration variables, for the square root x and the reciprocal v initial x: x0 ~ sqrt() initial v: v0 = 1\/(2*x)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1562"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 619"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1267"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1439"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1895"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1301"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 776"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1168"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 823"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 872"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"cannot discern the total read length - allocate at least enough for the buffered data"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 555"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 500"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 361"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1620"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"allow it to bubble up"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"tc under method self under method name args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"integer division"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1473"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1201"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1307"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1287"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1067"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"peel onion...make subpatterns out of outer layer of glob and recall with each subpattern example: foo{a{c},b}bar -> fooa{c}bar, foobbar"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end suffix iteration"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check for a builtin first."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1169"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method handles '**\/' patterns and delegates to fnmatch_helper for the main work."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1122"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"double precision, native double precision, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1145"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"calculate based on a, b, c and d"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"64-bit number, native (as bignum)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next indicates to decode using native encoding format"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 812"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"an empirically derived rule: precision applies to significand length, irrespective of exponent"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"snip off ruby or jruby command from list of arguments leave alone if the command is the name of a script"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this test may be too lax but it is the same as in mri"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1026"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1011"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 911"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"an official rule, clarified: if the exponent <clarif>after adjusting for exponent form<\/clarif> is < -4, or the exponent <clarif>after adjusting for exponent form<\/clarif> is greater than the precision, use exponent form"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 886"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 864"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 827"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: validate only the unnumbered arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"calculation for simple (and typical) case, adapted from sun.misc.floatingdecimal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"value equality result = eval(\"key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]\"); assertequals(\"two\", result);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 732"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"already have some bytes buffered, just return those"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note that we can't say the following, because of the on-the-fly conversion of fixnum to long asserttrue(value == valueviavaluesiterator);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reset buffer"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"is there something built into jruby to do this?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"change the thread context to include the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do median of 7 if the array is over 200 elements."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1626"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1369"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 313"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1496"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"odd"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1359"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"consume the file name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we need to guarantee that any existing reads of old map can proceed. so we cannot yet null out each bin."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"..where 100 -> 10 shifts the scale"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"root x is ready!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the loop of \"square root by coupled newton iteration\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"5 -> 2, -5 -> -3 need half a scale more.."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri behavior: -0 and +0 are two different things"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"default classcache using jitmax as a soft upper bound"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we require the home directory to be absolute"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubybigdecimal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"2. mri allows underscores anywhere"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this property is a boolean, to allow three values, so it can match mri's nil, false and true"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1348"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1292"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try loading from classloader resources"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"15!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try the normal property first"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try cwd first"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1716"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"specify something that can't separate"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"symbol string *must* be interned"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"*must* be power of 2!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1276"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"clone all remaining nodes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single node on list"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jrubyserver"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"has read\/write been closed or is it still open for business"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"str is frozen"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is a non-standard method; have we decided to start extending ruby? classclass.definefastmethod(\"subclasses\", callbackfactory.getfastoptmethod(\"subclasses\"));"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"undo check"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"static initializing method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1708"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fields to hold ruby and rubyclass references"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"update all subclasses"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, leave empty"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rest in ivar count followed by name\/value pairs"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"write out ivar count followed by name\/value pairs"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"piece of mri rb_to_id"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ensure we're not running on gcj, since it's not supported and leads to weird errors"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single method, use normal logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no unixsockets on windows"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1325"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mbclen_invalid_p"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no annotated methods found, skip"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\p{hiragana}"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1196"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_enc_reg_raise"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_reg_raise"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_reg_expr_str"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-3625: delay setting backref until the matchdata is completely initialized"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"write out a static initializer for frame names, so it only fires once"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"read-volatile"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubymodule singletonclass = module.getsingletonclass();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fallback on non-pregenerated logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"array created for rescue args doesn't need to be in objectspace."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1399"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"while"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wrong parameter ?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we can't rename a file while it's open in windows"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this should never happen past parse, but just bulletproof this just in case"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"never visited, should be ok"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assert thenbody != null : \"thenbody is not null\"; assert elsebody != null : \"elsebody is not null\";"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 745"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we do not want to capture cached methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we could probably also detect if lhs value came out of cache and avoid some of this"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"one optional, one required args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no takers; bubble up"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in order to make pragma's noops we set location to a special value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"admittedly inefficient"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-530, while case"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"index of variable for this arg"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"don't attempt to coerce to array, just wrap and return"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only a marker interface"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the method doesn't need a scope or static scope; frame only"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"proc.new needs the caller's block to instantiate a proc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check for proc.new, an especially magic method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pragmas"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, it's a literal array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"long, slow way causes disabling for defined"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unwrap newline nodes to get their actual type"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"splatted when, can't do it yet"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"one arg but it's an array, treat it as a proper array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, use normal args compiler"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"these are all simple cases that don't require the heavier defined logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[rubyclass]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"context.swapvalues(); context.consumecurrentvalue();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[rubyclass] [rubyclass, rubyclass] [rubyclass] []"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no args, do not pass args processor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invoke run with threadcontext and topself"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class variable ruby methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[string] [string, string] [string] [string, rubyclass] [string, rubyclass, rubyclass] [string, rubyclass]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"math depends on all numeric types"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"optimizations if we know ahead of time it will always be true or false"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eval new value, call operator on old value, and assign"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal items at the front or back of the masgn"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal items at the \"head\" of the masgn"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compile first node as non-expr and compile second node"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"put under object array already present"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if arity 1, just compile the one element to save us the array cost"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it's a multiple-statement body, iterate over all elements in turn and chain if it get too long"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single-statement body, just compile it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"successfully got back a jitted method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we haven't already decided on a do-nothing call"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"time the compilation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"receiver first, so we know which call site to use"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"method is done, declare all variables"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"value is already on stack, save it for later"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arg0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if rest args, excluding post args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get call site and thread context"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invoke"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pop extra attr value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no point in updating number if last number was same value."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check if it's true, ending if not"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call site"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[adapter, tc]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"receiver, args, result, value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"with args, with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no args, with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no args, no block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"with args, no block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build descriptor string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate call sites initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate regexps initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate block bodies initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate method cache initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check the condition"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"brute force construction inline"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call istrue on the result"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"clear body or next result after each successful loop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"and remaining jump exceptions should restore $!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"push true"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"static scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just confirm args length == required"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"superclazz = null;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next, iterate over all optional args, until no more arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"script object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unwrap scopes to appropriate depth"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store the local vars in a local variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"chain to the next segment of this giant method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class bodies prepare their own dynamic scope, so let it do that"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fix filenamecompletor to work mid-line"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal closure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we only need full-on redo exception handling if there's logic that might produce it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jump back to the top of the main body of this closure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"struct bodies should be public by default, so set block visibility to public. jruby-1185."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we are storing a name as well, index is one too high for values"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"map keep track of the next available variable index for a particular prefix"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"_lexicalnestinglevel = lexicalparent == null ? 0 : ((ir_scopeimpl)lexicalparent)._lexicalnestinglevel + 1;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"insert nesting level to ensure variable names don't conflict across nested scopes! i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! return new variable(prefix + _lexicalnestinglevel + \"_\" + idx);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"inline script"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 303"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1116"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 367"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 443"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1130"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"struct methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 492"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 464"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1087"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 519"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"instance variable api methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1251"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 613"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 720"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 738"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 754"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 757"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 852"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 772"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 782"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 797"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1111"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 941"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1280"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 871"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now emit bodies"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method is called to build arguments for a block!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 948"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 960"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 967"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 996"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 986"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1058"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1100"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can't use -v and stdin"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1135"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1137"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1154"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1263"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1309"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1315"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1328"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1358"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1374"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1415"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1440"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1443"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1465"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1488"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1485"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1533"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1556"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1574"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1577"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 955"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1638"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1069"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1661"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1705"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"lists to aggregate variables and bodies for whens"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1775"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1023"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1054"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1818"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mirko: check"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"zero length array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[reg]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1041"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the case instruction"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 324"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 327"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 331"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 336"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 348"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 354"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 429"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get the incoming case value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build first node only and return false"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 459"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 481"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 506"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$;: field separator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 672"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 549"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 558"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 561"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 610"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 589"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 595"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 623"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 969"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 630"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 661"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do we have a dynamic container?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 699"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add array construction methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"record the loop we are beginning to process"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 779"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 842"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 932"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 944"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 980"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1004"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 860"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if true, returns the rest of the array starting at the index"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 829"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 866"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 884"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 922"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1417"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1632"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 627"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 887"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1043"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 875"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 909"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1078"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 857"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1126"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 832"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1311"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1383"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1424"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 826"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"1. load the module first (lhs of node) 2. then load the constant from the module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 811"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"instance method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1877"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build ir for body"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1995"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"multiple conditions for when"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"done done done done"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build \"else\" if it exists"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jump to 'l' if this arg is not null. if null, fall through and build the default value!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 848"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"value of the last expression in the block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now for the rest"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"both for fixed arity and variable arity methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"----------- private interface ------------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assign the closure to the block variable in the parent scope and return it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 753"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"while processing loops, this returns the loop that we are processing."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 801"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create a new closure context"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get the container for this new module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"by default, the container for this class is 's'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 727"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 706"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build the module body"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if a closure, the next is simply a return from the closure! if a regular loop, the next is simply a jump to the end of the iteration"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set attr"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call operator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get attr"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we won't enter the loop -- just build the condition node"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build first node as non-expr and build second node"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use irubyobject[]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if v1 is defined and true, we are done!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build the cfg for this scope -- supported only by methods & closures"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for closures, a redo is a jump to the beginning of the closure for non-closures, a redo is a jump to the beginning of the loop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"what handles warnings"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"top-level script!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the \"root\" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 682"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dummy top-level method for the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"------ define the operations below"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"def instructions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create a new temporary variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eval instructions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"value copy and type conversion operations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 639"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"closure instructions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"alu operations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"loads"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"exception instructions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"optimization guards"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"a case\/when branch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"stores"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jump and branch operations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"others"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"returns the containing parent scope -- can be a dynamic value (hence operand)!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"scripts"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"scripts and modules"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 296"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"run the pass on the passed in scope!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"by default, return instructions cannot be deleted"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"------- default implementation methods below"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"run the passed in compiler pass on this scope!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"indicate that we are done processing the loop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"------- abstract methods without a default implementation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check if we can optimize this call based on the receiving method and receiver type use the simplified receiver!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"optimize some core class method calls for constant values"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the cfg of the method is around, print the cfg!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"-------------- public fields and methods below ----------------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we got a simplified value, mark the call dead and insert a copy in its place!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"readline"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dataflow problem with which this node is associated cfg node for which this node contains info."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the call has been optimized away in the previous step, it is no longer a hard boundary for opts!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"--------- protected fields\/methods below ---------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"----------- public abstract methods ----------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 574"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in is the same!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"compute meet over all paths solution for this dataflow problem on the input cfg. this implements a standard worklist algorithm."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in changed!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"----------- public methods with a default implementation ----------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"individual analyses should override this"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 586"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 598"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 696"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we want unique ids for dataflow variables"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"v is defined => it is no longer live before 'i'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"-------------- private fields and methods below ----------------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"-------------- protected fields and methods below ----------------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unique id assigned to this variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 791"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"switch to an allocator based on a default constructor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"start out with a default rubyobject allocator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"traverse the instructions in this basic block in reverse order!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"out = union(in(succs))"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class or module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"******************** public interface *******************"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"---------- protected \/ package fields, methods ---------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"--------- \"abstract\"\/\"please-override\" methods ---------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if 'v' is not live at the instruction site, and it has no side effects, mark it dead!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do not mark this instruction's operands live if the instruction itself is dead!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 503"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 526"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"---------- private fields, methods ---------"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"used during optimization passes to propagate type and other information"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 566"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 546"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 512"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yydefred 889"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arg1"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 333"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 494"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"list of all variables used by all operands of this instruction"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 478"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"array of all operands for this instruction"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 454"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 466"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"by default, no simplifications!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 445"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can this call lead to ruby code getting modified? if we don't know what method we are calling, we assume it can (pessimistic, but safe!) if we do know the target method, we ask the method itself whether it modifies ruby code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 397"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 345"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1571"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if divisor is zero, don't simplify!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load handle"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do by default"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"netprotocolbufferedio"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"you can only value-replace atomic values"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"map of label & basic blocks with that label"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"neither"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the operand that this attribute targets deferred attributevalue _val; attribute value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get the target class of this operand, if we know it!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arrays, ranges, etc. are compound values variables, fixnums, floats, etc. are \"atomic\" values"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for simplification, get the target value, even if compound"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubysocket"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 417"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yysindex 945"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 351"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"map of label & basic blocks which are waiting for a bb with that label"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"object[] args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 377"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"init before building basic blocks below!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"foo()"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"currbb cannot be null!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add forward ref. edges"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case 4: case 5:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jump instruction bbs dont add an edge to the succeeding bb by default"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"root-level logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load receiver"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"noex_private for toplevel"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"root-level classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1822"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invoke specific arity version"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"args array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no candidates? fail."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"object arg0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no silly ticks!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"useful for code completion inside the irb"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1808"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the task was scheduled, wait for it to finish before polling for the exception it would have thrown."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"explicit reference to these vars as symbols..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1814"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\\t\\n\\\"\\\\'`@$><=;|&{("}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"constants webrick crashes without"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"something like cvar_cbase() from eval.c, factored out for the benefit of all the classvar-related node evaluations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1694"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"restore position"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is ensured by the callers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"binding provided for scope, use it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1745"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no binding, just eval in \"current\" frame (caller's frame)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1757"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1733"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"i'th argument"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"used by the compiler to simplify arg processing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1658"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, rethrow"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1644"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-852, ignore escape key (it causes irb to quit if we pass it out through readline)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no editing before startpos"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-2673: if wrapping a nativeexception, use the actual java exception's trace as our java trace"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri does similar thing on macos x with 'editline wrapper'."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not overridden, let's go"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's the exception we're expecting"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1600"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"complete using a proc object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"clear basename so it's anonymous when raising"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1587"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"toplevel defines"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"timeout module methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"these are not really used by timeout, but exposed for compatibility"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1568"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ensure room for terminating zero byte"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"array and struct are only used internally"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1290"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1510"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"when a length is given, read_string acts like get_bytes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"last token read via yylex()."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"older jdk on linux map 'c' to 'libc.so' which doesn't work"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this variant of newstruct is called from structlayoutbuilder"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the value of 1 is for socket::ai_passive."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"replace memory object with one that throws an exception on any access"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"windows is llp64"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add pointer::null as a constant"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$blah"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"more constants needed by specs"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1553"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1516"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get the convention from the options hash"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case float:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assemble a [ :name, offset ] array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create the ordered list of field names from the map"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1550"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no auto cleanup needed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"keep a reference to avoid the memory being freed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1299"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1477"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1480"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1434"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubyunixserver"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubyipsocket"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"when socket::ai_passive and host is nil, return 'any' address."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1239"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 321"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set up for potentially fast-int operations"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"hook up the memorypointer class if its not already there"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"sockaddr_un has different structure on different platforms. see jruby-2213 for more details."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1247"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is a bit convoluted because (1) socketchannel.bind is only in jdk 7 and (2) socket.getchannel() seems to return null in some cases"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubyudpsocket"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"host is nil or the empty string, bind to inaddr_any"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"host and port given"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make sure descriptor is registered"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubybasicsocket"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"by default we always reverse lookup unless do_not_reverse_lookup set."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"recv returns nil on eof"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"continue with normal initialization"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we don't have to define any that we don't support; see socket.c"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mandatory constants we haven't implemented"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1107"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1187"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1089"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"0.0.0.0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1193"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1151"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1175"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1119"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all threads in ruby thread group plus main thread"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, just exit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"e.printstacktrace();"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first, check if the sender has unreceived mail"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1076"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 660"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"numeric host, use it for port"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1051"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 893"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 940"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no connection immediately accepted, let them try again"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1034"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1032"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1008"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1045"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 978"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 984"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 903"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 936"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 915"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 926"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nativethread.setpriority(priority);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"restore context classloader, in case we're using a thread pool"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 879"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 868"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 858"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 806"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 824"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 815"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"someone called exit!, so we need to kill the main thread"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call the thread's code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 763"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 670"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set thread context jruby classloader here, for ruby-owned thread"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 729"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"future is done or cancelled, skip it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 646"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 607"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 378"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 596"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 578"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 543"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 556"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 507"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 470"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 501"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 411"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 452"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 344"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"thread is not alive, skip it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"shift to yyn"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 338"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 314"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get runtime, create jump error, and throw it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we need to close the out, since some processes would just wait for the stream to be closed before they process its content, and produce the output. e.g.: \"cat\"."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just confirm minimum args provided"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"probably a primitive"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"be dead"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"two args, no block; load null_block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"clear the redo"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return jump handling"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"redo jump handling"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return result if we're still good"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"actual required is less than 3, so we use specific arity"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"throw redo error if we're still good"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no required specified, check actual number of required args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call post method stuff (exception raised)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"simple path, no multimethod"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for zero, one, two, three arities, javamethod.javamethod*.call(...irubyobject[] args...) will check"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal all-rest method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dumpinginvocationmethodfactory"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"self name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"tc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"raise an error if arity does not match requirements"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"variable args with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"two args with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"close it out"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"one arg, no block; load null_block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"zero args, no block; load null_block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"one arg with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load block if it accepts block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"three args with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all other arg cases without block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all other arg cases with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"three args, no block; do nothing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"two args, no block; do nothing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"one arg, no block; do nothing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"static invocation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"void return type, so we need to load a nil for returning below"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load receiver as original type for virtual invocation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal finally and exit"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"virtual invocation"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement one to n"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement three with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"method itself threadcontext invoked name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"singleton classes don't get their own visibility domain"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this method is called to build assignments for a multiple-assignment instruction"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1162"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"never reached"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"simpleinvocationmethod"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for visibility we need real meta class and not anonymous one from class << self"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"21!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[c, c] [c, c, string] [c, null|c]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement n with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement zero to n with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement two to three with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement zero to three with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"variable is never read, variable is never live"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement one to n with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build the class body!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"method.ifnonnull(truelabel);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement one to three with block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"interfaces are handled as modules"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct the class, implementing all supertypes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load arguments into irubyobject[] for dispatch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normally we could leave these to fall back on the superclass, but since it dispatches through the [] version below, which may dispatch through the []+block version, we can save it a couple hops by overriding these here."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[c]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"confirm maximum not greater than optional"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wrap self and store the wrapper"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement two to three"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"list of modules, classes, and methods defined in this scope!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement two to n"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create constructor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"returns the containing parent scope!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement one to three"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fields needed for dispatch and such"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all other arities use \"n\" dispatch path"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load up object and add a few useful methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load self, class, and name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end constructor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all methods dispatch to the simple version by default, which is method_missing normally"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set ruby"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set rubyclass"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try specific name first, falling back on simple name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the proxy (wrapper) type hierarchy"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement three to n"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"handle redos by restarting the block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"promise to implement zero to three"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"map of constants defined in this scope (not valid for methods!)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"scripts, classes, and modules"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"proxy is complete, return it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store the wrapper"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now, create a method_added that can replace the dynamicmethod fields as they're redefined"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"convert to irubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create static init, for a monitor object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we expect a return value, unwrap it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end setup method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"control flow graph for this scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"prepare temp locals"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"field is null, lock class and try to populate"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"finally block to release monitor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1502"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end of try block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try\/finally block to ensure unlock"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"method still not available, call method_missing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"setup the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"exception handling for monitor release"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"re-get, re-check method; if not null now, go to dispatch"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"up two slots, for long's two halves"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set the full name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct the new interface impl and set it into the object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"setup constants for public inner classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 326"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"2"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"signalfacade"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 362"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"include all interfaces"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add all public constructors (note: getconstructors only returns public ones)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add all instance and static methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"too much array creation!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: the five match methods are arity-split to avoid the cost of boxing arguments when there's already a cached match. do not condense them into a single method."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only include static methods if specified"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only public static fields that are valid constants"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add a few type-specific special methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add all static variables"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize cache of parameter types to method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"long first because it's what fixnum claims to be"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we hold a java object, we need a java_class accessor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"double first because it's what float claims to be"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end of scoping for closure's vars"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dummy bodies for default impls"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"walk all superclasses aggregating interfaces"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"look through all mappings to find a match entry for this field"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"hit a non-java proxy class (included modules can be a cause of this...skip)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we could not find all of them print out first one (we could print them all?)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next, we define a few private methods that we'll use to manipulate the java object contained within this ruby object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize this if it hasn't been"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize these if they haven't been"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct the mirror class and parent classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"setup new, etc unless this is a concretejavaproxy subclass"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not allowed for original (non-generated) java classes note: not allowing for any previously created class right now; this restriction might be loosened later for generated classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"exact arg list __file__"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"list of interfaces we implement"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we capture the original \"new\" and make it private"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct new array proxy (arrayjavaproxy)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"boxed arg list __file__"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get map of all fields we want to define."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we've already done the above priming logic, just add another interface to the list of intentions unless we're past the point of no return or already intend to implement the given interface"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jcreate instantiates the proxy object which implements all interfaces and which is wrapped and implemented by this object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"implement all forces implementation of all interfaces we intend for this class to implement"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now we add an \"implement\" and \"implement_all\" methods to the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not allowed for existing java interface modules"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"weakly reserved names"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"array creation should use this variant"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-3014: make __file__ dynamically determined at load time, but we provide a reasonable default here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"parent.setconstant(name, proxyclass); where the name should come from ?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"keep this variant for kind_of? testing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"already set up append_features, just add the interface if we haven't already"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"array-of-interface-type creation\/identity"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?l | boolean | true if file1 exists and is a symbolic link"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this try\/catch is to allow failing over to the \"commands\" logic when running from within a jruby-complete jar file, which has jruby.home = a jar file url that does not resolve correctly with jrubyfile.create."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"including interface module so old-style interface \"subclasses\" will respond correctly to #kind_of?, etc."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add reference to interface module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"figure end-char. '\\0' is special to indicate begin=end and that no nesting?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct static scope list of names"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"same as argument_types, but matches name in java.lang.reflect.constructor\/method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"proxy module for interfaces"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"proxy class for concrete classes. also used for \"concrete\" interfaces, which is why we have two fields"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there's no constructor, we must prevent construction"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"something?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"modified only by addmethod; no synchronization required"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now add all aliases for the static methods (fields) as appropriate"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1329"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, it's a non-impl method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1377"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"is_something?, contains_thing?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"additionally add ?-postfixed aliases to any boolean methods and properties."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add main impl, used for detached or command-line execution of this script with a new runtime root method of a script is always in stub0, method0"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"1.9 support for encodings"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"many cases are ok to convert to float; if not one of these, error"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"getfoobar() => foobar?, foo_bar?(*)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"break jump"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now iterate over all installers and make sure they also have appropriate aliases"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 372"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore bad constant named inner classes pending jruby-697"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip catch block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"main body"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"double-check the cache now that we're synchronized"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"can't be converted any more, return it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java.getproxyclass deals with sync issues, so we won't duplicate the logic here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"old (quasi-deprecated) interface class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"datagram, set accordingly again, af_inet"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods see jruby-3130"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"restrictive security policy; no matter, we only want public classes anyway"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"see note above re: return type"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"very restrictive policy (disallows member.public) we'd never actually get this far in that case"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject family = args[2];"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"one-dimensional array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's an array of arrays, recurse with the component type"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"n-dimensional array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use specific-arity for as much as possible"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if not a property, but is boolean add ?-postfixed aliases."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must be back on first line on rewind."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invoke __file__ with threadcontext, self, args (null), and block (null)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for object, default to natural wrapper type"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[rubymodule] [rubymodule, string]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"hmmmm"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"12!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubyobject is already of the required jruby class (or subclass)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"thread context"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we've found a java type to which we've coerced the ruby value, wrap it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it's not one of the types we convert, so just pass it out as-is without wrapping"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create dir if necessary"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"255.255.255.255"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create the class with the appropriate class name and source file"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line number"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 323"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for specific-index cases, clean up non-expression values"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"include interface modules into the proxy class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java.lang.object is added at root of java proxy classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this also handles unsigned int -> negative signed int conversion"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"include any interfaces we extend"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now attach java-related extras to core classes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the template for interface modules"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no variable initialization, because we're reusing parent's scope (flat)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate variable readers initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"shouldn't happen, but if a superclass is specified, it's not ours"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add all name-to-class mappings"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add some base java classes everyone will need"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we'll only map conventional class names to modules"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do a void return"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"size + 1;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-2938 the proxy class might already exist"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add java_method for unbound use"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate bytelists initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"upper case name, so most likely a class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate symbols initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"interfacejavaproxy.createinterfacejavaproxy(context);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is where we'll get connected when classes are opened using package module syntax."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if that succeeds, the others should as well"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for seek_cur, need to adjust for buffered data"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"retrieve scope from scopes array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"default for starting tempvariableindex is ok"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$\\: output record separator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make getter for proxy class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store the new local vars in a local variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"loop until we see the nth separator char"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we hit eof or reached limit then we're done"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"re-register"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fill local vars with nil, to avoid checking every access."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in 1.8 mode, this will be a rubyarray containing the arguments in 1.9 mode, this will be an irubyobject[]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"catch logic for flow-control: next, break"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not primitive or lc class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"root-level methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if more than 4 locals, get and populate the locals array too"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create list of interfaces to proxy (and make sure they really are interfaces)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1313"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"hashcode is a combination of the interfaces and the ruby class we're using to implement them"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add name to call site list"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"generate fixnums initialization code"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal new class implementing interfaces"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize some components."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for zero args case we can stop searching"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1430"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"java reflection does not allow retrieving constructors like methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"17!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"module is on top of stack"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"verify the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"store the local vars in a local variable if there are any"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no matching ctor found"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"start class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize a simple frame."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no matching method found"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"prepare a faster handle if handles are enabled and the method and class are public"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"search through all declared methods to find a closest match"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must be a public method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must be a public class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now we create a new bsfmanager."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"first we need to register the jruby engine."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"expand variables, indentation of final marker"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for our purposes, accessibles are also members, and vice-versa, so we'll include member methods here."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"package scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"trigger class initialization for the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"populate values for the parameter names"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"execute a ruby script (add the menubar to the frame)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"execute ruby statements."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"evaluates a ruby expression and display the result."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"need names ordered for key generation later"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ruby-level methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we only collect methods and interfaces for user-defined proxy classes."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"19!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"finish class initializer"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get any included interfaces"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"statically initialized below"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"lock in the overridden methods for the new class, and any as-yet uninstantiated ancestor class."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load static empty array"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we generate all constructors and let some fail during invocation later"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$~: match-data"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"construct the super-proxy method"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"replace a string of newlines with a single one"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"where we get new positions from."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"box arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is a simple rethrow handler"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"the current block is already associated with proc. no need to create a new one"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if not already a proc then we should try and make it one."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"use the same logic as in evaluationstate"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"opt and rest, must be at least required"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no opt, no rest, exact match"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create static private method field"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only rest, must be at least required"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"opt but no rest, must be at least required and no more than required + opt"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"find power-of-two sizes best matching arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nul"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must be power of 2 must be power of 2"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"protected void finalize() throws throwable { system.err.println(\"***objectproxycache \" + id + \" finalized at \"+ new java.util.date()); }"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"entry exists, proxy has been gc'ed. replace entry."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wait for i\/o on any channel"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"***objectproxycache \" + id + \" started at \"+ new java.util.date());"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make getter for handler"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"entryrefs include hash with key to facilitate lookup by segment#expunge after ref is removed from referencequeue"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"should not happen!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"put back lastline for any elements past start of heredoc marker"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"indirect read-\/write- volatile"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"references to the java object and its proxy will either both be weak or both be soft, since the proxy contains a strong reference to the object, so it wouldn't make sense for the reference types to differ."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"must be called under lock"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ctor used by remove\/rehash"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"temp method to verify tablesize value must be called under lock"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"how many strings are nested in the current string term"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"hex constant"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for 'list' and only populated if list is not null."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"start of string ([, (, {, <, ', \", \\n)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"how many bytes into the source are we?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it's a comment"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"number of newlines read from the reader"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?- | boolean | true if file1 and file2 are identical"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end of string (], ), }, >, ', \", \\0)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"last full line read."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create constants for open flags"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get rest of line. linebuffer filled as side-effect..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$*: argv"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just ignore"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"regexp engine 'java'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"was a goto in original ruby lexer"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"16!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"white spaces"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"found end marker for this heredoc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"set_p"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"lexpop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"push(1)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"marker delimiting heredoc boundary"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"stream-based"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_yield_values(2,...) equivalent"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"remain where we are"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"satisfy java.util.set interface (for java integration)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"give a name to a value. enebo: this should be used more."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end of script."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"stream of data that yylex() examines."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"count of nested parentheses (1.9 only)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"are we lexing ruby 1.8 or 1.9+ syntax"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"when the heredoc identifier specifies <<-eof that indents before ident. are ok (the '-')."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'\\v'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"1.9 only"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"debugging help"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"short-hand (e.g. %{,%.,%!,... versus %q{)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return in a class body raises error"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no mb || ismbchar(term)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$&: last match"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$_: last read line string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1629"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eof (enebo: after default?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 604"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just a plain bang"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"in case last next was the newline."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"our readback\/pushback buffer."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"documentation nodes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$\": already loaded files"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$,: output field separator"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$.: last read line number"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$=: ignorecase"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$<: reading filename"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$`: string before last match"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"see if it is a reserved word."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"block (expr)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arg and receiver already present on the stack"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"backslash"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"where we get our newest char's"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"block (primary)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enum lex_state"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we don't append '+' since java number parser gets confused"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"hash"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fixme: peek('u') utf8 stuff for 1.9"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"hexadecimal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"octal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"decimal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"binary"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"form feed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fixme: old mac format strings?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"horizontal tab"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"where we started this marker match"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"space"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"vertical tab"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"alarm(bell)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we use offset here to keep track of extra newlines for windows"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"escape"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 587"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, return dummy version below"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"keep value of twoago around so we can restore after we unread"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"character read before previous read"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"index of last character in pushback buffer"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"newline"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"bigdecimallibrary"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo: fd_cloexec is mysterious and we are not sure how constantine should include this. we did it here for now"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"netprotocolbufferediolibrary"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 407"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"that's what jdk5 produces on windows vista"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"our shell scripts pass in non-canonicalized paths, but even if we didn't anyone who did would become unhappy because ruby apps expect no relative operators in the pathname (rubygems, for example)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"digestlibrary"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this set is only for darwin"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single node in list"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all errors, just info; do not prevent unloading ikvm does not support jmx, and throws an error"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all errors, just info; do not prevent loading ikvm does not support jmx, and throws an error"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 575"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"else [default] reduce (yyn)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 358"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reduce (yyn)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"leave stack alone"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1464"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 341"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 274"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 271"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 332"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 311"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 569"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 479"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 382"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 434"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 467"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 426"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 446"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 457"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 484"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 504"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 510"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 498"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 525"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 559"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 638"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1623"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 634"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1598"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 616"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 907"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 769"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 655"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 667"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 760"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 751"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 701"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 726"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 717"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 775"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 821"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 809"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 788"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 803"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 833"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 830"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 883"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 861"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 876"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 923"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 920"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 956"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1140"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1001"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1048"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1029"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1073"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1082"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1113"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1103"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1164"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1178"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1335"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1189"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1243"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1234"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1214"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1296"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1283"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1302"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1453"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1387"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1431"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1470"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not an expression, don't want result; pop it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1655"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"should positions added extra ide-friendly information and leave in all newline nodes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$5 == null ? nilimplicitnode.nil : $5;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1641"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1672"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1677"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1742"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1769"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"popen caller wants to be able to write, provide subprocess out directly"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try to mine out a ruby frame using our list of interpreter entry-point markers"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1749"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$8 == null ? nilimplicitnode.nil : $8;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"jruby-3568, inherit threadgroup or use default"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"xxx 0;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we parse evals more often in source so assume an eval parse."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"20!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we only close out if it's the slave stream, to avoid closing a directly-mapped stream from parent process"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1827 \"defaultrubyparser.y\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 529"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":".setposfrom($2);"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"strnode: :\"some text\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"finally, post args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dstrnode: :\"some text #{some expression}\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 7713 \"-\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"sequential"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"xxx"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"is this inline source (aka -e \"...source...\")"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"yyparse(lexer, new jay.yydebug.yyanim(\"jruby\", 9));"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 368"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"local scopes are argument scopes by default"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?u | boolean | true if file1 has the setuid bit set"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"what linenumber will the source think it starts from?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"odd...but it is odd in ruby too."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"include pipes on multiple arg type"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enebo: 1.9 has curr nodes for local\/block variables. we don't. i believe we follow proper logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case classnode: case colon2node: handleuselesswarn(node, \"::\"); return;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"parser states:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"__end__ marker offset (-1 means none present)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"will parser parse duby grammar extensions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"should we display extra debug information while parsing?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assumption: tail is never a list node"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"is the parser currently within a method definition"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"instance variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"constant"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"reduces overhead in interp by not set position every single line we encounter."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri: block_append"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"node"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case constnode: handleuselesswarn(node, \"a constant\"); return;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do not add an empty string node"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"localvar"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"mri: range_op"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fixme: dstr,evstr,str: warning \"string literal in condition\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"case selfnode: handleuselesswarn(node, \"self\"); return;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"tail must be evstrnode at this point"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"?d | boolean | true if file1 exists and is a directory"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"now logic for each optional value"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"then optional args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"[boolean]"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1231"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 678"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise no items left available, use the code for default"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 497"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 283"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arities"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"spurious wakeup-loop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 488"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 392"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 342"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 432"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 469"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 448"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 657"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 521"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 552"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there's args left and we want them, assign to rest arg"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 534"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 648"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 579"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 571"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"eval value for assignment"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 708"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 688"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 863"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 808"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assign remaining elements as an array for rest args (or empty array)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 737"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 851"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"evaluate and save receiver and args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 890"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1035"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 869"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"prepare labels for opt logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 928"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1013"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 916"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 912"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 965"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 951"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 983"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1182"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing; arity check is done before call"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1075"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1057"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1114"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1173"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1084"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1144"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1118"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1702"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1427"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1847"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1305"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1295"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1273"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1258"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1289"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1337"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1323"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"expression-based tests + bodies"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal case, create a new label"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1401"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1354"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1342"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"checkcast the value; if match, fast path; otherwise proceed to slow logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1352"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1366"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"todo assuming case is a fixnum"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1663"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1442"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1458"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we have an input case, prepare branching logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1557"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1532"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1542"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1591"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1622"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1651"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1639"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1636"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rb_str_hash_cmp"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1719"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1886"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1831"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1785"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1722"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 2010"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1761"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1738"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1756"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1825"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1800"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1815"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1791"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1507"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1854"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build ir for args"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, there's a receiver, so we pass that in directly for the sclass logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 2006"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"build each \"when\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1607"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1657"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1734"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1911"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1902"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1968"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1960"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1948"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1938"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"string fragment (we optimistically take one off in"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"original exception is on stack"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"parsersupport.literal_concat). check token length"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"here starts the logic for the class definition"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"finally with exception"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"class body"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"returns slot of variable"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 2019 \"ruby19parser.y\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unframed invokers have no ruby frames, so pull from class name but use current frame as file and line"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enebo: arg surrounded by in_defined set\/unset"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"list of active dynamic scopes. each of these may have captured other dynamic scopes to implement closures."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enebo: removed !compile_for_eval which probably is to reduce warnings"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"was $$ = null;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"raiseexception is on stack, get rubyexception out"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 8143 \"-\""}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"index of variable that represents a \"rest\" arg"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"next cref down the lexical structure"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"number of variables in this scope representing optional arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"live reference to module"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no bit math to store level since we know level is zero for this case"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"our name holder (offsets are assigned as variables are added"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"number of variables in this scope representing required arguments"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: only used by compiler until it can use getconstant again or use some other refactoring"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"require in all libraries specified on command line"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"private unsynchronizedstack framestack;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"source extensions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we override that the logic which uses this"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try and unload the autoload specified from internedname"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"long name option"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"private unsynchronizedstack parentstack;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize builtin libraries"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we have multiple asgn with just *args, need a special type for that"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"new instance to invoke run against"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 2000"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"is this thread currently with in a function trace?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"is this thread currently doing an defined? defined should set things like $!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1972"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1942"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1963"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"framed invokers will have ruby frames associated with them"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's not a rescue or ensure, there's a frame associated, so decrement"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"toplevel self and a few others want a top-level scope. we create this one right away and then pass it into top-level parse so it ends up being the top level."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"file where current executing unit is being evaluated"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line where current executing unit is being evaluated"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"catch management"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"look for mangling markers for compiled ruby in method name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if root of method is rescue, build as a light rescue"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"frame management"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assert level == 0;"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1918"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"look for __file__ method name for compiled roots"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"look for mangling markers for bound, unframed methods in class name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1905"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all entries following removed node can stay in list, but all preceding ones need to be cloned."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"required and optional only"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1898"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1872"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1869"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"popen callers wants to be able to read, provide subprocess in directly"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"frame matches one of our markers for \"interpreted\" calls"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1776"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"&& args.getmaxargumentscount() != 1) {"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try to load from classpath without prefix. \"a\/b.rb\" will not load as \".\/a\/b.rb\" in a jar file."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1828"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just push the same empty scope, since we won't use one"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"frame is extraneous runtime information, skip it unless debug"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no argument blocks"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"new scope for this invocation of the block, based on parent scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"assert false : \"can this happen?\";"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"binary typed calls"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"highest reserved id"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this should only be called by 1.8 (1.9 subclasses this to handle unusedblock)."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not sure if this is actually possible, but better safe than sorry"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 391"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"with block literal (iter)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"id must always be even"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"with block pass"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try count specific args to determine required"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"static scoping information for this scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fast and safe respond_to? call site logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ensure zero is devoted to no method name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no binding scope so we should create one"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"captured dynamic scopes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"lastline"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"helper function to give a good view of current dynamic scope with captured scopes"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"silently ignore"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the static settings to determine which factory to use"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"updating position for same line; skip"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"used by compiler"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1788"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"backref for $~, $1, etc"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"note: in ruby 1.9 all of this logic can go away since they will require explicit bindings for evals."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"some helper functions:"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we only define one special dynamic scope per 'logical' binding. so all bindings for the same scope should share the same dynamic scope. this allows multiple evals with different different bindings in the same scope to see the same stuff."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1797"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1809"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"prefill ?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"nil pad since we provided less values than block parms"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1758"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"conversion"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is the proper behavior for all non-expanded assigners."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1767"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is the proper behavior for all non-expanded assigners which have a pre > 0. the rest override this."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if undefined, branch to method_missing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"caller"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call is ok, punch it!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fastinvocationcallback"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"retrieve method module name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invoke callmethodmissing"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"method object already present, push various args tc self klazz name"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's method_missing, just invoke it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"enebo: perhaps slow but simple for now"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load arity for check"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"calltype block"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invocationcallbackfactory"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if no exception raised, jump to end to leave result on stack for return"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load arity for error"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, cacheentry, threadcontext, irubyobject, irubyobject, string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"from dup_setup"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"dumpinginvocationcallbackfactory"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"^d"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"invocationcallback"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only fill if there actually will remain trailing storage"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"arity ok, continue"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"for fast lookup: org.joni.encoding.encoding => org.jruby.rubyencoding"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, rubyclass, cacheentry, threadcontext, irubyobject, irubyobject, string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load the encoding"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1746"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"throw"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, dynamicmethod, rubyclass, cacheentry, threadcontext, irubyobject, irubyobject, string, irubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"irubyobject, rubyclass, cacheentry, threadcontext, irubyobject, irubyobject, string, irubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1731"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1678"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1711"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1647"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1660"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1610"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1625"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"return a meta object corresponding to the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make java class files in the jar reachable from ruby"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"breakjump, cacheentry, threadcontext, irubyobject, irubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if we're running in 1.9 compat mode, add ruby 1.9 libs to path before 1.8 libs"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"threadcontext"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"breakjump, threadcontext"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add all startup load paths to the list first"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1445"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"empty paths do not need to be added"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"signed short, big-endian"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add $rubylib paths"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"add 1.8 libs"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"wrap in try\/catch for security exceptions in an applet"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's a compiled jruby script, instantiate and run it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if a source extension is specified, try all source extensions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1573"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"create package name, by splitting on \/ and joining all but the last elements with a \".\", and downcasing them."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if an extension is specified, try more targetted searches"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no library or extension found, try to load directly as a class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"library has already been loaded in some form, bail out"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a jar-file with the required name, we add this to the class path."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"quietly try to load the class"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this code exploits the fact that all .jar files will be found for the jarredscript feature. this is where the basic extension mechanism gets fixed"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1538"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it's _really_ expensive to check that the class actually exists in the jar, so we don't do that now."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try all extensions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unknown extension, fall back to search with extensions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"extension extensions"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try only literal search"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if a jar or file url, return load service resource directly without further searching"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unknown extension, fall back to exact search"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"should invoke seek on realio"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"remove any relative prefix, e.g. \".\/foo\/bar\" becomes \"foo\/bar\"."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"hmm..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"allow mainexitexception to propagate out for exec and friends"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise load the library we've found"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if given path is absolute, just try it as-is (with extensions) and no load path"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if it's a .\/ basename, use cwd logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if name starts with a \/ we're done (classloader resources won't load with an initial \/)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"check if it's true, ending if so"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if entry is an empty string, skip it"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"it's an absolute path, use it as-is"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"write `i' instance var signet if class is not a direct subclass of object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"handle security-sensitive case"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"prepend .\/ if . is not already there, since we're loading based on cwd"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1489"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1436"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, try to load from classpath (note: jar resources always uses '\/')"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1519"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"make sure this is not a directory or unavailable in some way"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"signed short, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"write('s');"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"end loop"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"flush afer whole dump is complete"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"object has instance vars and isn't a class, get a snapshot to be marshalled and output the ivar header here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"directories and unavailable resources are not able to open a stream."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1433"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"object is a custom class that extended one of the native types other than object"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"only accept an open brace if there is a close"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"call the proc, but not for symbols"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"w_unique"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all \"c\" marshalled objects descend from core classes, which are all rubyobject"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"any ivars, since we don't have __attached__ ivar now"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"major minor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1381"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"sic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"xxx: 0xffff0000 on be?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unsigned short, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1493"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"int, native long, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"rubysignal"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"cld is also 20"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"process {}'s (example: dir.glob(\"{jruby,jython}\/readme*\")"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"all braces pushed.."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"look for slash, starting from 'start' position, until 'end'."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"fields should really be an immutable map as it is never modified after construction"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"traverse the instructions in this basic block in reverse order! mark as dead all instructions whose results are not used!"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"sunsignalfacade"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"load self object as irubyobject, for recv param"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 533"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"modify the block with a new backref\/lastline-grabbing scope"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"iot is also 6"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 530"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"\"hashdef\" object, a hash with a default"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip inner braces"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"failed : try next recursion"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"----- helper methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1782"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"try to use posix for this first"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"no or mismatched braces..move along..nothing to see here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"retuns null when not found to avoid unnecessary getruntime().getnil() call"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1803"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise fall back on the old way"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"are we at '**\/'"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"lefttoken made us start as nest 1"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single precision, little-endian"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"not reached here"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"index of left-most brace index of right-most brace"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"this is not an expression that computes anything"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore, we're on the way out"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"constructor"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pickaxe says @ must be followed by a name character, but mri does not require this."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1806"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"b64_xtable for decoding base 64"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"simplesampler"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"----- ruby class methods"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"pickaxe says @@ must be followed by a name character, but mri does not require this."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"complete, according to posix.2"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"get index of last read byte"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"long, little-endian"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"double precision, big-endian"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"obtain b"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"double precision, little-endian"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"prepare to call \"def\" utility method to handle def logic"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single precision, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single precision, big-endian"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unsigned char"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"signed char"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"signed short, little-endian"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"64-bit number, native (as fixnum)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"possible checksum byte"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"unsigned int, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"int, native"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"see if we have a converter for the job..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$?: last status"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"$$: pid"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise the unpack should be here..."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"normal exit, this should be faster than a test at each iterations for string with more than about 40 char"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"break out if we've dug as deep as we can"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore and try windows version"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"1"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"encode.limit() -"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"3"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"skip embedded comments in pack format string"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"5"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"16 ?"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"6"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"root fiber"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"4"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we encountered '\\0' when were reading the buffer above, increment the number of read bytes."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"7"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"determine how many of type are needed (default: 1)"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the low bit is set set the high bit of the result"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"'z' adds extra null pad (versus 'a')"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"line 1270"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the index is not a multiple of 8, we are not on a byte boundary shift the byte"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"do some padding, i don't understand the padding strategy"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"if the index is not a multiple of 8, we are not on a byte boundary"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we filled up current byte; append it and create next one"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"we don't deal with negatives."}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"default pidgetter"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"populate commandline with ng-provided stuff"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"ignore and use hashcode"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just unix"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"^z"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"direct invocation of the command"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"single string command, pass to sh to expand wildcards"}
{"projectname":"jruby-1.4.0","classification":"WITHOUT_CLASSIFICATION","comment":"just windows"}
