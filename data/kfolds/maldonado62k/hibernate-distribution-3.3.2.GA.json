{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"note that this timestamp is not correct if the connection provider returns an older jdbc connection that was associated with a transaction that was already begun before opensession() was called (don't know any possible solution to this!)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: this is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current session throw new assertionfailure(\"bug loading unowned collection\");"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"this does not support the cache sql 'distinct by (comma-list)' extensions, but this extension is not supported through hibernate anyway."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: when this is the entry point, we should use an inner_join for fetching the many-to-many elements!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"could happen for custom criteria impls. not likely, but... for long term solution, see hhh-3514"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: currently broken for unique-key references (does not detect change to unique key property of the associated object)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: entities can be compared, by pk and entity name, fix this!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: does not work for entitymode.dom4j yet!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: deal with the \"optional\" attribute in the <join> mapping; this code assumes that optional defaults to \"true\" because it doesn't actually seem to work in the fetch=\"join\" code note that actual proper handling of optional-ality here is actually more involved than this patch assumes. remember that we might have multiple <join\/> mappings associated with a single entity. really a couple of things need to happen to properly handle optional here: 1) first and foremost, when handling multiple <join\/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. in all likelihood, just using the root table is much simplier 2) need to add the fk columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present my initial thoughts on the best way to deal with this would be to introduce a new sequentialselect abstraction that actually gets generated in the persisters (ok, singletable...) and utilized here. it would encapsulated all this required optional-ality checking..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: would be nice to use false, but issues with ms sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: not really completely correct, since the uoe could occur while resolving associations, leaving the pc in an inconsistent state"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: this is kinda inconsistent with collectiontype"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"for a one-to-many, a <bag> is not really a bag; it is *really* a set, since it can't contain the same element twice. it could be considered a bug in the mapping dtd that <bag> allows <one-to-many>."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: entities can be compared, by pk, fix this! -> only if\/when we can extract the id values...."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: old version did not require hashmap lookup: keys[collectionowner].getidentifier()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: this disables laziness even in non-pojo entity modes:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getstatus() to decide to semiresolve(), trouble is that initializeentity() reuses the same array for resolved and hydrated values"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: currently we don't know a sessionfactory reference when building the tuplizer this is a bug (embedded-xml=false on component) todo : fix this after hhh-1907 is complete"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: this requires that the collection is defined after the referenced property in the mapping file (ok?)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo : currently we really do not handle valueinclusion.partial... valueinclusion.partial would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: is this completely correct?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: what if batchupdate is a callablestatement ? calls executebatch()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"this doesn't actually seem to work but it *might* work on some dbs. also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new string[] { getdiscriminatorcolumnname() };"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"first, validate all the enabled filters... todo: this implementation has bad performance"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: passing null here, because this method is not really used for dom4j at the moment but it is still a bug, if we don't get rid of this!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"algorithm check for any level one nullability breaks look at non null components to recursively check next level of nullability breaks look at collections contraining component to recursively check next level of nullability breaks in the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. so setting a sub component as update=\"false\" has no effect on not-null check if the main component had good checkeability in this implementation, we keep this feature. however, i never see any documentation mentioning that, but it's for sure a limitation."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"assume that the row was not there since it previously had only null values, so do an insert instead todo: does not respect dynamic-insert"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo : this call will not work for anything other than pojos!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"note that this implementation is kinda broken for components with many-to-one associations"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo : this is broke for subqueries in statements other than selects..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"the following types are not supported in rdms\/jdbc and therefore commented out. however, in some cases, mapping them to character columns works for many applications, but does not work for all cases."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo : should this be an error?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"three general cases we check here as to whether to render a physical sql join: 1) is our parent a dotnode as well? if so, our property reference is being further de-referenced... 2) is this a dml statement 3) we were asked to generate any needed joins (generatejoins==true) *or* we are currently processing a select or from clause (an additional check is the regression_style_join_suppression check solely intended for the test suite) the regression_style_join_suppression is an additional check intended solely for use within the test suite. this forces the implicit join resolution to behave more like the classic parser. the underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical sql join in a lot of cases. the piece it generally tends to miss is that inner joins effect the results by further restricting the data set! a particular manifestation of this is the fact that the classic translator will skip the physical join for toone implicit joins *if the query is shallow*; the result being that query.list() and query.iterate() could return different number of results!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: figure out how this should be set. \/ this was the reason for failures regarding index_op and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinsequence = joinsequence.getfrompart(); emulate the old addfromonly behavior."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"the preference here would be sqlfunctiontemplate( hibernate.timestamp, \"current_timestamp(?1)\", false) but this appears not to work. jay nance 2006-09-22"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: inexact, what we really need to know is: are any outer joins used?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select current_timestamp does not work..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: cannot use generatesuffixes() - it handles the initial suffix differently."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on db2"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"starts with an alias (old style) semi-bad thing about this: can't re-alias another alias....."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"todo: bug! this currently fails for named queries for non-pojo entities"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"fixme we don't have the associated entity table name here, has to be done in a second pass"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"this call is side-effecty"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"rdms does not directly support the trim() function, we use rtrim() and ltrim()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"note: at least my local sql server 2005 express shows this not working..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DEFECT","comment":"note: at least my local mysql 5.1 install shows this not working..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"use count as the default. this mimics the old behavior, although none might be a better option moving forward in the case of callable"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"perhaps not really necessary..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : what else to do here?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: disable batch loading if lockmode > read?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: to handle concurrent writes correctly, the client should pass in a lock"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"turn hibernate.c3p0.* into c3p0.*, so c3p0 gets a chance to see all hibernate.c3p0."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"note there is a wierd implementation in the client side"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this was added to support initializing an entity's entityentry snapshot during reattach; this should be refactored to instead expose a method to assemble a entityentry based on this state for return."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"do we need to drop constraints before dropping tables in this dialect?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"fixme per the regionfactory class javadoc, this constructor version should not be necessary. @param props the configuration properties"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"does this dialect support check constraints?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this is called by sessionfactory irregardless; we just disregard here; could also add a check to sessionfactory to only conditionally call start"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"does this dialect support the unique column syntax?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this is done here 'cos we might only know the type here (ugly!) todo: improve this a lot:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"does this dialect support the for update syntax?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : what is the implication of this?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : yuck!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : again, how *should* this work for non-pojo entities?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"does this dialect support for update of, allowing particular rows to be locked?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: really bad, evil hack to fix!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"aliasrefnode.resolve( false, false, aliasrefnode.gettext() ); todo: is it kosher to do it here? todo: is it kosher to do it here?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: better to degrade to lazy=\"false\" if uninstrumented"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"does this dialect support the oracle-style for update nowait syntax?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"icky workaround for mysql bug:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"we have to set up the table later!! yuck"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: somehow add the newly created foreign keys to the internal collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this inner class implements a case statement....perhaps im being a bit over-clever here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: merge into one method!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this is a bit of copy\/paste from indexedcollection.createprimarykey()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: what type?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: inefficient"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"fixme: get the persistentclass"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : we can remove this once the deprecated ctor can be made private..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: redesign how propertyaccessors are acquired..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : not so sure this is needed..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"create an index on the key columns??"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: improve this hack!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that collection\/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types\/filter-defs are known and before building persisters)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"use of trim() here is ugly?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: ideally we need the construction of propertyaccessor to take the following: 1) entitymode 2) entitymode-specific data (i.e., the classname for pojo entities) 3) property-specific data based on the entitymode (i.e., property-name or dom4j-node-name) the easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a \"propertyaccessor\" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters; likewise with propertyaccessor.getsetter()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"can happen because of the multiple ways cache.remove() can be invoked :("}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"ick!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: should this be session.instantiate(persister, ...)?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: suck this into initlaziness!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement, thus it is not defined as an environment constant... it is used to control whether we should consult the jdbc metadata to determine certain settings default values; it is useful to *not* do this when the database may not be available (mainly in tools usage)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: is this right??"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"ie. the subquery! yuck!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"use of a stringbuffer to workaround a jdk bug"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: copy\/paste from recreate()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : this eventually needs to be removed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : remove"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"just to help out during the load (ugly, i know)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"hack\/workaround as sqlquery impl depend on having a key."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: handle the case of a foreign key to something other than the pk"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: assumes all collections disassemble to an array!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : would love to have this work on a notification basis where the successful binding of an entity\/subclass would emit a notification which the extendsqueue entries could react to..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: deprecated, remove eventually"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo possibly relax that"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : this is a bit dodgy, come up with a better way to check this (plus see above comment)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"use a degenerated strategy for backward compatibility"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this is temporary in that the end result will probably not take a property reference per-se."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"get the right object from the list ... would it be easier to just call getentity() ??"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: should \"record\" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error ;)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this dependency is kinda bad"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: get sql rendering out of this package!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"why does this matter?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"important, to account for newly saved entities in query todo : some kind of check for new status..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: can we *always* use the \"null property\" approach for everything?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"does this need holdlock also? : return tablename + \" with (updlock, rowlock, holdlock)\";"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"for sets, we should end the collection load after resolving the entities, since we might call hashcode() on the elements todo: or we could do this polymorphically, and have two different operations implemented differently for arrays"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : remove this and just have subclasses use isolater\/isolatedwork directly..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"sql-server, at least needed this dropped after use; strange!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"is it necessary to register %exact since it can only appear in a where clause?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading todo: or we could do this polymorphically, and have two different operations implemented differently for arrays"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"does this dialect support the alter table syntax?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this next bit is to allow for both unsaved-value=\"negative\" and for \"older\" behavior where version number did not get seeded if it was already set in the object todo: shift it into unsaved-value strategy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: reenable if we also fix the above todo"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"orphans should not be deleted during copy??"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"orphans should not be deleted during merge??"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: suck this logic into the collection!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : we can actually just determine this from the incoming entityentry-s"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this bit actually has to be called after all cascades! but since identity insert is called *synchronously*, instead of asynchronously as other actions, it isn't"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this class has no proxies (so do a shortcut)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: should this be an initializeentityeventlistener??? (watch out for performance!)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : need map? the prob is a proper key, right?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: better to pass the id in as an argument?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"do we even really need this? the update will fail anyway...."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: would it be better to do a refresh from db?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this form used from annotations (?). essentially the same as the above using a resultset-mapping reference, but without cachemode, readonly, and comment. fixme: annotations do not use it, so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable, the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e., proc)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: ugly here:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: not quite sure about the full implications of this!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) todo: calling entryset on an identitymap is slow!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : i'd much rather have this done from #endloadingcollection(collectionpersister,loadingcollectionentry)..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : hack!!! note : here we cleanup the load context when we have no more local lce entries. this \"works\" for the time being because really only the collection load contexts are implemented. long term, this cleanup should become part of the \"close result set\" processing from the (sandbox\/jdbc) jdbc-container code."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered; but cachekey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"postload is needed for ejb3 todo: reuse the postloadevent..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : should we check the current isolation mode explicitly?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"brand new collection todo: or an array!! we can't lock objects with arrays now??"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: iteratively get transient entities and retry merge until one of the following conditions: 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo: find out if retrying can add entities to copycache (don't think it can...) for now, just retry once; throw transientobjectexception if there are still any transient entities"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"provides query splitting methods, which were originally in querytranslator. <br> todo: this will need to be refactored at some point. @author josh"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : most of below was taken verbatim from dotnode; should either delegate this logic or super-type it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however, that has some difficulties: 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"no explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : better way?!?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around \"ghost\" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially, look-ahead to the next fromelement that actually writes something to the sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity :("}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this function has a template -> restore output, apply the template and write the result out todo: downcast to avoid using an interface? yuck."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"at some point the generate phase needs to be moved out of here, because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader\/statementexecutor) themselves. also, not sure why queryloader currently even has a dependency on this at all; does it need it? ideally like to see the walker itself given to the delegates directly..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo:this is only needed during compilation .. can we eliminate the instvar?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : absolutely no usages of this constructor form; can it go away?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: is this a bit ugly?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"even here, if only properties mapped to the \"base table\" are referenced in the set and where clauses, this could be handled by the basicdelegate. todo : decide if it is better performance-wise to perform that check, or to simply use the multitableupdatedelegate"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : remove these last two as batcher is no longer managing connections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise, users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause\/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"implicit joins are always(?) ok to reuse"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: used to be exprnoparens! was this needed?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : we may also want to check that the types here map to exactly one column\/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"we do not know either type blind guess!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: get sql rendering out of here, create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"we would probably refactor to have logicparser (builds a tree of simple expressions connected by and, or, not), expressionparser (translates from oo terms like foo, foo.bar, foo.bar.baz to sql terms like foos.id, foos.bar_id, etc) and pathexpressionparser (which does much the same thing it does now)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"short-circuit for performance..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"not absolutely necessary, but does help with aggressive release"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this is one of the ugliest and most fragile pieces of code in hibernate...."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: implement functionality this might be painful to do here, as the \"join post processing\" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). a \"simple\" solution here might to perform \"join post processing\" once for the entire query (including any subqueries) at one fell swoop"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"yuck!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"ignore it; the incoming property could not be found so we cannot be sure what to do here. at the very least, the safest is to simply not apply any dereference toggling..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: make this a bit nicer"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : potentially look at optimizing these two arrays"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"note that i parameter is now unused (delete it?)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many, add it as a child of the origin."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : this constructor form is *only* used from constructor directly below us; can it go away?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"we should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : should this get moved to persistentcontext? logically, is persistentcontext the \"thing\" to which an interceptor gets attached?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: something much better - look at the type of the other expression! todo: have comparisonexpression and\/or arithmeticexpression rules complete the resolution of boolean nodes."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: optimize this better!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: should we allow suffixes on these ?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: is this really necessary????"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : not sure the best way to handle this. the non-performant way :"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: is there a better way?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"the class is now way to complex!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"name from a super query (a bit inelegant that it shows up here)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"real hacky... used to count the nesting of parentheses"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"ugly hack for cases like \"elements(foo.bar.collection)\" (multi-part path expression ending in elements or indices)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"fixme hacky workaround to jbcache-1202"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: copy\/paste from sessionimpl, pull up!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : need to find a clean way to handle the \"event source\" role a seperate classs responsible for generating\/dispatching events just duplicates most of the session methods... passing around seperate reto interceptor, factory, actionqueue, and persistentcontext is not manageable..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"must be done here because of side-effect! yuck..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"we should actually rework this class to not implement parser and just process path expressions in the most convenient way."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : should remove this exposure and have all references to the session's batcher use the connectionmanager."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"we may be screwed here since the collection action is about to execute and we do not know the final owner key value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"needed the \"clazz_\" check to work around union-subclasses todo : is there a way to tell whether a persister is truly discrim-column based inheritence?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"work around a bug in all known connection pools...."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: reuse the preloadevent"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"need a better way to define the suffixes here..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"workaround for weblogic"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: temporary"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : yuck!!! fix after hhh-1907 is complete"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: the i==entityspan-1 bit depends upon subclass implementation (very bad)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"some messy, complex stuff here, since createcriteria() can take an aliased path, or a path rooted at the creating criteria instance"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this is not very nice (and quite slow):"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: get sql rendering out of here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"meant to handle dynamic instantiation queries...(copy from queryloader)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"make sure this is a defined parameter and check the incoming value type todo: what should be the actual exception type here?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"worrying about proxies is perhaps a little bit of overkill here..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : throw exception? maybe warn if not the same?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: make entitypersister *not* depend on sessionfactoryimplementor interface, if possible"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : what amount of significant digits need to be supported here? - from the decimalformat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater sql todo: create an implicit not null constraint on all cols?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: copy\/paste from manytoonetype"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: code duplication with singletableentitypersister"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : throw exception?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"should this interface extend propertymapping?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: here is why we need to make bytecode provider global :( todo : again, fix this after hhh-1907 is complete"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently; yuck!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: yuck! this is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: implement caching?! proxies?!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"is this really necessary?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this is a little inefficient, don't need to do a whole deep replaceelements() call"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this is a bit arbitrary, expose a switch to the user?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"@return collection removal fixme: even if isinverse=\"true\"?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: fix this so it will work for non-pojo entity mode"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: move these to a new joinabletype abstract class, extended by entitytype and persistentcollectiontype:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: would be nice to handle proxy classes elegantly!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"spaces todo: i'm not sure, but perhaps we should exclude abstract denormalized tables?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: is there a more elegant way than downcasting?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: remove use of instanceof!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: perhaps this should be some other runtimeexception..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"yuck:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: design new lifecycle for proxyfactory"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: we should really just collect these from the various selectexpressions, rather than regenerating here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: should this really return null? if not, figure out something better to do here."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"should indicate that we are processing an insert\/update\/delete query with a subquery implied via a collection property function. here, we need to use the table name itself as the qualification alias. todo : verify this works for all databases... todo : is this also the case in non-\"indexed\" scenarios?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : make this the factory for \"entity mode related\" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point, perhaps this thing is a \"sessioncontext\", and connectionmanager is a \"jdbccontext\"? a \"sessioncontext\" should live in the impl package..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"is this ok?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"init the table here instead of earlier, so that we can get a quoted table name todo: would it be better to simply pass the qualified table name, instead of splitting it up into schema\/catalog\/table names"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"perhaps this should be an exception since it is only ever used in the above method?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"note: this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases.."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"put a placeholder in entries, so we don't recurse back and try to save() the same object again. question: should this be done before onsave() is called? likewise, should it be done before onupdate()?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"before cascade! todo: should this be session.instantiate(persister, ...)?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: we should throw an exception if we really *know* for sure that this is a detached instance, rather than just assuming throw new staleobjectstateexception(entityname, id);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: the order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now, just run through the transient entities and retry the merge"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: if object was an uninitialized proxy, this is inefficient, resulting in two sql selects"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: put this stuff back in to read snapshot from the second-level cache (needs some extra work)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this is kinda the best we can do..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this needn't exclude subclasses..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: we use two visitors here, inefficient!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: does this really need to be here? does the collection already have it's own up-to-date snapshot?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"otherwise, a trim-specification and\/or a trim-character have been specified; we need to decide which options are present and \"do the right thing\" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo: fix this, add: outerjoinloadable.getsubclasspropertytablename(string propertyname)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: an alternative is to check if the owner has changed; if it hasn't then return collection.getowner()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"i suppose?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"tbd should this be varbinary($1)? registercolumntype(types.varbinary, \"binary($1)\");"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"shortcut"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : probably better to calculate these and pass them in, as it'll be more performant"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : should we additionally check the current isolation mode explicitly?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: simply remove this override if we fix the above todos"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : is there really any reason to kkeep trying if this fails once?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : not sure this is correct, could not find docs on how to do this."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"hsql has no blob\/clob support .... but just put these here for now!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"merges don't cascade to uninitialized collections todo: perhaps this does need to cascade after all...."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"yick! need this for proper serialization\/deserialization handling..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: should orphans really be deleted during lock???"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : move to stringhelper?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: it would be really, really nice to use this to also model components!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: move to .sql package!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: look at the owning property and check that it isn't lazy (by instrumentation)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : add this info to the translator and aggregate it here..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: code duplication with joinedsubclassentitypersister"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: refactor to .sql package"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: *two* hashmap lookups here is one too many..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"note that this method could easily be moved up to basicentitypersister, if we ever needed to reuse it from other subclasses"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"from the collection of associations, locate oja for the manytoone corresponding to this persister to fully define the many-to-many; we need that oja so that we can use its alias here todo : is there a better way here?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this class depends directly upon criteriaimpl, in the impl package ... add a criteriaimplementor interface"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"do we need to qualify index names with the schema name?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: we probably should have a statisticsnotpublishedexception, to make it clean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"yukky! don't you have subclasses for that! todo race conditions can happen here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"note very hackish workaround!! todo: fix this so it will work for non-pojo entity mode"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: need to make the majority of this functionality into a top-level support class for custom impl support"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"for dom4j \"collections\" only todo: it would be better if this was done at the higher level by printer"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: inefficient if that cache is just going to ignore the updated state!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: an alternative is to check if the owner has changed; if it hasn't then get the id from collection.getowner()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo:refactor + make this method private"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : keep seperate notions of qt[] here for shallow\/non-shallow queries..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this is called by sessionfactory irregardless; we just disregard here; could also add a check to sessionfactory to only conditionally call stop"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 poolconfig defaults"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"work around that crazy issue where the tree contains \"empty\" fromelements (no text); afaict, this is caused by fromelementfactory.createcollectionjoin()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"kinda ugly, but needed for collections with a \".\" node mapping"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"entity name will not be available for non-pojo entities todo: cache the entity name somewhere so that it is available to this exception"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"index += getpropertycolumnspan( i ); todo: this is kinda slow..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: move to .sql package, and refactor with similar things!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: i am not so sure about the exception handling in this bit!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"ugly little workaround for fact that createuniquekeyloaders() does not handle component properties"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"append the sql to return the generated identifier todo: suck into insert"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this is really ugly, but necessary:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : modify the class definition if not already transformed..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: should we use select .. for update?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"create an action that will evict collection and entity regions based on queryspaces (table names). todo: cache the autodetected information and pass it in instead."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: is this 100% correct?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"used only for regression testing!!!! todo : obviously get rid of all this junk ;)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"note: this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases.."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: move into collection type, so we can use polymorphism!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo should we just collect these like with the collections above?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : should really move this log statement to collectiontype, where this is used from..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"hum ... should we cascade anyway? throw an exception? fine like it is?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: copy\/paste from insertrows()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: suck into event class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: never reached, since gettypename() actually throws an exception!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this, is used by sessionfactoryimpl to hand to the generated sessionimpl; was the only reason i could see that we cannot just use null as settings.cacheprovider"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"xmlforest requires a new kind of function constructor"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo is this a valid operation on a timestamps cache?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: i considered validating the presence of the ts cache here, but decided to defer unti getquerycacheinstance() in case the cache is never actually used"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo why not use the timestamp in a dataversion?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : eventually merge this with treecache and just add optional opt-lock support there."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"work around the \"feature\" where tree cache is validating the inserted node during the next transaction. no idea..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: i considered validating ts cache config here, but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"unhappy about this being public ... is there a better way?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : safe to interpret \"map.remove(key) == null\" as non-dirty?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"fixme hack to work around fact that calling node added = root.addchild( fqn ); doesn't properly set the version on the node"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: replace this with a more elegant solution."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"short cut check..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: to handle concurrent writes correctly, this should return a lock to the client"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"this is ugly here, but needed because its a subquery"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo : will need reference to session factory to fully complete hhh-1907"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"inheritance cycle detection (paranoid check)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"todo: encapsulate the protected instance variables!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DESIGN","comment":"polymorphism comment above"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"DOCUMENTATION","comment":"todo find a decent name before documenting"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: handle typedefs"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: get all properties, not just the fetched ones!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: native ids"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: bindpropertyresults(alias, returnelem)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: handle property-ref"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: validate existing of property with the chosen name. (secondpass )"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: check that entry.getidentifier().equals(requestedid)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: restrict violation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: assertion only, could be optimized away"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: lowercasing done here. was done \"at random\" before; maybe not needed at all ?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: optimize away this lookup for entities w\/o unsaved-value=\"undefined\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: tolowercase was not done before. only used in template."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: arithmetic expressions, multiple new foo(...)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: not visible to the user!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: proxies!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: can we limit stored procedures ?!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: formulas ?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: better error message since we actually support composites if names are explicitly listed."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: use these in methods above"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: cache the persister, this shows up in yourkit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: add referencedclass to disambiguate to fks on the same columns, pointing to different tables"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: create uk loaders for component properties"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo : still need to make collectionpersisters entitymode-aware"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: terrible implementation!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: eventually put this back in, once we think all is fixed object otheralias = columnsunique.put(qualifiedcolumn, columnalias);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: i don't really like this implementation; it would be better if this was handled by searchfordirtycollections()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: check if key contains the owner id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: cache this in an instvar"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo : temporary initial step towards hhh-1907"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo : remove this once componentmetamodel is complete and merged"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: add owner argument!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo handle supportsnotnullunique=false, but such a case does not exist in the wild so far"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: for some dialects it would be appropriate to add the renderorderbypropertiesselect() to other select strings"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: unnecessary for databases with ansi-style joins"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: maybe call it getrowselection() ?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: make this handle multiple collection roles!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: include the rowids!!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals\/constants (\"nondeterminism\"). todo: cleanup the grammar so that \"processconstants\" is always just handled from here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo : or should we return 'containstablealias'??"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo : look at perhaps caching this..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: avoid this for non-new instances where mightbedirty==false"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: theoretically non-threadsafe..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo : look at optimizing these..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo : cache this sql..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: check if mimer sql cannot handle the way db2 does"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: if we are using identity columns, fetch the identifier"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo check there is no actual definition elemnents when a ref is defined"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"table=null -> an association - fill it in later todo fill in the mappings for table == null"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo : add support for read_write ( + nonstrict_read_write ??? )"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: return new lock(ts);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo : why aren't these the same?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: if we support multiple fetch groups, we would need to clone the set of lazy properties!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo mappings.getlogicaltablename(ownertable)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: if lock.gettimestamp().equals(ts)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"todo: always true for now, but not if we later decide to support elements() in the from clause"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"IMPLEMENTATION","comment":"we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"see if the user configured a multiplexer stack"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"root entity comes *last"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"elementtype ??"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class\/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"identifier collections not supported for 1-to-many"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the current depth is 0, the root thing being loaded is the many-to-many collection itself. here, it is alright to use an inner join..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"update removed rows fks to null"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"registerfunction( \"trim\", new standardsqlfunction( \"trim\", hibernate.string ) );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"buf.append( selectfragment( lhsalias, \"\" ) ) ignore suffix for collection columns!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the set of queried identifier spaces (ie. tables)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use suffix for the entity columns"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we got here because we assumed that an instance with an assigned id was detached, when it was really persistent"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the class hierarchy structure"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remove the current element from insertions. it will be added back later."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private final string roottablename;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note : this is being used from the process of shutting down a sessionfactory. specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"initialization:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and\/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not null ... (start with 1) is implicit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"continue loop"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return existing object or initialized proxy (unless deleted)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the list of entity names that indicate the batch number"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"disassembled state gets put in a new array (we write to cache by value!)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add these directly to the executions queue"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"execute the sql:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sort the updates by fk"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this could also just be true all the time..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the mapping of entity names to their latest batch numbers."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"chop the last union (all)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note that for sequential scrolling, we make the assumption that the first persister element is the \"root entity\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo: check this...."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for deprecated saveorupdatecopy()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"23000: check constraint violation: {0} 23001: unique index or primary key violation: {0}"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the closure of all properties in the entire hierarchy including subclasses and superclasses of this class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"expressionterminators.add(\",\"); deliberately excluded"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"multi-param numeric dialect functions..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use theta style (for regression) move the node up, after the origin node."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"multi-param date dialect functions..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the main query"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the restriction to the outer select"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this assumes you will want to ignore any update counts"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"skip the from keyword in params"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"custom sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return a newly loaded object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make it circular-reference safe"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cope with special cases of and, not, ()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"subclass closure properties"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for dialects which are known to not support ansi-sql row-value-constructor syntax, we should mutate the tree."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have the form: trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"subclasses"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"need to hydrate it."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"starts with 1, implicitly"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"instantiate a new instance"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"simple nullability constraint"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to upgrade the lock mode to the mode requested"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register the type of the out param - an oracle specific type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"look for a proxy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"evicts don't cascade to uninitialized collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"need to treat this as if it where optimistic-lock=\"all\" (dirty does *not* make sense); first we need to locate the \"loaded\" state note, it potentially could be a proxy, so perform the location the safe way..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"might happen with a managed connection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't need subclass tables, because they can't appear in conditions"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not final-static to avoid possible classcast exceptions if using different oracle drivers."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private list aliases = new arraylist();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the reason for this is sql doesn't let you sort by an expression you are not returning in the result set."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register resolvers set via environment property"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"update all the modified entries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"special case where we need to force incloude all subclass joins"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"binary %stream character %stream"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"getdefaultproperties().setproperty(environment.statement_batch_size, no_batch);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"assumes that types are all of span 1"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hibernate impelemnts cast in dialect.java"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a \"generated\" version column)!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aggregate functions shouldn't be registered, right? registerfunction( \"list\", new standardsqlfunction(\"list\",hibernate.string) ); stopped on $list"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"its the given optional object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"decide which resultset to get the property value from:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"properties of this class, including inherited properties"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise assume the parent is the the criteria that created us"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we can go straight to the first required row"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"before adding to collection!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"discriminator column"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"code to handle subclasses of topclass"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"none, because its the requested lock mode, not the actual!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private final map propertytablenumbersbyname = new hashmap();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"conceivable that the dialect ctor could throw hibernateexceptions, so don't re-wrap"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"class + table"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"required to exception table iconst_0 i"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for now, just \"re-flatten\" the metamodel since this is temporary stuff anyway (hhh-1907)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"checkcast cast the bean into a raw bean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered, its a noop) (actually we do need it for downgrading locks)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"checkcast (case of primitive type) invokevirtual (case of primitive type)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however, the driving table is not (necessarily) the table against which we want to apply locks. mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"| this | bean | args | i | raw bean | exception |"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"new bulkaccessorexception"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"\"as\" is not in keywords"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"getfield get field \"$javassist_callback\" defined already"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dup"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo : move this to sf per hhh-3517; also see hhh-1907 and componentmetamodel"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"putfield put field \"$javassist_callback\" defined already"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"configure the cache to use our tm"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"local variables | this | callback |"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"find the batch number associated with the current association, if any."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"invokeinterface"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we *always* assume an instance with a null identifier or no identifier property is unsaved!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"seems to not really... public boolean supportsrowvalueconstructorsyntax() { return true; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"below is for cache' that don't have str in 2007.1 there is str and we register str directly"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"byte"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the column doesnt exist at all."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note that %string is deprecated"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the object is already loaded, return the loaded one"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create new lock that times out immediately"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"convenience methods relating to operations across arrays of types..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we really could refresh the item if it is not a lock, but it might be slower return freshtimestamp < txtimestamp"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"due to the complexity in initializing the selectclause, do not generate one here. if it is not found; simply return null... also, do not cache since it gets generated well after we are created."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"discriminator"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server, which are completely db-generated values..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the lower case function name. remember whether we're in a select clause or not."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"%upper is deprecated"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"let this take precedence if defined, since it works for assigned identifiers"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"throw new unsupportedoperationexception(\"can't write to a readonly object\");"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"according to both the ansi-sql and ejb3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec: <trim function> ::= trim <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> ::= leading | trailing | both if only <trim specification> is omitted, both is assumed; if <trim character> is omitted, space is assumed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the syntax used to add a foreign key constraint to a table."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: it is conceptually possible that a usertype could map null to a non-null value, so the following is arguable:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: interfaces is assumed to already contain hibernateproxy.class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"identifier-commalist"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"assembled state gets put in a new array (we read from cache by value!)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"disassemble named parameters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true : searchfordirtycollections( (persistentcollection) obj, type );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"again, ccs did not have such a concept; but a reasonable proximity is to clear the cache after transaction *as long as* the underlying cache is not jta aware."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"oracle driver reports to support getgeneratedkeys(), but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"again, ccs did not have such a concept; however a reasonable proximity is to clear the cache. for non-transaction aware caches, we will also do a clear at the end of the transaction"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remove all collections for the entity from the session-level cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"invokeinterface callback.write*(..)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"joins"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if this is an entity and the property is the identifier property, then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to \"fall through\" to using the property mapping."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"classes mentioned in extends not available - so put it in queue"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"propertytablenumbersbyname.put( prop.getname(), join );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"needed to bump this up to dotnode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the dotnodes constructing the property path just like dotnode does internally"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"access cached sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"figure out which tables need to be fetched"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private final list persisters = new arraylist();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"figure out which columns are needed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"figure out which formulas are needed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get em on the second pass!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"render the sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"local cache, so we use synchronization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sql strings"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public static object[] clone(class elementclass, object[] array) { object[] result = (object[]) array.newinstance( elementclass, array.length ); system.arraycopy(array, 0, result, 0, array.length); return result; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no resulting row, return null"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"*load_1 each type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"select topic, syntax from information_schema.help where section like 'function%' order by section, topic see also -> http: www.h2database.com\/html\/functions.html"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the optional sql string defined in the where attribute"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"pass this as an argument only to avoid double looking"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for version properties marked as being generated, make sure they are \"always\" generated; aka, \"insert\" is invalid; this is dis-allowed by the dtd, but just to make sure..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"added this caching as i noticed that gettype() is being called multiple times..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"information about lazy properties of this class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there are any scalars (non-entities) selected, render the select column aliases."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"information about all columns\/formulas in class hierarchy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"( (column) discrim.getcolumniterator().next() ).settype(type);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dynamic filters attached to the class-level"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"assume we are in an auto-commit state"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cascade first, so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event, persister, entity, copycache, cascades.cascade_before_merge);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"model.getkey().settype( new type( model.getidentifier() ) );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the syntax used to add a column to a table"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"completely optional cascading drop clause."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"during deserialization, we need to reconnect all proxies and collections to this session, as well as the entityentry and collectionentry instances; these associations are transient because serialization is used for different things."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"properties"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"identifier"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however, it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed, and there currently is no other way without refactoring of the doquery()\/getrowfromresultset() methods"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"version"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"operations which cascade as far as the collection also cascade to collection elements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"where string"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the loop ensures atomicity of the select + update even for no transaction or read committed isolation level"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"subclass property closure"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread), we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to \"drive\" the #endread processing."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"before add :-)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a jta synchronization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle any filters applied to the class level"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sybase driver (jconnect) throwing npe here in certain cases, but we'll just handle the general \"unexpected\" case"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"only one-to-one is lazy fetched"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"replicate does cascade to uninitialized collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note early exit here:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"translates an ast join type (i.e., the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: this assumes something about how propertyselectfragment is implemented by the subclass!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"deliberately ignore return value!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"strip leading \", \""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if this from element is a collection and the path is a collection property (maxindex, etc.) then generate a sub-query."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise return the \"hydrated\" state (ie. associations are not resolved)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the name of the sql function that transforms a string to lowercase"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"null owner ok??"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; note that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"automatically makes a column with the default name if none is specifed by xml"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"just ignore"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ok in normal hibernate usage to delete a detached entity; jpa however forbids it, thus this is a hook for hem to affect this behavior"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the property mapping consists of all formulas, make it non-updateable"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the user specifically supplied insert=\"true\", which constitutes an illegal combo"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the property mapping consists of all formulas, make it insertable"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it might be an unwrapped collection reference! try to find a wrapper (slowish)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"tablename = mappings.getnamingstrategy().propertytotablename( classname, path );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"package"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the entry will be removed after the flush, and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"bad cast"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"arraylist list = new arraylist(); list.addall( getkey().getconstraintcolumns() ); list.addall( getindex().getconstraintcolumns() ); getcollectiontable().createuniquekey(list);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"property-refs for associations defined on a component are not supported, so no need to slice"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have an embedded composite identifier"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"stops flush being called multiple times if this method is recursively called"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create a new from node for the referenced class."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"performance op to avoid the array search"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now get an existing proxy for each row element (if there is one)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"orphan delete (used for programmer error detection)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"empty means no scoping"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"enable for hhh-440, which we don't like:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(lockmode) anything"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this.forcecacherefresh = forcecacherefresh;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"an \"embedded\" component (composite ids and unique) note that this does not handle nested components"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"and perform the load"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aliases"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cache these since they are stateless this one could even be static..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a nested composite element"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"must occur after resolving identifiers!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the persister for the _subclass_"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aliases for composite-id's"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlqueryparser parser = new sqlqueryparser( sqlquery, processor.getalias2persister(), processor.getalias2return(), aliases, collaliases, collpersisters, suffixes, collsuffixes ); sql = parser.process(); namedparameterbindpoints = parser.getnamedparameters();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fetch embedded identifiers propertynames from the \"virtual\" identifier component"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"embedded composite ids ( alias.idname1, alias.idname2 )"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: we need to do the wrap here even if its not \"dirty\", because collections need wrapping but changes to _them_ don't dirty the container. also, for versioned data, we need to wrap before calling searchfordirtycollections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo: skip formulas?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"invokeinterface invoke enabled.getinterceptfieldcallback()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hibernate seems to ignore this type..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't need filters for the static loaders"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the user requested a \"greater\" (i.e. more restrictive) form of pessimistic lock"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do two passes, for collection property-ref!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public boolean droptemporarytableafteruse() { we have to, because postgres sets current tx to rollback only after a failed create table return true; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"select the correct row by either pk or rowid"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass, getternames, setternames, proptypes );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo: eventually, rowidname[j]"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"include the discriminator and class-level where, but not filters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"lazy = !join;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not absolutely necessary, but helps for some equals()\/hashcode() implementations"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is a property of the table, which we are updating"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the hibernate-mapping did not specify a schema\/catalog, use the defaults specified by properties - but note that if the schema\/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this should only be possible if the caches are constructor injected"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"transactions marked for rollback-only cause some tm impls to throw exceptions"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"impl note : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have a mapped identifier property and the root of the incoming property path matched that identifier property"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"contained elements:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"}"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for non-inverse one-to-many, with a not-null fk, add a backref!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"to stop the class from being unloaded"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"mappings might contain either the \"raw\" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for objects that came in via update()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use dialect default properties"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"increment the version number (if necessary)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"information about all properties in class hierarchy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"string provider = properties.getproperty( environment.bytecode_provider ); log.info( \"bytecode provider name : \" + provider ); bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ); settings.setbytecodeprovider( bytecodeprovider );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we are using \"all\" or \"dirty\" property-based optimistic locking"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"orphans should be deleted during save\/update"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"maybe a concrete sqlpropertyresult type, but map is exactly what is required at the moment"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do a check"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlaliassuffixes[i] = element.getcolumnaliassuffix();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"void setshowsqlenabled(boolean b) { showsql = b; } void setformatsqlenabled(boolean b) { formatsql = b; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"materialize associations (and initialize the object) later"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private componenttuplizerfactory componenttuplizerfactory; todo : hhh-3517 and hhh-1907"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fetch=\"join\" overrides default laziness fetch=\"join\" overrides default laziness"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"drop them in reverse order in case db needs it done that way..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario, the previous logical row really is the last logical row. in all other cases, we should process back two logical records (the current logic row, plus the previous logical row)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"mckoi has no known variation of a \"select ... for update\" syntax..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it is or was referenced _somewhere_"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides, it makes the code much easier to read than the old transactionhelper stuff..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the root of the incoming property path matched one of the embedded composite identifier properties"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add normal properties"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the discriminator"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handles arrays and newly instantiated collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if either its role changed,"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"noncritical, swallow and let the other propagate!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we will need to create new entries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this piece is needed for usage in select clause"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no-op. we don't own the cache so we shouldn't stop it."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the names of the columns used to link between the collection owner and the collection elements."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"let's assume that there is only one lazy fetch group, for now!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"more specifically : \"? [op] datetime\" 1) if the operator is minus, the param needs to be of some datetime type 2) if the operator is plus, the param needs to be of some numeric type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't even bother trying to read any further"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"prepend value and type list with null for any positions before the wanted position."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"+ \"_\" + referencedcolumnname not used for backward compatibility"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this property belongs on the table and is to be inserted"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"need to extract the component values and check for subtype replacements..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the primary key"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"impl note: allows multiple collection fetches as long as the entire fecthed graph still \"points back\" to a single root entity for return"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"registercolumntype( types.blob, 16777215, \"mediumblob\" ); registercolumntype( types.blob, 65535, \"blob\" );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"delegate already handles pk columns"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ie. e.status==deleted"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"kept for backward compatibility until after the 3.1beta5 release of ha"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"legacy behavior, apply the bridge..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if an exception occurs during flush, user must call rollback()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"turn off includesubclasses on all fromelements."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"can't just return null here, since that would cause an owning component to become null"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the object is transient or detached"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now update only the tables with dirty properties (and the table with the version number)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"render the sql query"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we must return a valid rdms\/rsa command from this method to prevent rdms\/rsa from issuing *error 400"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"registercolumntype(types.varbinary, \"character($l)\"); registercolumntype(types.blob, \"character($l)\" ); for use prior to cp 11.0 registercolumntype(types.clob, \"character($l)\" );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo : shouldnt inserts be expectations.none?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a proxy cannot be transient and it breaks foreignkeys.istransient"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't bother trying to update, we know there is no row there yet"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is the root level node. generate an explicit from clause at the root."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement\/garbage-collection)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if all fields are null, we might need to delete existing row"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: updates to joined tables can't be batched..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"starting index"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"object have been loaded with setreadonly(true); hhh-2236"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"build a resultsetmappingdefinition given a containing element for the \"return-xxx\" elements @param resultsetelem the element containing the return definitions. @param path no clue... @param mappings the current processing state. @return the description of the mappings..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private list collectionowneraliases = new arraylist(); private list collectionaliases = new arraylist(); private list collectionpersisters = new arraylist(); private list collectionresults = new arraylist();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"write any appropriate versioning conditional parameters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check if the detached object being merged is the parent"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"determine if the collection elements are entities..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"let return-propertys override whatever the persister has for aliases."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we should use the _current_ object state (ie. after any updates that occurred during flush)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"might need to run a different filter entirely after the flush because the collection role may have changed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"amazingly, these two will work because abstractcollection uses iterator() to fill the array"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: dirtyfields==null means we had no snapshot, and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"loop through all the associations of the current entity and make sure that they are processed before the current batch number"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"column and table should be renamed but it would break the public api"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for many-to-many joins, use the tablename from the queryable collection for the default text."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"int result = 17; result = 37 * result + type.hashcode(); result = 37 * result + ( value==null ? 0 : value.hashcode() ); return result;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for the case of dynamic-update=\"true\", we need to generate the update sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"default to collections sharing entity cache if there is one"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"--commented out by inspection (12\/4\/04 9:10 am): public abstract void addcondition(string alias, string[] columns, string condition);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't need to check laziness (dirty checking algorithm handles that)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect(), factory.getdefaultcatalog(), factory.getdefaultschema() );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for the case of dynamic-update=\"false\", or no snapshot, we use the static sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"abort the save (the object is already saved by a circular cascade)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if not \"get\", then try \"is\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remove initial \" and \""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"default to sharing the entity cache if there is one"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have the form: trim(trimsource) so we trim leading and trailing spaces"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for the case of dynamic-insert=\"true\", we need to generate the insert sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the user visible aliases, which are unknown to the superclass, these are not the actual \"physical\" sql aliases"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for the case of dynamic-insert=\"false\", use the static sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if a composite key, use \"( (foo = ? and bar = ?) or (foo = ? and bar = ?) )\" for batching todo: unnecessary for databases with ansi-style joins"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a shortcut if its location didn't change!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not supported"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"new collections that get found + wrapped during flush shouldn't be ignored"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"meant to handle dynamic instantiation queries..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a newly wrapped collection is not dirty (or we get unnecessary version updates)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"always add the collection's query spaces."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte, m - megabyte, g - gigabyte. refer to the pbdevelopers guide for more info."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"detached collections that get found + reattached during flush shouldn't be ignored"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.*-style parameter."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to utilize dynamic delete statements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"columns.add(columnname); aliases.add(tablealias);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, utilize the static delete statements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"intentionally empty"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public boolean equals(object other) { read(); return bag.equals(other); } public int hashcode(object other) { read(); return bag.hashcode(); }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"final boolean forcecacherefresh,"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"just a performance opt!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"essentially: 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached, use that usertransaction to determine the status. 2) if a transaction manager has been located, use that transaction manager to determine the status. 3) finally, as the last resort, try to lookup the usertransaction via jndi and use that to determine the status."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"used to set the type of the parent dot node"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"all joins join to the pk of the driving table"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"more specifically : \"datetime [op] ?\" 1) if the operator is minus, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus, the param needs to be of some numeric type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"notice that we skip the first table; it is the driving table!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aliases named identifier ( alias.idname )"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"skip the driving table"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get 'em in the right order (not that it really matters)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note early exit!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"trying via forname() first to be as close to drivermanager's semantics"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this bit is only *really* absolutely necessary for handling requestedid, but is also good if we merge multiple object graphs, since it helps ensure uniqueness"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private boolean showsql; private boolean formatsql;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"in case we were deserialized in a different jvm, look for an instance with the same name (alternatively we could do an actual jndi lookup here....)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"try to make sure we don't wrap and already wrapped session"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if this is an implied join in a from clause, then use ansi-style joining, and set the flag on the fromelement that indicates that it was implied in the from clause itself."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"render the where and from parts"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"there is already an existing batch for this type of entity. check to see if the latest batch is acceptable."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"allow these to go through the the real session no matter what"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects\/deletes should fail"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we *could* regerate this inside each called method!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now render the joins"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if you're closing down the connectionprovider chances are an is not a real big deal, just warn"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create a new batch for this type. the batch number is the number of current batches."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this will add the new from element to the origin."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now render the select clause"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the keyword used to insert a row without specifying any column values"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now tie it all together"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"does the limit clause take a \"maximum\" row number instead of a total number of returned rows?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"insert\/update\/delete sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the keyword used to specify a nullable column."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"select sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"overriden to avoid system.exit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no need to check laziness, dirty checking handles that"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fully resolve the map reference, create implicit joins."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"break the outer loop !!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the basic implementation is to simply use the node's text"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"intersystems cache' does not current support \"select ... for update\" syntax... set your transaction mode to read_committed before using"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cascade to current collection elements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not really necessary, but good for consistency..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"try to find out the name of the primary key to create it as identity if the identitygenerator is used"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we can't cascade to non-embedded elements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"postdelete: after actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a newly instantiated collection can't have orphans"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't hold the jbc node lock throughout the tx, as that prevents reads and other updates"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check the version unsaved-value, if appropriate"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create the sessionfactory from hibernate.cfg.xml"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle orphaned entities!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check the id unsaved-value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... note: decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if it is in the second-level cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"custom sql (would be better if these were private)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"our column span is the number of columns in the pk"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for property references generate <tablealias>.<columnname> as <projectionalias>"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"key"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"force immediate execution of the insert"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"loaded entity instances, by entityuniquekey"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"allow any identifier quoted with backtick only recognizes identifiers beginning with a letter"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"identity map of entityentry instances, by the entity instance"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"write html footer"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"entity proxies, by entitykey"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"delete does cascade to uninitialized collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"snapshots of current database state for entities that have *not* been loaded"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"nativesql: collect key column and auto-aliases"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"identity map of array holder arrayholder instances, by the array instance"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cannot occur"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"try \"get\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"pass control along to the rest of the processing chain"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set of entitykeys of deleted objects"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"protected void initpropertypaths( final string path, final type type, final string[] columns, final string[] formulatemplates, final mapping factory) throws mappingexception { addformulapropertypath(path, type, formulatemplates); initpropertypaths(path, type, columns, formulatemplates, factory); }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"downgrade locks"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"deserialize"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"actually the semantics of the next three are really \"bag\" note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. we just re-use the same lists for convenience."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public boolean isshowsqlenabled() { return showsql; } public boolean isformatsqlenabled() { return formatsql; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"with two-deep subqueries, the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()), so that is now used as a fallback if the main criteria alias isn't set"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(array==null) ? templist.size() :"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sort the updates by pk"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"should be safe to only ever expect entitypersister references here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"optimize the hash size to eliminate a rehash."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unwrap the object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the entity associated with the current action."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this page intentionally left blank :)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unfortunately this stuff can't be cached because it is per-invocation, not constant for the querytranslator instance"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"initialize + unwrap the object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do not do anything"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we can't batch joined inserts, *especially* not if it is an identity insert; nor can we batch statements where the expectation is based on an output param"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return the proxied object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"else no collection element, but also no owner"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have the form: trim(trimsource) so we trim leading and trailing spaces early exit!!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"overwrite old proxy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the mru cache used to keep hard references to the most recently used query plans; note : lru here is a bit of a misnomer, it indicates that lru entries are removed, the actual kept entries are the mru entries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"early exit..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded \"and\") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded \"not\") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.bar = 'foo' (maps to: foo.bar = 'foo') foo.bar.baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to: bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to: bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to: bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to: ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"or should it actually throw an exception?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine \"lazy fetch groups\" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy=\"no-proxy\" * impl note - lazy=\"no-proxy\" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy=\"proxy\" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property\/field fetch groupings. if that assertion changes then this check needs to change as well. partially, this is an issue with the overloading of the term \"lazy\" here..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the property is a component..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the ids are fully resolved, so compare them with isdirty(), not ismodified()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cant instantiate"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"queryjoinfragment join = q.createjoinfragment(usethetastylejoin);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it is a property of an embedded component, invoke on the \"identifier\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"starts with the name of a mapped class (new style)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"treat it just like a new collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"skip finalize methods"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance note: the owner of the association is not really the owner of the id!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do this work only at the very highest level of the load don't let this method be called recursively"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public static jdbcexception newjdbcexception(string string, sqlexception root, string sql) { string = string + \" [\" + sql + ']'; log.error(string, root); logexceptions(root); return new jdbcexception(string, root, sql); } public static jdbcexception newjdbcexception(string string, sqlexception root) { log.error(string, root); logexceptions(root); return new jdbcexception(string, root); }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note that each iteration of the loop may add new elements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this can never happen because this rule will always eliminate the child not. case not: return x.getfirstchild(); (not (not x) ) => (x)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to obtain the lock before any actions are executed, since this may be an inverse=\"true\" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hhh-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no point doing this if none was requested"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"while constructor is running"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"there is probably a row there, so try to update if no rows were updated, we will find out"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: interface is assumed to already contain hibernateproxy.class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing to avoid a lazy property initialization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"interfaces arguments"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not called at runtime so doesn't matter if its slow :)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"chop off the rest of the tree."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the caller"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"prefer re-generation of identity!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the caller principals"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"refresh doesn't cascade to uninitialized collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private static final alias default_alias = new alias(10, null);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public boolean isnonexistant(entitykey key) { return nonexistantentitykeys.contains(key); }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generate id select fragment and then property select fragment for each expression, just like generateselectfragments()."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public boolean isnonexistant(entityuniquekey key) { return nonexistententityuniquekeys.contains(key); }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"special case ... this is the leaf of the containment graph, even though not immutable"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iterate all the entities currently associated with the persistence context."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"according to both the ansi-sql and jpa specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec: <trim function> ::= trim <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> ::= leading | trailing | both if <trim specification> is omitted, both is assumed. if <trim character> is omitted, space is assumed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"does this entity entry pertain to the entity persister in which we are interested (owner)?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"prepare persisters and link them up with their cache region\/access-strategy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check if the managed object is the parent"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"allows various loaders (ok mainly the queryloader :) to check whether scrolling of their result set should be allowed. by default it is allowed."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, the proxy was pruned during the serialization process"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"adds remove as a sort-of alias for delete..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unquotedidentifiercolumnname = identifiercolumnalias;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return lhspersister.getsubclasspropertycolumnnames(property);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"saves \/ updates don't cascade to uninitialized collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"early exit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create our own copy of the user-supplied tuplizer impl map"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the identifier is quoted, remove the quotes"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"truncate the identifier to the max alias length, less the suffix length"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"full joins are not supported.. yet!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"null is not considered the same type as integer. $non-nls-1 $non-nls-1"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"properly handle property-ref-based associations"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add another (inner) nested select add the main query close off the inner nested select"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"origin.adddestination( destination ); this was the cause of hhh-242 origin.settype( from_fragment ); set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"then handle any user-defined entity modes..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"strip off any leading 'and' token"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the condition is not already there..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate \"reaping\" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not \"allowed\" per-se, the end result without handling it specifically is infinite looping. so here, we simply break the loop"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dontspace.add(\"'\");"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public componentmetamodel(component component, sessionfactoryimplementor sessionfactory) {"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for mysql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"detect discriminator values..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle any filters applied to this collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle a property-ref"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we could not register a synchronization, do the before\/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hashmap columnsunique = new hashmap();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"null caused some problems"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the \"root from-element\" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cascade the refresh prior to refreshing this entity"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not sure if this would ever be null but wanted to be careful"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"even on inverse=\"true\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to dirty check many-to-ones with not-found=\"ignore\" in order to update the cache (not the database), since in this case a null entity reference can lose information"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register hibernate types for default use in scalar sqlquery type auto detection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if true then execute db updates, otherwise just generate and display updates"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlfunction implementation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we only release the connection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we only check the version when _upgrading_ lock modes"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"deprecated option..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"only carry on if the method has no parameters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"nativesqlqueryreturn"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"woops we got an instance of another class hierarchy branch"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"composite-id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create an outerjoingenerator for this dialect."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"<string>"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"actually, this last test is probably unnecessary, since beforecompletion() doesn't get called during rollback"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to step through the rows one row at a time (slow)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create an dotnode ast for the path and resolve it."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"its already loaded so don't need to hydrate it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"orphans should be deleted during delete"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"swallow it, and continue to roll back jta transaction"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"so the transaction is already rolled back, by jta spec"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we found a collection element in the result set"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this method is a noop if there is a synchronization!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register the standard dialect resolver"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"why is all others non final ?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"even though we might find a pre-existing element by join path, we may not be able to reuse it..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hella important optimization!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return that.type.equals(type) && equalshelper.equals(that.value, value);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"null child could occur for no from clause in a filter"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the 'from element' that the property is in."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"since the result set cursor is always left at the first physical row after the \"last processed\", we need to jump back one position to get the key value we are interested in skipping"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"websphere, however, is not a sane jee\/jta container..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for sane jee\/jta containers, the transaction itself functions as its identifier..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, try to find a matching constructor accepting a violatedconstraintnameextracter param..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"swallow, the transaction was finished"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"will be ignored, using the existing entry instead"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"60 seconds"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock=\"false\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't hold a transactional lock for this"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"some collections are not lazy:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fix up the resident flag"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"does the limit clause come at the start of the select statement, rather than at the end?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set the attributes of the property reference expression."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the current batch number is the latest batch for this entity type."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"take a snapshot"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"never evict this node"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"does the collection referenced by this fromelement specify an order-by attribute? if so, attach it to the query's order-by"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create the join element under the from element."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; *and* 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted\/saved"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"moved here from selectclause [jsd]"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"pre-determine and cache the hashcode"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (between a b) ) => (not_between a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the root node for the region exists and has a dataversion that never complains"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ps.close(); just close it; do not try to return it to the pool! note: early exit!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"map of entitymode -> tuplizer"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now write the values of fields onto the prepared statement"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is a virtual id property..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the current_timestamp is more accurate, but only known to be supported in sql server 7.0 and later (i.e., sybase not known to support it at all)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this one needed only for guessentitymode()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"will check current level if some of them are not null or sublevels if they exist"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"build the dynamic-map tuplizer..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"pointbase has no known variation of a \"select ... for update\" syntax..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"then dom4j tuplizer, if dom4j representation is available"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"see if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not \"unsaved\" (that is, we rely on foreign keys to keep database integrity)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do the work"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if its an uninitialized proxy it can't be transient"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we've been here before"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return the id, so we can use it to reset the proxy id return result;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return false here, as most databases do not properly support this construct..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"put the \"standard\" tuplizers into the tuplizer map first"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hit the database, after checking the session cache for a snapshot"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"found a ctor, but it was not publicly accessible so try to request accessibility"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private final sessionfactoryimplementor sessionfactory;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"search for collections by reachability, updating their role. we don't want to touch collections reachable from a deleted object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cached for efficiency..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sql server just returns automatically"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this.sessionfactory = sessionfactory;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it was not embedded, so the argument is just an id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have specialized case of a detached entity from the perspective of the merge operation. specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"where fragment must be empty!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"or its key changed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"int parameterstart = getwalker().getnumberofparametersinsetclause(); list allparams = getidselectparameterspecifications(); iterator whereparams = allparams.sublist( parameterstart, allparams.size() ).iterator();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we will need to remove ye olde entries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the current fragment to the theta_joins node"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"force initialize!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"lock doesn't cascade to uninitialized collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return currentid;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unquotedidentifiercolumnname = null;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"reset the id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"addinitializedcollection(collection, persister, id);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collectionpropertymapping processes everything except 'index'."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be \"contained\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"reset the version"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: this simply constructs a \"raw\" sql_token representing the where fragment and injects this into the tree. this \"works\"; however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the default is to simply not lazy fetch properties for now..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"else if it's elements changed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"attributes maintained between flush cycles"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now rebuild the insertions list. there is a batch for each entry in the name list."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the original is a persistentcollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. <\/p> one thing to be careful of here is a \"bare\" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"session-start\/post-flush persistent state"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"allow the collectionsnapshot to be serialized"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the second join, the one that ends in the destination table."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generate an 2d array of column names, the first dimension is parallel with the return types array. the second dimension is the list of column names for each type."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"attributes used only during flush cycle"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create sql_token nodes for the columns."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"\"current\" means the reference that was found during flush()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"rdms has no known variation of a \"select ... for update\" syntax..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore this row of results! note the early exit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the new node to the map so that we don't create it twice."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not final because proxy factory creation can fail"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register the fromelement with the from clause, now that we have the names and aliases."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"superclass entity-name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cascade-save to collections after the collection owner was saved"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"\"pass along\" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"\"loaded\" means the reference that is consistent with the current database state"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cache the actual id of the object, not the value of the property-ref, which might not be initialized"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"init the aliases, after initing the constructornode"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"multi-param string dialect functions..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"during flush, we navigate the object graph to collections and decide what to do with them"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collection.cleardirty()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the 'from element' that represents the elements of the collection."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"legacy behavior (with no abstract attribute specified)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"constructors are always considered scalar results."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get ready to start adding nodes."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the id column alias"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collection types:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"#3 - note that this is also true of \"datetime - :param\"..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: this affects the return value!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext; only one such callback is allowed. directly serializing this value causes problems with jdbctransaction, or really any transaction impl where the callback is local to the transaction instance itself, since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a sessionfactory; thus these removals should not be propogated"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generate the inner join -- the elements need to be joined to the collection they are in."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, perform a \"deep equivalence\" check..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"need to account for allowable '_' within the variant"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no where node, make one."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the type to the list of returned sqlresulttypes."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create one"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"persists don't cascade to uninitialized collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"lobs cannot be compared"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"blobs are ignored by merge()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hhh-276 : implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything, but it works."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"value is the entity name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"optimization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the map of batch numbers to entityinsertaction lists"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"optimization optimization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we don't need to worry about any condition in the on clause here (tofromfragmentstring), since anything in the on condition is already applied to the whole query"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"re-snapshot"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the difficulty here is exactly what do we update in order to force the version to be incremented in the db..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for convenience to save some lookups"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: this is not updated when properties are fetched lazily!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"an ident node can represent an index expression if the ident represents a naked property ref *note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option, if that changes, is to call resolve from here; but it is currently un-needed overhead."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"early exit!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public list getcollectionaliases() { return collectionaliases; } \/*public list getcollectionowners() { return collectionowners; }*\/ public list getcollectionowneraliases() { return collectionowneraliases; } public list getcollectionpersisters() { return collectionpersisters; } public map getalias2persister() { return alias2persister; } \/*public boolean iscollectioninitializer() { return iscollectioninitializer; }*\/ public list getpersisters() { return persisters; } public map getalias2owneralias() { return alias2owneralias; } public list getscalartypes() { return scalartypes; } public list getscalarcolumnaliases() { return scalarcolumnaliases; } public list getpropertyresults() { return propertyresults; } public list getcollectionpropertyresults() { return collectionresults; } public map getalias2return() { return alias2return; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"xml is the entity name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"named query parameter"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"tolerates nulls"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if our \"proppath\" actually represents a property on the persister"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the token to the ast."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the table fromelement and the property name to get the array of column names."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set up the cache factory"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to strip off the embedded parens so that sql-gen does not double these up"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"memory optimization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlresulttypelist,"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"metatype is assumed to be single-column type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"end unit of work"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"row id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"multitables"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"final list extendsqueue,"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure jbc doesn't look one up"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get all the select expressions (that we just generated) and render the select."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"visit width-first, then depth"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the uresolved property path isn't set yet, just use the property name."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"look through the fromelement's children to find any collections of values that should be fetched..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return associationtype.foreign_key_to_parent; this is better but causes a transient object exception..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collections of values"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"copied from session:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. also, make sure that the from element's idea of the destination is the destination table."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this should not happen since the dtd prevents it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the current join represents the join between a many-to-many association table and its \"target\" table. here we need to apply any additional filters defined specifically on the many-to-many"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the from element represents a join_fragment and it is a theta-style join, convert its type from join_fragment to from_fragment"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check basic level one nullablilty"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx, so they should not hold the lock for long. not caching the query result is ok, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"values is not null and is checkable, we'll look deeper"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"possibly handle :something parameters for the query ?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for non null args, check for components and elements containing components"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with criteria and not hql:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cache the hashcode"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public propertyprojection project() { return projections.property(getpropertyname()); }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"persistent collections may have components"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have the jbcwritemutex, so no other *local* thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to jbc right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc *now*. our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us, and we'll then overwrite that later data in jbc. but, all remote nodes will ignore that change in their localcache; the only place it will live will be in jbc, where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache())."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"test out the optimizer:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"registercolumntype( types.varchar, 16777215, \"mediumtext\" );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ident might be the name of a class."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"here we don't want to suspend the tx. if we do: 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node, so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead, plus we spread issue #1 above around the cluster"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for regression testing against output from the old parser... found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those \"only needed for regression purposes\". the syntheticandfactory, then, simply injects them as it encounters them."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"st.settimestamp( index, new timestamp( cal.gettimeinmillis() ), cal ); jdk 1.5 only"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"arbitrary on clause ignored!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"st.setdate( index, new date( cal.gettimeinmillis() ), cal ); jdk 1.5 only"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"from javax.naming.referenceable"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"both are timestamps"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, collect all of the select expressions. note: this must be done *before* invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"at least one is a plain old date"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"swallow it (the transaction _was_ successful or successfully rolled back)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check for all components values in the collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"after *all* persisters and named queries are registered"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do the test"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if close() is called, guarantee unbind()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"or byte or text? or money"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"noop"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"( implied && dotnode.usethetastyleimplicitjoins ) ) {"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the corresponding sql value is null, the reader we got is null as well"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a java constant."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fetch reader content up to the end - and put characters in a stringbuffer"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return stringbuffer content as a large string"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the where clause was added to eliminate this statement from brute force searches."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"or types.longvarchar?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"forcefully remove leading ands from where fragments; the grammar will handle adding them"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for non-arrays, we don't need to know the element class elementtype.returnedclass();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"different nullability rules for pk\/fk"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the types report logical equivalence, return true..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cache this"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for a subquery, the alias to use depends on a few things (we already know this is not an overall select): 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the \"id select\" phase of that multi-table executor) b) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"only really need new array during semiresolve!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"classic translator does not support collection of ordinal param metadata"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unwrap it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"an unfetched association can only point to an entity that already exists in the db"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a double 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime * {any type} 7) datetime \/ {any type} 8) {any type} \/ datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"let the interceptor inspect the instance to decide"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the types represented in the sql result set. @return the types represented in the sql result set."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"let the persister inspect the instance to decide"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo!!!!!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create a new filters node as a parent of all filters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no tm configured, we will not be able to access the javax.transaction.transaction object in order to register a synch anyway."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"establish the region root node with a non-locking data version"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public object instantiate(object parent, sessionimplementor session) throws hibernateexception;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we use the assumed value, if there is one, to avoid hitting the database"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"int count = 0;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"putfield new value of the field"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not really necessary, i guess..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"clobs are ignored by merge() operation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the first key found after the given key"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collections cannot be compared"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remember the uk value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"processcollectionproperty(token, q.getcollectionpersister(collectionrole), collectionname);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we must use the \"remembered\" uk value, since it is not available from the entityentry during assembly"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collections don't dirty an unversioned parent entity"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return false;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this just handles a particular case of component projection, perhaps get rid of it and throw an exception"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: we avoid joining to the next table if the named property is just the foreign key value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the key is the owning entity itself, so get the id from the key"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"checkforend = false;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore subselect keywords"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"copy elements into newly empty target collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"end of array, start filling again from start"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we ran out of keys to try"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the first id found after the given id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we ran out of ids to try"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the elements back into the target making sure to handle dirty flag"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check if collection is currently being loaded"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check if it is already completely loaded, but unowned"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"initialize this collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create a new collection wrapper, to be initialized later"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"some jdbc drivers erroneously return an empty array here for a null db value :"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cannot batch fetch by unique key (property-ref associations)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we already know current is not null..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the owner of the association is not the owner of the id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"----------------------------------------------------------- constructors"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"----------------------------------------------------- instance variables"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"--------------------------------------------------------- public methods"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"compare the two maps for equality"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"simple tests that require no synchronization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sybase fail if we don't do that, sigh..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"stream closed in the finally"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"try to \"pretty print\" it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, just dump it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"its an interface so we can't really tell anything..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use default behavior"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: early return"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we want to be able to just use the defaults, if jndi environment properties are not supplied so don't put null in anywhere"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"clone"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"serialize"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"warning: can cause a recursive calls! (proxy initialization)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"static methods only - hide constructor"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"&& !('_'==character)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"returnign null!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"includes last '.'"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"+1 to include the following '.'"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first time we find match!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"entitynames may now include slashes for the representations classname may be an inner class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"wrapped iterators"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"index of current iterator in the wrapped iterators array"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the current iterator"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the last used iterator"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it was a boolean expression"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"call this before any iterator method to make sure that the current iterator is not exhausted"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"doable if needed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set last used iterator here, in case the user calls remove before calling hasnext() or next() (although they shouldn't)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"peek ahead"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we reach the end of the string w\/o finding the matching end, that is an exception"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"there were no queued additions and the role has a cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"print page"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"and this is not a forced initialization during flush"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have a placeholder, spin forward till we find the end"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure spinning forward did not put us past the end of the buffer..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, try to locate this resource through the current context classloader."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"next, try to locate this resource through this class's classloader"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"next, try to locate this resource through the system classloader"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"anywhere else we should look?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"would need an identityset for this!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"arrays.aslist doesn't do primitive arrays"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload_0"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"faster?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"pass the entity-name, if not a collection-id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"right represents a joins originating from left; or both right and left reprersent joins originating from the same fromelement"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the name of a class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"its the listener class name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"allow 9,8,7,6,5,4,3,2,1"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"default to element set if no elements() specified"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"look for the instance by uuid"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, lets determine whether to apply cglib or javassist based instrumentation..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we don't override previous set values"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"entirely optional!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"its the listener instance (or better be)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"context.unbind(boundname);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"readresolveobject"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cfg.setproperty(\"hibernate.show_sql\", \"true\");"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"defensive, convenience methods"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure you log the exception, as it might be swallowed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"begin unit of work"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"write html header"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle actions"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"start the session to be used for this request"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make the session available to the session factory's \"current context\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remove session from \"current context\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"eager fetch the collection so we can use it detached"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"event anevent = (event) session .createcriteria(event.class).setfetchmode(\"participants\", fetchmode.join) .add( expression.eq(\"id\", eventid) ) .uniqueresult(); eager fetch the colleciton so we can use it detached"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"end of first unit of work"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"or bidirectional safety method, setting both sides: aperson.addtoevent(anevent);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"begin second unit of work"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"reattachment of aperson"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the getemailaddresses() might trigger a lazy load of the collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need our tm, so get it now and avoid doing other work if there is a problem"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"jbc put a version in the node when it created as part of some internal operation. we are always newer, but if the jbc version is > 1 something odd has happened"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not null if the isolation level has been specified in the configuration file. otherwise, it is left to the driver's default value."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"configured outside of hibernate (i.e. servlet container, or java bean container already has proxool pools running, and this provider is to just borrow one of these"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the cache of the actual plans..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(as is always optional, for consistency with sql\/oql)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"process the \"new\" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"is a primitive type invokespecial"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"start performing the updates"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"array of primitive type do nothing"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"jdbc params are 1-based"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't care..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"on the inverse, it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle a path expression or class name that appears at the start, in the \"new\" hql style or an alias that appears at the start in the \"old\" hql style"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"important: reuse the same event instances for performance!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't care about other param types here, just those explicitly user-defined..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle <=, >=, !=, is not, not between, not in"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"named parameter"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"could be either an ordinal or jpa-positional parameter"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"strip the \" where \""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a peek ahead showed this as an jpa-positional parameter"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure this \"name\" is an integral"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"at the very least cleanup the data :)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cannot be instantiated"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"transfer an explicitly defined entity name handle the lazy attribute"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"keep the behavior consistent even for boundary usages"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"perform the actual work"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do the failfast put outside the scope of the jta txn"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get meta's from <joined-subclass>"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"parameters on the property mapping should override parameters in the typedef"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note special case: default to join and non-lazy for the \"second join\" of the many-to-many"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create the node initially with the param name so that it shows appropriately in the \"original text\" attribute"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dynamic insert"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"so we \"clock over\" on the first invocation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"finally handle the exception"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a \"detached\" collection that belonged to a different entity"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"element index -> id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the set contract!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collections detect changes made via their public interface and mark themselves as dirty as a performance optimization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"saveorupdatecopy() is deprecated!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set it!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collectionpersister should not be null, but we don't want to throw an exception if it is null"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"case 1: multi token keywords group by and order by the next token ( lt(2) ) should be 'by'... otherwise, this is just an ident."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"only necessary for postgre < 7.4 http: anoncvs.postgresql.org\/cvsweb.cgi\/pgsql\/doc\/src\/sgml\/ref\/create_sequence.sgml"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processarrayornewcollection(collection, type);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a \"detached\" collection that originally belonged to the same entity"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: for object <-> sql datatype mappings see: configuration manager | advanced | sql | system ddl datatype mappings tbd registercolumntype(types.binary, \"binary($1)\"); changed 08-11-2005, jsl"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"see if the second lookahed token can be an identifier."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"case 2: the current token is after from and before '.'."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation \"from\" is one of the parameters they pass in position ?3 registerfunction( \"trim\", new sqlfunctiontemplate(hibernate.string, \"trim(?1 ?2 from ?3)\") );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"whether this dialect has an identity clause added to the data type or a completely seperate identity data type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(eq null b) => (is_null b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create nodes that track line and column number."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add not if it's negated."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(eq a null) => (is_null a)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the path ast should be a dotnode, and it should have been evaluated already."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"force a substitution!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if if otherwise, handle the error normally."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the database now holds a lock + the object is flushed from the cache, so release the soft lock"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now update the object .. has to be outside the main if block above (because of collections)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"named queries:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"grab its state saved at deletion"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"grab its current state"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this will throw an error if there's something wrong."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collection deletions are a special case since update() can add deletions of collections not loaded by the session."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"slice, to get the columns for this component property"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"schedule the update note that we intentionally do _not_ pass in currentpersistentstate!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"substitutes into values by side-effect"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"give the interceptor a chance to process property values, if the properties were modified by the interceptor, we need to set them back to the object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (eq a b) ) => (ne a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"compare to cached state (ignoring collections unless versioned)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it was dirtied by a collection only"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check nullability but do not perform command execute we'll use scheduled updates for that."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this 'dot' expression now refers to the resulting from element."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (like a b) ) => (not_like a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between\/to collections."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"detached collection wrappers that get found + reattached during flush shouldn't be ignored"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (is_not_null a b) ) => (is_null a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ie. we never have to null out a reference to an uninitialized proxy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (not_like a b) ) => (like a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"give the interceptor a chance to modify property values"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now we might need to recalculate the dirtyproperties array"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the current version"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"object loaded by update()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore this row, the collection is in process of being loaded somewhere further \"up\" the stack"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * currently, not yet used..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dirty check against the usual snapshot of the entity"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"wrap up any new collections directly referenced by the object or its components"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of element..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"upgrade the lock if necessary: lock(result, lockmode);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (ne a b) ) => (eq a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we must clone embedded composite identifiers, or we will get back the same instance that we pass in"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sub-insertions should occur before containing insertion so try to do the callback now"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (le a b) ) => (gt a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (ge a b) ) => (lt a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (lt a b) ) => (ge a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the entity is not associated with the session, so try interceptor and unsaved-value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"... and the expected token type was an identifier, then:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"igndore it..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"[jsd] the fix for hhh-558..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the token can tell us if it could be an identifier..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we are now at a new tree level"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dirty check against the database snapshot, if possible\/necessary"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the interceptor handled the dirty checking"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the delegate."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get meta's from <subclass>"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the id from the object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do the put outside the scope of the jta txn"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"what is the version on the database?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hhh-2378"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"will result in a sql update:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"else do nothing (don't even reassociate object!)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no existing row - do an insert"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"--- inner classes (moved here from sql-gen.g)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"reference type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"should be the first, but just to be safe..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return a proxy if appropriate"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"some filters affecting the collection are enabled on the session, so do not do the put into the cache."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"... and the token could be an identifer and the error is a mismatched token error ..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if a where clause was specified in the update\/delete query, use it to limit the returned ids here..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"default implementation: if this node has a data type, and that data type is not an association, then this is scalar."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"resolve the lhs fully, generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the propertytype is null and there isn't a parent, just stop now... there was a problem resolving the node anyway."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we do not look for an existing join on the same path, because it makes sense to join twice on the same collection role"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return new uninitialized proxy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this object was already loaded"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"entity was found in second-level cache..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"intializes result by side-effect"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note : ( max - 1 ) because first is zero-based while max is not..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a shallow query is ok (although technically there should be no fetching here...)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"delegate to the queryloader..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remember the parameters for the compilation."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"-- package local methods for the queryloader delegate"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"double"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now done in entityidentityinsertaction persister.setidentifier( entity, id, source.getentitymode() );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the token as an identifier."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"some statistics"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"safe from concurrent modification because of how entrylist() is implemented on identitymap"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"transform the tree."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"parse the query string into an hql ast."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we do not actually propogate antlrexceptions as a cause, so log it here for diagnostic purposes"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"only needed during compilation phase..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"update the status of the object and if necessary, schedule an update"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"schedule updates to collections:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to lock the collection caches before executing entity inserts\/updates in order to account for bidi associations"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the database has changed now, so the subselect results need to be invalidated"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entryset is not backed by the set"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"phase 1 : parse the hql into an ast."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get a snapshot"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public final currency getcurrency(int col) throws hibernateexception { return (currency) get(col); }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"right represents a joins originating from left..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the query is already compiled, skip the compilation."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"package-private"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remember that ordinal parameters numbers are 1-based!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"all clear"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the token class name parameter, and use a specific token class."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is a query and we are loading multiple instances of the same collection role"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"early exit!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"before any callbacks, etc, so subdeletions see that this deletion happened first"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ensures that containing deletions happen before sub-deletions"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cascade-delete to collections before the collection owner is deleted"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cascade-delete to many-to-one after the parent was deleted"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it is an initialized proxy, let cascade handle it later on"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"assign the requested id to the proxy, *before* reassociating the proxy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"an uninitialized proxy, noop, don't even need to return an id, since it is never a save()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"initialize properties of the event:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return the id in the event object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"transient or deleted"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"assume this is a newly instantiated transient object which should be saved rather than updated"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is a transient object with existing persistent state not loaded by the session"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check two \"adjecent\" nodes at the top of the from-clause tree"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cachedstate,"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a \"detached\" collection!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the collection belonged to a different entity, clean up the existing state of the collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"log.debug( \"calling onload()\" );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ie. the entity came in from update()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to check even if it was not initialized, because of delayed adds!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: early exit!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if template is null we just write the function out as it appears in the hql statement"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"find any entities that are still transient after retry"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"initialize sql nodes here."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check the persistence context for an entry relating to this entity to be merged..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"deleted"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set the unresolved path in this node and the parent. set the text for the parent."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"60 second lock timeout"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"property prop = new property(); prop.setname(\"id\"); prop.setpropertyaccessorname(\"embedded\"); prop.setvalue(id); entity.setidentifierproperty(prop);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"before cascade!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"continue...; we'll find out if it ends up not getting saved later"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cascade first, so that all unsaved objects get their copy created before we actually copy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check that entity id = requestedid"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not a collection? return the entity property mapping."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collection of <many-to-any\/> mappings... used to circumvent the component-collection check below..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, the destination node was implied by the from clause and the from clause processor will automatically add it in the right place."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. if it's a correlated sub-select, use the existing table alias. otherwise generate a new one."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this uses a pathexpressionparser but notice that compound paths are not valid, only bare names and simple paths:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"origin.adddestination(destination); add the query spaces."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"reset the node type, because the rest of the system is expecting from_fragment, all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"explicit = true; this is an explict select. arraylist sqlresulttypelist = new arraylist();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlresulttypelist.add( type ); generate the select expression."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting sql..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"copyvalues works by reflection, so explicitly mark the entity instance dirty"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no need to even collect this information if the persister is considered multi-table"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"as soon as we encounter our first letter, return the substring from that position"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for arrays, replaceelements() may return a different reference, since the array length might not match"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"should not be able to reach last without maxposition being set unless there are no results"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do not use proxiesbykey, since not all proxies that point to this session's instances are in that collection!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this should be a call to resolve(), not resolveidentifier(), 'cos it might be a property-ref, and we did not cache the referenced value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we have <tt>not-found=\"ignore\"<\/tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we now have the value of the property-ref we reference. however, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"persister"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this method should be implemented assuming it's valid to do start\/stop\/start -- leave state appropriate for another start"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so, only increment if the new current value is an increase"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the workspace node has null as well, ok; if not we've been modified in a non-comparable manner, which we have to treat as us being newer"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"maintain correct duplication if loaded in a cartesian product"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"datasource unpooled = datasources.unpooleddatasource( jdbcurl, props.getproperty(environment.user), props.getproperty(environment.pass) );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"short-circuit(s) no new elements, the old list contains only orphans no old elements, so no orphans neither"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"persister.iscacheinvalidationrequired()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"long"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set the existing pool flag to true"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"validate that an alias name was provided to determine which pool to use"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have created the pool ourselves, so shut it down"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the load() which takes an entity does not pass an entityname"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note : expected in the syntax: type=listenerclass ({sep}type=listenerclass)* where {sep} is any whitespace or comma"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it does not refer to an alias of a projection, look for a property"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing for persistent instances"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"option.setdataversion( nonlockingdataversion.instance );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"assume true, since we don't really know, and it doesn't matter"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"show the modified ast."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note : firstrow is zero-based"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"tell the dot node about the join type."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"among other things, updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise recreate the mapping between the collection and its key"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create a parameter specification for the collection filter..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"attach any mapping-defined \"order by\" fragments"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure that the persister is versioned"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and\/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this function has a template -> redirect output and catch the arguments"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the id assigned to the instance"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchfordirtycollections(ah, type);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the data type is not an association type, it could not have been in the from clause."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first look for a reference to a projection alias"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there are no collection fetches, then no further checks are needed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"--commented out by inspection (12\/11\/04 10:56 am): int getwarningcount();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if a threadlocalsessioncontext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make #@%$^#^&# sure no alias is applied to the table name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"switch"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the explicitly declared select expression; determine the return types indicated by each select token"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"select clauses for insert statements should alwasy be treated as shallow"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"after that, process the joins. invoke a delegate to do the work, as this is farily complex."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"simple cache of param metadata based on query string. ideally, the original \"user-supplied query\" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries, see getsqlparametermetadata() for a discussion as to why..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"alias references and identifiers use the same node class."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make a new one"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"these are just two unrelated table references"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"again, both should be fromelements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check a set of parent\/child nodes in the from-clause tree to determine if a comma is required between them"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"phase 2 : analyze the hql ast, and produce an sql ast."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"phase 3 : generate the sql."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"paramtranslations = new parametertranslationsimpl( collectedparameterspecifications );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we are already processing a dot-structure"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"should mean that no such property was found"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the error handling delegate."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"was there an explicit select expression?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"resolve everything up to this dot, but don't resolve the placeholders yet."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (not_between a b) ) => (between a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"just add a 'not' parent."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, save off the pertinent ids, as the return value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context, so must be autocommit mode)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, save off the pertinent ids, saving the number of pertinent ids for return"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"start performing the deletes"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't forget to resolve the argument! resolve the collection function now."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, everything ok."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"re-arrange the tree so that the collection function is the root and the lhs is the path."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"protected regionrootlistener listener;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"inject the where after the parent"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"never include subclasses for implied from elements."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the rest only matters for optimistic locking, where we need to establish the proper data version on the region root"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"prepare the left hand side and get the data type."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if this dot has already been resolved, stop now."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the property is another class.."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, this is a primitive type."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for timestamps, we default to a separate config"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"optimistic-lock=\"all\", include all updatable properties optimistic-lock=\"dirty\", include all properties we are updating this time"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock=\"false\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"information about properties of this class, including inherited properties (only really needed for updatable\/insertable properties)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"here we render the select column list based on the properties defined as being generated. for partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note : addduplicatealias() already performs nullness checks on the alias."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"again, null != null here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we know only the lhs-hand type, so use that"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the referenced node text is the special 'id'"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"only the identifier property field name can be a reference to the associated entity's pk..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"append the new property name onto the unresolved path."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"tell the destination fromelement to 'includesubclasses'."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the lhs is a collection, use collectionpropertymapping"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't resolve the node again."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"lists, arrays sets, maps, bags"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have something like : \"? [op] rhs\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we finish all the \"removes\" first to take care of possible unique constraints and so that we can take better advantage of batching"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we don't re-release the same cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we use a different delegate than the non-optimistic superclass default"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have something like : \"lhs [op] ?\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't create a unique key, 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"isset = collection.isset(); issorted = collection.issorted();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we know only the rhs-hand type, so use that"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if jbc is using invalidation, we don't want to propagate changes. we use the timestamps cache to manage invalidation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't hold the jbc node lock throughout the tx, as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"double check the distributed cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get an exclusive right to update jbc for this key from this node."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"one or the other needs to be a datetime for us to get into this method in the first place..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"#2"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the condition to the join sequence that qualifies the indexed element."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now, set the text for this node. it should be the element columns."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the function return value type, based on the type of the first argument."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this will call initialize(tok)!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"mutation depends on the types of nodes invloved..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"logic operators by definition resolve to booleans"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generated select expressions are already resolved, nothing to do."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the path may be a reference to an alias defined in the parent query."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the hql class alias refers to the class name."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"associate the table alias with the element."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"try the parent fromclause..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure that all from elements registered with this from clause are actually in the ast."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"invoke setscalarcolumntext on each constructor argument."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collect the select expressions, skip the first child because it is the class name."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return an empty type array"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we ensure async semantics (jbcache-1175)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no order by, make one"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"initial load from jbc"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"find the where; if there is no where, find the from..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now, inject the newly built order by into the tree"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"logic operators by definition resolve to boolean."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"render the identifier select fragment using the table alias."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"class names in the from clause result in a joinsequence (the old fromparser does this)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"will still be issued when it used to be null"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, use the property mapping."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the standard comparator types are not serializable but are singletons"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generate implicit joins, only if necessary."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the property is a special collection property name, return a collectionpropertymapping."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collection of components."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"construct the cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ie. 60 seconds"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to seed the version value as part of this bulk insert"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the lhs is \"assignable\"..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"false indicates to not generate parens around the assignment"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"currently allowed..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"in non-select queries, the only time we should need to join is if we are in a subquery from clause"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return classalias == null ? classname : classalias;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is an explicit from element."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"swaldman 2006-08-28: define c3p0-style configuration parameters for initialpoolsize, which hibernate sensibly lets default to minpoolsize, but we'll let users override it with the c3p0-style property if they want."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fetch can't be used with scroll() or iterate()."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it's not implied or it is implied and it's a many to many join where the target wasn't found."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to wrtap the param in a cast()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"since this is an explicit from element, it can't be implied in the from clause."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing, eplicit from elements are *always* in the projection list."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"propertyname refers to something like collection.size..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"property name is a sub-path of a component..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"notify the from element that it is being referenced by the select."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dotnode uses null here..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we represent a from-clause alias"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we are the rhs of the dot representing a naked comp-prop-ref"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we represent a naked (simple) prop-ref"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"early exit!!! return so the resolve call explicitly coming from dotnode can resolve this..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"assume this ident's text does *not* refer to a property on the given persister"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"just ignore it for now, it'll get resolved later..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is not actually a constant, but a reference to from element."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"these pieces are needed for usage in select clause"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"assume we do *not* refer to a property on the given persister"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"true if the pool is borrowed from the outside, false if we used to create it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get a connection from the pool (thru drivermanager, cfr. proxool doc)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set the transaction isolation if defined"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"naked property-refs cannot be used with an aliased from element"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do *not* over-write the column text, as that has already been \"rendered\" during resolve"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"look up class name using the first identifier in the path."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"toggle autocommit to false if set"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add to the query spaces."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return the connection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the from element isn't in the same clause, create a new from element."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"super-duper-classic-parser-regression-testing-mojo-magic..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the configurator files (if available)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a collection of entities..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a collection of components..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"default the proxool alias setting"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a collection of scalar elements..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we only build caches if *none* were passed in. passing in caches counts as a clear statement of exactly what is wanted"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't include sub-classes for implied collection joins or subquery joins."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"treat explict from elements in sub-queries properly."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"append the stem to the proxool pool alias"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"configured using the jaxp configurator"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"configured using the properties file configurator"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remember isolation level"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the provider was leeching off an existing pool don't close it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: because we're using astutil.createparent(), the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the \"root from-element\" in correlated subqueries do need this piece"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create the from element for the target (the elements of the collection)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the join is implied, then don't include sub-classes on the element."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not really a many-to-one association *necessarily"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the associated entity is implied, but it must be included in the from. the collection alias is the role."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"always overwrite nonversioned data"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"tag this node as a join. don't include subclasses in the join. this is a clollection join."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public currency getcurrency(int col) throws hibernateexception;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the class name of the associated entity."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"default is pojo"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use setparameter for null values"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"origin, path, implied, columns, classalias,"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"implied"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for implied many-to-many, just add the end join."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"interceptor returned null, so do the dirtycheck ourself, if possible"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note this!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"error message constants."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the standard sql function name is current_timestamp..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"scan for next non-whitespace token"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this causes the factory to instantiate the desired class."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private type[] sqlresulttypes;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private cacheentry cacheentry;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"typefactory.deepcopy( currentstate, proptypes, persister.getpropertyupdateability(), deletedstate, session );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"frontbase has no known variation of a \"select ... for update\" syntax..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public type[] getsqlresulttypes() { return sqlresulttypes; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlresulttypelist.addall( constructorargumenttypelist );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlresulttypelist.add( type );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"always add the type to the return type list."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"have the entity entry perform post-update processing, passing it the update state and the new version (if one)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this entity defines proeprty generation, so process those generated values..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the fetched entities"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"|| oj.getjoinable().consumescollectionalias()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"just especially for the trivial collection filter"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"need to look it up from the persistence-context"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sort first by role name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"update last non-whitespace token, if necessary"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"then by fk"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"arraylist sqlresulttypelist,"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"notafterclasstokens.add(\",\");"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"beforeclasstokens.add(\"new\"); definitely don't have this!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remove initial \", \""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generate the select expression."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now update all changed or added rows fks"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"boolean put = persister.getcache().insert(ck, cacheentry);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"skip 'distinct' and 'all', so we return the first expression node."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generate the property select tokens."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get the function name node."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this handles hhh-354, where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"method expressions in a select should always be considered scalar."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"areturn return the value of the field"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing - we only need to notify the cache..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sort first by entity name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if this is 'elements' then create a new from element."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"then by id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not elements(x)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dialect function"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"to be safe..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collection 'property function'"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the constant is an ident, figure out what it means..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no transformations took place, so handle it as we would a non-instrumented class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ident is a class alias in the from."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"resolve to an identity column."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"see if the entry represents a class file"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, it's a literal."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the name of an entity class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the class discriminator value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add a space before the display text."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"find or create the where clause"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"child == parent.getfirstchild()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set the name of bulk accessor."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"invokespecial"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload_1 load bean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first, then it binds all the hql query parameters, see org.hibernate.loader.loader.processfilterparameters()."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"checkcast cast bean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"put the filters node before the hql condition and theta joins"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"astore_3 store bean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add the current fragment to the filters node"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create a new theta_joins node as a parent of all filters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload_2 args"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"put the theta_joins node before the hql condition, after the filters."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, try to get the persister using the given name directly."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iconst_i continue to aastore growing stack is 1"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unable to locate it using this name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if that didn't work, try using the 'import' name."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"implicit joins use theta style (where pk = fk), explicit joins use join (after from)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"locate the registered function by the given name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"determine the type of the first argument..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the dot node to emit the first column name. create the column names, folled by the column aliases."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"append the text of the current node."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the node has a first child, recurse into the first child."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"new"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a second child (rhs), recurse into that child."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload_3 load the raw bean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"invokevirtual"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aastore args"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"istore_3 store i"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload_1 load the bean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"current stack len = 0"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iterate through the alias,joinsequence pairs and generate sql token nodes."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is used during sqlgenerator processing"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"start region to handling exception (bulkaccessorexception)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a from fragment and the from element is an explicit, then add the from part."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"&& stringhelper.isnotempty( frag )"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iinc 3, 1"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the from fragment will probably begin with ', '. remove this if it is present."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload 4 load the raw bean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"select p from p in class eg.person order by p.name, p.address, p"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"oracle sql-state code for deadlock"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload_2 load the args"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, try to use the no-arg constructor"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iconst_i"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"eat it and try next"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aaload"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"checkcast"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"default mode"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"checkcast (case of reference type)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"current stack len = 2"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"end region to handling exception (bulkaccessorexception)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register in exception table"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private constructor - stops checkstyle from complaining."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"reset the dotcount (but not the path) after reset!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"after reset!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"following methods we don't delegate since they have so little logic it's clearer to just implement them here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dotcount>=2"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"local variables | target obj | each oldvalue |"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"astore 5 store exception"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload 5 load exception"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"| this | bean | args | raw bean |"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iload_3 i"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do the corresponding rhs"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"invokespecial bulkaccessorexception.<init>"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"athrow"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"warning: classfile only"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if its \"id\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"swallow"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"or its the id property name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"join = q.createjoinfragment(usethetastylejoin);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"local variable | this |"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"important!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"an association"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload_0 load this"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"allow index() function:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"aload_1 load callback"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"case of non-static field"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"log a message about potential connection leaks"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"getfield get each field"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ifnonnull"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"*return each type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"*store_1 each type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"many-to-many"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ldc name of the field"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"opening paren in new foo ( ... )"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we are inside a new result(), but not inside a nested function"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"invokeinterface invoke callback.read*() each type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"special case"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the name of an sql function"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is basically a copy\/paste of orderbyparser ... might be worth refactoring"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"select p from p in class eg.person group by p.name, p.address, p"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return aliases not supported in classic translator!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"int"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register collection role"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"just do the regular thing if you can't find the ctor your ast must have default ctor to use this."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the keyword used to specify an identity column, if identity column key generation is supported."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":".getelementpropertymapping();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"following doesn't handle (null, not null) but unnecessary since this would mean all rows"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"crossjoins.add(name);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ie no select clause in hql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"invokeinterface enabled.getinterceptfieldcallback()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ifnonnull (label1)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we are the lhs of the dot representing a naked comp-prop-ref"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"*load_1"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ie. no select clause"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"putfield"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"there _was_ a select clause"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return ;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ldc field name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"getfield old value of the field"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return the concrete type, or the underlying type if a concrete type was not specified"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not array"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"array of reference type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"q.addcollection(collectionname, collectionrole);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"boolean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"char"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"short"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"classic parser does not support bulk manipulation statements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"float"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is called when it's time to fully resolve a path expression."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"can't cache this stuff either (per-invocation)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is the legacy behaviour for hql queries..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"bad type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not known!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"boolean, byte, char, int, short"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"need this, since join condition can appear inside parens!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"expressionopeners.add(\",\"); deliberately excluded"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"mainly for oscache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"decrement the lock"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"recache the updated state"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"null clientlock is remotely possible but will never happen in practice"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"by requiring <, we rely on lock timeout in the case of an unsuccessful update!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the user provided resulttransformer, not the one used with \"select new\". here to avoid mangling transformed\/non-transformed results."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"disassemble positional parameters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, a trim-specification and\/or a trim-character have been specified; we need to decide which options are present and \"do the right thing\" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is called from settingsfactory irregardless; trivial to simply disregard"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing; subclasses may override."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"table"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"inside a between ... and ... expression"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ie. a many-to-many"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cope with [,]"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cope with a continued path expression (ie. ].baz)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cope with a subselect"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the id value of a newly instantiated instance as the unsaved-value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"close extra brackets we opened"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"take note when this is a boolean expression"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"persister.setidentifier(result, id); before calling interceptor, for consistency with normal load"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no-op; ccs did not have such a concept"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"process a token, mapping oo path expressions to sql expressions"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"open any extra brackets we might need."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cope with special cases of and, not, )"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the next one up must also be"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add any joins"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get meta's from <hibernate-mapping>"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"get meta's from <class>"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"path expression"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"db-objectname"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"just decrement the lock, don't recache (we don't know which transaction won)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"mutable"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"where"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"polymorphism"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"properties that we have tried to load, and not found in the database"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"anything else"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the path expression continues after a ]"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"careful with this!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the path expression ends at the ]"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"\"finish off\" the join"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"notice: no \" or . since they are part of (compound) identifiers"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cannot instantiate"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"start by looking for hql keywords..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"inner joins can be abbreviated to 'join'"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"'outer' is optional and is ignored"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now anything that is not a hql keyword"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"process the \"old\" hql style where aliases appear _first_ ie. using the in or in class constructions"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"treat it as a classname"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"treat it as a path expression"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"starts with a path expression (new style)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"allow odmg oql style: from person p, p.cars c"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle quoted strings"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"version \/ timestamp"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"primary key constraint"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is either a <version\/> tag with no type attribute, or a <timestamp\/> tag"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore whitespace"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do replacements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle hql2 collection syntax"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"uuid.hex is deprecated"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hilo params"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sql = query;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for ejb3"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"performance opt"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sql = update;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hilo config"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys \"support\" :("}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"throw new identifiergenerationexception(\"save associated object first, or disable cascade for inverse association\");"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"count++;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"go ahead and set the lazy here, since pojo.proxy can override it."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dynamic update"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"import"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"batch size"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to dirty check collections, since they can cause an owner version number increment"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"select before update"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"optimistic lock mode"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first element of array is reserved for the actual instance we are loading!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing until we hit the rsult set containing the generated id"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the delegate, resolve identifiers as from element aliases."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"loaded entity instances, by entitykey"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if the given name is un-qualified we may neen to qualify it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the default..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cascade-save to many-to-one before the parent is saved"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"joined subclasses"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"even process null collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"keep the existing version number in the case of replicate!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"source.getpersistencecontext().removenonexist( new entitykey( id, persister, source.getentitymode() ) );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"identity map of collectionentry instances, by the collection wrapper"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"tablename"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"join.getkey().settype( new type( lazz.getidentifier() ) );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"source.getbatcher().executebatch(); found another way to ensure that all batched joined inserts have been executed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"prepare and execute the insert"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"column(s)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if everything went ok, commit the transaction and close the obtained connection handle..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fetch the generated id in a separate query"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we just hit the last position"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"scroll ahead"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"scroll backward"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"column index"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have not yet hit the last result..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"column unique-key"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"caches"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generators:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cache region is defined by the root-class in the hierarchy..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"jndi + serialization:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"checking for named queries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"stats"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"entitynotfounddelegate"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check named hql queries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"prevents this session from adding things to cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for a dynamic-class"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"test this entity to see if we must query it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note early exit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for backward-compatability"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore this error for now"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"must add to jndi _after_ adding to hashmaps, because some jndi servers use serialization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"look for existing collection as part of the persistence context"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure this is a defined parameter and check the incoming value type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for each of the defined parameters, make sure its value has been set"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we never need to apply locks to the sql"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"select-range is terminated by declaration of \"from\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for an any"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"insertable simply because that is the user did not specify anything; just override it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"properties generated on update can never be updateable..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"updateable only because the user did not specify anything; just override it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the user specifically supplied update=\"true\", which constitutes an illegal combo"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"rolename"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, try to load it from the temp pc associated to this ss"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise immediately materialize it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no auto-flushing to support in stateless session"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fetch strategy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"after setting values to object, entitymode"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sort"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"load()\/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unsorted, natural, comparator.class.name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set up second pass"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do not auto-flush while outside a transaction"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is an internal error of some sort..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do not return a proxy! (this option indicates we are initializing a proxy)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for an any we will have to use reflection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not for internal use:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, we only need to flush if there are in-memory changes to the queried tables"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"decode row selection..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"basically just an adapted copy of find(criteriaimpl)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to writeobject() on this since interceptor is user defined"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the old-time stand-by..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"parameter bind values..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note special case: one-to-one constrained=false cannot be proxied, so default to join and non-lazy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use old (hb 2.1) defaults if outer-join is specified"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have a cglib enhanced entity"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have a javassist enhanced entity"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"should *not* need to grow beyond the size of the total number of columns in the rs"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"should probably no-op commit\/rollback here, at least in jta scenarios"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"explicitly perform no checking..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"used from testsuite"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generator"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register synch; stats.connect()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"calls executebatch()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no big deal"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"see explanation above..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we are in the process of releasing, no sense checking for aggressive-release possibility."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"early exit!!!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"resultset impl (\"overridden\") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"id unsaved-value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"version unsaved-value"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not necessarily a *unique* property reference"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"bind the where"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"refer to comment in statefulpersistencecontext.addcollection()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note : success = false, because we don't know the outcome of the transaction"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"bind the order-by"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we already have a callback registered; either a local (org.hibernate.transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"bind the filters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"overriding inherited meta attribute. hbx-621 & hbx-793"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sessionfactory name:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"jdbc and connection settings:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"interrogate jdbc metadata"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"user supplied jdbc connections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"transaction settings:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sql generation settings:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"query parser settings:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"second-level \/ query cache:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sql exception converter:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"statistics and logging:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"settings.setshowsqlenabled(showsql);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"postinitialize() will be called after initialization"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"settings.setformatsqlenabled(formatsql);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"cannot handle single quotes"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"schema export:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo : for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ); this is the legacy logging 'category'..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if dotted and not load-collection nor return-join regular property"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't even bother trying to read further"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private componenttuplizerfactory componenttuplizerfactory; todo : hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generated properties can *never* be insertable..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public bytecodeprovider getbytecodeprovider() { return bytecodeprovider; } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"using local since the inheritedmetas at this point is not the correct map since it is always the empty map"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"protected list extendsqueue;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"extendsqueue = new arraylist();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"componenttuplizerfactory = new componenttuplizerfactory();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if doc is null, then for whatever reason, the cached file cannot be used..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"position cursor to the last row"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sequentially read the result set in reverse until we recognize a change in the key value. at that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"read backwards until we read past the first physical sequential row with the key we are interested in loading"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"finally, read ahead one row to position result set cursor at the first physical row we are interested in loading"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this method may be called many times!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"force the proxy to resolve itself"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is equivalent to the old behavior..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if null, owner will be retrieved from session"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iterator iterator = extendsqueue.iterator();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iterator iter = extendsqueue.iterator();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"found"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"final string querystring,"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private final list extendsqueue;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"<string, string>"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"set use_reflection_optimizer to false to fix hhh-227"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"orphan delete not supported for entitymode.dom4j"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"element = xmlhelper.generatedom4jelement( persister.getnodename() );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we can reuse it for each row"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"can't reuse in this case"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"needed for soap libraries, etc"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"any earlier proxy takes precedence"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"first we need to suspend any current jta transaction and obtain a jdbc connection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"getresultlist(results);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we only returned one entity, query by key is more efficient"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the element has been removed from the set"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the element has changed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"careful: these methods do not initialize the collection."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"needed so that we remove this collection from the second-level cache"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"override on some subclasses"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do this bit after setting initialized to true or it will recurse"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create the collection holding the orphans"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collect entityidentifier(s) of the *current* elements - add them into a hashset for fast access"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over the *old* list"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(array==null) ? templist.get(i) :"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a many-to-many; decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the \"currentdepth - 1\" bit)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"write(); -- doesn't"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is the regression style determination which matches the logic of the classic translator"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle empty collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle empty collections"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"finally, what it's all about..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"here we do not bother with the discriminator."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"validate() instances of validatable"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"null version means the object is in the process of being loaded somewhere else in the resultset"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"problematic for <key-many-to-one>!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"use the id passed in"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the property is a collection..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"anyway, here we implement <set> semantics for a <one-to-many> <bag>!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"search for it note that this code is incorrect for other than one-to-many"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"a composite key"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if no batch, use \"foo = ? and bar = ?\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it must be a collection fetch"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"needed later for many-to-many\/filter application"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"&& etype.isreferencetoprimarykey()"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collection wrappers, by the collectionkey key=collectionkey, value=persistentcollection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it might still need to apply a collection ordering based on a many-to-many defined order-by..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"belong to other persister belong to other persister"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we found it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we can use an inner join for the many-to-many"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"disable a join back to this same association"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"note: unlike all other loaders, this one is not multithreaded, or cacheable!!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"alias may be null early exit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it is a compound path"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if its the root criteria, we are done"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, recurse"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the criteria instance"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the entity name"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not found in inner query , try the outer query"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it refers to an alias of a projection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"should never happen, i think"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"convert the string value into the proper type."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, this is an ordinary value."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"currently *not* cachable if autodiscover types is in effect (e.g. \"select * ...\")"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"list operations:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private final string[] sqlaliases; private final string[] sqlaliassuffixes;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is only needed (afaict) for resulttransformer processing..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"replace {....} with corresponding column aliases"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no additional open braces found in the string, append the rest of the string in its entirty and quit this loop"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"apend everything up until the next encountered open brace"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"pad with nulls from the current last element up to the new index"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it is a simple table alias {foo}"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"passing through anything we do not know : to support jdbc escape sequences hb-898"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the current alias is referencing the collection to be eagerly fetched"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"it is a property reference {foo.bar}"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private final list scalartypes = new arraylist(); private final list scalarcolumnaliases = new arraylist();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"now, process the returns"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"already been processed..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the owner alias is known..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"scalarcolumnaliases.add( typereturn.getcolumnalias() ); scalartypes.add( typereturn.gettype() );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if this return's alias has not been processed yet, do so b4 further processing of this return"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"collectionowneraliases.add( owneralias );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"from map"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"from sortedmap"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"inject the data"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"default pool size 20"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if debug level is enabled, then log the password, otherwise mask it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register a cleanup synch"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"wrap the session in the transaction-protection proxy"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"then bind it"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"limit the methods available if no transaction is active"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"allow these (deprecated) methods to pass through"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle collection-fiter compilation. important note: this is modifying the input (hql) tree, not the output tree!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private string propertyname;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"string[] fk = stringhelper.qualify( \"collection_\", cp.getkeycolumnnames() );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"\" collection_ where \" +"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unsupported"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if not a composite key, use \"foo in (?, ?, ?)\" for batching if no batch, and not a composite key, use \"foo = ?\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"currently only the hibernate-supplied dbtimestamptype is supported here"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"implicit polymorphism not supported (would need a union)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"pull off the last \", \""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"always do an insert, and let it fail by constraint violation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"by default, natural-ids are \"immutable\" (constant)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we have the form: trim(from trimsource). this is functionally equivalent to trim(trimsource)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"astore 4 store the raw bean"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"grrr... for differentiation of mysql storage engines"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"string[] keycols = collpersister.getkeycolumnnames();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"oracle did add support for ansi case statements in 9i"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"refresh() does not pass an entityname"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"informix doesn't have a bit type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (gt a b) ) => (le a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"strip table-owner because informix always returns constraint names as \"<table-owner>.<constraint-name>\""}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"pre h3.2 behavior: super.getreturntype(ct, m);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"finally use the sqltype if == on hibernate types did not find a match."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"because numeric can be anything"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"standard sql92 functions (can be overridden by subclasses)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"map second\/minute\/hour\/day\/month\/year to ansi extract(), override on subclasses"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"limit\/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"by default we report no support"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sqlresulttypes = selectclause.getsqlresulttypes();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"by default we report no support for nowait lock semantics"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"by default"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this is now handled earlier in this method."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"-- loader implementation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"-- loader overrides"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"(not (is_null a b) ) => (is_not_null a b)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"here assume sqlserver2005 using snapshot isolation, which does not have this problem"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"--- query translator methods"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"oracle8 and previous define only a \"date\" type which is used to represent all aspects of date\/time"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"\" cascade\";"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"-- implementation private methods"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"trim off the length\/precision\/scale"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"check violation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"unique violation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"foreign key violation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"to support dialects that have their own identity data type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not null violation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"all other"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"register the type of the out param - postgresql uses types.other"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"seems to have spotty lob suppport"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hhh-2300"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore (probably h2 not in the classpath)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"used also for generation of fk names!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"usually useless"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"do not add unique constraint on db not supporting unique and nullable columns"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"for backward compatibility, disable this:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"may be final may be final may be final"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"may be final"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ignore it..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not null is implicit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"display the dialect version."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do in a stateful session"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the rdms concat() function only supports 2 parameters"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"flat recursive algorithm"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later, so it needs to be excluded"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"original dialect.java returns \" for update\";"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"pass the column name (a generated id almost always has a single column)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"needed to satisfy keyvalue"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"verify the state of this new method in hibernate 3.0 dialect.java"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"origial dialect.java returns true;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"index should be last column listed"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"*** sequence methods - start. the rdms dialect needs these"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"methods to make it possible to use the native id generator"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if it is a formula index, use the element columns in the pk"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"don't create a unique key, 'cos some databases don't like a uk on nullable columns"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"*** sequence methods - end"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"used with drop table to delete all records in the table."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no foreign key element of for a one-to-many"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo: we could just return all false..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the object is persistent"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"rdms supports the union all clause."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"multi-param dialect functions..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"function templates"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"this assumes schema support, which is present in 1.8.0 and later..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"columnupdateability.length==0 ||"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"hsqldb only supports read_uncommitted transaction isolation"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"the entity is associated with the session, so check its status"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"timesten has no blob\/clob support, but these types may be suitable for some applications. the length is limited to 4 million bytes."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"new methods in dialect3"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public boolean supportsforupdatenowait() { return false; }"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"timesten has no known variation of a \"select ... for update\" syntax..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"iterate entries ordered by capacity to find first fit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"add new ordered map"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"expected type is intrinsic here..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return memberpersister.getpropertytype(propertyname);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return memberpersister.tocolumns(alias, propertyname);"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return memberpersister.gettype();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"&& !indexisformula"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return !isonetomany();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"instanceof associationtype;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we need to determine the best way to know that two joinables represent a single many-to-many..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"strip leading ','"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"public boolean issubselectloadable();"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"columns"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sql statements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"extra information about the element type"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"types"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"private final string unquotedidentifiercolumnname;"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"return \"select current_timestamp from rdb$database\";"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dynamic filters specifically for many-to-many inside the collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"dynamic filters for the collection"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"registercolumntype data types"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"ibid for current_time and current_date"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if we've been blocking for the mutex, perhaps another thread has already reestablished the root. in case the node was reestablised via replication, confirm it's marked \"resident\" (a status which doesn't replicate)"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"tell hibernate to use getbytes instead of getbinarystream"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no batch statements"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"element"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we might want a special case for 19,2. this is very common for money types and here it is converted to 18,1"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no pointbase bit"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"no pointbase tinyint"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"nativesql: collect element column and auto-aliases"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"index and row select"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"nativesql: collect index column and auto-aliases"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"registercolumntype( types.clob, 16777215, \"mediumtext\" ); registercolumntype( types.clob, 65535, \"text\" );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"registercolumntype( types.varchar, 16777215, \"mediumtext\" ); registercolumntype( types.varchar, 65535, \"text\" );"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"generate the sql:"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"not all classpersisters implement propertymapping!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"handle any filters applied to this collection for many-to-many"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a user-specified loader, return that todo: filters!?"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"take care of any entities that might have been evicted!"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"run a subquery loader"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we can't change the tm on a running cache; just check if the cache has no tm and we're ok with that"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"sybase bit type does not support null values"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"we could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads)."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"needed by arrays"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"todo: something with formulas..."}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"an assertion"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"remove all the old entries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"create all the new entries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"delete all the deleted entries"}
{"projectname":"hibernate-distribution-3.3.2.GA","classification":"WITHOUT_CLASSIFICATION","comment":"insert all the new entries"}
