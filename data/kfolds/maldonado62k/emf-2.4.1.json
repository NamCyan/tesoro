{"projectname":"emf-2.4.1","classification":"DEFECT","comment":"bug 124306: we should rely on xmlcalendar to normalize dave value, to ensure that all date value fields are taken into account."}
{"projectname":"emf-2.4.1","classification":"DEFECT","comment":"is this an error???"}
{"projectname":"emf-2.4.1","classification":"DEFECT","comment":"fb won't compile with vaj or no_jikes fb object adapter = adapterfactory.adapt(mapping);"}
{"projectname":"emf-2.4.1","classification":"DEFECT","comment":"eatm must fix isset bits."}
{"projectname":"emf-2.4.1","classification":"DEFECT","comment":"line comments at the end of annotations are not a part of the range of annotation todo is not including line comments at the end of annotations a bug?"}
{"projectname":"emf-2.4.1","classification":"DEFECT","comment":"eatm in jdk 1.4 there will be an indexof on stringbuffer."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo factor up into genbaseimpl"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"eatm call the deprecated method which does the same thing but might have an override in older code."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"unused?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo factor up into genbaseimpl?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"call workaround"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo deprecate (since getpluginclass() is no longer called)"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"ensure that this race condition is thread safe; it doesn't matter who wins the race."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo this assumes we only get a set notification, which isn't a good assumption."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"dms handle this well."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"fb tbd can we come up with a better algorithm for choosing the default label feature?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"dms should we let this exception out?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"dms what if eclipse is running, but an invalid facade has been specified? we still should format code, use encoding,..."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"dms do a better job with specific exceptions? just use chained runtimeexceptions?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"if the delegate uri can be handled as a file, we'll hope that renaming it will be really efficient."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"dms why not this? new subprogressmonitor(progressmonitor, 1));"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"assume that it's an attribute for now. it will\/could become a reference if the type resolves to an eclass."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"do nothing for now, and avoid propagating the exception. how should builders handle cancel?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"this is a fall-back, however, this should never be called"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo fix the space above"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo remove this bogus empty line"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo handle class cast exception better."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"i don't know if we should be run this deferred because we might have to give the editor a chance to process the viewer update events and hence to update the views first."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"this is a big festering hack to make the images the right size from the start."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"eatm demand create metadata; needs to depend on processing mode..."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo this is really quite attrocious since there is code that will assume an iterator that returns strings!"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"tbd return (user selected subset?) of referenced packages that contain super classes of classes in this package."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"call the workaround"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"tbd rethink where exactly some of the following methods belong (genmodel or genpackage)"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"if there are multiple variables in declaration, separate this variable fragment into a separate declaration"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"eatm this would be wrong."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"revisit: remove this code."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"the label is not used."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"motif kludge: we would get something random instead of null."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo so what should be the etype be now?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"this runs the operation, and shows progress. (it appears to be a bad thing to fork this onto another thread.)"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"eatm kind of hacky."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"this is a kludge to deal with enumerators, which crash the doswitch."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"this is copied from itemprovideradapterfactory."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"eatm this might be better written as a single loop for the eobject case?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"second alternative should be getmodelproject()?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo hack that should be removed."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo specialize this to return a resource locator for messages specific to this validator. ensure that you remove @generated or mark it @generated not"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo i'm concerned that folders will often return 401 or even 403. so should we consider something to exist even though access if unauthorized or forbidden?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"only file-scheme uris will be re-encoded. if a uri was decoded in the workaround above, and platform.resolve() didn't return a file-scheme uri, then this will return an decoded uri."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"this functionality should eventually go away, as it is replaced by model exporters. we'll just delegate to the deprecated genpackage method. the monitor isn't used, so we won't pass it."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"the eannotations and egenerictype are possible containment references. we'll move them instead of copying"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"note: registry based authority is being removed from a new spec for uri which would obsolete rfc 2396. if the spec is added to xml errata, processing of reg_name needs to be removed. - mrglavas."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"temporary structure to hold node's attributes + namespaces in scope"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"hack: reading encoding"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"because of the old factoring approach in the create method, it might be the case that the state of the old value has changed by the time we get here, and in that case, we don't want to duplicate the removals in this code."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"revisit: remove this code. store port value as string instead of integer."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo this is faster than many charat() calls."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"revisit: do we really need to support block names as in unicode 3.1 or we can just create all the names in isblockname format (xml schema rec)?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"bubble sort why? -- in many cases, this.ranges has few elements."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"per schema 1.0 it is not clear if the result returned should be a valid uri. for the future if we plant to support iris then it is better not to massage the initialvalue. we should thought consider where would be the best way to validate anyuri values -- el"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"note that the way they are sorted, the values of index[i++] always increase, so the objects are added from right to left in the list. eatm todo we could make this more efficient by grouping the adds when indices increment by one, so that a single grouped notification would result."}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"todo deprecate (since no longer used by geteditpluginclass(), geteditorpluginclass(), gettestsuiteclass())"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"dms factor this into a method? use a non-static subclass?"}
{"projectname":"emf-2.4.1","classification":"DESIGN","comment":"dms this doesn't really produce nice output."}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"fb tbd filter out volatile and other inappropriate links?"}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"i don't know if this should be run this deferred because we might have to give the editor a chance to process the viewer update events and hence to update the views first."}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"todo processing instructions are not sent to recordvalues"}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"todo comments are not sent to recordvalues"}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"todo ignore for now."}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"todo handle situation when astjnode is removed (compilationunit is null)"}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"tbd return super classes of classes in this package that come from a delegate package."}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"if current char is comma, insert line break after it we should be able to find the comma because the range for enum constants includes all trailing comments up to the separator if targetsourcerangecomputer of astrewrite changes, this logic should change to skip comments see org.eclipse.emf.codegen.merge.java.facade.ast.commentawaresourcerangecomputer#getenumconstantsourcerange(astnode)"}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"todo translation"}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"todo binary incompatibility; an old override must override putall."}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"this runs the options, and shows progress. (it appears to be a bad thing to fork this onto another thread.)"}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"we should be able to find the comma because the range for enum constants includes all preceding comments up to the previous constant if targetsourcerangecomputer of astrewrite changes, this logic should change to skip comments see org.eclipse.emf.codegen.merge.java.facade.ast.commentawaresourcerangecomputer#getenumconstantsourcerange(astnode)"}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"todo we should generate this."}
{"projectname":"emf-2.4.1","classification":"IMPLEMENTATION","comment":"todo what about the instance type name and the fact that we should be matching its type argument structure? if they match so far, we must assume they are okay and then check all the arguments."}
{"projectname":"emf-2.4.1","classification":"TEST","comment":"dms this is totally untested."}
{"projectname":"emf-2.4.1","classification":"TEST","comment":"todo update this after old tests pass and then update the old tests to reflect this change."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set of options that we want to control"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the end position of the range for the previous node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"adding 'at' allows distinguish annotations from other members (i.e. inner class verses annotation of a class)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the adapter from the factory."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no methods added."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"javadoc copied from interface."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add trailing comments if necessary"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the target is read-only, we can ask the platform to release it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if entries don't have the same feature, the feature maps aren't equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"attribute"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"merge with an existing file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"walk up the superpackages, collecting the package names. because empty packages are ommitted from the genmodel, we need to walk up the epackages."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"empty block"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"any features that delegate to features in this package."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"see java.lang.class.getname() javadoc for explanation of array encoding."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"additional useful character classes, including characters valid in certain uri components and separators used in parsing them out of a string. | ucschar | escaped"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"calls <code>casexxx<\/code> for each class of the model until one returns a non null result; it yields that result. <!-- begin-user-doc --> <!-- end-user-doc --> @return the first non-null result returned by a <code>casexxx<\/code> call. @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the target is read-only, we can ask the platform to release it, and it may be updated in the process."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":")"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find start position of farthest preceding comment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"was the details button pressed?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set up the tree viewer."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process the children of the unittreenode recursively."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a code formatter for this compilation unit, if needed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the name isn't qualified, it might be a primitive or from java.lang. otherwise, assume it's in the current package and use the nsprefix for the qualified package name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine the base url by looking for the plugin.properties file in the standard way."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the notification for this list is being thrown by the delegating list"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure our popups work."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove type, insert enum"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we need to screen out duplicates in the unlikely event that we have two features with the same class-qualified name. we'll only generate one property string in that case and let the user add the second one manually, if necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"build mapping from classes to list of features that use them"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this runs the options, and shows progress."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no paths: keep query only"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"select the root object in the view."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"else absolute path: keep it and query"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"listen to selection so that we can handle it is a special way."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the algorithm for the order of the features in this list should never change. also, the fact that a new list is created whenever the contents change is something else that should never change. there are clients who rely on both these behaviors, and they will need to agree to any change, so that they can adjust their own code."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this ensures that we handle selections correctly."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create an adapter factory that yields item providers."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the current time in milliseconds since the epoch and adjust it to match the epoch required by the specification."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the first selected element."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, the path needs only the remaining segments."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"log the error, ignore the change and continue"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"absolute path or no path -> absolute path"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do a base 64 conversion by turning every 3 bytes into 4 base 64 characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a composite with standard margins and spacing"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"source method return type is array (getexceptions), target is not array (i.e. addexception)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"and we need to set it on any cached genmodels holding the special ecore and xml packages."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"calls <code>validatexxx<\/code> for the corresponding classifier of the model. <!-- begin-user-doc --> <!-- end-user-doc --> @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the page for the tree viewer"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"empty last segment -> trailing separator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"refresh the necessary state."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a set command without a feature sets the value of this wrapper, hence replacing it with a new wrapper. so, we need a special command wrapper that selects this new wrapper as the affected object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"cc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"maintain a (weak hash) set on the type parameter of all referencing generic types."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"force the project to be setup properly."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"wizardcontainer variables"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return getprefixedname(\"editorplugin\");"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eparameter"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"retrieve source node corresponding to target"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a default .jetsettings file file"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"subclasses may overrride"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"save the resources to the file system."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the selection to the widget."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"etypeparameter"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"save only resources that have actually changed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is only at avoid needing an @suppresswarnings(\"unchecked\") on the emfobservablelist"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the method that gets invoked when the operation runs."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore this since we will throw an exception when all else fails."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for enum constants use special range"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"etypedelement"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"so if the resolved object is also present..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecorepackage"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"subclasses may override this method"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create resource"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"something went wrong that shouldn't."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create package meta-data objects"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 68 of value (byte) -19 fill 9 of value (byte) 33 fill 36 of value (byte) -19 fill 3 of value (byte) 33 fill 2 of value (byte) -19 fill 4 of value (byte) 33 fill 30 of value (byte) -19 fill 56 of value (byte) 33 fill 89 of value (byte) -19 fill 18 of value (byte) 33 fill 7 of value (byte) -19 fill 14 of value (byte) 33 fill 2 of value (byte) -87 fill 46 of value (byte) 33 fill 70 of value (byte) -87 fill 26 of value (byte) 33 fill 2 of value (byte) -87 fill 36 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"getobjectstodetachgen() should be changed only if required"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if a newline from the previous character data remains, add a generator for it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"obtain or create and register package"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove the node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize simple dependencies"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 11 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"obtain other dependent packages"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the intersection is empty, i.e., no ancestor is in the mapping..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create classes and their features"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue with a different approach."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize created meta-data"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this mapping isn't a parent, it's children definitely won't be either."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set bounds for type parameters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the collections aren't identical..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize enums and add enum literals"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add supertypes to classes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eobjecttochangesmapentryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fb used to check for parent != null. need to find the top most model object not including the resource. parent instanceof eobject only checks for trees in model object space."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"featuremapentry"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do the work within an operation because this is a long running activity that modifies the workbench."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"resourcechange"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isolating the new objects"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"featurechangeimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set features and properties"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"cache result"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the page for the list viewer"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"insert line break and comment out the first line if needed note that first line might move backward beyond node start (e.g. if a comma of the previous enum constant has been commented out)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"resourcechangeimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we change to pattern defaults, will have to specify plain suffix in no main package case."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"feature is instance of eattribute"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"different than the edit and editor projects, this method is invoked while generating the model plugin xml."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure that all the old values are cached."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"include only non-duplicate namespace declarations."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"edatatype"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the command stack that will notify this editor as commands are executed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changedescriptionimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try to select the items in the current content viewer of the editor."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"caches the list value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the editors selection based on the current viewer's selection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changefactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set of options that we want to copy from the current definition"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"sorting only the genmodels"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we need to be careful that we don't end up requiring the no namespace package just because the feature is unqualified."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"register package validator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we must have a qualifier for an attribute that needs qualified."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changeadapterfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"debug: fixed-only: \"+this.fixedstring);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"cached already?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"see if prefix already exists in current context"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize classes and features; add operations and parameters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"default implementation does nothing"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize package"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"walk up the super types until we reach a root."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changeswitch"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try to select the affected objects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue with no instanceclass."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"unwrap collection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"case notification.remove_many:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"case notification.remove:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for a matching element in the classifier's package but don't bother with the xml type package's document root."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create data types"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"egenerictypeimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return econtainer;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"internal: this is a specialized method to add attributes for a top\/root element"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create containment one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it's intentional to keep going"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize data types"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"nothing to do"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't really unset it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"estringtostringmapentryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"etypeparameterimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"stop only on cancel."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system bar."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue to try a different approach."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"produce the supplemental character as an entity"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keep trying until all else has failed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't determine it by reading the file, look at the preferences instead."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"etypedelementimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since we're invoking plugged-in code, we must be defensive against cycles."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"subclasses may override"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"combine the two lists."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecorefactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we not sure the encoding supports this code point, so we write it as a character entity reference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keep trying until all else false."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no property"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the switch that delegates to the <code>createxxx<\/code> methods. <!-- begin-user-doc --> <!-- end-user-doc --> @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eparameterimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"identifies a file-type absolute uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only handle classifiers from this package."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changedescription"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"featurechange"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it is an unqualified name, we will assume it refers to a type parameter, since we don't support default package."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mark meta-data to indicate it can't be changed"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we effectively passed null, \"\" to look up the general-content feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"egenerictype"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"insert line break at the first line if there is something before the node start and the beginning of the line"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecorefactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eatm leave this disabled for now."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3078 of value (byte) 33 fill 156 of value (byte) -19 fill 4 of value (byte) 33 fill 90 of value (byte) -19 fill 6 of value (byte) 33 fill 22 of value (byte) -19 fill 2 of value (byte) 33 fill 6 of value (byte) -19 fill 2 of value (byte) 33 fill 38 of value (byte) -19 fill 2 of value (byte) 33 fill 6 of value (byte) -19 fill 2 of value (byte) 33 fill 8 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"give all generator adapters the chance to do setup work."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove any non-java dependencies from being added."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this should never happen"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clear old values"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can't update any properties via just a url connection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"trim off the segments corresponding to the package nesting."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore any exceptions and assume the class isn't available."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for an archive uri, check for the plugin.properties in the archive."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the iv for the password generation algorithm"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"opening the detail area"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"documentroot"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we do not want to diagnose any errors that have already been diagnosed by a super type. although we ignore all the first super's features, there may be mixin classes that still would result in duplicates."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"loop for all commented out nodes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we need to be careful that the proxy may be resolved while we are attaching this adapter. we need to avoid attaching the adapter during the resolve and also attaching it again as we walk the econtents() later. checking here avoids having to check during addadapter."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-2$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"produce different levels of diagnostic depending whether the names are exactly the same or only matching."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"switch to the new selection provider."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for duplicates among the generic super types."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keep trying other member types until all have failed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"match against every other operation but this one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fake a selection changed event to update the menus."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the referencing generic type must be contained to be in scope"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check the type of the specified child object and return the proper feature to use for adding (see {@link addcommand}) it as a child."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if none of the generic super types are bounded, then we've failed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"append extra dimensions since they are not stored in type object"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if the bound specifies a classifier..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"trim off the \"bin\" or \"runtime\" segment."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the classifier of an attribute's generic type must be a data type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compact the results to remove unmatched objects"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if neither approach finds a contradiction, we must assume they are okay and then check all the arguments."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we didn't find the plugin.properties in the usual place nor in the archive..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the type arguments of a generic super type must not be a wildcard."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can open an input stream, then the plugin.properties is in the folder, and we have a good base url."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we still don't have a good base url, complain about it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"consider the classifiers in a special way to take into account the fact they they often acts as wrappers for instance type names and that two classifiers that wrap the same instance type name should be considered equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the mapping domain with a special command stack."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the content outline is just a tree."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we are still on the root mapping itself..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the type also specifies a classifier..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"yield that mapping, create a stack, record it as the next one to prune, and add it to the stack."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"i.e., the classifiers are considered equal if they wrap the same non-null type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"consider the instance type names they wrap to see if they are non-null and equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the top iterator, retrieve it's result, and record it as the one to which remove will be delegated."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the result about to be returned has children..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record the iterator as the next one to prune, and add it to the stack."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"then eobject1 must be that match."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there will be no iterator to prune."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"while the current iterator has no next..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the given class is subclass of enum and node is of subclass of type"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only if the feature kind is unspecified should we return a match. otherwise, we might return an attribute feature when an element is required, or vice versa. this also can be controlled by xmlresource.option_lax_feature_processing."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"pop it from the stack."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the stack is empty, we're done."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"pop it off the stack."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"generate a 48 bit node identifier; this is an alternative to the ieee 802 host address, which is not available in java."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the next one down and then test it for has next."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"itemprovider\/newchilddescriptorsattributedelegatedfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is an iterator to prune."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"javadoc copied from source."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"you can only prune once."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"undo the preparation for previous and continue."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we don't create an iterator stack until the root mapping itself has been returned by next once. after that the stack should be non-empty and the top iterator should yield true for hasnext."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"printadapters();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keys that will be used to record visibility for the accessors."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if that iterator is still at the top of the stack..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the referenced eobjects aren't equal, the feature maps aren't equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"allow for a bit-shift of growth."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if eobject2 has been compared already..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keep popping the stack until an iterator that has a next is at the top."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the feature maps must be equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"conditionally create the data."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the first case is the most common case. it is slightly cheaper to call add without an index since an index will be range checked."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"++modcount"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we find a match, make this generic type be for this type parameter, and then stop the whole process."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clockseq_low"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"guard for no data."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the system clock has been rewound so the clock sequence must be incremented to ensure that a duplicate uuid is not generated."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"suppress default constructor for noninstantiability."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that anything can be handled, even if it's not recognized."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.xmi.domhelper#getvalue(org.w3c.dom.node)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"strip off the array indices if any."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the entity handler is the best place to resolve and deresolve uris since it can do it there just once to produce the entity. so most often the entity handler will be a uri handler as well and when used as a uri handler will be an identity handler."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a page, set the title, and the initial model file name. $non-nls-1$ $non-nls-1$ $non-nls-1$ $non-nls-1$ $non-nls-2$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingrootimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"prepare for createsibling item addition or removal. $non-nls-1$ $non-nls-1$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore it if we've already set generic versions of these"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"exception.printstacktrace();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"string getpackageid();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"emfedit generation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns whether this class implements any of the given features."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-1$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore rules for nodes of different class"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remember the static instance."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/setgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"hgd::firenotifychanged(msg.getnotifier(), msg.geteventtype(), msg.getfeature(), substituteoldvalue, substitutenewvalue, msg.getposition());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/genfeature.override.javajetinc for"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a command to do parentmapping.getnested().remove(mapping). subcommands.appendandexecute(new removecommand(domain, parentmapping, parentmapping.epackagemapping().getmapping_nested(), mapping));"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"path segments cannot contain '[' or ']' since pchar production was not changed by rfc 2732."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 5 of value (byte) -19 fill 4 of value (byte) 33 fill 7 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"todo"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"processing unknown feature with xsi:type (xmi:type)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/implementedgenoperation.override.javajetinc for"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"bidirectional references need to use this less efficient approach because some or all of the changes may already have been made from the other end."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the package in which this enum literal is defined returns the name of the enum literal get method in the package interface"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the proxy holder can hold many values, it may contain a duplicate that resulted when the other end was processed as an idref and hence did both sides of the bidirectional relation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"data"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"pretend there is an xmlns=\"\" because we really need to ensure that the null prefix isn't used to denote something other than the null namespace."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do not add a new line if there is one"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 15 of value (byte) 33 fill 9 of value (byte) -87 fill 17 of value (byte) 33 fill 3 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"excise the new root from the document root."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't hold onto a duplicate reference to the last object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if processschemalocations is specified, treat these as xml schema locations"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"give it all back to the garbage collector."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there is only whitespace after enum constant on the same line - do not add line breaks"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"write the capacity."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this happens when processing an element with simple content that has elements content even though it shouldn't."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 11 of value (byte) 33 fill 27 of value (byte) -19 fill 5 of value (byte) 33 fill 3 of value (byte) -19 fill 46 of value (byte) 33 fill 26 of value (byte) -19 fill 5 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record node's attributes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) -87 fill 2 of value (byte) 33 fill 10 of value (byte) -87 fill 519 of value (byte) 33 fill 3 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there's an eobject on the stack already."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fb the following method is copied from com.ibm.etools.b2b.util.stringutility fb because the mapping framework cannot have a dependency on b2b. what we really fb need to do is get methods like this moved to vabase so that everyone can fb use them. change all occurrences of oldpat to newpat"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it is changing..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"test for a same document reference that would usually be handled as an idref."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check for scheme, which must be before '\/', '?' or '#'. also handle names with dos drive letters ('d:'), so 1-character schemes are not allowed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"need not to call setsource() because a caller can not access this match instance."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only creates the other pages if there is something that can be edited"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the listener on demand."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the pattern contains a fixed string. the engine checks with boyer-moore whether the text contains the fixed string or not. if not, it return with false."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handler.unparsedentitydecl(name, publicid, systemid, notationname);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore close since we don't want to let the parser close the stream when it's done."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'll try adding a shallow copy of the clipboard contents, instead of a full copy. note: we can't just try adding the clipboard contents itself, because the copy may be a different type then what's on the clipboard (e.g. ejb field -> rdb column)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the pattern has only fixed string. the engine uses boyer-moore."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 6 of value (byte) -87 fill 3 of value (byte) 33 fill 2 of value (byte) -87 fill 2 of value (byte) 33 fill 3 of value (byte) -87 fill 8 of value (byte) 33 fill 2 of value (byte) -87 fill 4 of value (byte) 33 fill 2 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handler.notationdecl(name, publicid, systemid);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"edate is far too often overridden to provide a different mapping, and therefor the default is somewhat obscure. so, it's best to delegate to the factory."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this seems to be a pretty sweet formula that supports good growth. adding an object to a list will create a list of capacity 4, which is just about the average list size."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert attribute values: & to &amp; < to &lt; \" to &quot; \\t to &#x9; \\n to &#xa; \\r to &#xd;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"caching parser does not parse 2nd file in the same way (javadoc of package for example) hence, new parser is created every time this method is called"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 7 of value (byte) -19 fill 3 of value (byte) 33 fill 4 of value (byte) -19 fill 2 of value (byte) 33 fill 6 of value (byte) -19 fill 4 of value (byte) 33 fill 13 of value (byte) -19 fill 5 of value (byte) 33 fill 3 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this should be transparent."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"| ucschar | escaped"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"modifierop charop for char, backreference, capture, anchor,"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 7 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.ast.astjnode#addchild(org.eclipse.emf.codegen.merge.java.facade.ast.astjnode)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process estructuralfeatures for association end(role)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"string"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xsi:nil xsi:type xmlns:xsi xsi:schemalocation xsi:nonamespaceschemalocation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-2$ $non-nls-1$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for a substitution group feature in the feature's containing class' containing package."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it's intentional to keep going."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check which directive it is."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iri = iri || containsnonascii(fragment);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if it's an anonymous type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for range or nrange"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we only get here if we should do this."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"reader.reset(start); return false;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"write all the entrydata; there will be size of them."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"empty"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"overlapped src: o--------o sub: o----o sub: o----o sub: o----o sub: o------------o"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"restore the capacity, if there was any."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"read all size number of entrydata."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0000 0000 1111 1111 0000 0000"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this just represents going back to the unset state, but that doesn't affect the contents of the list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"string-parsing implementation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a page for the selection tree view."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"generatecolor();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this.ranges is sorted and compacted."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) 49 fill 26 of value (byte) -3 fill 2 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create annotations http: www.w3.org\/xml\/1998\/namespace"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"src1: o--------o src2: o----o res: o--o reuse src2"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"interpret the body of a nested ownedcomment as a comment-type and assign it as the eannotation.source of the parent."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this.setlocale(locale.getdefault());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"x{2,6} -> xx(x(x(xx?)?)?)?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"processinginstructiontypeimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"internal bootstrap uses literals constants, so we must force initialization this inner interface first."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iri = iri || containsnonascii(device);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"open an editor on the new file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"trying to match the following productions: hexseq = hex4 *( \":\" hex4) hex4 = 1*4hexdig"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"checks whether the expression starts with \".*\"."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"parse the attr-val pairs."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"')'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skips ')'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create field initializer from enum constant's arguments and body"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"saves current position to avoid zero-width repeats."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"off -> next of '}'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"different scheme: need complete, absolute uri"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"apply the change."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"straightforward matching."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"delete the change information because it is invalid now that the objects have been changed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"static initializer for archiveschemes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"apply the change and reverse the change information."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compute the url for where the classes for this project will be located."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this.iri = iri;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"\\ + c backsolidus posix character class such as [:alnum:]"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"public regularexpression createregex(string regex, int options) throws parseexception { token tok = this.parse(regex, options); return new regularexpression(regex, tok, this.parennumber, this.hasbackreferences, options); }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compute the urls for all the output folder of all the project dependencies."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tok.dumpranges();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"define a class loader that will look in the urls first, and if it doesn't find the class there, uses the emitter's loader."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"single character [a-za-z] [^a-za-z] ^ $ ... literal string x* x*? x? x?? x|y ( and ) \\1 \\2 ... (?=...) (?!...) (?<=...) (?<!...) (?>...) (?ims-ims:...) (?(..)yes|no)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"define a class loader that will look up the class in the bundle, and if it doesn't find it there, will look in the parent."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"* class rosetoken *"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"strip off the trailing \"_\" and load that class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since the granularity of time in java is only milliseconds, add an adjustment so that the time is represented in 100s of nanoseconds. the version number (1) is multiplexed into the most significant hex digit."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check that the class is actually different from the one that's directly visible to the jetemitter."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"filtered for property keys to remove duplicates."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"javadoc copied from base class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"'|' '*' '+' '?' '(' ')' '.' '[' '\\' '^' '$' '(?:' '(?=' '(?!' '(?<=' '(?<!' '(?>' '(?[' '[:' in a character class '(?#' '(?' [\\-,a-z,a-z] '(?(' '-[' in a character class"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"kick of a java build if not already in a build."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"src: o--------o sub: o------------o res: empty reuse sub"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add the new entries, including source, jre container, and added variables and classpath containers."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this will deal with all the subcommands to modifying the root mapping tree."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skips ']'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"32 is the number of bits in `int'."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"construct a proper url for relative lookup."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"src1: o--------o src2: o----o res: o----o reuse the rest of src1"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a proper feature map entry."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set original node of annotations (to allow get methods to work correctly)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine all the bundles that this project depends on."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it's not an ascii character, break here, and use utf-8 encoding"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this call should get the files checked out from version control if the project is a 'team' project."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"like isstringtype(), but still returns true even if multiplicity-many."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"reverse the objects to attach and detach lists."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this.offset points the next of '?'. modifiers ::= [imsw]* ('-' [imsw]*)? ':'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the changed values of bidirectional reference lists are cached before we start to apply the change."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this case will be handled special during apply"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it doesn't correspond to a bundle, then try to process it as a project in the workspace."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"closure: \"+min+\", \"+max);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"must be in 0x0040-0x005f"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for closure"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"public string getimportedinstanceclassname() { return getgenmodel().getimportedname(\"org.eclipse.emf.ecore.eenumliteral\"); }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there is only whitespace on this line - no need for line break"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this handles rose 2003 format, e.g., logical view::javaexception[40722f9d0294]"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for string"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"move all children to the type, converting enum constants to fields fields that are created by conversion from enum constants must be inserted after the last final field that is used in constructors for initializers"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"escape u+001b form feed u+000c line feed u+000a crriage return u+000d horizontal tabulation u+0009 case 'v': c = 0x0b; break; vertical tabulation u+000b"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add jetbuilder"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"literal char . xy x|y|z x* [a-za-z] etc. [^a-za-z] etc. (x) or (?:x) ^ $ \\b \\b \\< \\> \\a \\z \\z *? +? strings back references (?=...) (?!...) (?<=...) (?<!...) (?>...) (?ims-ims:...) (?(...)yes|no)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clone includestack without cloning contents"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a|b|c -> fc_terminal a|.|c -> fc_any a|b| -> fc_continue"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create .jetproperties file"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mark the bound as unspecified so that it won't be considered many but can nevertheless be recognized as being unspecified and perhaps still be treat as many."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"store the current state in stack."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if all the objects aren't used up by the above, then we can't do the command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"perl extension"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"new template container entryfield"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there's no position, the list is being cleared."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"gentypeparameterimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the new variables."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the template path points at a project with a jet nature, then we will assume that the templates we want to use are already compiled in this plugin java project."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2100..214f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"when we attached we have to recompute the erasure of the type parameter."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"build table of pf values"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a key set that supports add."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"suppress default constructor for non-instantiability."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get previous state in stack."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2600..26ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"vaj kludge"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"result.addrange(0, regularexpression.line_feed-1); result.addrange(regularexpression.line_feed+1, regularexpression.carriage_return-1); result.addrange(regularexpression.carriage_return+1, regularexpression.line_separator-1); result.addrange(regularexpression.paragraph_separator+1, utf16_max); return 1;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we have something to pop."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map to eclass, eenum or einerface. note that we do not map structure and primitive type class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"register the file, and read its content:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the system time hasn't changed so add some increment of 100s of nanoseconds to guarantee uniqueness."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"is stack created ? (will happen if the jet file we're looking at is missing."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tr#18 1.2"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use an alternate if we can't write to this one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"and delegate the call."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the method is not a structural feature, so it's modeled as an operation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue with the established base url."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"consume the open quote:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do allow an existing build.properties to be overwritten, since it may have been created as part of an empty emf project. use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"restore parser state:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"filter out explicit eobject from super types, except in the ecore package itself, or if it appears in the @model supertypes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check for an equal sign:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-1$ $non-nls-2$ $non-nls-3$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the attribute value:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"28 29, 30 31-37"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"insert line break if there is non-whitespace before end of the line"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"an error like \"3c[pad]r\", \"3cdx\", \"3cxd\", \"3cxx\" where x is non data"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't do any of the other normally dynamic jetemitter project processing."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.ui.iworkbenchwindowactiondelegate#dispose()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the existing classpath and remove the project root if necessary. any new non-duplicate entries will be added to this."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"schema rec. {datatypes} - punctuation pi - initial quote pf - final quote"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: hierarchical -> authority != null"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"end of the usebean tag."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"'::' represents at least one 16-bit group of zeros."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"emf.editor generation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlesque close tags"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"parse as an attribute=value:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can create the removecommand for an uncontrol, but we must defer creating an addcommand to control until run(), when the user specifies a target resource."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tests generation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"while"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"reached eof:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"resolve relative uri to base uri - see rfc 2396 section 5.2 in some cases, it might make more sense to throw an exception (when scheme is specified is the string spec and the base uri is also specified, for example), but we're just following the rfc specifications"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create annotations http: \/org\/eclipse\/emf\/ecore\/util\/extendedmetadata"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map to an eclass."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"until the encoding can be specified within the template we need to assume an encoding capable of working with any character set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fb tbd different objects for ecore model!"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check end of quote, skip closing quote:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0590..05ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: absolutepath -> hierarchical"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the attribute name:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0a00..0a7f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"attempt to parse authority. if the section is an empty string this is a valid server based authority, so set the host to this value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"delete the actioncontributionitems with matching action."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"search backwards starting from character before ':'."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't remove the adapter if the object is in a different resource and that resource (and hence all its contents) are being cross referenced."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0d00..0d7f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the second character wasn't ':', in order to be valid, the remainder of the string must match ipv4address, and we must have read exactly 6 16-bit groups."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip derived features."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the include succeeded, so if there is an alternative and we're not skipping, we need to start."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check for authority - rfc 2396 5.2 #4 if we found a host, then we've got a network path, so we're done"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"include derived relations only if they won't also come from mixed or a group."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"6f - remove ending \"<segment>\/..\" where \"<segment>\" is a complete path segment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this is just a proxy being resolved..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"rfc 2396 states that hostnames take the form described in rfc 1034 (section 3) and rfc 1123 (section 2.1). according to rfc 1034, hostnames are limited to 255 characters."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"force the raw type to be resolved so we don't resolve this endlessly."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"rightmost domain label starting with digit indicates ip address since top level domain label can only start with an alpha see rfc 2396 section 3.2.2"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"update the classifier and hence the raw type as normal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"rfc 2732 only allows '[' and ']' to appear in the opaque part."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"10a0..10ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for an end-of-comment or end-of-tag:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we've either reached the end of the string, the address ends in an ipv4 address, or it is invalid. scanhexsequence has already made sure that we have the right number of bits."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a section is not allowed without a preceding include with alternative."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"to encode special characters in anyuri, by using %hh to represent special ascii characters: 0x00~0x1f, 0x7f, ' ', '<', '>', etc. and non-ascii characters (whose value >= 128)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xml schema anyuri specific information"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"an expression with more that 931 \"+\" will break sun and ibm javac compilers."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if a newline from the previous character data remains, leave it around to be processed as if it appeared in the included file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 58 of value (byte) -19 fill 2 of value (byte) 33 fill 11 of value (byte) -19 fill 2 of value (byte) 33 fill 8 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the include failed, so if there is an alternative, we don't skip it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 8 of value (byte) -19 fill 2 of value (byte) 33 fill 2 of value (byte) -19 fill 2 of value (byte) 33 fill 22 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"at development time, the real factory may not be available. just return null."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this pop is safe because a section couldn't have been started without an include that pushed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.facadehelper#doconverttonode(java.lang.object)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"16a0..16ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"cannot start with a '.', '-', or end with a '-'."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process this first."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore this now"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't overwrite exising file"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2000..206f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"register our directive."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create an import manager for this compilation unit"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore it if there are multiple comments."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do nothing."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2190..21ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"three arguments are expected: the .xml jcontrolmodel uri, the source java uri, and the target java uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2500..257f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"interprets escaped characters according to java literal rules, with one exception: a single \\ is taken literally, not as an error."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 81 of value (byte) 33 fill 3 of value (byte) -19 fill 3714 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"protected static final estructuralfeature containing_feature = new ereferenceimpl(); protected static final estructuralfeature container = new ereferenceimpl();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) -19 fill 3 of value (byte) 33 fill 2 of value (byte) -19 fill 3 of value (byte) 33 fill 3 of value (byte) -19 fill 3 of value (byte) 33 fill 8 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2ff0..2fff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) -19 fill 4 of value (byte) 33 fill 10 of value (byte) -87 fill 18 of value (byte) 33 fill 2 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.util.extendedmetadata#getpackage(java.lang.string)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 21 of value (byte) -87 fill 3 of value (byte) 33 fill 7 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"entry entry = new entry(eobject, container); return (internaleobject)map.get(entry);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"}"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 23 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this should never be called."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) -87 fill 7 of value (byte) 33 fill 2 of value (byte) -87 fill 7 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"3190..319f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 16 of value (byte) -19 fill 4 of value (byte) 33 fill 6 of value (byte) -87 fill 2 of value (byte) 33 fill 3 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check for valid escape sequence"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there isn't an executable command we should maybe try a link operation, but only if we're allowed and not doing a link."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return a correctly sized result"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eatm getdecoratedadapterfactory()."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) 33 fill 2 of value (byte) -87 fill 8 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) -19 fill 6 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a000..a48f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) 33 fill 2 of value (byte) -19 fill 3 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"("}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"@deprecated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.xmi.xmlresource.xmlmap#getfeatures(org.eclipse.emf.ecore.eclass)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fb50..fdff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 5 of value (byte) -87 fill 11 of value (byte) 33 fill 84 of value (byte) -19 fill 4 of value (byte) 33 fill 2 of value (byte) -87 fill 2 of value (byte) 33 fill 2 of value (byte) -87 fill 2 of value (byte) 33 fill 90 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"econtainer = newcontainer; econtainerfeatureid = newcontainerfeatureid;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) 33 fill 2 of value (byte) -19 fill 7 of value (byte) 33 fill 2 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"when setting the resource to null we assume that detach has already been called in the resource implementation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 10 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"stop listening to the old one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.xmi.xmlresource.xmlmap#getinfo(org.eclipse.emf.ecore.enamedelement)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the further-most javadoc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create annotations http: www.eclipse.org\/emf\/2002\/ecore"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ff00..ffef;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get what's left of the segments after trimming the prefix."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1d400..1d7ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"added since this encoding only differs w.r.t. presentation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) -87 fill 6 of value (byte) 33 fill 40 of value (byte) -19 fill 7379 of value (byte) 33 fill 20902 of value (byte) -19 fill 3162 of value (byte) 33 fill 11172 of value (byte) -19 fill 92 of value (byte) 33 fill 8190 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<p>a valid opaque part must be non-null and non-empty. it may contain any allowed uri characters, but its first character may not be <code>\/<\/code>"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"start listening to the new one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add ascii letters and ascii hex numbers"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the source and target jdoms."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>switch<\/b> for the model's inheritance hierarchy. it supports the call {@link #doswitch(eobject) doswitch(object)} to invoke the <code>casexxx<\/code> method for each class of the model, starting with the actual class of the object and proceeding up the inheritance hierarchy until a non-null result is returned, which is the result of the switch. <!-- end-user-doc --> @see org.eclipse.emf.edit.tree.treepackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add those manually f0000..ffffd; \"private use\", 100000..10fffd; \"private use\" fff0..fffd; \"specials\","}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"neither 'scheme:' or 'scheme:#fragment' are valid uris."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a pattern dictionary for each."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: segments.length > 0 -> hierarchical"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compute the offset in the sequence of bit patterns for this feature id and then get the bit pattern at that index."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if this is the current doc - rfc 2396 5.2 #2 note that this is slightly different from the rfc spec in that we don't include the check for query string being null - this handles cases where the urispec is just a query string or a fragment (e.g. \"?y\" or \"#s\") - see <http: www.ics.uci.edu\/~fielding\/url\/test1.html> which identified this as a bug in the rfc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we expect this failure when running stand-alone"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use a stack to accumulate segments"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compute the index within that bit pattern for this feature id and fetch that bit at that index."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize classes and features; add operations and parameters $non-nls-1$ $non-nls-1$ $non-nls-1$ $non-nls-1$ $non-nls-2$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for isset, we only need to check the bit and return -1 when the bit is 0."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the value index set, there's no index to return."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"empty statement."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return value != null && value.length() != 0 && value.charat(0) != segment_separator && validate(value, uric_hi, uric_lo, true, true);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this just notifies those things that are affected by the selection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no validation needed since all components are from existing uris"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the result is not a proxy, cache it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"server based authority."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"can check against path characters because the set is the same except for '\/' which we've already excluded."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize all the fields from the command parameter."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check that port is well formed if it exists. revisit: there's no restriction on port value ranges, but perform the same check as in setport to be consistent. pass in a string to this method instead of an integer."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.jface.window.window#close()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ipv6 addresses are 128-bit, so there can be at most eight sections."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"all eclipse-dependent operations are delegated to this class. this pattern avoids any runtime failure due to missing dependencies in the stand-alone case."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return value != null && validate(value, segment_char_hi, segment_char_lo, true, true);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.facadehelper#insertsibling(org.eclipse.emf.codegen.merge.java.facade.jnode, org.eclipse.emf.codegen.merge.java.facade.jnode, boolean)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"count just the bits up to this one. note that shifting 32 bits is a no op."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this might be invalid or an ipv4address. if it's potentially an ipv4address, backup to just after the last valid character that matches hexseq."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine the index for the feature and return the value at that index, if an index is assigned."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 7 of value (byte) 33 fill 38 of value (byte) -19 fill 10 of value (byte) 33 fill 17 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine if an index is assigned."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine the index."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>switch<\/b> for the model's inheritance hierarchy. it supports the call {@link #doswitch(eobject) doswitch(object)} to invoke the <code>casexxx<\/code> method for each class of the model, starting with the actual class of the object and proceeding up the inheritance hierarchy until a non-null result is returned, which is the result of the switch. <!-- end-user-doc --> @see org.eclipse.emf.codegen.ecore.genmodel.genmodelpackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it's newly allocated, add a new value, and indicate there was no previous value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.ast.astjabstracttype#getchildren()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't use 'cotinue' for this loop. single-range | from-to-range | subtraction"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initializing the character flag array code generated by: xmlchargenerator."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"forward the interned value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'll assume that the copy command can execute and that adding a copy of the clipboard is the same test as adding the clipboard contents itself."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it's a parameterized type..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"both prefix (if any) a localpart must be valid ncname"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the instance class name is the erasure."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) -87 fill 9 of value (byte) 33 fill 53 of value (byte) -19 fill 2 of value (byte) 33 fill 2 of value (byte) -19 fill 2 of value (byte) 33 fill 2 of value (byte) -19 fill 3 of value (byte) 33 fill 28 of value (byte) -19 fill 2 of value (byte) 33 fill 8 of value (byte) -19 fill 2 of value (byte) 33 fill 2 of value (byte) -19 fill 55 of value (byte) 33 fill 38 of value (byte) -19 fill 2 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the name isn't a qualified name and isn't a primitive type, it's assumed to denote some arbitrary type parameter."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 68 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"be sure to pick up any trailing [] brackets."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the bundle can't be found the normal way, try to find it as the base url. if that also doesn't work, rethrow the original exception."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"is the first character a special character, i.e., something other than '@'?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: isrelative() -> hierarchical"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns null if the specified value is null or would be a valid path segment array of a uri; otherwise, the value of the first invalid segment."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) -19 fill 2 of value (byte) -87 fill 2 of value (byte) 33 fill 10 of value (byte) -87 fill 2 of value (byte) -19 fill 16 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"is it the start of a source uri of an annotation?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"recompute the read only state."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return value == null || validate(value, segment_char_hi, segment_char_lo, true, true);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"refresh any actions that may become enabled or disabled."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"go through class super types to catch constraints from other packages"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 5 of value (byte) -87 fill 4 of value (byte) 33 fill 2 of value (byte) -87 fill 2 of value (byte) 33 fill 3 of value (byte) -87 fill 11 of value (byte) 33 fill 4 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"empty."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) -87 fill 18 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: authority == null -> hierarchical (authority == null && device == null && !absolutepath) -> scheme == null"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) -19 fill 3 of value (byte) 33 fill 2 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the node is less than 1 line long, but its contents is replaced by multiple lines, comment out each line in it"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) 33 fill 2 of value (byte) -19 fill 3 of value (byte) 33 fill 2 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find the closing '%'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.util.basicextendedmetadata#isfeaturekindspecific()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"cause a syntax error"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 8 of value (byte) 33 fill 2 of value (byte) -19 fill 4 of value (byte) 33 fill 10 of value (byte) -87 fill 145 of value (byte) 33 fill 46 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"decode all encoded characters."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if that fails, determine the url for the class itself. the url will be of one of the following forms, so there are a few good places to consider looking for the plugin.properties. for a plugin.xml with runtime=\"common.jar\": jar:file:\/d:\/sandbox\/unpackage1-3.1m7\/eclipse\/plugins\/org.eclipse.emf.common\/common.jar!\/org\/eclipse\/common\/commonplugin.class for a plugin.xml with runtime=\"runtime\/common.jar\": jar:file:\/d:\/sandbox\/unpackage1-3.1m7\/eclipse\/plugins\/org.eclipse.emf.common\/runtime\/common.jar!\/org\/eclipse\/common\/commonplugin.class for a plugin.xml with runtime=\".\" where the plugin is jarred: jar:file:\/d:\/sandbox\/unpackage1-3.1m7\/eclipse\/plugins\/org.eclipse.emf.common.jar!\/org\/eclipse\/common\/commonplugin.class for a plugin.xml with runtime=\".\" where the plugin is not jarred. file:\/d:\/sandbox\/unpackage1-3.1m7\/eclipse\/plugins\/org.eclipse.emf.common\/org\/eclipse\/emf\/common\/commonplugin.class running in pde with bin on classpath: file:\/d:\/sandbox\/unpackage1-3.1m7\/eclipse\/plugins\/org.eclipse.emf.common\/bin\/org\/eclipse\/emf\/common\/commonplugin.class"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) -19 fill 4 of value (byte) 33 fill 10 of value (byte) -87 fill 18 of value (byte) 33 fill 2 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check for a count, i.e., a '.' followed by a number."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for trailing count."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for a matching named element."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return econtainerfeatureid;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find the uppermost class loader in the hierarchy that can load the class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 6 of value (byte) -87 fill 4 of value (byte) 33 fill 6 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"jcontrolmodel.class is used with classnames that were not found"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 33 of value (byte) -19 fill 7 of value (byte) 33 fill 20 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"}}"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"register with the upper most class loader that's able to load the class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) 33 fill 3 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this let's us test whether the string exists as a file. if not, we try as a uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"...or if it's a wildcard or group feature. also, make it featuremap-typed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"first try to see if this class has an einstance"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try and get the resource selection to determine a current directory for the file dialog."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remember the file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do the work within an operation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no authority: use base's"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a resource set"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.util.extendedmetadata#getnamespace(org.eclipse.emf.ecore.epackage)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the uri of the model file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns true if the given value is an archive scheme, as defined by the org.eclipse.emf.common.util.uri.archiveschemes system property. by default, \"jar\", \"zip\", and \"archive\" are considered archives."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the feature is a bidirectional reference with a multiplicity-many reverse, a composite reverse, or a multiplicity-1 reverse that is already set (on value), then we'll switch things around and execute this command a little differently, because otherwise it's not undoable."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add the initial model object to the contents."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if a sibling has been specified, add the best index possible to each commandparameter."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"save the contents of the resource to the file system."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there are attributes to handle."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the file ends in \".ecore\"."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genpackage can be a broken proxy"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a page, set the title, and the initial model file name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we never directly set a multiplicity-many feature to a list directly. instead, we remove the old values values, move the values that remain, and insert the new values. if all old values are removed, we'll still set it to an empty list, or unset it, as appropriate."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the resource..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this gives us a directory..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set this for the container."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the relative path is empty or ends in an empty segment, a parent reference, or a self reference, add a trailing separator to a non-empty path"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this returns a name like employeenumber formatted like 'employee number' this returns the same as getcapname unless it starts with \"is\" in which case the \"is\" is stripped this returns the name to be used in accessor method names; it's the same as getcapname, unless this is the key or value of a map entry, for which \"typed\" is prepended this returns the name of the get array-based accessor method for the list feature. this returns the name of the get accessor method for the feature, i.e., either \"is\" or \"get\" is prefixed to getaccessorname"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for a many-to-many association, the command can only be undoable if the value or owner is last in its respective list, since the undo will include an inverse add. so, if the value is last, but the owner is not, we create an undoable compound command that removes from the opposite end and then inserts the new value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"evirtualindexbits[offset] = newindexbits;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no list to add to, no collection or an empty collection from which to add, or the index is out of range..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"evirtualvalues = newvalues;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is package, so check the package information if this is in cat file. if it is, then load the .cat file into the tree thereby traversing it; otherwise, just traverse the tree."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no device: use base's"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add a listener to set the most recent command's affected objects to be the selection of the viewer with focus."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"setting at an index. make sure the index is valid, the type is valid, and the value isn't already in a unique feature. record the old value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since base must be hierarchical, and since a non-hierarchical uri must have both scheme and opaque part, the complete absolute uri is needed to resolve to a non-hierarchical uri"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure it's okay."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the other end is a many, then we should remove the owner from the old value's opposite feature so that undo will put it back."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for a likely plugin name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create type parameters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if found \"no data\" just return null"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it's a platform plugin uri, include it in the map."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keep track of all the entry features that are already in the feature map and that will be added, excluding xml text, cdata, and comments (if we're in a mixed type)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"else keep authority, device, path, and query"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine the values to be added and add them at the right position."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: it's okay for two uris to share a segments array, since neither will ever modify it"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find the fragment root so that we can generate to the right location (by default)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the base portion of the dynamic template path."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-1$ $non-nls-1$ $non-nls-1$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.ui.iactiondelegate#run(org.eclipse.jface.action.iaction)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remember it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"either delegate the call or return nothing."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now we could check that the adapter implements interface itableitemfontprovider."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it's okay for there not be a precompiled template, so fail quietly."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we don't need to encode here because the only platform resource uris in the map are for projects whose names are the same as corresponding plug-in ids, and hence never need to be encoded (see ecoreplugin.computeplatformresourcetoplatformpluginmap())."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there must be at least one match."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) method declared on dialog."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"gentypeparameter"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this implements the following order of preference: 1. full refresh and update 2. full refresh (add update if necessary) 3. refresh element with update 4. refresh element (if necessary) 5. update element"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"gentypedelement"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the try\/catch provides backwards compatibility with the old resource key, \"_ui_createchild_label\", and should be removed at the next release, when we can expect users to regenerate."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eatm color startcolor = display.getsystemcolor(swt.color_list_selection);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genruntimeversion"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"these will be the children belonging to this feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genmodelpackage"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there is no executable command, so we'd better nix the whole deal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this returns either \"attribute\", \"attribute list\", \"reference\", or \"reference list\""}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do the encoding."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"getfirstfileextension?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the target object from the item widget and the mouse location in it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add variable fragment to new declaration"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine if we can create a valid command at the current location."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"load the resource through the editing domain."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.util.extendedmetadata#gettype(org.eclipse.emf.ecore.epackage, java.lang.string)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>adapter factory<\/b> for the model. it provides an adapter <code>createxxx<\/code> method for each class of the model. <!-- end-user-doc --> @see org.eclipse.emf.mapping.ecore2xml.ecore2xmlpackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, the source should be available now as event.data, and we can create the command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"either the ieditingdomainitemprovider or itreeitemcontentprovider item provider interface can give us the children."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>switch<\/b> for the model's inheritance hierarchy. it supports the call {@link #doswitch(eobject) doswitch(object)} to invoke the <code>casexxx<\/code> method for each class of the model, starting with the actual class of the object and proceeding up the inheritance hierarchy until a non-null result is returned, which is the result of the switch. <!-- end-user-doc --> @see org.eclipse.emf.mapping.ecore2xml.ecore2xmlpackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genmodelfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"current document reference: keep no path or query"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore if there is not substantial change."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"constructors"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"lower all except the last upper case character if there are more than one upper case characters in the beginning. e.g. xsdelementcontent -> xsdelementcontent however if the whole string is upper case, the whole string is turned into lower case. e.g. cpu -> cpu"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for each unwrapped object as a value of a wrapper, replacing it with the first one found."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genannotation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it must be an unsettable feature to be empty and considered set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"matching authorities and no device or path removal"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"always keep fragment, even if null, and use scheme from base; no validation needed since all components are from existing uris"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check to see if a container is being put into a contained object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(new addcommand(domain, mapping, mapping.epackagemapping().getmapping_nested(), siblingstoreparent));"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"static initialization"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"trick to import java.util.* without warnings"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do allow an existing manifest.mf to be overwritten, since it may have been created as part of an empty emf project. use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there isn't an executable command we should maybe try a copy operation, but only if we're allowed and not doing a link."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the type string must be qualified by its package uri, e.g. dtd.xmi:dtdelement. the package uri is used to look up the package by calling refregister.getpackage(uri)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this will be the default return value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.mapping.action.addrootbottomaction#getbottomstoadd()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try again."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, we could check that the adapter implements interface iitemcolorprovider."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now we could check that the adapter implements interface itableitemcolorprovider."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this turns a featureless set command into an operation to create a mapping. this is invoked during drag and drop."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genenumimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we've switch the operation!"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"select the new file resource in the current view."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the type isn't object, we need to cast. if it's a primitive, we need to unbox."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use a stack to accumulate segments of base, except for the last (i.e. skip trailing separator and anything following it), and of relative path"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now we want to find all the other objects with this same parent. so we can collection siblings together and give the parent control over their removal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can't have a null name, in case we're using emof serialization."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine the object's parent."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it's an interface, then it will be treated as an eclass"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this returns either \"eattribute\" or \"ereference\""}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eclass.getesupertypes().addall(extend); eclass.getesupertypes().addall(unspecified); eclass.getesupertypes().addall(mixin); eclass.getesupertypes().addall(nonclass);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue to compute the offset."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"defer the handling of the opposite."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this guard is for extra security, but should not be necessary"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do this first for better error message during seteparameterproperties."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set properties"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"index counters into indices1, indices2, and indices."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just remember it; it's encoded later during execution, which is more efficient."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove objects from the owner list by index, starting from the end."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genmodelfactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we don't want to insert an object before or after itself..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add iana to java encoding mappings."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a code formatter for this compilation unit, if needed"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the feedback we use to indicate drop on; it will only be used if the command is executable."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the resource parent, if its a file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'd like the collection of replacements selected after this replace completes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"repeatedly select the lower index and corresponding object, and advance past the selected pair."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"wrap any new children and add them to the map. remove each current child from the set of old children."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore this soft dependency when it's not satisfied."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"simply remove the object from the owner list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make up a unique new name here."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"prepare for createchild item addition or removal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check all the siblings to see which if any should now be nested under this new mapping. the are accumulated into a list so that they can be removed as a single command with a single notification."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"j9 2.2 has problems assigning null to a class variable."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"always returns original value"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use the original to do the add, but only if it's of the same type as the copy. this ensures that if there is conversion being done as part of the copy, as would be the case for a cross domain copy in the mapping framework, that we do actually use the converted instance."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add added super interfaces to the array"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingroot.epackagemapping().getmapping_outputs() : mappingroot.epackagemapping().getmapping_inputs(),"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"special case for a reference to ecore to ensure that flag settings are respected and are set only for ecore itself."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"not supported in jdom"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/unsetgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only 1 fragment left - revert the changes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'll assume that all the createcopycommand's and initializecopycommand's can execute."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"split is performed"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for removecommand, we will find the owner by calling editingdomain.getparent() on the object(s) being removed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"setresourcefactoryregister(new extensiblecontextresourcefactoryregister()); eatm setresourcefactoryregister(new contextresourcefactoryregister());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"name already contains \".*\" - unset on demand property"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) -19 fill 2 of value (byte) 33 fill 4 of value (byte) -19 fill 2 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"three arguments are expected: the .xml getcontrolmodel() uri, the source java uri, and the target java uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for lists, maps, and feature maps, the default is many-valued, which can be overridden by an upper-bound declaration."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no ecore representation or it's invalid, e.g., when - is used to omit a specification, then just use the java representation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"containers are transient by default unless explicitly annotated otherwise."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"consider each genmodel location uri for each required plugin."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"prepare for createsibling item addition or removal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get extra icon and bounds for first column of extendedtabletreeitem."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"force an update because eclipse hides empty menus now."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the notification is an iviewernotification, it specifies how viewerrefresh should behave. otherwise fall back to notifychangedtoviewerrefresh, which determines how to refresh the viewer directly from the model notification."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove any menu items for old selection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a setcommand needs to go through setcommand.create() to ensure it can execute and undo."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"query the new selection for appropriate new child\/sibling descriptors"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"generate actions for selection; populate and redraw the menus."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"draw ellipses, offset if down."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"empty extension to limit the effect of suppressing the deprecation warning."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"protected command createsetcommand(editingdomain domain, object owner, object feature, object value) { return ((ieditingdomainitemprovider)decorateditemprovider).createcommand (owner, domain, setcommand.class, new commandparameter(owner, feature, value)); } protected command createcopycommand(editingdomain domain, object owner, copycommand.helper helper) { return ((ieditingdomainitemprovider)decorateditemprovider).createcommand (owner, domain, copycommand.class, new commandparameter(owner, null, helper)); } protected command createcreatecopycommand(editingdomain domain, object owner, copycommand.helper helper) { return ((ieditingdomainitemprovider)decorateditemprovider).createcommand (owner, domain, createcopycommand.class, new commandparameter(owner, null, helper)); } protected command createinitializecopycommand(editingdomain domain, object owner, copycommand.helper helper) { return ((ieditingdomainitemprovider)decorateditemprovider).createcommand (owner, domain, initializecopycommand.class, new commandparameter(owner, null, helper)); } protected command createremovecommand(editingdomain domain, object owner, object feature, collection collection) { return ((ieditingdomainitemprovider)decorateditemprovider).createcommand (owner, domain, removecommand.class, new commandparameter(owner, feature, collection)); } protected command createreplacecommand(editingdomain domain, object owner, object feature, object value, collection collection) { return ((ieditingdomainitemprovider)decorateditemprovider).createcommand (owner, domain, replacecommand.class, new commandparameter(owner, feature, value, collection)); } protected command createaddcommand(editingdomain domain, object owner, object feature, collection collection, int index) { return ((ieditingdomainitemprovider)decorateditemprovider).createcommand (owner, domain, replacecommand.class, new commandparameter(owner, feature, collection, index)); } protected command createmovecommand(editingdomain domain, object owner, object feature, object value, int index) { return ((ieditingdomainitemprovider)decorateditemprovider).createcommand (owner, domain, replacecommand.class, new commandparameter(owner, feature, value, index)); } protected command createdraganddropcommand (editingdomain domain, object owner, float location, int operations, int operation, collection collection) { draganddropcommand.detail detail = new draganddropcommand.detail(location, operations, operation); return ((ieditingdomainitemprovider)decorateditemprovider).createcommand (owner, domain, draganddropcommand.class, new commandparameter(owner, detail, collection)); }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over all the plugin ids to determine the dependency closure. the list grows as the plugins are visited."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look into subcontributionitems"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"else keep device, path, and query"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it's really a contained child, return the feature for it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'll need to keep track of the information we use to create the command, so that we can recreate it in drop."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changes to the parameters should also update the label."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns true if the non-relative path includes segments that would be collapsed when resolving; false otherwise. if preserverootparents is true, collapsible segments include any empty segments, except for the last segment, as well as and parent and self references. if preserverootsparents is false, parent references are not collapsible if they are the first segment or preceded only by other parent references."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the shared instance."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the unset notification for an ismany feature; the value is boolean in this case."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if necessary, get a command that replaces unwrapped values by their wrappers in the result and affected objects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"inputstream contents = new bytearrayinputstream(bytes);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now we could check that the adapter implements interface itableitemlabelprovider."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we have children to remove for this feature, create a command for it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create helpers to cache and supply information for unique naming"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genannotationimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create ok and cancel buttons by default"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the error message text see https: bugs.eclipse.org\/bugs\/show_bug.cgi?id=66292"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"walk the fields."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"index of first segment that is different between endpath and startpath"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the local transfer supports this data type, switch to that data type"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the options model."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"drop last segment from base, as in resolving"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"treat an empty base path as the root absolute path"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/unsetgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create enums"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is for backwards compatibility, since the constructor may have been overridden before it was expected to set actiondelegate."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(etype instanceof edatatype)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genmodelpackageimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine the required plugins."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"in column 0, the drop-down is indented past the collapse\/expand icon."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"does nothing"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"user rejects a relative path: keep absolute or no path"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"draw the icons."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"i assume that the editorinput is a file object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"matching devices and no path removal"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clear the import manager"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/getgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"basicemap.this.removeentry(index, j);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"order genpackages by putting firstgenpackage (if non-null) first"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remember the viewer and listen to swt.dragdetect to alert the start of the drag operation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genfeatureimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"text = new text(composite, swt.single | swt.border); text.setlayoutdata(new griddata(griddata.grab_horizontal | griddata.horizontal_align_fill));"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the value is null, the key is a referenced object"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keep query and select relative or absolute path based on length"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set from {@link #ischildren children} if unset, and return value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"&& ereversefeature.isnavigable();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle the creation of the model from the modelfile."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for debugging purposes. may be removed in the future."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"go through class super types to catch any from other packages"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for the control case, we need a dialog to ask for the uri and obtain the resource, then we create the command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"support for 1047, as proposed to be added to the iana registry in http: lists.w3.org\/archives\/public\/ietf-charset\/2002julsep\/0049.html"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we aren't getting the domain from the workbench part... this happens when this action is used for a global popup action. we try to get the editing domain from one of the objects in the selection. dms editingdomain == null) ?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"scan feature lists for those with multiple elements and return them"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"nothing more to do and we don't want to do the default stuff below."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"gentypedelementimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"data type"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"else keep shorter absolute path"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we aren't doing an operation..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eobject is handled by default case"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clean up the command if there is one. if we need it again in drop, we'll recreate it from draganddropcommandinformation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changes to parameter types should also update the operation's label."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert to an ereference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"escaped unicode form"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we've found thing with type parameters, search them for a match."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"filter out types that aren't permitted."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we need the wrapper, not the item provider, to handle a draganddropcommand; the move, add, remove, etc. commands that implement it will have their values unwrapped as usual."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"restore the persistent command stack, if need be."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a generic super type with an eclass as the classifier for each super interface in the @model representation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"an operation is declared via the kind property or, for backwards compatibility, by specifying parameters (though attribute or reference kind takes precedence)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no index specified when removing all elements."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/unsetgenfeature.javadoc.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if the name is qualified"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"avoid allowing choices that will lead to duplicates."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return getpresentationpackagename() + \".\" + geteditorpluginclassname();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"emf.edit generation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find the modeled package for the import and look up the name there."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"avoid allowing a choice that will lead to duplicates."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just to be helpful, we'll recognize a type of org.eclipse.emf.ecore.util.featuremap and convert it to efeaturemapentry. this way a datatype need not be specified. but, we won't do this if recorddemandcreateedatatype is false, so we don't change the instanceclass of a new edatatype that's implicitly being defined for featuremap."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that there are enough type arguments to match the number of type parameters."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"wrappers from the old command parameter must be considered in order for cut and paste to work."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"you cannot add any children for a type parameter."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for the sibling value or an equivalent in the new child's feature. if it is found, the child should immediately follow it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<clinit>()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise you can't make it a child."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/issetgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"let them choose type parameters as well."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-1$ $non-nls-2$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tbd"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it is a list type value..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genpackageimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"protected jetemitter extendeditemprovideremitter = null;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"itemprovider\/newchilddescriptorsattributefeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over all the child references to factor each child to the right reference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't care about plugin class; we can generate a model without one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"subcommands.appendandexecute(new removecommand(domain, mapping, mapping.epackagemapping().getmapping_nested(), nestedmappings)); subcommands.appendandexecute(new addcommand(domain, parentmapping, parentmapping.epackagemapping().getmapping_nested(), nestedmappings));"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"when the value is changed, the property sheet page doesn't update the property sheet viewer input before refreshing, and this gets called on the obsolete wrapper. so, we need to read directly from the model object. return value;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genmodelimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, we could check that the adapter implements interface iitemlabelprovider."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"6 is the size of (value"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do not allow an existing manifest.mf to be overwritten, as the tests project is originally generated from scratch."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"itemprovider\/newchilddescriptorsreferencefeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"user demands a relative path or the absolute path is longer"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it's definitely a package if expected constants ename, ens_prefix, or ens_uri appear."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"putjava2ianamapping(string,string)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"bottom-label-case"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/genoperation.javadoc.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this ensures that the createcopycommand will be executed by strictcompoundcommand.prepare()."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do not allow an existing build.properties to be overwritten, as the tests project is originally generated from scratch."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/declaredfieldgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 16 of value (byte) -87 fill 3 of value (byte) 33 fill 4 of value (byte) -87 fill 3 of value (byte) 33 fill 10 of value (byte) -19 fill 2 of value (byte) -87 fill 2 of value (byte) 33 fill 10 of value (byte) -87 fill 17 of value (byte) 33 fill 3 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle eopposite specially."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this owned object is equal to one from the collection..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class.basicunsetgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"itemprovider\/newchilddescriptorsreferencedelegatedfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is more than one exact match, we must get an index number;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 5 of value (byte) 33 fill 10 of value (byte) -87 fill 17 of value (byte) 33 fill 3 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"filter out classes that aren't permitted."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genmodelvalidator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"read all the values into an array."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this can't execute if there is no owner list or the owner list doesn't contain the value being replaced or there are not replacements."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.mapping.ecore2ecore.ecore2ecoremapping#getoutputepackage()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genmodelswitch"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"genmodeladapterfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/setgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"itemprovider\/addpropertydescriptor.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now we'll do recursive matchmapping. (we need to iterate over a copy, since we modify the underlying list in the loop.)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"itemprovider\/gettext.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this guard is needed to ensure that clear doesn't make the resource become loaded."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is done to ensure that this new copy is treated as an output by the domain. the createmappingcommand will rely on this setting."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we haven't yet encrypted or decrypted, generate a key. this key will only be used for encryption. decryption keys are always derived from the header of the input stream itself."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"colormap.put(clr_grad_start, clr1);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"write the header to the output stream. this has the format (delimeters are not written): pbe iv|encryption iv|encrypted key length|encrypted key"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'd like the collection of things added to be selected after this command completes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/setgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over the children to find the owner."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/getgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle the same document proxies, which may have problems resulting from the other end of a bidirectional reference being handled as an idref rather than as a proxy. when we are done with these, we know that funny proxies are now resolved as if they were handled as idrefs."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"merges this uri's relative path with the base non-relative path. if base has no path, treat it as the root absolute path, unless this has no path either."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make up a unique new name here. $non-nls-1$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"removecommand = removecommand.create(domain, mappingroot, mappingroot.epackagemapping().getmapping_nested(), mappingroot.getnested());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-1$ $non-nls-1$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we don't want to move insert an object before or after itself..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the cipheroutputstream shoudln't close the underlying stream"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the above 3 arrays"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return getproviderpackagename() + \".\" + geteditpluginclassname();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/reflectivedelegation.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.ast.astjabstracttype#remove(org.eclipse.emf.codegen.merge.java.facade.ast.astjnode)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"editor\/additemproviderfactories.override.javajetinc\""}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"an absolute uri needs no resolving"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: these assertions imply that neither this nor the base uri has a relative path; thus, both have either an absolute path or no path"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.ast.astjnode#insertsibling(org.eclipse.emf.codegen.merge.java.facade.jnode, org.eclipse.emf.codegen.merge.java.facade.jnode, boolean)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/getgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"simply add the collection to the list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/getgenfeature.javadoc.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/basicsetgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: device != null -> hierarchical"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/basicsetgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/basicgetgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<p>a valid fragment may be null or contain any allowed uri characters."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/basicgetgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the dynamic template path, an ordered list of uris corresponding to locations under which to find templates."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/basicgetgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.abstractjnode#computequalifiedname()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/implementedgenoperation.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get utf-8 bytes for the remaining sub-string"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the exception and return false."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/issetgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"getjava2ianamapping(string):string"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: query != null -> hierarchical"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/unsetgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/unsetgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/issetgenfeature.javadoc.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return value == null || validate(value, uric_hi, uric_lo, true, true);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/issetgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>switch<\/b> for the model's inheritance hierarchy. it supports the call {@link #doswitch(eobject) doswitch(object)} to invoke the <code>casexxx<\/code> method for each class of the model, starting with the actual class of the object and proceeding up the inheritance hierarchy until a non-null result is returned, which is the result of the switch. <!-- end-user-doc --> @see org.eclipse.emf.mapping.mappingpackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"datatype"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>switch<\/b> for the model's inheritance hierarchy. it supports the call {@link #doswitch(eobject) doswitch(object)} to invoke the <code>casexxx<\/code> method for each class of the model, starting with the actual class of the object and proceeding up the inheritance hierarchy until a non-null result is returned, which is the result of the switch. <!-- end-user-doc --> @see org.eclipse.emf.ecore.change.changepackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>switch<\/b> for the model's inheritance hierarchy. it supports the call {@link #doswitch(eobject) doswitch(object)} to invoke the <code>casexxx<\/code> method for each class of the model, starting with the actual class of the object and proceeding up the inheritance hierarchy until a non-null result is returned, which is the result of the switch. <!-- end-user-doc --> @see org.eclipse.emf.ecore.ecorepackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/eunset.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.util.extendedmetadata#getname(org.eclipse.emf.ecore.eclassifier)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/getgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we do not want to diagnose any error that have already been diagnosed by a super type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"creates the model from the editor input"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/getgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>switch<\/b> for the model's inheritance hierarchy. it supports the call {@link #doswitch(eobject) doswitch(object)} to invoke the <code>casexxx<\/code> method for each class of the model, starting with the actual class of the object and proceeding up the inheritance hierarchy until a non-null result is returned, which is the result of the switch. <!-- end-user-doc --> @see org.eclipse.emf.mapping.ecore2ecore.ecore2ecorepackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/unsetgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/setgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the first hex character if a character needs to be escaped"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/unsetgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tests the non-null string value to see if it contains only ascii characters in the set represented by the specified 128-bit bitmask, as well as, optionally, non-ascii characters 0xa0 and above, and, also optionally, escape sequences of % followed by two hex digits. this method is used for the new, strict uri validation that is not not currently in place."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/setgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the workbench part changes..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/genoperation.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/implementedgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"backward compatibility with old generated overrides"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/issetgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/implementedgenoperation.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for a many-to-1, we use setcommand.create() to create the command to remove the opposite reference; a removecommand on its opposite will actually result."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add all converted fields after the last final field that is used in initializers of the converted fields"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"char buffer for html data"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if endpath is shorter than startpath, the last segment of endpath may not be compared: because startpath has been collapsed and had its last segment removed, all preceding segments can be considered non- empty and followed by a separator, while the last segment of endpath will either be non-empty and not followed by a separator, or just empty"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore because we'll rethrow the original exception eventually."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"path form demands an absolute path: keep it and query"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue processing dynamically as normal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over all the operations but skip all the operations in the first super."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for feature maps, test that the entry feature is a valid type, that the entry value is an instance of it, that there is not already something in a document root, and that there is not already something in a single-valued entry feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"pure obfuscated genius!"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"match close."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/issetgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"take care of the quoting here."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip empty segments and self references; push everything else"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for a 1-to-many association, doing the set as a remove and add from the other end will make it undoable. in particular, if there is an existing non-null value, we first need to remove it from the other end, so that it will be reinserted at the correct index on undo."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"close ncsa like attributes \"->\""}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.util.extendedmetadata#getfeaturekind(org.eclipse.emf.ecore.estructuralfeature)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"super is called on converted node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert the selection to a collection of the selected objects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"dumpnodecontents(node);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"assume length will grow by 10% (average line length is 20 characters)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the version"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"close variable like attributes \"%>\""}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"command line execution methods"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compute a map of resource location uris to logical namespace uris so that cross references will be resolved via package registry when deserialized."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for a many-to-1 or 1-to-1 association, if the opposite reference on the new value is already set to something, we need a compound command that first explicitly removes that reference, so that it will be restored in the undo."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"push"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check whether the character is in the range 0x30 ~ 0x39"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"sweep"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.abstractjnode#getchildren()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"pull"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the referencedepackages list is used to track the packages for which is necessary to create the stub genmodel. so if the epackage is referenced by an existing genpackage, it doesn't need to be added to referencedepackages."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"pull name targetpackage.setname(sourcepackage.getname());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we're not setting a new resource, attach it to the old container's resource."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"apply target parent pattern first"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"include each required plugin of the starting project and the exported ones of all the required projects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do not crash when control model is not set"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clone and map"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.util.extendedmetadata#getname(org.eclipse.emf.ecore.estructuralfeature)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"sort"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we will create an eattribute, ereference, or an eoperation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"read value until delimiter is found:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check whether there are parameters; the special attribute and reference rules only apply for the case of no arguments."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"warning: cannot clone '\" + sourcenode.getcontents() + \"'\");"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"redo the markup since nodes changed now"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use new node from now on"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look through the imports of the containing compilation unit."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"purpose: using charset from 'targetfile' to encode in-memory 'newcontents' object into bytes modifer: wu zhi qiang date: aug 25, 2004 action: first get the charset from 'targetfile', then use it to encode the 'newcontents' object into bytes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the exception."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"headless invocation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for any entry that doesn't correspond to a plugin in the running jvm, compute a url for the classes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we don't want keytype and valuetype on a map type specification in a package interface. but, we also use qualified model information when defining a feature with suppressed get accessor on the interface, and we do want to include these properties in that case."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore char tokens. **"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"back up over the whitespace."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"target method is not addsuperinterface"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"by default nodes are marked up"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the parent is not in target, there is no point on checking the child"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":";devanagari sign virama;mn;9;on;;;;;n;;;;; ;bengali sign virama;mn;9;on;;;;;n;;;;; ;gurmukhi sign virama;mn;9;on;;;;;n;;;;; ;gujarati sign virama;mn;9;on;;;;;n;;;;; ;oriya sign virama;mn;9;on;;;;;n;;;;; ;tamil sign virama;mn;9;on;;;;;n;;;;; ;telugu sign virama;mn;9;on;;;;;n;;;;; ;kannada sign virama;mn;9;on;;;;;n;;;;; ;malayalam sign virama;mn;9;on;;;;;n;;;;; ;thai character phinthu;mn;9;on;;;;;n;thai vowel sign phinthu;;;; ;tibetan mark halanta;mn;9;on;;;;;n;tibetan virama;;;;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the flag will straddle two fields, bump it to the next one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"update the containing map, if necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we expect there to be at least one archive path."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"characters to use in escaping."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a provider base class from outside this class that has already been generated, get the create child references from it. we'll check for any type-compatible classes introduced in this package."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"not instantiable"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"private constructor for use of static factory methods."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.ast.astjnode#addchild(org.eclipse.emf.codegen.merge.java.facade.jnode)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for all nodes but some use default extended range"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iri = iri || containsnonascii(authority);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are multiple variables in the same field declaration, create declaration with only 1 variable"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"private constructor for use of platform factory methods."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iri = iri || containsnonascii(query);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"debugging method: converts the given long to a string of binary digits."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"replace or append"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the upper half bitmask for the given acsii character."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip whitespace, up to the end of the line"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"&& uri.charat(i) == fragment_separator (implied)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"enable tracking for nodes that have string content"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"apply header"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"enable tracking for commented out nodes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) -87 fill 7 of value (byte) 33 fill 2 of value (byte) -87 fill 9 of value (byte) 33 fill 2 of value (byte) -19 fill 4 of value (byte) 33 fill 10 of value (byte) -87 fill 18 of value (byte) 33 fill 2 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"previousnode.getstartposition() + previousnode.getlength();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the lower half bitmask for the given ascii character."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return the line number of the start of the node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackageimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"revert all current edits for this node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this line has been commented out, return next line number"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find the appropriate parent mapping, which at the very least, should be the mapping root itself."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is anything after the node on the same line, insert line break"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"separators for parsing a uri string."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"comment out all lines of the node itself, from firstline to last line"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is tricky and is done for each object here rather than once for the owner of the addcommnd. we want to make sure the object is really part of the conceptual tree induced by the domain."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"next position is checked as well"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can't blindly cache the genmodel, since we need to support moving the genpackage to another container, but the cast is expensive, so we'd like to do it no more than absolutely necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle the case when there is a replace edit that covers these lines"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it's the selection viewer, then we want it to select the same selection as this selection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is any content after the node on the same line, insert line break (to prevent commenting out extra content)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no-op"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip all lines that replace edit covers"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"should not happen, re-throw exception"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure that dummy edit is not in the tree"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"char at currentpos is copied as well"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it belongs to this package if the delegate feature is from this package, or the class is from this package and either there is no delegate feature or the delegate feature is from some used package."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"lastpos, currentpos points at the next chars that will be copied later"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is anything before the node on the same line, create line break and comment out the first line of the node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"copy last piece if any"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set uris of epackage-containing resources: output resource to desired target uri, and others to package namespace uris (so cross-references will be resolved via package registry when deserialized)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if comma is on a line by itself, comment it out but do not insert the line break"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.ast.astjabstracttype#insertsibling(org.eclipse.emf.codegen.merge.java.facade.ast.astjnode, org.eclipse.emf.codegen.merge.java.facade.ast.astjnode, boolean)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if previous node is not commented out, but all the following nodes are, comment out a comma (constant separator)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we need to filer out duplicates in the unlikely event that we have two features with the same class-qualified name. we'll only generate one property string in that case and let the user add the second one manually, if necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if previous node is not commented out, but all following are"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since we will do the processing recursively, we need to ensure we don't stack overflow if there is a circular super type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 18 of value (byte) -19 fill 13 of value (byte) 33 fill 12 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"delete variable fragment from old declaration"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"cat(unit) file referenced by mdl file"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/setgenfeature.javadoc.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore features from the first super type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/basicunsetgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/getgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the second hex character if a character needs to be escaped"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"resourcefactoryclass\/createresource.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"volatile"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"listrewrite.remove((astnode)modifier, null);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"uses a cache to speed up creation of a uri from a string. the cache is consulted to see if the uri, less any fragment, has already been created. if needed, the fragment is re-appended to the cached uri, which is considerably more efficient than creating the whole uri from scratch. if the uri wasn't found in the cache, it is created using parseintouri() and then cached. this method should always be used by string-parsing factory methods, instead of parseintouri() directly."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) 33 fill 2 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"super.collectnewchilddescriptors(newchilddescriptors, object);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this could be method body, for example"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a primitive type can only be used as the generic type of a typed element."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"range to look for comments"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"discard the old editing domain."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip an archive accessor to be handled by delegation to the scheme in nested url."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"userinfo can contain alphanumerics, mark characters, escaped and ';',':','&','=','+','$',','"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return eproperties;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"testcase\/implementedgenoperation.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set javadoc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add java to iana encoding mappings fjava2ianamap.put(\"8859_1\", \"us-ascii\"); ?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the int value of the given hex digit."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the for loop's condition finds the separator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"parse to count the archive paths that must will be delegated to the nested url based on the number of schemes at the start."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 25 of value (byte) 33 fill 9 of value (byte) -19 fill 6 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"assume that we aren't running."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"assume that the node is being moved (to allow insertion after)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackage epackage = ((mappingroot)object).epackagemapping();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"and even if it is contained, it must not be a forward reference. etypeparameterindex == index is allowed when the type parameter is the type argument of the bound, though"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove all existing modifiers"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"append extra dimensions if any"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create new modifiers and add to rewrite"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can also optimize single valued reverse."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>adapter factory<\/b> for the model. it provides an adapter <code>createxxx<\/code> method for each class of the model. <!-- end-user-doc --> @see org.eclipse.emf.ecore.ecorepackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a proxy in the correct way and pop it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"null -> relative uri reference"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handler.skippedentity(name);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if ecore, set the enamedelement name"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it was not a warning or an diagnostic then return the diagnostic image"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"maintain a list of classifiers for looking up conflicts."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only one example per wizard"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2xmlfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlmap"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"append [] if it is variable arity parameter (@see jls3 8.4.1, http: java.sun.com\/docs\/books\/jls\/third_edition\/html\/classes.html#300870)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlinfoimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 6 of value (byte) -87 fill 2 of value (byte) 33 fill 10 of value (byte) -87 fill 62 of value (byte) 33 fill 2 of value (byte) -87 fill 6 of value (byte) 33 fill 10 of value (byte) -87 fill 11 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"anytype"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no image is a good default."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"applicable only to a hierarchical uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"apply a redirection pattern, if specified."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create new node and replace it all by original contents"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make all enum constants to be on separate lines"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"avoid unnecessary out.write(\"\") statements..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set comment and initializer as strings"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.ui.iactiondelegate#selectionchanged(org.eclipse.jface.action.iaction, org.eclipse.jface.viewers.iselection)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set annotation contents"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"reg_name = 1*( unreserved | escaped | \"$\" | \",\" | \";\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" )"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.xmi.xmlload#load(org.eclipse.emf.ecore.xmi.xmlresource, org.w3c.dom.node, java.util.map)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"update the wrapped object map"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.facadehelper#getcontext(org.eclipse.emf.codegen.merge.java.facade.jnode)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip nodes in hierarchy that can not be converted to jnode (i.e. variabledeclarationfragment)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no root object, we're dealing with an eattribute feature instead of an ereference feature. so create an instance of simple any type and prepare it to handle the text content."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get rewriter"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"path - everything up to query string or fragment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"insert new declaration before this one"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is an element with end position <= rangeendpos"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"computes the default path for the given genmodel. this was previously the implementation of gettemplatepath()."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"extend range backward"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can't want to do encoding of platform resource uris by default yet."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create map of field names to fields"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the output stream to the temporary file and the input stream for the delegate url."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"boolean iri = false;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"extend to include the comment at the same line as the position"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"else - there is a comment that ends exactly at rangeendpos"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle field declarations separately"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the previous element must have end position <= rangeendpos"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"last 2 bits should be zero"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"else - there is a comment that starts exactly at rangestartpos"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"&& commandparameter instanceof mappingcommandparameter)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/basicsetgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"extend range forward"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"increments the position to add the white spaces"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add trailing whitespace"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set source"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a label if there are no children to force a smaller layout"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returning null here causes removecommand.create(domain, mappedobjectitemprovider) to be delegated to mappedobjectitemprovider.createcommand() and there we return a command to remove mappedobject instead. return null;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mark the node as moved if node has been removed"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"enable commenting out"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialization is deferred until adapters are attached to all the objects of interest and we're about to ask them to generate."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"counter for the number of 16-bit sections read in the address."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"disable commenting out"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine the inverse map from plugin ids to their registered genmodel locations."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a cache of uris, keyed by the strings from which they were created. the fragment of any uri is removed before caching it here, to minimize the size of the cache in the usual case where most uris only differ by the fragment."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mark the node to be removed"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'll rethrow the original exception, not this one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if are dealing with original, not cloned node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"celleditor.setvalue() calls iscorrect() to validate the value that is about to be set. we are doing conversion between the value and a corresponding string, and we would usually like to validate the string. because setvalue() is final, we cannot do that conversion there, so we need to record what we're trying to validate and work around the problem in iscorrect()."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"stringvalue not null, nodevalue is null"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this is an {@link #isiri iri}, converts it to a strict ascii uri, using the procedure described in section 3.1 of the <a href=\"http: www.w3.org\/international\/iri-edit\/draft-duerst-iri-09.txt\">iri draft rfc<\/a>. otherwise, this uri, itself, is returned. this unused code is included for possible future use..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"insert new values"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert only fields of the same type as parent"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"move all children to the enum, converting some fields to constants"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the type to create"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"include line comments following end of the nodes into the range"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"move annotations"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set arguments and body"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"10400..1044f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"update the wrapped object"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"unable to set arguments or body"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if there is just whitespace between position and start of the comment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create field declaration with 1 variable declaration fragment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"debug system.err.println(\"isregisternonxs: \"+name);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record the part."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"replace type by enum"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"insert nodetoinsert after targetnode"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert enum constants and add to list of converted constants"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"3400..4db5;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"move the node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set initializer"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set arguments"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1680..169f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the whole initializer"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the body"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"update last field that is used"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the arguments to the constructor"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"perform split if there is more than 1 fragment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return the whole declaration contents (not just variabledeclarationfragment)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set rewritten node to be the original"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"not overlapped src1: o-----o src2: o-----o res: empty reuse src2"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check number of fragments"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this class provides encode\/decode for rfc 2045 base64 as defined by rfc 2045, n. freed and n. borenstein. rfc 2045: multipurpose internet mail extensions (mime) part one: format of internet message bodies. reference 1996 available at: http: www.ietf.org\/rfc\/rfc2045.txt this class is used by xml schema binary format validation this implementation does not encode\/decode streaming data. you need the data that you will encode\/decode already on a byte array. @author jeffrey rodriguez @author sandy gao"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a copy of declaration"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set annotations contents"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a temporary file where the existing contents of the archive can be written before the new contents are added."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"logged throwable: --------------------\"); throwable.printstacktrace();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure correct indentation for a top level attribute. elementnames.add(\"mark\");"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"new template container label"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"container specification group"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"@since 2.4"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlns=\"\" declaration example #1: <a><q-name>q<\/q-name><b xmlns=\"abc\"\/><\/a> example #2: <a xmlns=\"abc\"><b xmlns=\"\"\/><c xmlns=\"abc2\"\/><\/a> example #3: <a xmlns:a=\"abc\"><b xmlns:a=\"abc2\"\/><\/a>"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"jetnature.settemplatecontainers(newtemplatecontainers);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert element values: & to &amp; < to &lt; \" to &quot; \\n to line separator \\r should be escaped to &xd;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"will point at the character after 0 to 3 octal digits"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create an xml processor that is aware of xml schema specified. @param schemauris - a uri {@link org.eclipse.common.util.uri} which point to an xml schema"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/basicunsetgenfeature.todo.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return the original uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just print an error message."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"title."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the exception and return the original uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"assume the class is not available."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just return the default."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do not insert line break if there is only whitespace after comma"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is just a marker interface."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this case happens when the ide is brought up with the editor already open"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for an archive uri, check for the path in the archive."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/genoperation.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue processing if the file doesn't exist so that we try create a new empty one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set lexical handler"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we didn't find the path in the usual place nor in the archive..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the loop resolves the cross references by visiting them."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if they don't have the same class, they can't be equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this may be called directly on an eobject for the case of a containment."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"assume that it's not available."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"preload."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no new methods."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"listen to title changes. getviewpart().addpropertylistener(this);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"listchangeimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"wrap the current input as a zip stream, and record it for loop-based recursion."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return getprefixedname(\"editplugin\");"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changepackage"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the generic type is a different wildcard, it doesn't match."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"turn the password into an aes key"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"public string getextendeditemproviderclassname() { return getprefixedname(\"itemprovideradapter\"); }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process documentation info and create eenumliteral for each line"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eannotation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a new or replaced entry and continue processing the remaining archives."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"getlist(entry).clear();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"subclasses must override this function"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return evirtualindexbits[offset];"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return minimumcapacity;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return evirtualvalues;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.xmi.xmlresource#load(org.w3c.dom.node, java.util.map)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue and return null."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changepackageimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore exceptions."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"changefactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that cached epackage is forgotten."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eannotationimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"listchange"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the attribute is set, record it's old value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"force this to be initialized as well."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the exception since we will throw one when all else fails."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecorevalidator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we didn't detach it from an old resource already, detach it from the old container's resource."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/issetgenfeature.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"titlelabel.setbackground(workbenchcolors.getactivegradient(), workbenchcolors.getactivegradientpercents()); titlelabel.setforeground(titlelabel.getdisplay().getsystemcolor(swt.color_title_foreground));"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 230 of value (byte) 33 fill 38 of value (byte) -19 fill 10 of value (byte) 33 fill 39 of value (byte) -19 fill 9 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eoperation"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a page for the parent tree view."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check to make sure that every object in the collection has an ancestor that is contained in this mapping."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"generate the key"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record them as generic streams to record state during the loop that emulates recursion."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can open an input stream, then the path is there, and we have a good url."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue and try to close."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>adapter factory<\/b> for the model. it provides an adapter <code>createxxx<\/code> method for each class of the model. <!-- end-user-doc --> @see org.eclipse.emf.mapping.ecore2ecore.ecore2ecorepackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.ast.astjabstracttype#addchild(org.eclipse.emf.codegen.merge.java.facade.ast.astjnode)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"decrypt the key bytes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now create the encryption cipher"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.mapping.mappingroot#cancreatemapping(java.util.collection, java.util.collection, org.eclipse.emf.mapping.mapping)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"read the header of the encrypted file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>adapter factory<\/b> for the model. it provides an adapter <code>createxxx<\/code> method for each class of the model. <!-- end-user-doc --> @see org.eclipse.emf.ecore.change.changepackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add leading hanging comments to the previous node, hence, only comments immediately preceding the node will be in the range for removal"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just make a copy of the base if spec is empty"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"generate the iv for encryption"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.eclipse.emf.ecore.internaleobject#esetproxyuri(org.eclipse.emf.common.util.uri)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the key we will use to encrypt the data"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>adapter factory<\/b> for the model. it provides an adapter <code>createxxx<\/code> method for each class of the model. <!-- end-user-doc --> @see org.eclipse.emf.edit.tree.treepackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a title bar."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now create the decrypt cipher"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only do this once."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we haven't yet generated a key, just use this one"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eclipse-depend-begin"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.ui.iworkbenchwindowactiondelegate#init(org.eclipse.ui.iworkbenchwindow)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore the bound if the value is too big."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eclipse-depend-end"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"@see org.eclipse.emf.ecore.eobject#eisproxy()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.facadehelper#createcompilationunit(java.lang.string, java.lang.string)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"invoke generator adapters for each object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.facadehelper#addchild(org.eclipse.emf.codegen.merge.java.facade.jnode, org.eclipse.emf.codegen.merge.java.facade.jnode)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.jface.dialogs.dialog#createbuttonsforbuttonbar(org.eclipse.swt.widgets.composite)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore it if it isn't a class. not being a class is diagnosed for the generic type itself."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/setgenfeature.annotations.insert.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that the class loader for this class will be used downstream."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"two slashes means we may have authority, but definitely means we're either matching net_path or abs_path. these two productions are ambiguous in that every net_path (except those containing an ipv6reference) is an abs_path. rfc 2396 resolves this ambiguity by applying a greedy left most matching rule. try matching net_path first, and if that fails we don't have authority so then attempt to match abs_path. net_path = \" \" authority [ abs_path ] abs_path = \"\/\" path_segments"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't bother complaining about things with no name, since there are constraints for that problem."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.ast.astjnode#insertsibling(org.eclipse.emf.codegen.merge.java.facade.ast.astjnode, org.eclipse.emf.codegen.merge.java.facade.ast.astjnode, boolean)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecoreswitch"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a document root can have multiple id attributes because there can be multiple global element or attribute declarations of type id and these will be the id in the complex types that reference them, i.e., they aren't really the id of the document root."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for performance, skip matching all the features of the first super type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"action bar."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note that the copied tree should not be modified by wrapped astjfield the copied tree will have source ranges for all nodes in the source file, hence, the get methods in the new astjfield will not return the right contents"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"checks whether the string contains any more segments after the one that starts at position i."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.xmi.xmlresource.xmlmap#add(org.eclipse.emf.ecore.enamedelement, org.eclipse.emf.ecore.xmi.xmlresource.xmlinfo)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.codegen.merge.java.facade.ast.astjnode#remove(org.eclipse.emf.codegen.merge.java.facade.ast.astjnode)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we get to this point, we need to resolve relative path rfc 2396 5.2 #6"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the key from the key bytes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>adapter factory<\/b> for the model. it provides an adapter <code>createxxx<\/code> method for each class of the model. <!-- end-user-doc --> @see org.eclipse.emf.codegen.ecore.genmodel.genmodelpackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"list sublist(estructuralfeature feature, int from, int to); elist list(estructuralfeature feature);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class\/eisset.override.javajetinc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this must have no fewer segments than the prefix. since the prefix is not the root absolute path, its last segment is empty; all others must match."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create new field and replace it all by original contents"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 31 of value (byte) -19 fill 2 of value (byte) 33 fill 53 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this is a hierarchical uri reference and prefix is a prefix of it, returns the portion of the path remaining after that prefix has been trimmed; null otherwise."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"encodes a complete uri, optionally leaving % characters unescaped when beginning a valid three-character escape sequence. we can either treat the first or # as a fragment separator, or encode them all."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the character encoded by % followed by the two given hex digits, which is always 0xff or less, so can safely be casted to a byte. if either character is not a hex digit, a bogus result will be returned."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check for scheme - rfc 2396 5.2 #3 if we found a scheme, it means absolute uri, so we're done"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the scheme specific part is opaque, it can contain '[' and ']'. uric_no_slash wasn't modified by rfc 2732, which i've interpreted as an error in the spec, since the production should be equivalent to (uric - '\/'), and uric contains '[' and ']'. - mrglavas"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the shortest relative path between the the non-relative path of the given base and this absolute path. if the base has no path, it is treated as the root absolute path."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"validates all of the uri components. factory methods should call this before using the constructor, though they must ensure that the inter-component requirements described in their own javadocs are all satisfied, themselves. if a new uri is being constructed out of an existing uri, this need not be called. instead, just the new components may be validated individually."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there is no match if the types are different and they don't each specify the same non-null instance class name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"interpret it as part of the name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the string must contain inappropriate whitespace, so find the index for the first difference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"when used as a generic super type, there must be a classifier that refers to a class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't complain about the literals if they are the same as the names and the names collide."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"encodingmap is a convenience class which handles conversions between iana encoding names and java encoding names, and vice versa. the encoding names used in xml instance documents <strong>must<\/strong> be the iana encoding names specified or one of the aliases for those names which iana defines. <p> <table border=\"0\" width=\"100%\"> <tr> <td width=\"33%\"> <p align=\"center\"><b>common name<\/b> <\/td> <td width=\"15%\"> <p align=\"center\"><b>use this name in xml files<\/b> <\/td> <td width=\"12%\"> <p align=\"center\"><b>name type<\/b> <\/td> <td width=\"31%\"> <p align=\"center\"><b>xerces converts to this java encoder name<\/b> <\/td> <\/tr> <tr> <td width=\"33%\">8 bit unicode<\/td> <td width=\"15%\"> <p align=\"center\">utf-8 <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">utf8 <\/td> <\/tr> <tr> <td width=\"33%\">iso latin 1<\/td> <td width=\"15%\"> <p align=\"center\">iso-8859-1 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso-8859-1 <\/td> <\/tr> <tr> <td width=\"33%\">iso latin 2<\/td> <td width=\"15%\"> <p align=\"center\">iso-8859-2 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso-8859-2 <\/td> <\/tr> <tr> <td width=\"33%\">iso latin 3<\/td> <td width=\"15%\"> <p align=\"center\">iso-8859-3 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso-8859-3 <\/td> <\/tr> <tr> <td width=\"33%\">iso latin 4<\/td> <td width=\"15%\"> <p align=\"center\">iso-8859-4 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso-8859-4 <\/td> <\/tr> <tr> <td width=\"33%\">iso latin cyrillic<\/td> <td width=\"15%\"> <p align=\"center\">iso-8859-5 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso-8859-5 <\/td> <\/tr> <tr> <td width=\"33%\">iso latin arabic<\/td> <td width=\"15%\"> <p align=\"center\">iso-8859-6 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso-8859-6 <\/td> <\/tr> <tr> <td width=\"33%\">iso latin greek<\/td> <td width=\"15%\"> <p align=\"center\">iso-8859-7 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso-8859-7 <\/td> <\/tr> <tr> <td width=\"33%\">iso latin hebrew<\/td> <td width=\"15%\"> <p align=\"center\">iso-8859-8 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso-8859-8 <\/td> <\/tr> <tr> <td width=\"33%\">iso latin 5<\/td> <td width=\"15%\"> <p align=\"center\">iso-8859-9 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso-8859-9 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: us<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-us <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp037 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: canada<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-ca <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp037 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: netherlands<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-nl <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp037 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: denmark<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-dk <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp277 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: norway<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-no <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp277 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: finland<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-fi <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp278 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: sweden<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-se <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp278 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: italy<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-it <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp280 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: spain, latin america<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-es <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp284 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: great britain<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-gb <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp285 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: france<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-fr <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp297 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: arabic<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-ar1 <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp420 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: hebrew<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-he <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp424 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: switzerland<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-ch <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp500 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: roece<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-roece <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp870 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: yugoslavia<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-yu <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp870 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: iceland<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-is <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp871 <\/td> <\/tr> <tr> <td width=\"33%\">ebcdic: urdu<\/td> <td width=\"15%\"> <p align=\"center\">ebcdic-cp-ar2 <\/td> <td width=\"12%\"> <p align=\"center\">iana <\/td> <td width=\"31%\"> <p align=\"center\">cp918 <\/td> <\/tr> <tr> <td width=\"33%\">chinese for prc, mixed 1\/2 byte<\/td> <td width=\"15%\"> <p align=\"center\">gb2312 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">gb2312 <\/td> <\/tr> <tr> <td width=\"33%\">extended unix code, packed for japanese<\/td> <td width=\"15%\"> <p align=\"center\">euc-jp <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">eucjis <\/td> <\/tr> <tr> <td width=\"33%\">japanese: iso-2022-jp<\/td> <td width=\"15%\"> <p align=\"center\">iso-2020-jp <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">jis <\/td> <\/tr> <tr> <td width=\"33%\">japanese: shift jis<\/td> <td width=\"15%\"> <p align=\"center\">shift_jis <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">sjis <\/td> <\/tr> <tr> <td width=\"33%\">chinese: big5<\/td> <td width=\"15%\"> <p align=\"center\">big5 <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">big5 <\/td> <\/tr> <tr> <td width=\"33%\">extended unix code, packed for korean<\/td> <td width=\"15%\"> <p align=\"center\">euc-kr <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">iso2022kr <\/td> <\/tr> <tr> <td width=\"33%\">cyrillic<\/td> <td width=\"15%\"> <p align=\"center\">koi8-r <\/td> <td width=\"12%\"> <p align=\"center\">mime <\/td> <td width=\"31%\"> <p align=\"center\">koi8-r <\/td> <\/tr> <\/table> @author tamura kent, ibm @author andy clark, ibm"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"can't have both a classifier and a type parameter."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add userinfo characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the type parameter must be in scope and must not be a forward reference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore trailing whitespace"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"incorrect number of type arguments."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"have no arguments when they are allowed is only a warning."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"can't have both an upper and lower bound."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.xmi.xmlresource.xmlmap#getclassifier(java.lang.string, java.lang.string)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"wildcards are only allowed in type arguments."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.ecore.xmi.xmlresource.xmlmap#getfeature(org.eclipse.emf.ecore.eclass, java.lang.string, java.lang.string)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"can't have type arguments unless there is a classifier"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"can't have a classifier or a type parameter as well as bounds."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"can only have bounds when used as a type argument."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove\/add the action bar from the view so to avoid having an empty action bar participating in the view's layout calculation (and maybe causing an empty bar to appear)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackage epackage = ((complextypeconverter)msg.getnotifier()).epackagemapping();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we test their relationship either via them both being classes..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"when the pane or any child gains focus, notify the workbench."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the are the same then it is bounded properly..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"namespace context"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is for the topdown feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the arguments, type parameters, lower bounds and upper bounds must be equal type arguments."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set up the substitutions of any type parameters this class has with respect to the type arguments for them."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore leading whitespace"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine if there is a bounding generic super type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a upper bound, the bound must bound it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a new array."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"test if there are type parameters that might require substitution."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"new declaration will not have fragments until performsplit() is called"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a type parameter, one of its bounds must be bounded by the bound."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add leading comments"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the generic type is a wildcard, it can't be bounded by another wildcard."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"failing all those cases, there must be an lower bound that bounds it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is an lower bound, the type argument must bound it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"starting traverse file and build unit tree and table info"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if one is null (but the other is not) then they can't be equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if they both aren't null..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create ok and details buttons"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if they are the same classifier, they are of course equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if one is null (but the other is not) then they are not equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if they are the same instance they are equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"go through the commands of the list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"index should be -1."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"define a class loader that looks up classes using the urls or the parent class loader, and failing those, tries to look up the class in each bundle in the running jvm."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecoreadapterfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add the key\/value pairs to the output string"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"public list sublist(int from, int to) { return featuremap.sublist(getestructuralfeature(), from, to); }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for the extended meta data to be created."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"reverse the test."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over the mappings in the tree."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"--entrycursor;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't cache this one as it will cause leaks because to dynamic demand created document roots and demand created eclasses."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<!-- begin-user-doc --> the <b>adapter factory<\/b> for the model. it provides an adapter <code>createxxx<\/code> method for each class of the model. <!-- end-user-doc --> @see org.eclipse.emf.mapping.mappingpackage @generated"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"reset text edits; since this node is processed successfully, there is no need to revert these changes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eenumimpl overrides this to do nothing. the only case that is special is when a more specific instance of abstractenumerator is generated\/reused."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this forces the feature ids to be assigned."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"interprets escaped characters within the string according to java literal rules, with two exceptions: an unescaped \" does not terminate the string, and a \\ not followed by b, t, n, f, r, \", ', u, or an octal digit is taken literally, not as an error"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can use == for eobjects and enumliterals."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a standalone base is a valid uri according to spec"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is needed for internal bootstrapping of egenerictype's default value for erawtype. it's simply not available before ecore is constructed so we make it available and then patch what's missing."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"replace some arguments by another field names (constants)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"public"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue with the unresolved uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"all implementations of java 1.5 should support aes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"jetnature.setjavasourcecontainer(newjavasourcecontainer);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for enum constants, insert line break after the comma if there is anything after the comma"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"$non-nls-1$ $non-nls-2$ $non-nls-1$ $non-nls-1$ $non-nls-1$ $non-nls-1$ $non-nls-1$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"insert new line at the end of previous constant"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0000 0000 0001 0000 0000 0010 0000 0000 0100 0000 0000 1000 0001 0000 0000 0010 0000 0000 0100 0000 0000 1000 0000 0000"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if needed, comment out a comma of the previous enum constant"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"removejava2ianamapping"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure that 1) we see only digits and dot separators, 2) that any dot separator is preceded and followed by a digit and 3) that we find 3 dots rfc 2732 amended rfc 2396 by replacing the definition of ipv4address with the one defined by rfc 2373. - mrglavas ipv4address = 1*3digit \".\" 1*3digit \".\" 1*3digit \".\" 1*3digit one to three digits must be in each segment."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create map of public static final field initializers to fields"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this should be the same as the logic in resourceimpl.geteobject(string)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"query - starts with ? and up to fragment or end"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a comment with start position > rangestartpos"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"prepare for createchild item addition or removal. $non-nls-1$ $non-nls-1$"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over the owner list twice, first matching objects from the collection by identity (==), then matching objects by value equality (.equals()). the positions of matched objects in the owner list are recorded, and the objects are stored in the same order. the lists are then merged to form a final, in-order list of objects and corresponding indices in ownerlist. this is very important for undo to interpret the indices correctly. also, this yields exactly one object removed for each object in the collection, with preference given to identity over value equality."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the next line leaves objectsbeforeapply with all the objects that were added during the last recording."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"closing the detail area"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"define gradient (blue to widget background color)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"lastcursor = -1; prepared = 0;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"callers that plan to use this name without appending a suffix should call f.safename(f.getname()) to make sure its not a keyword this is a safe guaranteed uncapitalized form of the name the safe name and cast to eobject, if necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the editing domain with a special command stack."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"validate now since the call we make after will skip validating."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"count up the objects that will be removed. the objects are exchanged to produce this list's order"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for field declarations use variable declaration fragments instead"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert only public static final fields"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the container class must be null for the open content features of the document root to ensure that they are looked up in the actual eclass() rather than assumed to be a feature with a feature id relative to the actual class. otherwise, it's good to have this optimization."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the plugin.properties isn't within the root of the archive, create a new uri for the folder location of the archive, so we can look in the folder that contains it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for demand created created packages we allow the list of classifiers to grow so this should handle those additional instances."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that this is a touch notification so to resource aren't marked as dirty."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"demanddocumentroot(epackage);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"menumanager.insertbefore(\"additions\", new separator(\"schema-actions\")); menumanager.insertafter(\"schema-actions\", generateschemaaction);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"generateschemaaction.setenabled(generateschemaaction.isenabled());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"public list sublist(estructuralfeature feature, int from, int to) { return null; }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"undo the preparation for next and continue."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't create one, too bad."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"\/** * simpler implementation that sets the range of any node to be the node and all preceding comments *\/ public sourcerange computesourcerange(astnode node) { sourcerange range = new sourcerange(node.getstartposition(), node.getlength()); range = extendrangebackward(findleadingcomment(node, getpreviousnode(node), false), range); return range; }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle the last byte at the end."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create jnode and set properties"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the first object is null, the second object must be null."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"suppress default constructor for noninstantiability. private ecoreutil() { }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"list thelist = new java.util.arraylist(); protected list delegatelist() { return thelist; }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"method created to increase the performance of regular expressions by reducing the length of the string that is matched."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"failure to resolve is ignored."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"depending on the action and the current state, we'll toggle the state. i.e., for unset, we need to turn it off if it's on, and for set we need to turn it on if it's off."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"{"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip the dummy null object and test again."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"generatemenumanager.add(new separator(\"schema-actions\")); generatemenumanager.add(generateschemaaction);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we are on the special resource set iterator, and there isn't really a next object at this point..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"finds the next occurrence of one of the characters in the set represented by the given bitmask in the given string, beginning at index i. the index of the first found character, or s.length() if there is none, is returned. before searching, i is limited to the range [0, s.length()]."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"then eobject2 must be that previous match."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create move commands for all the objects in the collection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we know the first object isn't null, so if the second one is, it can't be equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"some character classes, as defined in rfc 2396's bnf for uri. these are 128-bit bitmasks, stored as two longs, where the nth bit is set iff the ascii character with value n is included in the set. these are created with the highbitmask() and lowbitmask() methods defined below, and a character is tested against them using matches()."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if eobject1 and eobject2 are the same instance..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for the first non-xmi element."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check all the values."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"assume from now on that they match."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"match them and return true."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if they don't have the same size, the feature maps aren't equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"value used to suppress visibility."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the values must be java equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this is a feature map..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the first value is null, the second value must be null."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"neither eobject1 nor eobject2 have been compared yet."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since the first value isn't null, if the second one is, they aren't equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it is in a resource, form the uri relative to that resource."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there is no reason they aren't equals."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compare entries in order."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the values aren't java equal, the feature maps aren't equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"equalityhelper"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clockseq_hi"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the node identifier is already in network byte order, so there is no need to do any byte order reversing."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the most significant bit of the first octet to 1 so as to distinguish it from ieee node addresses"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it's a proxy, use that."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we just woke up."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"wait so that the clock can catch up and the time adjustment won't overflow."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"time_hi"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"time_mid"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore if we can't freeze."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this case can only happen if we are reset to a mark and we've got lots of xmlns attributes to write."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"throws saxexception"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the cheapest and most common case."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fall through..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a temporary file..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"add = [\"+newstring+\"]\");"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"deresolve all the uri against the current base uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"javadoc copied from interface"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fall through"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"external schema locations should only be processed once, i.e. in the subsequent parse there is no need to process those again."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"emof.isreadonly = !ecore.changeable"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"saxxmihandler"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore.changeable = !emof.isreadonly"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore whatever was set before."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handler.ignorablewhitespace(ch, start, length);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try to resolve the proxy locally."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we are pessimistic, then we need to undo all the commands that we have executed so far."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"and find the one that holds this proxy."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"implement entityresolver methods"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"implement dtdhandler methods"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"overwrite defaulthandler methods"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the resolved object doesn't contain a reference to the proxy holder as it should."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we won't need to process this again later."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compute the holder of the proxy"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"move the resolved object to the right place, remove the proxy, and we're done."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eatm temporary for debug purposes only."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the proxy needs to be replaced in a way that updates both ends of the reference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"implement lexicalhandler methods"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"at least set the references that we were able to resolve, if any."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set up a deferred extent so the document root we create definitely will not be added to the resource."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eatm demand create metadata."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check for simple feature"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process the new root object if any."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove the document root's information from the top of the stacks."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if externalschemalocations are specified, process these ones as well"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"place the time into the byte array in network byte order."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"time_low"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the command is executable, record and execute it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the new root object is the actual new object since all sign of the document root will now have disappeared."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle namespaces"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this check is redundant -- see handlefeature method (el)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore a whitespace only text entry at the beginning."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try to get a general-content feature. use a pattern that's not possible any other way."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this handles the case of a substitution group."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is for the case for a local unqualified element that has been bound."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we use null here instead of \"\" because an attribute without a prefix is considered to have the null target namespace..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this only works for old globally registered things."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore it if we can't find it since we'll fail anyway."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"extend the array, if necessary"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore since we expect this to fail because of early termination and if there is some other kind of failure, then we'll simply not be able to match the content type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"entry entry = new entry(eobject, containing_feature); return (estructuralfeature)map.get(entry);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"index of writing point index of processing point"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class attributesproxy"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use the pool to retrieve the parser"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlresource.getresourceset().getresources().addall(generatedresources);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"traverse element node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record duplicate declaration for a given prefix (#3)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"release parser back to the pool"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record namespaces in scope"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't read encoding - rely on xml parser to provide one via locator2"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create an simple any type wrapper for the attribute value and use that with the ereference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"true if seen xmlns=\"\" declaration"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handler.resolveentity(publicid, systemid);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlload"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"saxxmlhandler"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we are substituting an eattribute for an ereference..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"once we see a lookup of an element in the null namespace, we should behave as if there has been an explicit xmlns=\"\""}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there really must be a package."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for any content prefix to uri mapping could be in namespace context"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"sort and eliminate duplicates caused by having both a regular package and a demanded package for the same nsuri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"recording a first declaration for a given prefix"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure that the list will appear to be set to be empty."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record default ns declaration as duplicate if seen qname (#1) or seen xmlns=\"\" (#2)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since xmlns=\"\" is default declaration, remove \"\"->empty_uri mapping"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"push context"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"resize array, if needed"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find uri in current context"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"bind prefix to uri in current context"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"prefix not found"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set parser features and properties"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"uri not found"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"caching turned on by the user"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"dom serialization"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for a matching element in the specified packages if there are any."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for a substitution group feature in the classifier's containing package."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set serialization options"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmihandler"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for a substitution group feature in the additional packages."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"getdeclaredprefixat(int):string"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process the super types if that's been specified."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"entities aren't supported for dom."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is no field, then we can't do this."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"value[outputpos];"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process xml attributes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since the cycle is detected by checking if we hit \"this\" again, after many iterations we'll call this method recursively in case we started with something that wasn't part of a cycle but later traversed up to a cycle."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2xmlresourcefactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is a root element"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for performance reasons savenil and saveelement are not used"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process xml elements"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"every codepoint is supported!"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"normal (bmp) unicode code point. see if we know for a fact that the encoding supports it:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we will use an xmi:extension element for these"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ownedproperty???"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"first try to see if this package's implementation class has an einstance."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"go back and add all the xmlns stuff."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the helper part assumes that the summary is likely based on the helper and will change when the helper is set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2^n 2^n-1"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create dummy documentelement"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"avoid a function call..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"write doctype"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert: \\n to line separator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"assume the class isn't available."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"do sorting: \"+this.ranges.length);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"boolean not"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"register default options"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no property no property"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eannotations denoting specific emof elements are serialized as their emof elements. other eannotations are serialized as xmi:extensions."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmi:id xmi:xmi xmi:type xmi:version xmlns:xmi"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"http: \/org\/eclipse\/emf\/ecore\/util\/extendedmetadata"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"token.closure"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlnamespacefactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlnamespacedocumentrootimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert the target node to a compatible node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlnamespacefactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmltypepackage"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"processinginstructiontype"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"simpleanytype"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"{n}"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ret.next is null."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't create anything."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmltypefactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do not validate on load. check validity using diagnostician."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmltypepackageimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"other escaped character."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"starts at \"+index);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"documentrootimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skips characters between '#' and a line end."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skips a white space."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"switch anchor type"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"debug: matchend=\"+matchend);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"non-match in fixed-string search.\");"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"internal use only. the @ always matches line beginnings."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"optimization against the first character."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"debug: with firstchar-matching: \"+this.firstchar);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"case 0x0b: ret = \"\\\\v\"; break;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for closure, question"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"\"u\""}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"op.char"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"cf mn mc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"performs escape encoding on the given string so that it can be represented using 1-byte characters. any characters higher than 0xff are replaced with an escape of the form \\\\uxxxx, where xxxx is the four-digit hex representation of the unicode code point."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"+this.fixedstring"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this pattern has a fixed string of which length is more than one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"modifierop"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"l l l l l n n n mc"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"public parseexception(string mes) { this(mes, -1); }"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"creates unionop\");"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"legacy word characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"range, nrange"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"not overlapped src: o-----o sub: o-----o res: o-----o reuse sub"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0b80..0bff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the page for the table viewer."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"token#substractranges(): entry: \"+this.ranges.length+\", \"+tok.ranges.length);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"overlapped src1: o--------o src2: o----o src2: o----o src2: o----o src2: o------------o"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"src: o--------o sub: o----o res: o-----o reuse src(=res)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"token#addrange(): \"+start+\" \"+end);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"src: o--------o sub: o----o res: o-----o reuse sub"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"not overlapped src1: o-----o src2: o----o"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for union"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"src1: o--------o src2: o----o res: o--o reuse the rest of src1"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"src1: o--------o src2: o------------o res: o--------o reuse src2"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"not overlapped src: o-----o sub: o----o"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"s&0x1f : 0-31"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"count all the bits in the bit patterns up to this one in the sequence of bit patterns."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"in a character class, this.chardata has one character, that is to say, a pair of surrogates is composed and stored to this.chardata."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"\"w\""}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"load the resource through the editing domain. this will create a context and associate it with the resource set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle category escape"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this.setlocale(locale);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skips '.'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"x? -> x|"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"through down"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the one object in the resource's extent should be the root object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"conditional this.offsets points the next of '('."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"options"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tok = token.createconcat(tok, this.parsefactor());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"'-' or ':'?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create message"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"parses yes\/no-patterns."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this.offset points the next of '('"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"parses a condition."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"'(?:' '(?(' (?modifiers ... )"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"such as (?-i)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"{min,max}"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"separate fields with an empty line"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this.offset -> next of '{'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"save the resource to the file system."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the value at the previously allocated index and return the previous value there."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0b00..0b7f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a cached result, return it. we expect that if the package is set to be a proxy, the code in epackageimpl.esetproxyuri override will have cleared this value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"***** really?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2xmladapterfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we turn the package into a proxy, ensure that the child classifiers clear their cached container."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"'^'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if not shorthands... here is no '-'."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"*** it is not a bug."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"update the workbench's knowledge of the file's contents."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"20d0..20ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"**** we can not optimize."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"infinity"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"when this.child.getmaxlength() < 0, this returns minus value"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"blocknames in unicode 3.1 that supported by xml schema rec"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0980..09ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0080..00ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0000..007f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0250..02af;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the page for the table tree viewer."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0900..097f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip if there's an equality filter and the values aren't equal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0180..024f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0100..017f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0780..07bf;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the methods were matched by a process that doesn't consider the parameters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"02b0..02ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0700..074f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0300..036f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for the annotation with the matching source."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can't find the class, so we don't want this class loader, but instead want the last result that was able to load the class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't push method annotations into redirected methods."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a resource for this file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0530..058f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this just notifies those things that are affected by the section."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0370..03ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0400..04ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2440..245f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0c80..0cff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0c00..0c7f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensures that this editor will only display the page's tab area if there are more than one page"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1780..17ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0e80..0eff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0d80..0dff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0e00..0e7f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1100..11ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0f00..0fff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1000..109f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1400..167f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"10300..1032f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"13a0..13ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1200..137f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"20a0..20cf;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1800..18af;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2400..243f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1f00..1fff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1e00..1eff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2300..23ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2200..22ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2150..218f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2e80..2eff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2580..259f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"search the local scope for a resolution of the type parameter name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2460..24ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the source and target jcompilationunit."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the instance type name instead, since that will also set the instance class name but this way will make undo restore the current instance type name correctly"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2800..28ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"25a0..25ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"you can only add type arguments if there are type parameters not yet used up."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only if you are contained by a generic type can you have bounds, and only if there is no classifier or type parameter and in that case the lower bound is returned only if that's the one that's set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"apply changes using astrewrite"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2700..27bf;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"3130..318f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't use the normal reference copying for eopposite."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"write a signature that will be obviously corrupt if the binary contents end up being utf-8 encoded or altered by line feed or carriage return changes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the list is empty, we need to add all the objects, otherwise, the reference is bidirectional and the list is at least partially populated."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if an input stream can't be created, ensure that the resource is still considered loaded after the failure, and do all the same processing we'd do if we actually were able to create a valid input stream."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"3000..303f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"apply additional edits like replacing or commenting out nodes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2f00..2fdf;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"build a list of the keys"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do the extent processing that should have been done for the root but was actualljy done for the document root."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"3040..309f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"31a0..31bf;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"replace existing insertedit at this position (case when previous node ends at the same position that current node starts at)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"3100..312f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"30a0..30ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"feff..feff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ac00..d7a3;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"reserve a place to insert xmlns declarations after we know what they all are."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"3200..32ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fe50..fe6f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a490..a4cf;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"3300..33ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"4e00..9fff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fe30..fe4f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create and try to add dummy edit to find the replaceedit this should be faster than lookup since underneath of addchild() binary search is used"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"f900..faff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"e000..f8ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fe20..fe2f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fb00..fb4f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"\\pm* \\pm + \\pm"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2f800..2fa1f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"20000..2a6d6;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1d100..1d1ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"10330..1034f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"1d000..1d0ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"z"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"e0000..e007f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for all characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we're creating a child under an object in a feature map, the selection will be the feature map entry. we want to replace it with the model object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"missing 2 private use add manually"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"84"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"'['"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"x+ -> xx"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"exit this loop"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"[{assigned}]-[{m},{c}]"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add it to the list and remove it from the other list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"doing this just makes focus go to the default control, not the control that last has focus. super.setfocus();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"commands should operate on the values, not their wrappers. if the command's values needed to be unwrapped, we'll back get a new commandparameter."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"synchronized if null"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"lu ll lo"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"lu ll lo nd"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"subraction"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"hangul_medial and hangul_final extras"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is concat, and new child is concat."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"base_char?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"replace previous token by string"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"system.err.println(\"merge '\"+previous+\"' and '\"+tok+\"'.\");"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"crriage return u+000d"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"\\ + c backsolidus"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"line feed u+000a"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if not shorthands..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if - is at the last position of the group"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"here is no '-'."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"c '-' ']' -> '-' is a single-range."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return actucal char"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"horizontal tabulation u+0009"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"recursion"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"found '-' is this '-' is a from-to token?? skips '-'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add the binding to the provided hash table:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the copy"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"should never happen"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"2070..209f;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we didn't find authority we need to back up. attempt to match against abs_path next."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if we found a resolution for it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, recursively call ourselves to substitute it in context if necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"unassigned"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add back in the array indices if there are any."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"one pad e.g. 3cq[pad]"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just import the name or use it directly."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"build table of pi values"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fe70..fefe;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if the host is a valid ipv6reference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0a80..0aff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"load the model and if it's not one already considered, e.g., a local version in the workspace, process its genpackages."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if they are pad characters two pad e.g. 3c[pad][pad] last 4 bits should be zero"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"0600..06ff;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iviewpart view = getviewpart(); titlelabel.settext(view.gettitle()); titlelabel.setimage(view.gettitleimage());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we don't already have it, try to get the source early. we can't give feedback if it's not available yet (this is platform-dependent)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"adding new aliases as proposed in http: lists.w3.org\/archives\/public\/ietf-charset\/2002julsep\/0058.html"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"form integral number of 6-bit groups"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this implementation was changed to not introduce multi line content."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"getiana2javamapping(string):string"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"encodeddata[encodedindex] = 0xa;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"should be divisible by four"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove white spaces"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add support for cp1252 and its friends"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this came from trial and error, yielding decent results on all platforms. it should be consistent with activate()."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"count characters that's not whitespace"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no pad e.g 3cql"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"proposed addition (see above for details):"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"format validation this class encodes\/decodes hexadecimal data @author jeffrey rodriguez"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"give up if we couldn't create the command; otherwise, use a commandactiondelegate to set the action's text, tool-tip, icon, etc. or just use the default icon"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"titlelabel.setbackground(null, null); titlelabel.setforeground(null);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add ascii letters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"presence of the host (whether valid or empty) means double-slashes which means generic uri"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"removeiana2javamapping(string):string"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"putiana2javamapping(string,string)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add ascii digits and ascii hex numbers"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"rfc 2732 added '[' and ']' as reserved characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"revisit: j:cns11643 -> euc-tw? iso-2022-cn? iso-2022-cn-ext?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class encodingmap"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"public static methods"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set rewriter on the new node"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add path characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add scheme characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add reserved characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add mark characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just use null."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"authority will be everything up to path, query or fragment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find insertion point from returned result (-(insertion point) - 1) commentindex is the index of the first element with end position > rangeendpos"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"6a - get all but the last segment of the base uri path"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check for absolute path - rfc 2396 5.2 #5"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"assume {min,}"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"userinfo is everything up to @"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"6c - remove all \".\/\" where \".\" is a complete path segment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"6b - append the relative uri path"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"port"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"6d - remove \".\" if path ends with \".\" as a complete path segment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"host is everything up to last ':', or up to and including ']' if followed by ':'."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if the host is well formed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check that userinfo is well formed if it exists."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"points '('."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"':'?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"scan path. abs_path = \"\/\" path_segments rel_path = rel_segment [ abs_path ]"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"scan opaque part. opaque_part = uric_no_slash *uric"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fragment - starts with"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check that that there are no more than three digits in this segment."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"hostname = *( domainlabel \".\" ) toplabel [ \".\" ] domainlabel = alphanum | alphanum *( alphanum | \"-\" ) alphanum toplabel = alpha | alpha *( alphanum | \"-\" ) alphanum"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"constants"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"rfc 1034: labels must be 63 characters or less."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"domain labels can contain alphanumerics and '-\" but must start and end with an alphanumeric"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"registry based authority."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if string is a potential match for ipv6reference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) 49"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check that this segment is not greater than 255."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"address must contain 128-bits of information."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 15 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"scan hex sequence before possible '::' or ipv4 address."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"hgd::firenotifychanged(msg.getnotifier(), msg.geteventtype(), msg.getfeature(), msg.getoldvalue(), msg.getnewvalue(), msg.getposition());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"trailing zeros will fill out the rest of the address."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"3. scan hex sequence after '::'."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this could be '::'."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"which ascii characters need to be escaped"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there can be at most 4 hex digits per group."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for non-ascii character: make it positive, then escape"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for each byte"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we saw some non-ascii character"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if encoding happened, create a new string; otherwise, return the orginal one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"paint over the selected padding spaces with the background colour. on gtk, the whole item, not just the text, is selected, so we don't do this."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for each character in the anyuri"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isvalidname(string):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 6 of value (byte) 49 fill 2 of value (byte) -71"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 71 of value (byte) -19 fill 2 of value (byte) 33 fill 5 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 53 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 8 of value (byte) 33 fill 23 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 26 of value (byte) -3 fill 60 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"hgd::firenotifychanged(msg.getnotifier(), msg.geteventtype(), msg.getstructuralfeature(), msg.getoldvalue(), msg.getnewvalue(), msg.getposition());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackage epackage = ((functionnamepair)msg.getnotifier()).epackagemapping();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 20 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 10 of value (byte) -71"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 44 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for ecore or something that explicitly extends it, we need to exclude eobject, which is already handled by the default case"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 10 of value (byte) -19 fill 8 of value (byte) -87 fill 13 of value (byte) 33 fill 10 of value (byte) -87 fill 6 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 7 of value (byte) -19 fill 3 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we assume that the rootextendsclass already implements it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 12 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there needs to be another url protocol right after the archive protocol, and not a \"\/\"."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 66 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 31 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 36 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there is anything else but comma after constant - insert line break"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 23 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"when an object is controlled, the only change will be in the new resource's contents, so it must refresh the whole viewer to hit the object's label."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 15 of value (byte) -87 fill 2 of value (byte) -19 fill 2 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since enum constants are separated by commas, they should always have the default range we can not extend their range or reduce it"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 53 of value (byte) -19 fill 2 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"stop if the next item will be out the event bounds. the event bounds values are also misaligned on gtk."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if given node should use the default range (i.e. node removed), or extended range (i.e. surrounding nodes removed)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"'|'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) 33 fill 4 of value (byte) -19 fill 2 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 7 of value (byte) -87 fill 2 of value (byte) 33 fill 2 of value (byte) -87 fill 2 of value (byte) 33 fill 3 of value (byte) -87 fill 9 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 8 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) 33 fill 6 of value (byte) -19 fill 4 of value (byte) 33 fill 2 of value (byte) -19 fill 2 of value (byte) 33 fill 22 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) 33 fill 2 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 5 of value (byte) -19 fill 2 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 22 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) -19 fill 2 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 7 of value (byte) 33 fill 12 of value (byte) -87 fill 3 of value (byte) -19 fill 12 of value (byte) 33 fill 3 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 6 of value (byte) -19 fill 3 of value (byte) 33 fill 3 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) -19 fill 4 of value (byte) 33 fill 5 of value (byte) -87 fill 3 of value (byte) 33 fill 3 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) -87 fill 9 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 8 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"go directly to the right entry in the zip file, get the stream, and wrap it so that closing it closes the zip file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) -19 fill 7 of value (byte) -87 fill 5 of value (byte) 33 fill 6 of value (byte) -19 fill 9 of value (byte) -87"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"build list of wrapped children from the appropriate adapters."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 5 of value (byte) 33 fill 3 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"firenotifychanged(msg.getnotifier(), msg.geteventtype(), msg.getfeature(), msg.getoldvalue(), msg.getnewvalue(), msg.getposition());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this entry isn't the end marker and isn't the matching one that we are replacing..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 10 of value (byte) -87 fill 39 of value (byte) 33 fill 2 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"as is."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"simple cases: no mix-ins for no inheritance or for a single base class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mix-ins are everything after the base class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is for the in2out feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"strips an escaped white space."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try to transfer it by reading the contents of the temporary file and writing them to the output stream of the delegate."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this is class has mixed content, the mixed feature should always be included, even if inherited, and come first."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 6 of value (byte) 33 fill 4 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add all other create child features that this item provider is responsible for."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 2 of value (byte) 33 fill 5 of value (byte) -19"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"either execute or redo the command, as appropriate."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 8 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isspace(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 4 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 40 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 7 of value (byte) -19 fill 40 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 9 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip over the command that threw the exception."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is for the out2in feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ismarkup(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only return the feedback for an executable command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iscontent(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is kind of tricky. if the saveindex was in the redo part of the command list which has now been wiped out, then we can never reach a point where a save is not necessary, not even if we undo all the way back to the beginning."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 7 of value (byte) -19 fill 211 of value (byte) 33 fill 13 of value (byte) -87 fill 4 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isinvalid(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 3 of value (byte) 33 fill 2 of value (byte) -19 fill 2 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isvalid(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isncnamestart(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return whether there is a list, the value is in the list, and index is in range..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isname(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"replace arguments that match the name of the fields with the initializer value of the field"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isnamestart(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isvalidianaencoding(string):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isncname(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"encodings"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"[5] name ::= (letter | '_' | ':') (namechar)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ispubid(int):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"[7] nmtoken ::= (namechar)+"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"from the namespace rec [4] ncname ::= (letter | '_') (ncnamechar)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"isvalidncname(string):boolean"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the range so that we re-check when we get into the other half."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"order constants"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"class xmlchar"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"interface typevalidator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this looks like a feature getter, a kind property will allow it to be recognized properly."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"indicate that initializer has been changed (required to not overwrite initializer if variables are split later)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove from by position in reverse order."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keep comments between nodes when removing or moving nodes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"type parameter casts can't be checked."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"break the cycle."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this ensures that we are dealing with actual mof objects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the character is in the range 0x30 ~ 0x39, return its int value (0~9), otherwise, return -1"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"actionbar.setbackground(workbenchcolors.getsystemcolor(swt.color_widget_background)); systembar.setbackground(workbenchcolors.getsystemcolor(swt.color_widget_background));"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2xmlswitch"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check whether there is an opposite that needs attention."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"6e - remove all \"<segment>\/..\/\" where \"<segment>\" is a complete path segment not equal to \"..\""}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the byte is automatically widened into an int, with sign extension, for shifting. this can introduce 1's to the left of the byte, which must be cleared by masking before looking up the hex digit."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"buttoncomposite has to be the first child of composite because subclasses are expecting this."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is to handle a genmodel produced by rose2genmodel."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the object is an input or output object, then use it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process the children recursively."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill 5 of value (byte) -19 fill 41 of value (byte) 33"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"common to all uri types."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove variables since the plugin.xml should provide the complete path information."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look for a single-char work delimiter:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"simpleanytypeimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"oldwidth = table.getclientarea().width;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the lower-cased schemes that will be used to identify archive uris."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"special segment values interpreted at resolve and resolve time."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"consult the generator option for backwards compatibility."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"optimize the performance of applying the import regular expressions locating the last import line"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't do replacement if we just did one, or if previous line ended with a semicolon."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't do replacement if previous line ended with a comment."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the upper half bitmask for all the ascii characters in the given string."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can't undo it, so we'd better give up."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the path isn't within the root of the archive, create a new uri for the folder location of the archive, so we can look in the folder that contains it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"platform.resolve() doesn't work if the project is encoded."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there must be at least one archive path."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there should be at least one archive separator per scheme."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"parse to extract the archives that will be delegated to the nested url based on the number of schemes at the start."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip a scheme for the archive accessor to be handled directly here."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the delegate url."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the cutoff point to the next archive."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"missing specials add manually 84"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"construct the input stream in a special efficient way for case of a file scheme."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just get the stream from the url."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the name to be used for the entry."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip over this archive path to the next one, since we are handling this one special."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"loop over the archive paths."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the entry name to be matched."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"wrap the input stream as a zip stream to scan it's contents for a match."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skip to the next archive path and continue the loop."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the delegate url"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record the input and output streams for closing in case of failure so that handles are not left open."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the most deeply nested output stream that will be returned wrapped as the result."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a buffer for transferring archive contents."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the name that will be used as the archive entry."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"wrap the current result as a zip stream, and record it for loop-based recursion."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"loop over the entries in the zip stream."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"transfer the entry and its contents."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find the next archive path and continue \"recursively\" if there is one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the java literal expression for the value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create no entry since we are deleting and return immediately."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that it won't be closed in the finally block."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"result = new xmlresource.xmlinfoimpl(); result.setxmlrepresentation(xmlresource.xmlinfo.unspecified);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"wrap the deepest result so that on close, the results are finally transferred."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure we close only once."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"close for real so that the temporary file is ready to be read."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure they are closed no matter what bad thing happens."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"close in case of failure to complete."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"close if we created this."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are some..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the termination guard is in the body."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, produce an expression that uses the appropriate factory to create a value from the literal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"src: o--------o sub: o----o res: o-o o-o reuse src(=right res)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the location indicates after, add one more."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now is the best time to record isundoable because later we would have to do all the executes again! this makes canundo very simple!"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't execute this one, we just can't do it at all."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the most recently processed command will never have been executed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we want to unroll all the effects of the previous commands."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate back over the executed commands to undo them."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clear the list past the top."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this owned object is one from the collection..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"oldvalue = owner.eget(feature);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record the successfully executed command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"extend to include the comment at the same line as the position if there is nothing between the position and the comment"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note that string place holder adjusts indentation to correct this trackandreplace method is used below"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this forces issaveneded to always be true."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only if we are at the remembered index do we not need to save. return top != saveindex;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clear the list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iri = iri || containsnonascii(segments[i]);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remember where we are now."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the default return value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<p>a valid query may be null or contain any allowed uri characters."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compute the generatordata for the given object and its children, then for the parents of the given object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the base package isn't set but there is a parent package, us it's information instead."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmltypevalidator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackage epackage = ((complextypeconverter)object).epackagemapping();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmltyperesourceimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that the map for ecore is not repeatedly populated and that property maps to ereference rather than eattribute."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate forward over the undone commands to redo them."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this ensures that these useless state variables at least reflect the right value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"copy to a list and allocate positions."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"give all generator adapters the chance to do tear down."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ignore derived features."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"end setting whole list"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we aren't simply removing all the old values..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine the values that will remain and move them into the right order, if necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are values to remove, append a command for them."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"look through all the references..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"is the feature an attribute of the owner..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't set the type if it's already set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"((value != null)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add the collection"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the owner's meta object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(value == null) && (oldvalue != null) remove owner from the old value and unset if necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the classifier of an references's generic type must be a class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(value == null) && (oldvalue == null) a simple set\/unset will suffice."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"specify the exact parent of annotations"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is an owner."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"((value != null) && (oldvalue != null)) need a compound command to remove owner from old value and add it to new value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(value != null) && (oldvalue == null) add owner to new value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for consistency, we always set 1-1 container relations from the container end."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for a 1-to-1, we can directly create a setcommand."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the container is not being put into a contained object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can try to do a drop on instead."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"current document reference: use base path and query"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if must be of this type then."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"string getcappackageid(); includes features in other packages that delegate to those in this one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the other end is single, then we should unset the owner from the old value's opposite feature so that undo will put it back."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if any objects are matched."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the package in which this feature is defined returns the name of the feature get method in the package interface (e.g. company_name) returns the name of the feature get method in the package interface (e.g. xyz.einstance.getcompany_name)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"either set or unset the feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it must be an unsettable feature to be null and considered set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the bounds so that we re-check when we are closer to the middle."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if it's a feature map, we'll need to validate the entry feature and enforce its multiplicity restraints."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"either set or unset the old value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'd like the owner selected after this undo completes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check that the object isn't already in a unique list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check type of object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check each object..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove the collection from the list by index."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we could do a drop insert operation..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if one is null, they'll all be null"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"possible scope for the changerecorder"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the location is near the boundary, we'll start by trying to do a drop insert."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"boolean isgenerateeditplugin(); boolean isgenerateeditorplugin();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there isn't something obviously wrong with the arguments..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'll default to this."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create commands to create copies of the children."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"prepare the right type of operation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the feedback is set based on which half we are in. if the command isn't executable, these values won't be used."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'll always be wrong for these arguments, so don't bother re-checking."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we are near the middle, so we'll start by trying to do a drop on."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can reset and try a drop insert instead."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can do a drop on operation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try to create a specific command based on the current desired operation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"when we match the owner, we're done."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't determine the parent."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the dragged objects share a parent..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the name of the model."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"and add the copy."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"copy the collection"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we don't want to copy insert an object before or after itself..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just remove the objects and add them."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if optimize if collection"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this can execute if there is an owner list and a collection and the owner list contains all the objects of the collection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't set the collection, try setting use the single value of the collection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add the value back in the right place."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine if the operation is executable."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clean it up."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the range so that we re-check when we get aren't in the middle."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the operation has changed significantly..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"reset as in the constructor."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"thread.dumpstack();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove the collection of replacements."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only return the operation for an executable command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"just return the cached result."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"insert the collection at the right place."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure each object conforms to the type of the feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"an extent allows anything to be added."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record the position of the value in the owner list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the bounds so that we re-check when we get near the other end."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'd like the replaced selected after this undo replace completes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the arguments again."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a strict compound command to do a copy and then add the result"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we need to check canexecute() here in case prepare() went down the \"optimize\" path."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this will actually execute the copy command in order to check if the add can execute."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a command to copy the clipboard."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this will determine canexecute as efficiently as possible."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a proxy that will create an add command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record the index."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove the object from the collection and add it to the equality list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"always include fragment, even if null; no validation needed since all components are from existing uris"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove the object from the collection and add it to the identity list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if either list is empty, the result is simply the other."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'd like the owner selected after this remove completes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"merge the lists."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"object iterators."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"allocate list and array for objects and indices."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"second pass: match by value equality."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create view form. control = new viewform(parent, getstyle());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this will execute the createcopycommand's and then call canexecute on the initializecopycommand's."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create commands to create the copy object(s)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record it for execution."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create an initialize copy command for each of the created objects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a column object, just convert it to a string."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this will call prepare() which will partially execute the command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a command to create a copy of the object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if command has no owner specified"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the owner parameter is set, we delegate to the owner's adapter"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is an adapter of the correct type..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"functionnamepairimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"does this part provide an editing domain?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"actionbar.setbackground(workbenchcolors.getactivegradientend()); systembar.setbackground(workbenchcolors.getactivegradientend());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingfactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove and dispose any wrappers for remaining old children."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"complextypeconverterimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappinghelperimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the mapper to build an xsd2ecoremappingroot, if available."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we will iterate over the whole collection, removing some as we go."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingstrategyimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"treeswitch"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"take the first object, and remove it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the next object and check if it has the same parent."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the parent is null, which implies a top-level removal, so create a self-removing command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we will now create a command with this implied parent"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove the object and add it as a sibling."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"protected object labelprovider;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if no object is specified, but an existing sibling is, the object is its parent."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return getdefaultvalue(attribute.getetype());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if any children were added or removed, reset the indices."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this uri handler redirect the uri based on the mapping."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this handles istructuredselection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we need to check canexecute() in case optimize is true."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add in additional wrappers to search."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"computes a three-character escape sequence for the byte, appending it to the stringbuffer. only characters up to 0xff should be escaped; all but the least significant byte will be ignored."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are objects to populate..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill in the result array with labels and re-populate the original list in order."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no color is a good default."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no font is a good default."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, we could check that the adapter implements interface iitemfontprovider."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns <code>true<\/code> if this uri contains non-ascii characters; <code>false<\/code> otherwise. this unused code is included for possible future use..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"public string getupdateabletext(object object)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over all the set feature to factor each child to the right reference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check that the value is type compatible with the entry feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"functionpairimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"when the value is changed, the property sheet page doesn't update the property sheet viewer input before refreshing, and this gets called on the obsolete wrapper. so, we need to read directly from the model object. return needsencoding(feature) ? encode((string)getentryvalue()) : getentryvalue();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackage epackage = ((mappingroot)msg.getnotifier()).epackagemapping();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the last object was deleted and the selection was in the property sheet view, the obsolete wrapper will reference past the end of the list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill in the array with labels."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"resourceset resourceset = (resourceset)object; childrenfeatures.add(resourcepackage.einstance.getresourceset_resources());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"first, try an existing implementation of getchildreference(). this provides backwards compatibility if that method, now deprecated, was overridden."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use an existing getreferencevalue() override."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this object is compatible with this reference..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the index into the list via this call to super."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find the index of a feature containing the sibling, or an equivalent value, in the collection of children features."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackage epackage = ((functionnamepair)object).epackagemapping();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmltypefactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add child descriptors contributed by extenders."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the index of the object value in the list via this call to super."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"build the collection of new child descriptors."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can open an input stream, then the plugin.properties is there, and we have a good base url."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for each commandparameter with a non-null, multi-valued structural feature..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure there are no extraneous style bits."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"anytypeimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"assign default style bits, if necessary, and ensure none conflict."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"spacetype"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlnamespacevalidator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find insertion point from returned result (-(insertion point) - 1) commentindex is an index of the first element that has start position > rangestartpos"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, if a sibling feature was found, iterate through the children features to find the index of the child feature..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterator over all the child references to factor each child to the right reference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the child feature follows the sibling feature, the child should be first in its feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"subclasses may override to add descriptors."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlnamespacepackageimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are no groups defined or matched, but the whole pattern matches, then markup nodes with pattern name"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"is this child in this feature..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"on motif, selection color may be set as background."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"is this object in this feature..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the help context id for this property."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"restore original resource uri values."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if all the objects are used up by the above, then we can't do the command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a command to set this to null and remove the object from the other list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it's just a single value"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"consume the rest of the appropriate children."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the \"suffix\" can actually be a substitution pattern for the package name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"correct the index, if necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a command for this feature,"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compute the relative index as best as possible."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue to next case"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"dispose the child wrappers."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"all this logic is so that we only create a list if the adapter is set to more than one target."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlnamespacepackage"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we can enable the action as indicated by the command, and we can set all the other values from the command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we have resolved to an eclass but we have an eattribute, we can change it to be an ereference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"treeadapterfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"unwrap value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the adapter factory is composeable, we'll adapt using the root."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if a new collection was allocated, continue to populate it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create rewriter to record changes"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"treenode"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"delegate the action for this object to the editing domain."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"draw the extra first-column image."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the table is indenting, draw tree lines."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"private final boolean iri; private uri cachedasciiuri;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"is this the label feature?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"case resource.resource__is_modified: case resource.resource__is_loaded: case resource.resource__is_tracking_modification: case resource.resource__resource_set:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"is this a containment reference child?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this ensure that this package itself is traversed even if the reference type is eobject..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"or a feature map child?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"overlay if the resource is the target for any controlled objects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't include controlled children here, they'll show up under their container."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"resource resource = (resource)object; childrenfeatures.add(resourcepackage.einstance.getresource_contents());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"treefactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"treepackage"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"treenodeimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we have a good editing domain..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"treepackageimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this guard is for extra security, but should not be necessary."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we will only deal with structured selections."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a new one..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use up the command. note that notification will cause a new command to be created."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"treefactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no point in keeping garbage."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we just can't do it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fill with background."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only handle structured selections"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add the edit menu actions."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try to get editing domain from workbench part"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"show the colourless image."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we found an editing domain, create command"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert the selection to a collection of the selected objects"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"allocate the new collection, and populate it up to this point."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the editing domain wasn't given by the workbench part, try to get it from the selection"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add our standard marker."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the first wrapped value is found..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use up the command"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackage epackage = ((functionpair)object).epackagemapping();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we use multi even for a single line because we want to respond to the enter key."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remember the requested operation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are delegated features, add only those that aren't already in this package to the end of the list."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"grabhorizontal = true;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackage epackage = ((functionpair)msg.getnotifier()).epackagemapping();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add our other standard marker."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clear the source data. we won't need this again, since, if it was available, it's already in the command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ensure that all proxies are resolved so that references into the controlled object will be saved to reference the new resource."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"cache the tree path for each object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"dropdown.addlistener(swt.paint, dropdownlistener);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is here only to support deprecated adapt(object) rather than adapt(object, interface.class). supportedtypes.add(null);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"seteditor(null, null, -1);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"event is null when featuretableviewer is double clicked"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"event is null when choicetableviewer is double clicked"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this should be consistent with paintcontrol()."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"supportedtypes.add(iupdateableitemtext.class);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"draw 3d effect on right-side button."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"draw outline."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fb ?????"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"draw down arrow, offset if dropped."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"draw background of right-side button."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.jface.window.window#configureshell(org.eclipse.swt.widgets.shell)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is for the helper feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"execute it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if so, revalidate the command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"draw the text."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the command can execute..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a command was created if the source was available early, and the information used to create it was cached..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't do anything else, we'll provide the default select feedback and enable auto-scroll and auto-expand effects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is for the typemapping feature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clean up the state."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise, let's call the whole thing off."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clear out any old information from a previous drag."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"recreate the command."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if the cached command can provide dnd feedback\/revalidation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"fix:::"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create composite"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remember the target; create the command and test if it is executable."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keep track of any changes to the command information."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we are not generating the manifest file if the plugin.xml exists."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we don't have a previous cached command..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this command can provide detailed drag and drop feedback..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do this here because setting the text will set enablement on the ok button"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if not, dispose the current command and create a new one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use it for the operation and drag under effect."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"functionpair"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"transfer the data and convert the structured selection to a collection of objects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check whether the current data type can be transfered locally."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"transfer the data and, if non-null, extract it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over the data types to see if there is a data type that supports a local transfer."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there was no old input, then we must be providing content for this part for the first time..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"| griddata.grab_vertical"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"walk the project looking for .java files to analyze."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"case notification.touch:"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the input to the widget."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"n2.islabelupdate()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"previously, we never updated the viewer on a resolve. now we post and merge it as appropriate."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"firelabelproviderchanged();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we ignore non-changes for now."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the index was previously assigned, return it. otherwise, return a negative result that encodes the newly assigned index."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add a dummy genmodel for referenced packages."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"escape a string that will terminate the comment in which this will all be nested."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we set it and get back the interned string. this way, when instanceclassname == instancetypename we know we should serialize only the class name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we also need to set it on any genmodels holding any used or static packages that may be refered to."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"private static final long scheme_char_hi = alphanum_hi | highbitmask(\"+-.\"); private static final long scheme_char_lo = alphanum_lo | lowbitmask(\"+-.\");"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"???"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the model project."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"determine which projects will need to be referenced."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no property no property no property"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create resources for all the root epackages."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the class is not available."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"nested genannotations"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"removing the first space"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"subclasses may overwrite"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle application genmodel stub"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create resources for all the referenced epackages the referencedepackage is a \"local\" instance of the realepackage. we will add the former to a resource that has the same uri of the later."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"initialize the genmodel with all the computed data."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now we should sort."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"compute the closure."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for arrays, consider the element type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert reference to attribute if its type is an edatatype..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clean up the temporary container annotations for holding map entry classes until they are for sure needed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now we need to hook up opposites by finding the named feature in the type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"restore all configured settings from the original."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"now we need to hook up keys by finding the named feature in the type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"copy the children references"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"keep only the plugins that have genmodels for consideration."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over all projects to look at the manifests."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"also add each required plugin for consideration in the loop."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the epackage on demand."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check whether this has @model annotation contents."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"match them and accumulate the appropriate result."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"use no encoding"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a generic super type with an eclass as the classifier for each super interface in the java representation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the class address was not equal, so we don't want this class loader, but instead want the last result that was able to load the class."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check whether this has @model annotation contents. if not, it might be a package interface, for backwards compatibility."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the package name and see if there's an epackage for it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it's definitely a package if it was declared as such."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"additional attributes and references may be defined directly on the interface in order to allow the get accessor method to have suppressed visibility."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"walk the methods."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this will catch inherited features, or additional things we don't want to worry about."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find packages and factories"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"otherwise it's treated as an eenum"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"platform.getbundle(element.getnamespaceidentifier()).loadclass(contributorclassname);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"handle the type, multiplicity and other etypedelement attributes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"each token in parameters will specify a datatype for the corresponding parameter, but can be overridden by a parameter-name-prefixed datatype property."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the name is extracted and lower cased."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"7 is the size of (object"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the feature name is extracted lower cased."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map to an eenum."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"drop the _ separators and normalize the case."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the eattribute attributes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"each token in exceptions will specify a data type for the corresponding exception."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we'll create one of these."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the ereference attributes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if any of these attributes appear, this must be a reference."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the visibility annotations for the estructuralfeature."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process the annotations."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the estructuralfeature attributes."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"check if it is exactly the name of a type parameter that's in scope."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"allow a distinct literal value to be provided, too."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the type can be augmented by specifying the it explicitly in the annotation. this mostly makes sense only for many-valued typed elements, where the java type is a list and the item type needs to be specified."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"continue with default processing"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"allow the value to be defined by an annotation or by the field's initializer"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we want to resolve to this."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the lower half bitmask for all ascii characters between the two given characters, inclusive."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"but, if name doesn't expand into field name, ignore it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the upper half bitmask for all ascii characters between the two given characters, inclusive."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"allow a mixed case version of the name to be provided."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns the lower half bitmask for all the ascii characters in the given string."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't find it, try the simple name in the package..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this could potentially map every created model element to its corresponding rose node. however, for now we're only using it as needed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find an explicit import or the first wildcard import."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no caching"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we still don't have one, we'll have to settle for an edatatype or eclass with an instance class name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find the modeled package for the name and look up the name there."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a resource set and load the model file into it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the package not in a .cat file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"see if we already have the edatatype."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the package is in a .cat file."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it's okay for there not be a precompiled template, so fail quietly. exception.printstacktrace();"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns whether the given character is in the set specified by the given bitmask."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we still don't have one, we'll have to settle for a demand created edatatype or eclass, so create a new eclassifier with a nice unique name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we don't have one yet, maybe it's one of the special types..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"converts null to length-zero array, and clones array to ensure immutability."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are any warnings other than raw type warnings, include all the warnings."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for the model information."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"avoid classifier name collisions."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make array names legal."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the parent object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"even primitives should be represented by a data type with a conventional (i.e. capitalized) name."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add to package."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map to an epackage."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"node is not marked up by now, but keep checking other rules"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map to an edatatype."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map to eattribute, or eenumliteral."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map to an eparameter as input parameter for operation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add to an eclass"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map to an eoperation."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if not we'll erase it to java.lang.object."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"alternate, stricter implementations of the following validation methods are provided, commented out, for possible future use..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ereference.setnavigable(rosenode.isnavigable());"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we will need to check the containment if we have to convert the eattribute to an ereference later."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<p>a valid scheme may be null, or consist of a single letter followed by any number of letters, numbers, and the following characters: <code>+ - .<\/code>"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"5 is the size of (list"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"load the schema and packages that were used to load the instance into this resource set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"try to retrieve the fully qualified name of the specified type..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"qualify type name if not already qualified..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove garbage characters..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert to dot-separated format if necessary..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"store the base name for relative .cat file references."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"order first by number of features (descending) and then alphabetically (ascending)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"iterate over the whole tree to do this."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"default value"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we treat the feature as volatile if it is volatile itself or if it is a reference whose opposite end is volatile, unless that opposite volatile reference delegates to a feature map, in which case, a full implementation of the references can be generated."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove zero width non-breaking space, which may be used as a byte order marker, and may be ignored according to the unicode faq: http: www.unicode.org\/unicode\/faq\/utf_bom.html#38"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a container must be transient."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"temporary was\/wsad migration option."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"it was not found in the model class so check if primitive type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"setup attribute and parameter type"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"convert attributes of with eclass type to references."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"read mdl file..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"file is a mdl file get model name"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"special case, traverse cat file or mdl file"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"could this happen?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map properties even when istreeonly == true"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"directoryname.length() > 0 && directoryname.charat(0) == '$')"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"size should be 1"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create a resource for this file. don't specify a content type, as it could be ecore or emof."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"top++;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no additional features mappingstrategy"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"record the records for the executed commands on the stack."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"map to ereference when is navigable"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"process the contents of the extent"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this will not add duplicates."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this sets the parent so that the nodes can traverse to the root to find default ecore settings."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"load the rose .mdl or .cat file, and create mappings for the objects."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"only one open quote."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"start second traverse to create mapping objects in memory."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"put all static package in the package registry."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"complextypeconverter"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the path of the target directory."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingpackage"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"no additional features typeconverter"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappinghelper"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"functionnamepair"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do we also have some non-input objects to copy?"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingroot.epackagemapping().getmapping_inputs() : mappingroot.epackagemapping().getmapping_outputs(),"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for each mapping being removed..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingroot"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since input objects are read-only, we don't need to make a copy of them for the clipboard. we can just put a pointer to the original object(s) on the clipboard."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"make sure the back pointers to this mapping from the mapped objects is set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a valid authority may be null or contain any allowed uri characters except for the following: <code>\/ ?<\/code>"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"copy the name"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add any remaining object-index pairs from either set."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"resource resource = ecoreutil.geturi(refobject).; fix:::"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"<p>a valid path segment must be non-null and may contain any allowed uri characters except for the following: <code>\/ ?<\/code>"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.mapping.action.addroottopaction#gettopstoadd()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"searches the specified string for any characters in the set represented by the 128-bit bitmask. returns true if any occur, or false otherwise."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create commands to do mapping.getnested().addall(siblingstoreparent)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for each mapping being added..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"note: (absolutepath || authority == null) -> hierarchical (authority == null && device == null && !absolutepath) -> scheme == null"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this will create the mapping as well"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are siblings that need to be reparented."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(new removecommand(domain, parentmapping, parentmapping.epackagemapping().getmapping_nested(), siblingstoreparent));"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create commands to do parentmapping.getnested().removeall(siblingstoreparent)."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't create a temp file then we have to ignore the option."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"find prefix in current context"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(removecommand.create(mappingdomain, mapping, mapping.epackagemapping().getmapping_outputs(), object)));"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"return false if iteration should continue."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"commandlist.add(removecommand.create(mappingdomain, mapping, mapping.epackagemapping().getmapping_outputs(), object));"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"get the corresponding type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"type matching never matches inputs that are already mapped"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"create the copy from this corresponding type."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove all the mappings from the root."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we have done our preparation. now ask the super to validate."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"copy the type"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"skips '-'"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the tricky part where we set the encoding that we'd like to have decoded as a series of commands to execute after this command has completed."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if ecore, return the enamedelement name"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"domain.getmappingroot().removemapping(newmapping);"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingadapterfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"top-label-separator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tests whether this uri's path segment array is equal to that of the given uri."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the owner and the copy are of the same type, we can proceed with the command, i.e. no override. if not, we will skip this command by returning a do-nothing override."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is an adapter of the correct type, return the item label"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if this is a removecommand for a root input object, direct it to the mappingroot."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"remove all sourceseparator characters"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tests two objects for equality, tolerating nulls; null is considered to be a valid value that is only equal to itself."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"type-mappings"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add a targetseparator in front of every upper case character"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tests two strings for equality, tolerating nulls and optionally ignoring case."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"sourceseparator == label_no_separator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"top-label-forms"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"relative path: merge with base and keep query (note: if the base has no path and this a non-empty relative path, there is an implied root in the resulting path)"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"top-label-case"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"bottom-label-separator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2ecorefactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"bottom-label-forms"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2ecorepackage"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingswitch"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"encrypt the input"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we don't want to include the line comments immediately before an import in the returned range"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"(non-javadoc) @see org.eclipse.emf.mapping.ecore2ecore.ecore2ecoremapping#getinputepackage()"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2ecoremappingroot"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if for for"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2ecoreresourcefactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2ecoremappingrootimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2ecorefactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2ecorepackageimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"an interface should be abstract, but this makes sure of that fact."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2ecoreswitch"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"adds a segment to a stack, skipping empty segments and self references, and interpreting parent references."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2ecoreadapterfactory"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"for createchildcommand, we will find the owner by calling editingdomain.getparent() on the first selected object"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"parse"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"special care must be taken for a root's parent reference: it is either ignored or the symbolic reference itself is pushed"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"unless we're already accumulating root parent references, parent references simply pop the last segment descended"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if extending an interface, its mix-ins must be included, since there is no implementation to handle them."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlinfo"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2xmlpackage"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"missing attribute"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"enamedelementtoxmlinfomapentryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this is the case that starting process rose file by passing cat file name this is a special case. normally, user should pass mdl file instead of cat file file is a cat file modeltree did contain quid info"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"xmlmapimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"invalid element"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2xmlfactoryimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"ecore2xmlpackageimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we either remove the root mapping or we use the iterator that returned the most recent next mapping."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"set the editor's selection based on the current viewer's selection."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"many inherited methods must be overridden to handle this case."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"since we only use this right on an operation, we always want to include the keytype and valuetype, and we never want to qualify the property names."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are any arguments and they are not unbounded wildcards, casts can't be checked."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"we need to be conservative and diagnose a problem only if we are quite sure that type is built-in and hence that the lack of a default value really represents a problem with being unable to convert the literal to a value."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"or we test their relationship via their instance classes, if they have them."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"some xml types declare nebulous object mappings. they actually map to internal types that shouldn't be generated into code."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"this guards the switch."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there is a base xml or ecore type, use one of the two corresponding built-in factories to create a value from the literal string."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"clean up any old project information."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"mappingimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the bound is a wildcard with no constraints."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"see if a genmodel is registered for the package's uri, and if so, try to load it."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if that didn't work, just synthesize one."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"eatm foreign model"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"any features from one package that delegate to features in another."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if there are features delegating across packages, add only those that aren't already being generated."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"a single separator, possibly preceded by some parent reference segments, is redundant"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"an empty path needs to be replaced by a single \".\" if there is no query, to distinguish it from a current document reference"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"collapses non-ending empty segments, parent references, and self references in a non-relative path, returning the same path that would be produced from the base hierarchical uri as part of a resolve."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the path is non-empty and originally ended in an empty segment, a parent reference, or a self reference, add a trailing separator"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"typeconverterimpl"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"returns a string representation of this uri for debugging, explicitly showing each of the components."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the new prefix has segments, it is not the root absolute path, and we need to drop the trailing empty segment and append the tail segments."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"featuremap.add(estructuralfeature, cursor++, o); expectedmodcount = featuremap.getmodcount(); ++entrycursor; ++lastcursor; lastcursor = -1; prepared = 0;"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"add all classes from this package first, to guarantee they get the simple names"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"don't even consider it unless this is hierarchical and has scheme, authority, device and path absoluteness equal to those of the prefix."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the prefix has no segments, then it is the root absolute path, and we know this is an absolute path, too."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"barring a better result, this will be the result."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"the prefix really is a prefix of this. if this has just one more, empty segment, the paths are the same."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"do this here because getextendedmetadata() is used during initialization and the mappings are are populated the first time it's fetched which will miss the packages we add as we initialize the tree."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"rewriter is required for set methods"}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if we can't add it, it must already be in the list so find it and move it to the end."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"both eobject1 and eobject2 are not null. if eobject1 has been compared already..."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"encodes the given string, replacing each ascii character that is not in the set specified by the 128-bit bitmask and each non-ascii character below 0xa0 by an escape sequence of % followed by two hex digits. if % is not in the set but ignoreescaped is true, then % will not be encoded iff it already begins a valid escape sequence."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"tests whether an escape occurs in the given string, starting at index i. an escape sequence is a % followed by two hex digits."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"multiple jet directives."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"there's no reason they aren't equal, so they are."}
{"projectname":"emf-2.4.1","classification":"WITHOUT_CLASSIFICATION","comment":"if the set states are the same, and the values of the feature are the structurally equal, they are equal."}
